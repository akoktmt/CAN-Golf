/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * File Name          : freertos.c
  * Description        : Code for freertos applications
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "FreeRTOS.h"
#include "task.h"
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "CAN_Flag.h"
#include "CAN_OSI.h"
#include "can.h"
#inlcude "uart.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */
/* Definitions for mMainTask */
osThreadId_t mMainTaskHandle;
const osThreadAttr_t mMainTask_attributes = {
  .name = "mMainTask",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};
/* Definitions for mCAN_Recv */
osThreadId_t mCAN_RecvHandle;
const osThreadAttr_t mCAN_Recv_attributes = {
  .name = "mCAN_Recv",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityRealtime,
};
/* Definitions for mCAN_Monitor */
osThreadId_t mCAN_MonitorHandle;
const osThreadAttr_t mCAN_Monitor_attributes = {
  .name = "mCAN_Monitor",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityHigh,
};

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */

/* USER CODE END FunctionPrototypes */

void MainTask(void *argument);
void CAN_Recv(void *argument);
void CAN_Monitor(void *argument);

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of mMainTask */
  mMainTaskHandle = osThreadNew(MainTask, NULL, &mMainTask_attributes);

  /* creation of mCAN_Recv */
  mCAN_RecvHandle = osThreadNew(CAN_Recv, NULL, &mCAN_Recv_attributes);

  /* creation of mCAN_Monitor */
  mCAN_MonitorHandle = osThreadNew(CAN_Monitor, NULL, &mCAN_Monitor_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}

/* USER CODE BEGIN Header_MainTask */
/**
  * @brief  Function implementing the mMainTask thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_MainTask */
void MainTask(void *argument)
{
  /* USER CODE BEGIN MainTask */
   if(HAL_CAN_Start(&hcan)!=HAL_OK)
      {
       Error_Handler();
      }
   CANConfigIDTxtypedef pIDtype;
   pIDtype.MessageType=COMMAND_FRAME;
   pIDtype.SenderID=OBSTALCE8;
   CANBufferHandleStruct Buffer;
   CANBufferHandleStruct_Init(&Buffer);
   FlagFrameHandle Flag;
   FlagsFrameHandle_Init(&Flag);
   uint8_t sendData[100] = {0};
   uint8_t len = 0;
   uint32_t cnt = 0;
  /* Infinite loop */
  for(;;)
  {
    len = sprintf((char*)sendData, "From OBSTALCE8 : %d\r\n",cnt++);
    CAN_Send_Application(&Buffer, &pIDtype, sendData,len+1);
    osDelay(1000);
  }
  /* USER CODE END MainTask */
}

/* USER CODE BEGIN Header_CAN_Recv */
/**
* @brief Function implementing the mCAN_Recv thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CAN_Recv */
void CAN_Recv(void *argument)
{
  /* USER CODE BEGIN CAN_Recv */
  CAN_Config_filtering(CAN_FILTER_FIFO0);
    //CAN_Config_filtering(CAN_FILTER_FIFO1);
    if(HAL_CAN_Start(&hcan)!=HAL_OK)
       {
        Error_Handler();
       }
    CANBufferHandleStruct Buffer;
    CANBufferHandleStruct_Init(&Buffer);
    FlagRecNotification FlagRec;
    FlagFrameHandle Flag;
    FlagsFrameHandle_Init(&Flag);
    uint8_t mess[62]={0};
  /* Infinite loop */
  for(;;)
  {
    CAN_Receive_Application(&Buffer, mess, &Flag, &FlagRec);
    HAL_UART_Transmit(huart, mess, 62, HAL_MAX_DELAY);
    osDelay(100);
  }
  /* USER CODE END CAN_Recv */
}

/* USER CODE BEGIN Header_CAN_Monitor */
/**
* @brief Function implementing the mCAN_Monitor thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CAN_Monitor */
void CAN_Monitor(void *argument)
{
  /* USER CODE BEGIN CAN_Monitor */
  /* Infinite loop */
  for(;;)
  {
    //canmotitor
    osDelay(500);
  }
  /* USER CODE END CAN_Monitor */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

/* USER CODE END Application */

