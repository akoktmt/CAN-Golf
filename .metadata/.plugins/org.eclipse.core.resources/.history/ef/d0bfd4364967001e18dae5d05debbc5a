/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file    can.c
 * @brief   This file provides code for the configuration
 *          of the CAN instances.
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "can.h"
#include "main.h"
/* USER CODE BEGIN 0 */
#include <stdio.h>
#include "CAN_OSI.h"
extern UART_HandleTypeDef huart2;
uint8_t CAN_TX_Buffer[8] = { 0, 0, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA };
uint8_t CAN_RX_Buffer[8] = { 0 };
uint16_t CAN_CNT = 0;
uint32_t CAN_Mailbox;

CAN_TxHeaderTypeDef CAN_Tx_Header;
CAN_RxHeaderTypeDef CAN_Rx_Header;
CANBufferHandleStruct Buffer;
CANConfigIDTxtypedef pIDtype;
CAN_HandlerStruct mCAN;
/* USER CODE END 0 */

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{

  /* USER CODE BEGIN CAN_Init 0 */

  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
  hcan.Init.Prescaler = 4;
  hcan.Init.Mode = CAN_MODE_NORMAL;
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
  hcan.Init.TimeTriggeredMode = DISABLE;
  hcan.Init.AutoBusOff = DISABLE;
  hcan.Init.AutoWakeUp = DISABLE;
  hcan.Init.AutoRetransmission = DISABLE;
  hcan.Init.ReceiveFifoLocked = DISABLE;
  hcan.Init.TransmitFifoPriority = DISABLE;
  if (HAL_CAN_Init(&hcan) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN CAN_Init 2 */
#ifdef Board0
  CAN_Init(&mCAN, &hcan, Node1_TX_ID);
  CAN_Config_Filtering(&mCAN, Node2_TX_ID);
  printf("Set Node_1's ID!\r\n");
#else
  CAN_Init(&mCAN, &hcan, Node2_TX_ID);
  CAN_Config_Filtering(&mCAN, Node1_TX_ID);
  printf("Set Node_2's ID!\r\n");
#endif
  if (HAL_CAN_ActivateNotification(&hcan,
  CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_ERROR)
      != HAL_OK)
  {
    Error_Handler();
  }
  // Start CAN communication
  if (HAL_CAN_Start(&hcan) != HAL_OK)
  {
    Error_Handler();
  }
  // Activate the notification
  /* USER CODE END CAN_Init 2 */

}

void HAL_CAN_MspInit(CAN_HandleTypeDef *canHandle)
{
  GPIO_InitTypeDef GPIO_InitStruct = { 0 };
  if (canHandle->Instance == CAN1)
  {
#ifdef Board0
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();

    __HAL_RCC_GPIOB_CLK_ENABLE();
    /**CAN GPIO Configuration
     PB8     ------> CAN_RX
     PB9     ------> CAN_TX
     */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    __HAL_AFIO_REMAP_CAN1_2();

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 15, 0);
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 15, 0);
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 15, 0);
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 15, 0);

    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);

#else
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();

    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**CAN GPIO Configuration
     PA11     ------> CAN_RX
     PA12     ------> CAN_TX
     */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 15, 0);
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 15, 0);
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 15, 0);
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 15, 0);

    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);

#endif
  }
}
void HAL_CAN_MspDeInit(CAN_HandleTypeDef *canHandle)
{

#ifdef Board0
  if (canHandle->Instance == CAN1)
  {
    /* Peripheral clock disable */
    __HAL_RCC_CAN1_CLK_DISABLE();

    /**CAN GPIO Configuration
     PB8     ------> CAN_RX
     PB9     ------> CAN_TX
     */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8 | GPIO_PIN_9);

    /* CAN1 interrupt Deinit */
      HAL_NVIC_DisableIRQ(CAN1_TX_IRQn);
      HAL_NVIC_DisableIRQ(CAN1_RX1_IRQn);
      HAL_NVIC_DisableIRQ(CAN1_RX0_IRQn);
      HAL_NVIC_DisableIRQ(CAN1_SCE_IRQn);
  }
#else
  if (canHandle->Instance == CAN1)
  {
    /* Peripheral clock disable */
    __HAL_RCC_CAN1_CLK_DISABLE();

    /**CAN GPIO Configuration
     PA11     ------> CAN_RX
     PA12     ------> CAN_TX
     */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11 | GPIO_PIN_12);

    /* CAN1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(CAN1_TX_IRQn);
    HAL_NVIC_DisableIRQ(CAN1_RX1_IRQn);
    HAL_NVIC_DisableIRQ(CAN1_RX0_IRQn);
    HAL_NVIC_DisableIRQ(CAN1_SCE_IRQn);
  }
#endif
}

/* USER CODE BEGIN 1 */
HAL_StatusTypeDef CAN_Init(CAN_HandlerStruct *Canhandler,
    CAN_HandleTypeDef *hcan, uint16_t ID)
{
  Canhandler->hcan = hcan;
  Canhandler->SenderID = ID;
  Canhandler->FilterBank = 0;
  return HAL_OK;
}

HAL_StatusTypeDef CAN_Config_Filtering(CAN_HandlerStruct *Canhandler,
    uint16_t NodeID)
{
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
  canfilterconfig.FilterBank = 0; // which filter bank to use from the assigned ones
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
#ifdef Board0
  canfilterconfig.FilterIdHigh = 0x0000; //Node2_TX_ID << 5;
  canfilterconfig.FilterIdLow = 0x0000;
  canfilterconfig.FilterMaskIdHigh = 0x0000; //Node2_TX_ID << 5;
#else
  canfilterconfig.FilterIdHigh = 0x0000; //Node1_TX_ID << 5;
  canfilterconfig.FilterIdLow = 0x0000;
  canfilterconfig.FilterMaskIdHigh = 0x0000; //Node1_TX_ID << 5;
#endif
  canfilterconfig.FilterMaskIdLow = 0x0000;
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
  if (HAL_CAN_ConfigFilter(&hcan, &canfilterconfig) != HAL_OK)
  {
    Error_Handler();
  }
  return HAL_OK;
}

uint8_t CAN_Send_Test(CAN_HandlerStruct *Canhandler)
{
  CAN_Tx_Header.DLC = 8;  // data length
  CAN_Tx_Header.IDE = CAN_ID_STD;
  CAN_Tx_Header.RTR = CAN_RTR_DATA;

  CAN_CNT++;
  CAN_TX_Buffer[0] = CAN_CNT >> 8;
  CAN_TX_Buffer[1] = CAN_CNT & 0xFF;

#ifdef Board0
  CAN_Tx_Header.StdId = Node1_TX_ID;  // ID
#else
  CAN_Tx_Header.StdId = Node2_TX_ID;  // ID
#endif

  if (HAL_CAN_AddTxMessage(Canhandler->hcan, &CAN_Tx_Header, CAN_TX_Buffer,
      &CAN_Mailbox) != HAL_OK)
  {
    Error_Handler();
  }
}
uint8_t CAN_Send_Bytes(CAN_HandlerStruct *Canhandler, uint8_t *Data,
    uint8_t Length)
{
  if (Length == 0 || Length > 8)
    return 0;
  else
  {
    CAN_Tx_Header.DLC = 8;  // data length
    CAN_Tx_Header.IDE = CAN_ID_STD;
    CAN_Tx_Header.RTR = CAN_RTR_DATA;

#ifdef Board0
    CAN_Tx_Header.StdId = Node1_TX_ID;  // ID
#else
    CAN_Tx_Header.StdId = Node2_TX_ID;  // ID
#endif

    for (uint8_t index = 0; index < 8; index++)
    {
      CAN_TX_Buffer[index] = Data[index];
    }
    HAL_CAN_AddTxMessage(Canhandler->hcan, &CAN_Tx_Header, CAN_TX_Buffer,
        &CAN_Mailbox);
  }
  return Length;
}

HAL_StatusTypeDef CAN_Receive_Bytes(CAN_HandleTypeDef *hcan, uint8_t *RcvData)
{
  HAL_StatusTypeDef Status;
  CAN_RxHeaderTypeDef Can_Header = { 0 };
  uint32_t FreeLevel;
  FreeLevel = HAL_CAN_GetRxFifoFillLevel(hcan, CAN_FILTER_FIFO0);
  while (FreeLevel > 0)
  {
    Status = HAL_CAN_GetRxMessage(hcan, CAN_FILTER_FIFO0, &Can_Header,
        (uint8_t*) RcvData);
    if (Status != HAL_OK)
      return Status;
    for (uint8_t i = 0; i < Can_Header.DLC; ++i)
    {
      printf("%d ", RcvData[i]);
    }
    printf("\r\n");
    FreeLevel = HAL_CAN_GetRxFifoFillLevel(hcan, CAN_FILTER_FIFO0);
  }
  return HAL_OK;
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
  CAN_RxHeaderTypeDef RxHeader;
  uint8_t rcv[8];
  if (HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, rcv) != HAL_OK)
  {
    Error_Handler();
  }
  printf("messsage: %x %x %x %x %x %x %x %x\r\n", rcv[0], rcv[1], rcv[2],
      rcv[3], rcv[4], rcv[5], rcv[6], rcv[7]);
}
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
  CAN_RxHeaderTypeDef RxHeader;
  uint8_t rcv[8];
  if (HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, rcv) != HAL_OK)
  {
    Error_Handler();
  }
  printf("messsage: %x %x %x %x %x %x %x %x\r\n", rcv[0], rcv[1], rcv[2],
      rcv[3], rcv[4], rcv[5], rcv[6], rcv[7]);
}
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
  printf("messsage 1: send\r\n");

}
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
  printf("messsage 2: send\r\n");

}
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
  printf("messsage 3: send\r\n");

}
/* USER CODE END 1 */
