#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <string.h>
#include "canframe.h"
#include "stm32f1xx_hal_can.h"
#include "CRC.h"
extern CAN_HandleTypeDef hcan;
void TxBufferHandleStruct_Init(CANBufferHandleStruct *TxBuffer) {
	TxBuffer->Buffer_Index = 0;
	TxBuffer->SenderID = 0;
	TxBuffer->RecvID = 0;
	TxBuffer->FrameType_Index = FIRST_FRAME;
	memset(TxBuffer->NetworkBuffer, 0, sizeof(TxBuffer->NetworkBuffer));
	memset(TxBuffer->Buffer, 0, sizeof(TxBuffer->Buffer));
}
uint32_t CAN_TXHeaderConfig(CAN_TxHeaderTypeDef *Txheader, uint32_t StdId) {
	Txheader->DLC = 8;
	Txheader->RTR = CAN_RTR_DATA;
	Txheader->IDE = CAN_ID_STD;
	Txheader->StdId = StdId;
	return HAL_OK;
}
uint16_t CAN_Send_Response(uint8_t Opcode, uint8_t StdId, uint32_t Txmailbox,
		CAN_TxHeaderTypeDef Txheader) {
	uint8_t OpcodeData[8] = { Opcode, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55 };
	CAN_TXHeaderConfig(&Txheader, StdId);
	if (HAL_CAN_AddTxMessage(&hcan, &Txheader, OpcodeData, &Txmailbox)
			!= HAL_OK) {
		Error_Handler();
	}
	while (HAL_CAN_IsTxMessagePending(&hcan, Txmailbox))
		;
	return HAL_OK;
}

uint8_t CAN_Network_Packet(CANBufferHandleStruct *TxBuffer, uint8_t *Data,
		uint8_t DataLength) {
	uint8_t PacketDataLength = DataLength + 2;
	uint8_t mCRC = crc_8(Data, PacketDataLength - 1);
	TxBuffer->Buffer_Index = DataLength;
	TxBuffer->NumberOfFrame = 1 + (PacketDataLength / 8);
	memcpy(TxBuffer->NetworkBuffer, Data, DataLength);
	TxBuffer->NetworkBuffer[TxBuffer->Buffer_Index] = PacketDataLength;
	TxBuffer->NetworkBuffer[TxBuffer->Buffer_Index + 1] = mCRC;
	return HAL_OK;
}
uint8_t CAN_DataLink_Separate(CANBufferHandleStruct *TxBuffer, uint8_t *Data,
		uint8_t DataLength) {
	CAN_Network_Packet(TxBuffer, Data, DATA_TEST);
	uint8_t PacketDataLength = DataLength + 2;
	for (int i = 0; i < TxBuffer->NumberOfFrame; i++) {
		for (TxBuffer->Buffer_Index = 0; TxBuffer->Buffer_Index < 8;
				TxBuffer->Buffer_Index++) {
			TxBuffer->Buffer[i][TxBuffer->Buffer_Index] =
					TxBuffer->NetworkBuffer[i * 8 + TxBuffer->Buffer_Index];
			PacketDataLength--;
			if (PacketDataLength == 0) {
				break;
			}
		}
	}

	for (; TxBuffer->Buffer_Index < 7; TxBuffer->Buffer_Index++) {
		TxBuffer->Buffer[TxBuffer->NumberOfFrame - 1][TxBuffer->Buffer_Index + 1] =
		FILL_VALUE;
	}
	TxBuffer->Buffer_Index = 0;
	return HAL_OK;
}

uint8_t CAN_Physical_Send(CANBufferHandleStruct *TxBuffer, uint8_t *Data,
		uint8_t DataLength, CANConfigIDTxtypedef *pIDtype, uint32_t Txmailbox) {
	CAN_DataLink_Separate(TxBuffer, Data, DATA_TEST);
	uint8_t PacketDataLength = DataLength + 2;
	CAN_TxHeaderTypeDef Txheader;
	uint8_t Message_ID = pIDtype->MessageType;
	uint8_t Sender_ID = pIDtype->SenderID;
	uint16_t StdId = 0x00;

	StdId |= Message_ID;
	StdId = (StdId << 4) | Sender_ID;
	StdId = (StdId << 3) | TxBuffer->FrameType_Index;

	Txheader.DLC = 8;
	Txheader.RTR = CAN_RTR_DATA;
	Txheader.IDE = CAN_ID_STD;

	for (int i = 0; i < TxBuffer->NumberOfFrame; i++) {
		if (HAL_CAN_AddTxMessage(&hcan, &Txheader, TxBuffer->Buffer[i],
				&Txmailbox) != HAL_OK) {
			Error_Handler();
		}
		StdId = StdId >> 3;
		StdId =(StdId << 3) | TxBuffer->FrameType_Index++;
	}
}

//uint8_t CAN_Send_Dataframe(CANConfigIDTxtypedef *pIDtype, uint8_t *Data,
//		uint32_t Txmailbox,CANBufferHandleStruct *TxBufferSend) {
//
//	TxBufferSend=(TxBufferHandleStruct*)malloc(sizeof(TxBufferHandleStruct));
//	CAN_TxHeaderTypeDef Txheader;
//	uint16_t ID_NUM = 0x00;
//	uint8_t byte = 0;
//	uint8_t isLastFrame = 0;
//
//	Txheader.DLC = 8;
//	Txheader.RTR = CAN_RTR_DATA;
//	Txheader.IDE = CAN_ID_STD;
//
//	uint8_t Message_ID = pIDtype->MessageType;
//	uint8_t Sender_ID = pIDtype->SenderID;
//
//	uint8_t Frame_type = TxBufferSend->Buffer_Index&0x07;
//
//	ID_NUM |= Message_ID;
//	ID_NUM = (ID_NUM << 4) | Sender_ID;
//
//	for (int i = 0; i < sizeof(Data); i++) {
//		if (sizeof(TxBufferSend[Sender_ID].Buffer1)!=8)
//		{
//			byte = Data[i];
//			TxBufferSend[Sender_ID].Buffer1[TxBufferSend[Sender_ID].Buffer_Index] = byte;
//			TxBufferSend[Sender_ID].Buffer_Index++;
//		if (TxBufferSend[Sender_ID].TxBuffer_Index == CAN_MAX_DATA_LENGTH || i == sizeof(Data) - 1) {
//			while (TxBufferSend[Sender_ID].TxBuffer_Index < CAN_MAX_DATA_LENGTH) {
//				TxBufferSend[Sender_ID].Buffer1[TxBufferSend[Sender_ID].TxBuffer_Index] = FILL_VALUE;
//				TxBufferSend[Sender_ID].TxBuffer_Index++;
//			}
//			if (i == sizeof(Data) - 1) {
//				isLastFrame = 1;
//				ID_NUM = (ID_NUM << 3) | END_FRAME;
//			}
//			if (isLastFrame == 0) {
//				ID_NUM = (ID_NUM << 3) | Frame_type;
//			}
//			Txheader.StdId = ID_NUM;
//			if (HAL_CAN_AddTxMessage(&hcan, &Txheader, TxBufferSend[Sender_ID].Buffer1, &Txmailbox)
//					!= HAL_OK) {
//				Error_Handler();
//			}
//			while (HAL_CAN_IsTxMessagePending(&hcan, Txmailbox))
//			TxBufferSend[Sender_ID].TxBuffer_Index= 0;
//			ID_NUM = ID_NUM >> 3;
//			Frame_type++;
//		}
//	}
//	}
//	free(TxBufferSend);
//	return HAL_OK;
//}
//uint8_t CAN_Receive_Dataframe(CAN_HandlerStruct* canhandler,CANConfigIDRxtypedef* pIDtype,uint8_t *ReceiveData, uint32_t *ReceiveLength)
//{
//	CAN_RxHeaderTypeDef RxHeader;
//	uint8_t frame[CAN_MAX_DATA_LENGTH] = {0};
//	uint8_t isLastFrame = 0;
//	uint8_t SenderId=0;
//	CANConfigIDRxtypedef *Rec=(CANConfigIDRxtypedef*)malloc(CAN_MAX_DATA_LENGTH);
//	for (int i=0; i< 13; i++)
//	{
//		Rec[i].Index=0;
//		Rec[i].ExpectedLength=0;
//		Rec[i].frameIndex=0;
//	}
//		while(!isLastFrame){
//			while (HAL_CAN_GetRxFifoFillLevel(canhandler->hcan, CAN_RX_FIFO0) == 0);
//			if (HAL_CAN_GetRxMessage(canhandler->hcan, CAN_RX_FIFO0, &RxHeader, frame) != HAL_OK)
//			{
//				Error_Handler();
//			}
//			SenderId=frame[0];
//			uint16_t ID_NUM = RxHeader.StdId;
//			pIDtype -> Frametype = ID_NUM & 0x07;
//			pIDtype -> TargetNode = (ID_NUM >> 3) & 0x0F;
//			pIDtype ->  MessageType= (ID_NUM >> 7) & 0x0F;
//			switch (pIDtype->Frametype) {
//			  case FIRST_FRAME:
//			    Rec[SenderId].ExpectedLength = frame[1];
//			    Rec[SenderId].frameIndex = 2;
//			    break;
//			  case END_FRAME:
//			    Rec[SenderId].frameIndex = 1;
//			    isLastFrame = 1;
//			    break;
//			  default:
//			    Rec[SenderId].frameIndex = 1;
//			    break;
//			}
//			for(;Rec[SenderId].frameIndex<CAN_MAX_DATA_LENGTH;Rec[SenderId].frameIndex++){
//				Rec[SenderId].ReceivedBuffer[Rec[SenderId].Index]=frame[Rec[SenderId].frameIndex];
//				Rec[SenderId].Index++;
//			}
//		}
//	*ReceiveLength=Rec[SenderId].ExpectedLength;
//	memcpy(ReceiveData,Rec[SenderId].ReceivedBuffer,Rec[SenderId].ExpectedLength);
//	memset(Rec[SenderId].ReceivedBuffer,0,Rec[SenderId].ExpectedLength);
//	Rec[SenderId].Index=0;
//	free(Rec);
//	return HAL_OK;
//}

//uint32_t CAN_Config_filtering(CAN_HandlerStruct *Can, uint16_t NodeID)
//{
//	CAN_FilterTypeDef Can_filter_init;
//	Can_filter_init.FilterActivation=ENABLE;
//	Can_filter_init.FilterBank=Can->fillterbank++;
//	if(Can->fillterbank > 14){
//		Error_Handler();
//	}
//	Can_filter_init.FilterFIFOAssignment=CAN_RX_FIFO0;
//	Can_filter_init.FilterIdHigh=NodeID<<8;
//	Can_filter_init.FilterIdLow= 0x0000;
//	Can_filter_init.FilterMaskIdHigh= 0x0F00;
//	Can_filter_init.FilterMaskIdLow= 0x0000;
//	Can_filter_init.FilterMode=CAN_FILTERMODE_IDMASK;
//	Can_filter_init.FilterScale=CAN_FILTERSCALE_32BIT;
//	if(HAL_CAN_ConfigFilter(Can->hcan,&Can_filter_init)!=HAL_OK)
//	{
//		Error_Handler();
//	}
//	return HAL_OK;
//}
