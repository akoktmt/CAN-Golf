
CAN_Golf_OS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006448  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08006558  08006558  00016558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006680  08006680  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08006680  08006680  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006680  08006680  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006680  08006680  00016680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006684  08006684  00016684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08006688  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bc0  20000060  080066e8  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c20  080066e8  00021c20  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018a1f  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038e2  00000000  00000000  00038aeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001548  00000000  00000000  0003c3d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001089  00000000  00000000  0003d918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019a4b  00000000  00000000  0003e9a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018257  00000000  00000000  000583ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097054  00000000  00000000  00070643  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005e08  00000000  00000000  00107698  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  0010d4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08006540 	.word	0x08006540

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08006540 	.word	0x08006540

08000150 <CANBufferHandleStruct_Init>:
 *      Author: win 10
 */
#include <CAN_OSI.h>
#include <string.h>
#include "CAN_Flag.h"
void CANBufferHandleStruct_Init(CANBufferHandleStruct *Buffer) {
 8000150:	b580      	push	{r7, lr}
 8000152:	b096      	sub	sp, #88	; 0x58
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
	NodeBufferHandle defaultNodeHandle = {0};
 8000158:	f107 030c 	add.w	r3, r7, #12
 800015c:	2247      	movs	r2, #71	; 0x47
 800015e:	2100      	movs	r1, #0
 8000160:	4618      	mov	r0, r3
 8000162:	f005 fe07 	bl	8005d74 <memset>
	Buffer->Buffer_Index = 0;
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	2200      	movs	r2, #0
 800016a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	Buffer->SenderID = 0;
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	2200      	movs	r2, #0
 8000172:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	Buffer->RecvID = 0;
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	2200      	movs	r2, #0
 800017a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	Buffer->FrameType_Index = SET_UP_FRAME;
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	2200      	movs	r2, #0
 8000182:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	Buffer->PacketDataLength = 0;
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	2200      	movs	r2, #0
 800018a:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	Buffer->CRCValue = 0;
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	2200      	movs	r2, #0
 8000192:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	Buffer->NumberOfFrame=0;
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	2200      	movs	r2, #0
 800019a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	memset(Buffer->NetworkBuffer, 0, sizeof(Buffer->NetworkBuffer));
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	2240      	movs	r2, #64	; 0x40
 80001a2:	2100      	movs	r1, #0
 80001a4:	4618      	mov	r0, r3
 80001a6:	f005 fde5 	bl	8005d74 <memset>
	memset(Buffer->Buffer, 0x55, sizeof(Buffer->Buffer));
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	3348      	adds	r3, #72	; 0x48
 80001ae:	2240      	movs	r2, #64	; 0x40
 80001b0:	2155      	movs	r1, #85	; 0x55
 80001b2:	4618      	mov	r0, r3
 80001b4:	f005 fdde 	bl	8005d74 <memset>
	memset(Buffer->StoreData, 0, sizeof(Buffer->StoreData));
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	3388      	adds	r3, #136	; 0x88
 80001bc:	2240      	movs	r2, #64	; 0x40
 80001be:	2100      	movs	r1, #0
 80001c0:	4618      	mov	r0, r3
 80001c2:	f005 fdd7 	bl	8005d74 <memset>
	for (int i = 0; i < 16; i++) {
 80001c6:	2300      	movs	r3, #0
 80001c8:	657b      	str	r3, [r7, #84]	; 0x54
 80001ca:	e012      	b.n	80001f2 <CANBufferHandleStruct_Init+0xa2>
		Buffer->NodeHandle[i] = defaultNodeHandle;
 80001cc:	6879      	ldr	r1, [r7, #4]
 80001ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80001d0:	4613      	mov	r3, r2
 80001d2:	00db      	lsls	r3, r3, #3
 80001d4:	4413      	add	r3, r2
 80001d6:	00db      	lsls	r3, r3, #3
 80001d8:	1a9b      	subs	r3, r3, r2
 80001da:	440b      	add	r3, r1
 80001dc:	33c8      	adds	r3, #200	; 0xc8
 80001de:	3302      	adds	r3, #2
 80001e0:	f107 010c 	add.w	r1, r7, #12
 80001e4:	2247      	movs	r2, #71	; 0x47
 80001e6:	4618      	mov	r0, r3
 80001e8:	f005 fe08 	bl	8005dfc <memcpy>
	for (int i = 0; i < 16; i++) {
 80001ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80001ee:	3301      	adds	r3, #1
 80001f0:	657b      	str	r3, [r7, #84]	; 0x54
 80001f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80001f4:	2b0f      	cmp	r3, #15
 80001f6:	dde9      	ble.n	80001cc <CANBufferHandleStruct_Init+0x7c>
	}
}
 80001f8:	bf00      	nop
 80001fa:	bf00      	nop
 80001fc:	3758      	adds	r7, #88	; 0x58
 80001fe:	46bd      	mov	sp, r7
 8000200:	bd80      	pop	{r7, pc}

08000202 <FlagsFrameHandle_Init>:
void FlagsFrameHandle_Init(FlagFrameHandle *FlagInit) {
 8000202:	b4b0      	push	{r4, r5, r7}
 8000204:	b089      	sub	sp, #36	; 0x24
 8000206:	af00      	add	r7, sp, #0
 8000208:	6078      	str	r0, [r7, #4]
	FlagIdHandle DefaultFlagID= {0};
 800020a:	f107 0308 	add.w	r3, r7, #8
 800020e:	2200      	movs	r2, #0
 8000210:	601a      	str	r2, [r3, #0]
 8000212:	605a      	str	r2, [r3, #4]
 8000214:	609a      	str	r2, [r3, #8]
 8000216:	60da      	str	r2, [r3, #12]
 8000218:	741a      	strb	r2, [r3, #16]
	FlagInit->FrameBits.Flag_Frame_0 = 0;
 800021a:	687a      	ldr	r2, [r7, #4]
 800021c:	f892 3112 	ldrb.w	r3, [r2, #274]	; 0x112
 8000220:	f36f 0300 	bfc	r3, #0, #1
 8000224:	f882 3112 	strb.w	r3, [r2, #274]	; 0x112
	FlagInit->FrameBits.Flag_Frame_1 = 0;
 8000228:	687a      	ldr	r2, [r7, #4]
 800022a:	f892 3112 	ldrb.w	r3, [r2, #274]	; 0x112
 800022e:	f36f 0341 	bfc	r3, #1, #1
 8000232:	f882 3112 	strb.w	r3, [r2, #274]	; 0x112
	FlagInit->FrameBits.Flag_Frame_2 = 0;
 8000236:	687a      	ldr	r2, [r7, #4]
 8000238:	f892 3112 	ldrb.w	r3, [r2, #274]	; 0x112
 800023c:	f36f 0382 	bfc	r3, #2, #1
 8000240:	f882 3112 	strb.w	r3, [r2, #274]	; 0x112
	FlagInit->FrameBits.Flag_Frame_3 = 0;
 8000244:	687a      	ldr	r2, [r7, #4]
 8000246:	f892 3112 	ldrb.w	r3, [r2, #274]	; 0x112
 800024a:	f36f 03c3 	bfc	r3, #3, #1
 800024e:	f882 3112 	strb.w	r3, [r2, #274]	; 0x112
	FlagInit->FrameBits.Flag_Frame_4 = 0;
 8000252:	687a      	ldr	r2, [r7, #4]
 8000254:	f892 3112 	ldrb.w	r3, [r2, #274]	; 0x112
 8000258:	f36f 1304 	bfc	r3, #4, #1
 800025c:	f882 3112 	strb.w	r3, [r2, #274]	; 0x112
	FlagInit->FrameBits.Flag_Frame_5 = 0;
 8000260:	687a      	ldr	r2, [r7, #4]
 8000262:	f892 3112 	ldrb.w	r3, [r2, #274]	; 0x112
 8000266:	f36f 1345 	bfc	r3, #5, #1
 800026a:	f882 3112 	strb.w	r3, [r2, #274]	; 0x112
	FlagInit->FrameBits.Flag_Frame_6 = 0;
 800026e:	687a      	ldr	r2, [r7, #4]
 8000270:	f892 3112 	ldrb.w	r3, [r2, #274]	; 0x112
 8000274:	f36f 1386 	bfc	r3, #6, #1
 8000278:	f882 3112 	strb.w	r3, [r2, #274]	; 0x112
	FlagInit->FrameBits.Flag_Frame_7 = 0;
 800027c:	687a      	ldr	r2, [r7, #4]
 800027e:	f892 3112 	ldrb.w	r3, [r2, #274]	; 0x112
 8000282:	f36f 13c7 	bfc	r3, #7, #1
 8000286:	f882 3112 	strb.w	r3, [r2, #274]	; 0x112
	for(int i=0; i<16;i++)
 800028a:	2300      	movs	r3, #0
 800028c:	61fb      	str	r3, [r7, #28]
 800028e:	e012      	b.n	80002b6 <FlagsFrameHandle_Init+0xb4>
	{
		FlagInit->FlagID[i]=DefaultFlagID;
 8000290:	6879      	ldr	r1, [r7, #4]
 8000292:	69fa      	ldr	r2, [r7, #28]
 8000294:	4613      	mov	r3, r2
 8000296:	011b      	lsls	r3, r3, #4
 8000298:	4413      	add	r3, r2
 800029a:	440b      	add	r3, r1
 800029c:	461d      	mov	r5, r3
 800029e:	f107 0408 	add.w	r4, r7, #8
 80002a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80002a4:	6028      	str	r0, [r5, #0]
 80002a6:	6069      	str	r1, [r5, #4]
 80002a8:	60aa      	str	r2, [r5, #8]
 80002aa:	60eb      	str	r3, [r5, #12]
 80002ac:	7823      	ldrb	r3, [r4, #0]
 80002ae:	742b      	strb	r3, [r5, #16]
	for(int i=0; i<16;i++)
 80002b0:	69fb      	ldr	r3, [r7, #28]
 80002b2:	3301      	adds	r3, #1
 80002b4:	61fb      	str	r3, [r7, #28]
 80002b6:	69fb      	ldr	r3, [r7, #28]
 80002b8:	2b0f      	cmp	r3, #15
 80002ba:	dde9      	ble.n	8000290 <FlagsFrameHandle_Init+0x8e>
	}
}
 80002bc:	bf00      	nop
 80002be:	bf00      	nop
 80002c0:	3724      	adds	r7, #36	; 0x24
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bcb0      	pop	{r4, r5, r7}
 80002c6:	4770      	bx	lr

080002c8 <CAN_Send_Application>:
				FlagHandle->FlagID[ID].FlagFrameFull[FrameType];
	}
}

uint8_t CAN_Send_Application(CANBufferHandleStruct *AppBuffer,
		CANConfigIDTxtypedef *pStID, uint8_t *Data, uint8_t DataLength) {
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b084      	sub	sp, #16
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	60f8      	str	r0, [r7, #12]
 80002d0:	60b9      	str	r1, [r7, #8]
 80002d2:	607a      	str	r2, [r7, #4]
 80002d4:	70fb      	strb	r3, [r7, #3]
	return CAN_Send_Network_Packet(AppBuffer, Data, DataLength, pStID);
 80002d6:	78fa      	ldrb	r2, [r7, #3]
 80002d8:	68bb      	ldr	r3, [r7, #8]
 80002da:	6879      	ldr	r1, [r7, #4]
 80002dc:	68f8      	ldr	r0, [r7, #12]
 80002de:	f000 f805 	bl	80002ec <CAN_Send_Network_Packet>
 80002e2:	4603      	mov	r3, r0
}
 80002e4:	4618      	mov	r0, r3
 80002e6:	3710      	adds	r7, #16
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}

080002ec <CAN_Send_Network_Packet>:

uint8_t CAN_Send_Network_Packet(CANBufferHandleStruct *TxBuffer, uint8_t *Data,
		uint8_t DataLength, CANConfigIDTxtypedef *pStID) {
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b084      	sub	sp, #16
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	60f8      	str	r0, [r7, #12]
 80002f4:	60b9      	str	r1, [r7, #8]
 80002f6:	603b      	str	r3, [r7, #0]
 80002f8:	4613      	mov	r3, r2
 80002fa:	71fb      	strb	r3, [r7, #7]
	TxBuffer->PacketDataLength = DataLength + 2;
 80002fc:	79fb      	ldrb	r3, [r7, #7]
 80002fe:	3302      	adds	r3, #2
 8000300:	b2db      	uxtb	r3, r3
 8000302:	b25a      	sxtb	r2, r3
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	TxBuffer->CRCValue = crc_8(Data, DataLength);
 800030a:	79fb      	ldrb	r3, [r7, #7]
 800030c:	4619      	mov	r1, r3
 800030e:	68b8      	ldr	r0, [r7, #8]
 8000310:	f000 f9c8 	bl	80006a4 <crc_8>
 8000314:	4603      	mov	r3, r0
 8000316:	461a      	mov	r2, r3
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	TxBuffer->Buffer_Index = DataLength;
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	79fa      	ldrb	r2, [r7, #7]
 8000322:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	if (TxBuffer->PacketDataLength % 8 == 0) {
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 800032c:	b2db      	uxtb	r3, r3
 800032e:	f003 0307 	and.w	r3, r3, #7
 8000332:	b2db      	uxtb	r3, r3
 8000334:	2b00      	cmp	r3, #0
 8000336:	d10c      	bne.n	8000352 <CAN_Send_Network_Packet+0x66>
		TxBuffer->NumberOfFrame = (TxBuffer->PacketDataLength / 8);
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 800033e:	2b00      	cmp	r3, #0
 8000340:	da00      	bge.n	8000344 <CAN_Send_Network_Packet+0x58>
 8000342:	3307      	adds	r3, #7
 8000344:	10db      	asrs	r3, r3, #3
 8000346:	b25b      	sxtb	r3, r3
 8000348:	b2da      	uxtb	r2, r3
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000350:	e00d      	b.n	800036e <CAN_Send_Network_Packet+0x82>
	} else {
		TxBuffer->NumberOfFrame = (TxBuffer->PacketDataLength / 8) + 1;
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 8000358:	2b00      	cmp	r3, #0
 800035a:	da00      	bge.n	800035e <CAN_Send_Network_Packet+0x72>
 800035c:	3307      	adds	r3, #7
 800035e:	10db      	asrs	r3, r3, #3
 8000360:	b25b      	sxtb	r3, r3
 8000362:	b2db      	uxtb	r3, r3
 8000364:	3301      	adds	r3, #1
 8000366:	b2da      	uxtb	r2, r3
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	}
	memcpy(TxBuffer->NetworkBuffer, Data, DataLength);
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	79fa      	ldrb	r2, [r7, #7]
 8000372:	68b9      	ldr	r1, [r7, #8]
 8000374:	4618      	mov	r0, r3
 8000376:	f005 fd41 	bl	8005dfc <memcpy>
	TxBuffer->NetworkBuffer[TxBuffer->Buffer_Index] =
			TxBuffer->PacketDataLength;
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	f993 10c8 	ldrsb.w	r1, [r3, #200]	; 0xc8
	TxBuffer->NetworkBuffer[TxBuffer->Buffer_Index] =
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000386:	461a      	mov	r2, r3
			TxBuffer->PacketDataLength;
 8000388:	b2c9      	uxtb	r1, r1
	TxBuffer->NetworkBuffer[TxBuffer->Buffer_Index] =
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	5499      	strb	r1, [r3, r2]
	TxBuffer->NetworkBuffer[TxBuffer->Buffer_Index + 1] = TxBuffer->CRCValue;
 800038e:	68fb      	ldr	r3, [r7, #12]
 8000390:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000394:	3301      	adds	r3, #1
 8000396:	68fa      	ldr	r2, [r7, #12]
 8000398:	f892 10c9 	ldrb.w	r1, [r2, #201]	; 0xc9
 800039c:	68fa      	ldr	r2, [r7, #12]
 800039e:	54d1      	strb	r1, [r2, r3]
	TxBuffer->Buffer_Index = 0;
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	2200      	movs	r2, #0
 80003a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	return CAN_Send_DataLink_Separate(TxBuffer, Data, pStID);
 80003a8:	683a      	ldr	r2, [r7, #0]
 80003aa:	68b9      	ldr	r1, [r7, #8]
 80003ac:	68f8      	ldr	r0, [r7, #12]
 80003ae:	f000 f805 	bl	80003bc <CAN_Send_DataLink_Separate>
 80003b2:	4603      	mov	r3, r0
}
 80003b4:	4618      	mov	r0, r3
 80003b6:	3710      	adds	r7, #16
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}

080003bc <CAN_Send_DataLink_Separate>:
uint8_t CAN_Send_DataLink_Separate(CANBufferHandleStruct *TxBuffer,
		uint8_t *Data, CANConfigIDTxtypedef *pStID) {
 80003bc:	b580      	push	{r7, lr}
 80003be:	b088      	sub	sp, #32
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	60f8      	str	r0, [r7, #12]
 80003c4:	60b9      	str	r1, [r7, #8]
 80003c6:	607a      	str	r2, [r7, #4]
	uint8_t PacketLength = TxBuffer->PacketDataLength;
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 80003ce:	77fb      	strb	r3, [r7, #31]
	uint8_t NumberOfFrame = TxBuffer->NumberOfFrame;
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80003d6:	75fb      	strb	r3, [r7, #23]
	TxBuffer->Buffer[NumberOfFrame - 1][6] = PacketLength;
 80003d8:	7dfb      	ldrb	r3, [r7, #23]
 80003da:	3b01      	subs	r3, #1
 80003dc:	68fa      	ldr	r2, [r7, #12]
 80003de:	00db      	lsls	r3, r3, #3
 80003e0:	4413      	add	r3, r2
 80003e2:	7ffa      	ldrb	r2, [r7, #31]
 80003e4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	TxBuffer->Buffer[NumberOfFrame - 1][7] = TxBuffer->CRCValue;
 80003e8:	7dfb      	ldrb	r3, [r7, #23]
 80003ea:	3b01      	subs	r3, #1
 80003ec:	68fa      	ldr	r2, [r7, #12]
 80003ee:	f892 10c9 	ldrb.w	r1, [r2, #201]	; 0xc9
 80003f2:	68fa      	ldr	r2, [r7, #12]
 80003f4:	00db      	lsls	r3, r3, #3
 80003f6:	4413      	add	r3, r2
 80003f8:	460a      	mov	r2, r1
 80003fa:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	for (int i = 0; i < NumberOfFrame; i++) {
 80003fe:	2300      	movs	r3, #0
 8000400:	61bb      	str	r3, [r7, #24]
 8000402:	e033      	b.n	800046c <CAN_Send_DataLink_Separate+0xb0>
		for (TxBuffer->Buffer_Index = 0; TxBuffer->Buffer_Index < 8;
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	2200      	movs	r2, #0
 8000408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800040c:	e021      	b.n	8000452 <CAN_Send_DataLink_Separate+0x96>
				TxBuffer->Buffer_Index++) {
			TxBuffer->Buffer[i][TxBuffer->Buffer_Index] =
					TxBuffer->NetworkBuffer[i * 8 + TxBuffer->Buffer_Index];
 800040e:	69bb      	ldr	r3, [r7, #24]
 8000410:	00db      	lsls	r3, r3, #3
 8000412:	68fa      	ldr	r2, [r7, #12]
 8000414:	f892 2041 	ldrb.w	r2, [r2, #65]	; 0x41
 8000418:	4413      	add	r3, r2
			TxBuffer->Buffer[i][TxBuffer->Buffer_Index] =
 800041a:	68fa      	ldr	r2, [r7, #12]
 800041c:	f892 2041 	ldrb.w	r2, [r2, #65]	; 0x41
 8000420:	4610      	mov	r0, r2
					TxBuffer->NetworkBuffer[i * 8 + TxBuffer->Buffer_Index];
 8000422:	68fa      	ldr	r2, [r7, #12]
 8000424:	5cd1      	ldrb	r1, [r2, r3]
			TxBuffer->Buffer[i][TxBuffer->Buffer_Index] =
 8000426:	68fa      	ldr	r2, [r7, #12]
 8000428:	69bb      	ldr	r3, [r7, #24]
 800042a:	00db      	lsls	r3, r3, #3
 800042c:	4413      	add	r3, r2
 800042e:	4403      	add	r3, r0
 8000430:	3348      	adds	r3, #72	; 0x48
 8000432:	460a      	mov	r2, r1
 8000434:	701a      	strb	r2, [r3, #0]
			PacketLength--;
 8000436:	7ffb      	ldrb	r3, [r7, #31]
 8000438:	3b01      	subs	r3, #1
 800043a:	77fb      	strb	r3, [r7, #31]
			if (PacketLength == 2) {
 800043c:	7ffb      	ldrb	r3, [r7, #31]
 800043e:	2b02      	cmp	r3, #2
 8000440:	d00d      	beq.n	800045e <CAN_Send_DataLink_Separate+0xa2>
				TxBuffer->Buffer_Index++) {
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000448:	3301      	adds	r3, #1
 800044a:	b2da      	uxtb	r2, r3
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		for (TxBuffer->Buffer_Index = 0; TxBuffer->Buffer_Index < 8;
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000458:	2b07      	cmp	r3, #7
 800045a:	d9d8      	bls.n	800040e <CAN_Send_DataLink_Separate+0x52>
 800045c:	e000      	b.n	8000460 <CAN_Send_DataLink_Separate+0xa4>
				break;
 800045e:	bf00      	nop
			}
		}
		if (PacketLength == 2) {
 8000460:	7ffb      	ldrb	r3, [r7, #31]
 8000462:	2b02      	cmp	r3, #2
 8000464:	d007      	beq.n	8000476 <CAN_Send_DataLink_Separate+0xba>
	for (int i = 0; i < NumberOfFrame; i++) {
 8000466:	69bb      	ldr	r3, [r7, #24]
 8000468:	3301      	adds	r3, #1
 800046a:	61bb      	str	r3, [r7, #24]
 800046c:	7dfb      	ldrb	r3, [r7, #23]
 800046e:	69ba      	ldr	r2, [r7, #24]
 8000470:	429a      	cmp	r2, r3
 8000472:	dbc7      	blt.n	8000404 <CAN_Send_DataLink_Separate+0x48>
 8000474:	e000      	b.n	8000478 <CAN_Send_DataLink_Separate+0xbc>
			break;
 8000476:	bf00      	nop
		}
	}
	TxBuffer->Buffer_Index = 0;
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	2200      	movs	r2, #0
 800047c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	return CAN_Send_Physical_Send(TxBuffer, Data, pStID);
 8000480:	687a      	ldr	r2, [r7, #4]
 8000482:	68b9      	ldr	r1, [r7, #8]
 8000484:	68f8      	ldr	r0, [r7, #12]
 8000486:	f000 f805 	bl	8000494 <CAN_Send_Physical_Send>
 800048a:	4603      	mov	r3, r0
}
 800048c:	4618      	mov	r0, r3
 800048e:	3720      	adds	r7, #32
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}

08000494 <CAN_Send_Physical_Send>:
uint8_t CAN_Send_Physical_Send(CANBufferHandleStruct *TxBuffer, uint8_t *Data,
		CANConfigIDTxtypedef *pIDtype) {
 8000494:	b580      	push	{r7, lr}
 8000496:	b08e      	sub	sp, #56	; 0x38
 8000498:	af00      	add	r7, sp, #0
 800049a:	60f8      	str	r0, [r7, #12]
 800049c:	60b9      	str	r1, [r7, #8]
 800049e:	607a      	str	r2, [r7, #4]

	uint32_t Txmailbox;
	CAN_TxHeaderTypeDef Txheader;

	uint8_t Message_ID = pIDtype->MessageType;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	881b      	ldrh	r3, [r3, #0]
 80004a4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint8_t Sender_ID = pIDtype->SenderID;
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	885b      	ldrh	r3, [r3, #2]
 80004ac:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	uint8_t FrameType = TxBuffer->FrameType_Index;
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80004b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t NumberOfFrame = TxBuffer->NumberOfFrame;
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80004c0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	uint16_t StdId = 0x00;
 80004c4:	2300      	movs	r3, #0
 80004c6:	86bb      	strh	r3, [r7, #52]	; 0x34

	StdId |= Message_ID;
 80004c8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80004cc:	b29a      	uxth	r2, r3
 80004ce:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80004d0:	4313      	orrs	r3, r2
 80004d2:	86bb      	strh	r3, [r7, #52]	; 0x34
	StdId = (StdId << 4) | Sender_ID;
 80004d4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80004d6:	011b      	lsls	r3, r3, #4
 80004d8:	b21a      	sxth	r2, r3
 80004da:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80004de:	b21b      	sxth	r3, r3
 80004e0:	4313      	orrs	r3, r2
 80004e2:	b21b      	sxth	r3, r3
 80004e4:	86bb      	strh	r3, [r7, #52]	; 0x34
	StdId = (StdId << 3) | TxBuffer->FrameType_Index;
 80004e6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80004e8:	00db      	lsls	r3, r3, #3
 80004ea:	b21a      	sxth	r2, r3
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80004f2:	b21b      	sxth	r3, r3
 80004f4:	4313      	orrs	r3, r2
 80004f6:	b21b      	sxth	r3, r3
 80004f8:	86bb      	strh	r3, [r7, #52]	; 0x34

	Txheader.DLC = 8;
 80004fa:	2308      	movs	r3, #8
 80004fc:	627b      	str	r3, [r7, #36]	; 0x24
	Txheader.RTR = CAN_RTR_DATA;
 80004fe:	2300      	movs	r3, #0
 8000500:	623b      	str	r3, [r7, #32]
	Txheader.IDE = CAN_ID_STD;
 8000502:	2300      	movs	r3, #0
 8000504:	61fb      	str	r3, [r7, #28]

	CAN_Store_Data(TxBuffer, pIDtype);
 8000506:	6879      	ldr	r1, [r7, #4]
 8000508:	68f8      	ldr	r0, [r7, #12]
 800050a:	f000 f847 	bl	800059c <CAN_Store_Data>

	for (int8_t i = NumberOfFrame - 1; i >= 0; i--) {
 800050e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000512:	3b01      	subs	r3, #1
 8000514:	b2db      	uxtb	r3, r3
 8000516:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800051a:	e034      	b.n	8000586 <CAN_Send_Physical_Send+0xf2>
		Txheader.StdId = StdId;
 800051c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800051e:	617b      	str	r3, [r7, #20]
		if (HAL_CAN_AddTxMessage(&hcan, &Txheader, TxBuffer->Buffer[i],
 8000520:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000524:	3309      	adds	r3, #9
 8000526:	00db      	lsls	r3, r3, #3
 8000528:	68fa      	ldr	r2, [r7, #12]
 800052a:	441a      	add	r2, r3
 800052c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000530:	f107 0114 	add.w	r1, r7, #20
 8000534:	4818      	ldr	r0, [pc, #96]	; (8000598 <CAN_Send_Physical_Send+0x104>)
 8000536:	f000 ffa7 	bl	8001488 <HAL_CAN_AddTxMessage>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <CAN_Send_Physical_Send+0xb0>
				&Txmailbox) != HAL_OK) {
			Error_Handler();
 8000540:	f000 fb2c 	bl	8000b9c <Error_Handler>
		}
		while (HAL_CAN_IsTxMessagePending(&hcan, Txmailbox))
 8000544:	bf00      	nop
 8000546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000548:	4619      	mov	r1, r3
 800054a:	4813      	ldr	r0, [pc, #76]	; (8000598 <CAN_Send_Physical_Send+0x104>)
 800054c:	f001 f86b 	bl	8001626 <HAL_CAN_IsTxMessagePending>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d1f7      	bne.n	8000546 <CAN_Send_Physical_Send+0xb2>
			;

		StdId = StdId >> 3;
 8000556:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000558:	08db      	lsrs	r3, r3, #3
 800055a:	86bb      	strh	r3, [r7, #52]	; 0x34
		FrameType++;
 800055c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000560:	3301      	adds	r3, #1
 8000562:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		StdId = (StdId << 3) | FrameType;
 8000566:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000568:	00db      	lsls	r3, r3, #3
 800056a:	b21a      	sxth	r2, r3
 800056c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000570:	b21b      	sxth	r3, r3
 8000572:	4313      	orrs	r3, r2
 8000574:	b21b      	sxth	r3, r3
 8000576:	86bb      	strh	r3, [r7, #52]	; 0x34
	for (int8_t i = NumberOfFrame - 1; i >= 0; i--) {
 8000578:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800057c:	b2db      	uxtb	r3, r3
 800057e:	3b01      	subs	r3, #1
 8000580:	b2db      	uxtb	r3, r3
 8000582:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8000586:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800058a:	2b00      	cmp	r3, #0
 800058c:	dac6      	bge.n	800051c <CAN_Send_Physical_Send+0x88>

	}
	return HAL_OK;
 800058e:	2300      	movs	r3, #0
}
 8000590:	4618      	mov	r0, r3
 8000592:	3738      	adds	r7, #56	; 0x38
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	2000007c 	.word	0x2000007c

0800059c <CAN_Store_Data>:

uint8_t CAN_Store_Data(CANBufferHandleStruct *Store, CANConfigIDTxtypedef *ID) {
 800059c:	b480      	push	{r7}
 800059e:	b087      	sub	sp, #28
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]
	uint8_t FrameType = Store->FrameType_Index;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80005ac:	75fb      	strb	r3, [r7, #23]
	uint8_t BufferIndex = Store->Buffer_Index;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80005b4:	75bb      	strb	r3, [r7, #22]
	uint8_t NumberFrame = Store->NumberOfFrame;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80005bc:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < NumberFrame; i++) {
 80005be:	2300      	movs	r3, #0
 80005c0:	613b      	str	r3, [r7, #16]
 80005c2:	e03b      	b.n	800063c <CAN_Store_Data+0xa0>
		Store->StoreData[i][BufferIndex] = ID->SenderID;
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	885a      	ldrh	r2, [r3, #2]
 80005c8:	7dbb      	ldrb	r3, [r7, #22]
 80005ca:	b2d0      	uxtb	r0, r2
 80005cc:	6879      	ldr	r1, [r7, #4]
 80005ce:	693a      	ldr	r2, [r7, #16]
 80005d0:	00d2      	lsls	r2, r2, #3
 80005d2:	440a      	add	r2, r1
 80005d4:	4413      	add	r3, r2
 80005d6:	3388      	adds	r3, #136	; 0x88
 80005d8:	4602      	mov	r2, r0
 80005da:	701a      	strb	r2, [r3, #0]
		BufferIndex++;
 80005dc:	7dbb      	ldrb	r3, [r7, #22]
 80005de:	3301      	adds	r3, #1
 80005e0:	75bb      	strb	r3, [r7, #22]
		Store->StoreData[i][BufferIndex] = FrameType;
 80005e2:	7dbb      	ldrb	r3, [r7, #22]
 80005e4:	6879      	ldr	r1, [r7, #4]
 80005e6:	693a      	ldr	r2, [r7, #16]
 80005e8:	00d2      	lsls	r2, r2, #3
 80005ea:	440a      	add	r2, r1
 80005ec:	4413      	add	r3, r2
 80005ee:	3388      	adds	r3, #136	; 0x88
 80005f0:	7dfa      	ldrb	r2, [r7, #23]
 80005f2:	701a      	strb	r2, [r3, #0]
		BufferIndex++;
 80005f4:	7dbb      	ldrb	r3, [r7, #22]
 80005f6:	3301      	adds	r3, #1
 80005f8:	75bb      	strb	r3, [r7, #22]
		for (; BufferIndex < 10; BufferIndex++) {
 80005fa:	e014      	b.n	8000626 <CAN_Store_Data+0x8a>
			Store->StoreData[i][BufferIndex] =
					Store->Buffer[i][BufferIndex - 2];
 80005fc:	7dbb      	ldrb	r3, [r7, #22]
 80005fe:	1e9a      	subs	r2, r3, #2
			Store->StoreData[i][BufferIndex] =
 8000600:	7dbb      	ldrb	r3, [r7, #22]
					Store->Buffer[i][BufferIndex - 2];
 8000602:	6878      	ldr	r0, [r7, #4]
 8000604:	6939      	ldr	r1, [r7, #16]
 8000606:	00c9      	lsls	r1, r1, #3
 8000608:	4401      	add	r1, r0
 800060a:	440a      	add	r2, r1
 800060c:	3248      	adds	r2, #72	; 0x48
 800060e:	7810      	ldrb	r0, [r2, #0]
			Store->StoreData[i][BufferIndex] =
 8000610:	6879      	ldr	r1, [r7, #4]
 8000612:	693a      	ldr	r2, [r7, #16]
 8000614:	00d2      	lsls	r2, r2, #3
 8000616:	440a      	add	r2, r1
 8000618:	4413      	add	r3, r2
 800061a:	3388      	adds	r3, #136	; 0x88
 800061c:	4602      	mov	r2, r0
 800061e:	701a      	strb	r2, [r3, #0]
		for (; BufferIndex < 10; BufferIndex++) {
 8000620:	7dbb      	ldrb	r3, [r7, #22]
 8000622:	3301      	adds	r3, #1
 8000624:	75bb      	strb	r3, [r7, #22]
 8000626:	7dbb      	ldrb	r3, [r7, #22]
 8000628:	2b09      	cmp	r3, #9
 800062a:	d9e7      	bls.n	80005fc <CAN_Store_Data+0x60>
		}
		FrameType++;
 800062c:	7dfb      	ldrb	r3, [r7, #23]
 800062e:	3301      	adds	r3, #1
 8000630:	75fb      	strb	r3, [r7, #23]
		BufferIndex = 0;
 8000632:	2300      	movs	r3, #0
 8000634:	75bb      	strb	r3, [r7, #22]
	for (int i = 0; i < NumberFrame; i++) {
 8000636:	693b      	ldr	r3, [r7, #16]
 8000638:	3301      	adds	r3, #1
 800063a:	613b      	str	r3, [r7, #16]
 800063c:	7bfb      	ldrb	r3, [r7, #15]
 800063e:	693a      	ldr	r2, [r7, #16]
 8000640:	429a      	cmp	r2, r3
 8000642:	dbbf      	blt.n	80005c4 <CAN_Store_Data+0x28>
	}
	return HAL_OK;
 8000644:	2300      	movs	r3, #0
}
 8000646:	4618      	mov	r0, r3
 8000648:	371c      	adds	r7, #28
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr

08000650 <CAN_Config_filtering>:
	if (*FlagNotification == REC_PACKET_SUCCESS) {
		memcpy(Data, AppBuffer->NetworkBuffer, AppDataLength);
	}
	return HAL_OK;
}
uint32_t CAN_Config_filtering(uint8_t FIFO) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b08c      	sub	sp, #48	; 0x30
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	71fb      	strb	r3, [r7, #7]
	CAN_FilterTypeDef Can_filter_init;
	Can_filter_init.FilterActivation = ENABLE;
 800065a:	2301      	movs	r3, #1
 800065c:	62bb      	str	r3, [r7, #40]	; 0x28
	Can_filter_init.FilterBank = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	61fb      	str	r3, [r7, #28]
	Can_filter_init.FilterFIFOAssignment = FIFO;
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	61bb      	str	r3, [r7, #24]
	Can_filter_init.FilterIdHigh = 0x0000;
 8000666:	2300      	movs	r3, #0
 8000668:	60bb      	str	r3, [r7, #8]
	Can_filter_init.FilterIdLow = 0x0000;
 800066a:	2300      	movs	r3, #0
 800066c:	60fb      	str	r3, [r7, #12]
	Can_filter_init.FilterMaskIdHigh = 0x0000;
 800066e:	2300      	movs	r3, #0
 8000670:	613b      	str	r3, [r7, #16]
	Can_filter_init.FilterMaskIdLow = 0x0000;
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]
	Can_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 8000676:	2300      	movs	r3, #0
 8000678:	623b      	str	r3, [r7, #32]
	Can_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 800067a:	2301      	movs	r3, #1
 800067c:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_CAN_ConfigFilter(&hcan, &Can_filter_init) != HAL_OK) {
 800067e:	f107 0308 	add.w	r3, r7, #8
 8000682:	4619      	mov	r1, r3
 8000684:	4806      	ldr	r0, [pc, #24]	; (80006a0 <CAN_Config_filtering+0x50>)
 8000686:	f000 fdf2 	bl	800126e <HAL_CAN_ConfigFilter>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <CAN_Config_filtering+0x44>
		Error_Handler();
 8000690:	f000 fa84 	bl	8000b9c <Error_Handler>
	}
	return HAL_OK;
 8000694:	2300      	movs	r3, #0
}
 8000696:	4618      	mov	r0, r3
 8000698:	3730      	adds	r7, #48	; 0x30
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	2000007c 	.word	0x2000007c

080006a4 <crc_8>:

#include "CRC.h"
#include "stdint.h"
unsigned char table[256] = {0};

uint8_t crc_8(uint8_t* data, uint8_t len) {
 80006a4:	b480      	push	{r7}
 80006a6:	b087      	sub	sp, #28
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	460b      	mov	r3, r1
 80006ae:	70fb      	strb	r3, [r7, #3]
  unsigned crc = 0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
  int i, j;
  for (j = len; j; j--, data++) {
 80006b4:	78fb      	ldrb	r3, [r7, #3]
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	e023      	b.n	8000702 <crc_8+0x5e>
    crc ^= (*data << 8);
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	021b      	lsls	r3, r3, #8
 80006c0:	461a      	mov	r2, r3
 80006c2:	697b      	ldr	r3, [r7, #20]
 80006c4:	4053      	eors	r3, r2
 80006c6:	617b      	str	r3, [r7, #20]
    for(i = 8; i; i--) {
 80006c8:	2308      	movs	r3, #8
 80006ca:	613b      	str	r3, [r7, #16]
 80006cc:	e010      	b.n	80006f0 <crc_8+0x4c>
      if (crc & 0x8000)
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d005      	beq.n	80006e4 <crc_8+0x40>
        crc ^= (0x1070 << 3);
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	f483 4303 	eor.w	r3, r3, #33536	; 0x8300
 80006de:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 80006e2:	617b      	str	r3, [r7, #20]
      crc <<= 1;
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	005b      	lsls	r3, r3, #1
 80006e8:	617b      	str	r3, [r7, #20]
    for(i = 8; i; i--) {
 80006ea:	693b      	ldr	r3, [r7, #16]
 80006ec:	3b01      	subs	r3, #1
 80006ee:	613b      	str	r3, [r7, #16]
 80006f0:	693b      	ldr	r3, [r7, #16]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d1eb      	bne.n	80006ce <crc_8+0x2a>
  for (j = len; j; j--, data++) {
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	3b01      	subs	r3, #1
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	3301      	adds	r3, #1
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d1d8      	bne.n	80006ba <crc_8+0x16>
    }
  }
  return (uint8_t)(crc >> 8);
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	0a1b      	lsrs	r3, r3, #8
 800070c:	b2db      	uxtb	r3, r3
}
 800070e:	4618      	mov	r0, r3
 8000710:	371c      	adds	r7, #28
 8000712:	46bd      	mov	sp, r7
 8000714:	bc80      	pop	{r7}
 8000716:	4770      	bx	lr

08000718 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800071c:	f000 fc7a 	bl	8001014 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000720:	f000 f838 	bl	8000794 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000724:	f000 f928 	bl	8000978 <MX_GPIO_Init>
  MX_CAN_Init();
 8000728:	f000 f87a 	bl	8000820 <MX_CAN_Init>
  MX_USART1_UART_Init();
 800072c:	f000 f8fa 	bl	8000924 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000730:	f000 f8ac 	bl	800088c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000734:	f002 fd78 	bl	8003228 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of mMainTask */
  mMainTaskHandle = osThreadNew(MainTask, NULL, &mMainTask_attributes);
 8000738:	4a0d      	ldr	r2, [pc, #52]	; (8000770 <main+0x58>)
 800073a:	2100      	movs	r1, #0
 800073c:	480d      	ldr	r0, [pc, #52]	; (8000774 <main+0x5c>)
 800073e:	f002 fdd9 	bl	80032f4 <osThreadNew>
 8000742:	4603      	mov	r3, r0
 8000744:	4a0c      	ldr	r2, [pc, #48]	; (8000778 <main+0x60>)
 8000746:	6013      	str	r3, [r2, #0]

  /* creation of mCAN_Recv */
  mCAN_RecvHandle = osThreadNew(CAN_Recv, NULL, &mCAN_Recv_attributes);
 8000748:	4a0c      	ldr	r2, [pc, #48]	; (800077c <main+0x64>)
 800074a:	2100      	movs	r1, #0
 800074c:	480c      	ldr	r0, [pc, #48]	; (8000780 <main+0x68>)
 800074e:	f002 fdd1 	bl	80032f4 <osThreadNew>
 8000752:	4603      	mov	r3, r0
 8000754:	4a0b      	ldr	r2, [pc, #44]	; (8000784 <main+0x6c>)
 8000756:	6013      	str	r3, [r2, #0]

  /* creation of mCAN_Monitor */
  mCAN_MonitorHandle = osThreadNew(CAN_Monitor, NULL, &mCAN_Monitor_attributes);
 8000758:	4a0b      	ldr	r2, [pc, #44]	; (8000788 <main+0x70>)
 800075a:	2100      	movs	r1, #0
 800075c:	480b      	ldr	r0, [pc, #44]	; (800078c <main+0x74>)
 800075e:	f002 fdc9 	bl	80032f4 <osThreadNew>
 8000762:	4603      	mov	r3, r0
 8000764:	4a0a      	ldr	r2, [pc, #40]	; (8000790 <main+0x78>)
 8000766:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000768:	f002 fd90 	bl	800328c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800076c:	e7fe      	b.n	800076c <main+0x54>
 800076e:	bf00      	nop
 8000770:	080065b4 	.word	0x080065b4
 8000774:	08000a11 	.word	0x08000a11
 8000778:	20000134 	.word	0x20000134
 800077c:	080065d8 	.word	0x080065d8
 8000780:	08000b49 	.word	0x08000b49
 8000784:	20000138 	.word	0x20000138
 8000788:	080065fc 	.word	0x080065fc
 800078c:	08000b59 	.word	0x08000b59
 8000790:	2000013c 	.word	0x2000013c

08000794 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b090      	sub	sp, #64	; 0x40
 8000798:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079a:	f107 0318 	add.w	r3, r7, #24
 800079e:	2228      	movs	r2, #40	; 0x28
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f005 fae6 	bl	8005d74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
 80007b4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007b6:	2301      	movs	r3, #1
 80007b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007c0:	2300      	movs	r3, #0
 80007c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c4:	2301      	movs	r3, #1
 80007c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c8:	2302      	movs	r3, #2
 80007ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80007d2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80007d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d8:	f107 0318 	add.w	r3, r7, #24
 80007dc:	4618      	mov	r0, r3
 80007de:	f001 fc07 	bl	8001ff0 <HAL_RCC_OscConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <SystemClock_Config+0x58>
  {
    Error_Handler();
 80007e8:	f000 f9d8 	bl	8000b9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ec:	230f      	movs	r3, #15
 80007ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f0:	2302      	movs	r3, #2
 80007f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f4:	2300      	movs	r3, #0
 80007f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	2102      	movs	r1, #2
 8000806:	4618      	mov	r0, r3
 8000808:	f001 fe74 	bl	80024f4 <HAL_RCC_ClockConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000812:	f000 f9c3 	bl	8000b9c <Error_Handler>
  }
}
 8000816:	bf00      	nop
 8000818:	3740      	adds	r7, #64	; 0x40
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
	...

08000820 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000824:	4b17      	ldr	r3, [pc, #92]	; (8000884 <MX_CAN_Init+0x64>)
 8000826:	4a18      	ldr	r2, [pc, #96]	; (8000888 <MX_CAN_Init+0x68>)
 8000828:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 800082a:	4b16      	ldr	r3, [pc, #88]	; (8000884 <MX_CAN_Init+0x64>)
 800082c:	2204      	movs	r2, #4
 800082e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000830:	4b14      	ldr	r3, [pc, #80]	; (8000884 <MX_CAN_Init+0x64>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000836:	4b13      	ldr	r3, [pc, #76]	; (8000884 <MX_CAN_Init+0x64>)
 8000838:	2200      	movs	r2, #0
 800083a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 800083c:	4b11      	ldr	r3, [pc, #68]	; (8000884 <MX_CAN_Init+0x64>)
 800083e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000842:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000844:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <MX_CAN_Init+0x64>)
 8000846:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800084a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800084c:	4b0d      	ldr	r3, [pc, #52]	; (8000884 <MX_CAN_Init+0x64>)
 800084e:	2200      	movs	r2, #0
 8000850:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000852:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <MX_CAN_Init+0x64>)
 8000854:	2200      	movs	r2, #0
 8000856:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000858:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <MX_CAN_Init+0x64>)
 800085a:	2200      	movs	r2, #0
 800085c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800085e:	4b09      	ldr	r3, [pc, #36]	; (8000884 <MX_CAN_Init+0x64>)
 8000860:	2200      	movs	r2, #0
 8000862:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000864:	4b07      	ldr	r3, [pc, #28]	; (8000884 <MX_CAN_Init+0x64>)
 8000866:	2200      	movs	r2, #0
 8000868:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800086a:	4b06      	ldr	r3, [pc, #24]	; (8000884 <MX_CAN_Init+0x64>)
 800086c:	2200      	movs	r2, #0
 800086e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000870:	4804      	ldr	r0, [pc, #16]	; (8000884 <MX_CAN_Init+0x64>)
 8000872:	f000 fc01 	bl	8001078 <HAL_CAN_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 800087c:	f000 f98e 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}
 8000884:	2000007c 	.word	0x2000007c
 8000888:	40006400 	.word	0x40006400

0800088c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000892:	f107 0308 	add.w	r3, r7, #8
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a0:	463b      	mov	r3, r7
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008a8:	4b1c      	ldr	r3, [pc, #112]	; (800091c <MX_TIM3_Init+0x90>)
 80008aa:	4a1d      	ldr	r2, [pc, #116]	; (8000920 <MX_TIM3_Init+0x94>)
 80008ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80008ae:	4b1b      	ldr	r3, [pc, #108]	; (800091c <MX_TIM3_Init+0x90>)
 80008b0:	2247      	movs	r2, #71	; 0x47
 80008b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b4:	4b19      	ldr	r3, [pc, #100]	; (800091c <MX_TIM3_Init+0x90>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 209;
 80008ba:	4b18      	ldr	r3, [pc, #96]	; (800091c <MX_TIM3_Init+0x90>)
 80008bc:	22d1      	movs	r2, #209	; 0xd1
 80008be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008c0:	4b16      	ldr	r3, [pc, #88]	; (800091c <MX_TIM3_Init+0x90>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c6:	4b15      	ldr	r3, [pc, #84]	; (800091c <MX_TIM3_Init+0x90>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008cc:	4813      	ldr	r0, [pc, #76]	; (800091c <MX_TIM3_Init+0x90>)
 80008ce:	f001 ffcf 	bl	8002870 <HAL_TIM_Base_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 80008d8:	f000 f960 	bl	8000b9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008e2:	f107 0308 	add.w	r3, r7, #8
 80008e6:	4619      	mov	r1, r3
 80008e8:	480c      	ldr	r0, [pc, #48]	; (800091c <MX_TIM3_Init+0x90>)
 80008ea:	f002 f96b 	bl	8002bc4 <HAL_TIM_ConfigClockSource>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 80008f4:	f000 f952 	bl	8000b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f8:	2300      	movs	r3, #0
 80008fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008fc:	2300      	movs	r3, #0
 80008fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000900:	463b      	mov	r3, r7
 8000902:	4619      	mov	r1, r3
 8000904:	4805      	ldr	r0, [pc, #20]	; (800091c <MX_TIM3_Init+0x90>)
 8000906:	f002 fb41 	bl	8002f8c <HAL_TIMEx_MasterConfigSynchronization>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000910:	f000 f944 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000914:	bf00      	nop
 8000916:	3718      	adds	r7, #24
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	200000a4 	.word	0x200000a4
 8000920:	40000400 	.word	0x40000400

08000924 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000928:	4b11      	ldr	r3, [pc, #68]	; (8000970 <MX_USART1_UART_Init+0x4c>)
 800092a:	4a12      	ldr	r2, [pc, #72]	; (8000974 <MX_USART1_UART_Init+0x50>)
 800092c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800092e:	4b10      	ldr	r3, [pc, #64]	; (8000970 <MX_USART1_UART_Init+0x4c>)
 8000930:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000934:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <MX_USART1_UART_Init+0x4c>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800093c:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <MX_USART1_UART_Init+0x4c>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000942:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <MX_USART1_UART_Init+0x4c>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000948:	4b09      	ldr	r3, [pc, #36]	; (8000970 <MX_USART1_UART_Init+0x4c>)
 800094a:	220c      	movs	r2, #12
 800094c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094e:	4b08      	ldr	r3, [pc, #32]	; (8000970 <MX_USART1_UART_Init+0x4c>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <MX_USART1_UART_Init+0x4c>)
 8000956:	2200      	movs	r2, #0
 8000958:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800095a:	4805      	ldr	r0, [pc, #20]	; (8000970 <MX_USART1_UART_Init+0x4c>)
 800095c:	f002 fb86 	bl	800306c <HAL_UART_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000966:	f000 f919 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	200000ec 	.word	0x200000ec
 8000974:	40013800 	.word	0x40013800

08000978 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b088      	sub	sp, #32
 800097c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097e:	f107 0310 	add.w	r3, r7, #16
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800098c:	4b1e      	ldr	r3, [pc, #120]	; (8000a08 <MX_GPIO_Init+0x90>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	4a1d      	ldr	r2, [pc, #116]	; (8000a08 <MX_GPIO_Init+0x90>)
 8000992:	f043 0310 	orr.w	r3, r3, #16
 8000996:	6193      	str	r3, [r2, #24]
 8000998:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <MX_GPIO_Init+0x90>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	f003 0310 	and.w	r3, r3, #16
 80009a0:	60fb      	str	r3, [r7, #12]
 80009a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009a4:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <MX_GPIO_Init+0x90>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	4a17      	ldr	r2, [pc, #92]	; (8000a08 <MX_GPIO_Init+0x90>)
 80009aa:	f043 0320 	orr.w	r3, r3, #32
 80009ae:	6193      	str	r3, [r2, #24]
 80009b0:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <MX_GPIO_Init+0x90>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	f003 0320 	and.w	r3, r3, #32
 80009b8:	60bb      	str	r3, [r7, #8]
 80009ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009bc:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <MX_GPIO_Init+0x90>)
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	4a11      	ldr	r2, [pc, #68]	; (8000a08 <MX_GPIO_Init+0x90>)
 80009c2:	f043 0304 	orr.w	r3, r3, #4
 80009c6:	6193      	str	r3, [r2, #24]
 80009c8:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <MX_GPIO_Init+0x90>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	f003 0304 	and.w	r3, r3, #4
 80009d0:	607b      	str	r3, [r7, #4]
 80009d2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80009d4:	2200      	movs	r2, #0
 80009d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009da:	480c      	ldr	r0, [pc, #48]	; (8000a0c <MX_GPIO_Init+0x94>)
 80009dc:	f001 fad6 	bl	8001f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80009e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e6:	2301      	movs	r3, #1
 80009e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	2302      	movs	r3, #2
 80009f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f2:	f107 0310 	add.w	r3, r7, #16
 80009f6:	4619      	mov	r1, r3
 80009f8:	4804      	ldr	r0, [pc, #16]	; (8000a0c <MX_GPIO_Init+0x94>)
 80009fa:	f001 f943 	bl	8001c84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009fe:	bf00      	nop
 8000a00:	3720      	adds	r7, #32
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	40011000 	.word	0x40011000

08000a10 <MainTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_MainTask */
void MainTask(void *argument)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	f5ad 6dfa 	sub.w	sp, sp, #2000	; 0x7d0
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 8000a1c:	f2a3 73cc 	subw	r3, r3, #1996	; 0x7cc
 8000a20:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
  CAN_Config_filtering(CAN_FILTER_FIFO0);
 8000a22:	2000      	movs	r0, #0
 8000a24:	f7ff fe14 	bl	8000650 <CAN_Config_filtering>
    if(HAL_CAN_Start(&hcan)!=HAL_OK)
 8000a28:	4845      	ldr	r0, [pc, #276]	; (8000b40 <MainTask+0x130>)
 8000a2a:	f000 fce9 	bl	8001400 <HAL_CAN_Start>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MainTask+0x28>
        {
         Error_Handler();
 8000a34:	f000 f8b2 	bl	8000b9c <Error_Handler>
        }
     uint32_t Txmailbox;
     CANConfigIDTxtypedef pIDtype;
     pIDtype.MessageType=COMMAND_FRAME;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	f8a7 37bc 	strh.w	r3, [r7, #1980]	; 0x7bc
     pIDtype.SenderID=OBSTALCE2;
 8000a3e:	2309      	movs	r3, #9
 8000a40:	f8a7 37be 	strh.w	r3, [r7, #1982]	; 0x7be
     CANBufferHandleStruct Buffer;
     CANBufferHandleStruct_Init(&Buffer);
 8000a44:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff fb81 	bl	8000150 <CANBufferHandleStruct_Init>
     FlagRecNotification FlagRec;
     FlagFrameHandle Flag;
     FlagsFrameHandle_Init(&Flag);
 8000a4e:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff fbd5 	bl	8000202 <FlagsFrameHandle_Init>
     uint8_t mess[100]={0};
 8000a58:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 8000a5c:	f5a3 63d9 	sub.w	r3, r3, #1736	; 0x6c8
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	3304      	adds	r3, #4
 8000a66:	2260      	movs	r2, #96	; 0x60
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f005 f982 	bl	8005d74 <memset>
     uint8_t k=0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	f887 37cf 	strb.w	r3, [r7, #1999]	; 0x7cf
     uint8_t Data[64]={0};
 8000a76:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 8000a7a:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	3304      	adds	r3, #4
 8000a84:	223c      	movs	r2, #60	; 0x3c
 8000a86:	2100      	movs	r1, #0
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f005 f973 	bl	8005d74 <memset>
     for (int i=0; i<DATA_TEST;i++)
 8000a8e:	2300      	movs	r3, #0
 8000a90:	f8c7 37c8 	str.w	r3, [r7, #1992]	; 0x7c8
 8000a94:	e013      	b.n	8000abe <MainTask+0xae>
       {
         Data[i]=k;
 8000a96:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 8000a9a:	f5a3 62e1 	sub.w	r2, r3, #1800	; 0x708
 8000a9e:	f8d7 37c8 	ldr.w	r3, [r7, #1992]	; 0x7c8
 8000aa2:	4413      	add	r3, r2
 8000aa4:	f897 27cf 	ldrb.w	r2, [r7, #1999]	; 0x7cf
 8000aa8:	701a      	strb	r2, [r3, #0]
         k=k+1;
 8000aaa:	f897 37cf 	ldrb.w	r3, [r7, #1999]	; 0x7cf
 8000aae:	3301      	adds	r3, #1
 8000ab0:	f887 37cf 	strb.w	r3, [r7, #1999]	; 0x7cf
     for (int i=0; i<DATA_TEST;i++)
 8000ab4:	f8d7 37c8 	ldr.w	r3, [r7, #1992]	; 0x7c8
 8000ab8:	3301      	adds	r3, #1
 8000aba:	f8c7 37c8 	str.w	r3, [r7, #1992]	; 0x7c8
 8000abe:	f8d7 37c8 	ldr.w	r3, [r7, #1992]	; 0x7c8
 8000ac2:	2b3d      	cmp	r3, #61	; 0x3d
 8000ac4:	dde7      	ble.n	8000a96 <MainTask+0x86>
       }
     uint8_t sendData[100] = {0};
 8000ac6:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 8000aca:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	3304      	adds	r3, #4
 8000ad4:	2260      	movs	r2, #96	; 0x60
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f005 f94b 	bl	8005d74 <memset>
         uint8_t len = 0;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	f887 37c3 	strb.w	r3, [r7, #1987]	; 0x7c3
         uint32_t cnt = 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	f8c7 37c4 	str.w	r3, [r7, #1988]	; 0x7c4
       char Print[88] = {0};
 8000aea:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 8000aee:	f2a3 73c4 	subw	r3, r3, #1988	; 0x7c4
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	3304      	adds	r3, #4
 8000af8:	2254      	movs	r2, #84	; 0x54
 8000afa:	2100      	movs	r1, #0
 8000afc:	4618      	mov	r0, r3
 8000afe:	f005 f939 	bl	8005d74 <memset>
  /* Infinite loop */
  for(;;)
  {
      len = sprintf((char*)sendData, "From OBSTALCE5 to 2: %lu\r\n",cnt++);
 8000b02:	f8d7 37c4 	ldr.w	r3, [r7, #1988]	; 0x7c4
 8000b06:	1c5a      	adds	r2, r3, #1
 8000b08:	f8c7 27c4 	str.w	r2, [r7, #1988]	; 0x7c4
 8000b0c:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8000b10:	461a      	mov	r2, r3
 8000b12:	490c      	ldr	r1, [pc, #48]	; (8000b44 <MainTask+0x134>)
 8000b14:	f005 f90e 	bl	8005d34 <siprintf>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	f887 37c3 	strb.w	r3, [r7, #1987]	; 0x7c3
      CAN_Send_Application(&Buffer, &pIDtype, sendData,len+1);
 8000b1e:	f897 37c3 	ldrb.w	r3, [r7, #1987]	; 0x7c3
 8000b22:	3301      	adds	r3, #1
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8000b2a:	f207 71bc 	addw	r1, r7, #1980	; 0x7bc
 8000b2e:	f507 7020 	add.w	r0, r7, #640	; 0x280
 8000b32:	f7ff fbc9 	bl	80002c8 <CAN_Send_Application>

    osDelay(1000);
 8000b36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b3a:	f002 fc85 	bl	8003448 <osDelay>
      len = sprintf((char*)sendData, "From OBSTALCE5 to 2: %lu\r\n",cnt++);
 8000b3e:	e7e0      	b.n	8000b02 <MainTask+0xf2>
 8000b40:	2000007c 	.word	0x2000007c
 8000b44:	08006580 	.word	0x08006580

08000b48 <CAN_Recv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CAN_Recv */
void CAN_Recv(void *argument)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
//      if(FlagRec==REC_SUCCESS)
//      {
//        uint8_t len = sprintf(Print, "Node 2 Rcv: %s\r\n", mess);
//        HAL_UART_Transmit(&huart1,Print,len,HAL_MAX_DELAY);
//      }
   osDelay(100);
 8000b50:	2064      	movs	r0, #100	; 0x64
 8000b52:	f002 fc79 	bl	8003448 <osDelay>
 8000b56:	e7fb      	b.n	8000b50 <CAN_Recv+0x8>

08000b58 <CAN_Monitor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CAN_Monitor */
void CAN_Monitor(void *argument)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CAN_Monitor */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000b60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b64:	4803      	ldr	r0, [pc, #12]	; (8000b74 <CAN_Monitor+0x1c>)
 8000b66:	f001 fa29 	bl	8001fbc <HAL_GPIO_TogglePin>
    osDelay(500);
 8000b6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b6e:	f002 fc6b 	bl	8003448 <osDelay>
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000b72:	e7f5      	b.n	8000b60 <CAN_Monitor+0x8>
 8000b74:	40011000 	.word	0x40011000

08000b78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a04      	ldr	r2, [pc, #16]	; (8000b98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d101      	bne.n	8000b8e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b8a:	f000 fa59 	bl	8001040 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40000800 	.word	0x40000800

08000b9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba0:	b672      	cpsid	i
}
 8000ba2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <Error_Handler+0x8>
	...

08000ba8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bae:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <HAL_MspInit+0x68>)
 8000bb0:	699b      	ldr	r3, [r3, #24]
 8000bb2:	4a17      	ldr	r2, [pc, #92]	; (8000c10 <HAL_MspInit+0x68>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	6193      	str	r3, [r2, #24]
 8000bba:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <HAL_MspInit+0x68>)
 8000bbc:	699b      	ldr	r3, [r3, #24]
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc6:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <HAL_MspInit+0x68>)
 8000bc8:	69db      	ldr	r3, [r3, #28]
 8000bca:	4a11      	ldr	r2, [pc, #68]	; (8000c10 <HAL_MspInit+0x68>)
 8000bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd0:	61d3      	str	r3, [r2, #28]
 8000bd2:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <HAL_MspInit+0x68>)
 8000bd4:	69db      	ldr	r3, [r3, #28]
 8000bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bde:	2200      	movs	r2, #0
 8000be0:	210f      	movs	r1, #15
 8000be2:	f06f 0001 	mvn.w	r0, #1
 8000be6:	f001 f822 	bl	8001c2e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000bea:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <HAL_MspInit+0x6c>)
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <HAL_MspInit+0x6c>)
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c06:	bf00      	nop
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40021000 	.word	0x40021000
 8000c14:	40010000 	.word	0x40010000

08000c18 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b088      	sub	sp, #32
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 0310 	add.w	r3, r7, #16
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a2c      	ldr	r2, [pc, #176]	; (8000ce4 <HAL_CAN_MspInit+0xcc>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d151      	bne.n	8000cdc <HAL_CAN_MspInit+0xc4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c38:	4b2b      	ldr	r3, [pc, #172]	; (8000ce8 <HAL_CAN_MspInit+0xd0>)
 8000c3a:	69db      	ldr	r3, [r3, #28]
 8000c3c:	4a2a      	ldr	r2, [pc, #168]	; (8000ce8 <HAL_CAN_MspInit+0xd0>)
 8000c3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c42:	61d3      	str	r3, [r2, #28]
 8000c44:	4b28      	ldr	r3, [pc, #160]	; (8000ce8 <HAL_CAN_MspInit+0xd0>)
 8000c46:	69db      	ldr	r3, [r3, #28]
 8000c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c50:	4b25      	ldr	r3, [pc, #148]	; (8000ce8 <HAL_CAN_MspInit+0xd0>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	4a24      	ldr	r2, [pc, #144]	; (8000ce8 <HAL_CAN_MspInit+0xd0>)
 8000c56:	f043 0304 	orr.w	r3, r3, #4
 8000c5a:	6193      	str	r3, [r2, #24]
 8000c5c:	4b22      	ldr	r3, [pc, #136]	; (8000ce8 <HAL_CAN_MspInit+0xd0>)
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	f003 0304 	and.w	r3, r3, #4
 8000c64:	60bb      	str	r3, [r7, #8]
 8000c66:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000c68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c6c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c76:	f107 0310 	add.w	r3, r7, #16
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	481b      	ldr	r0, [pc, #108]	; (8000cec <HAL_CAN_MspInit+0xd4>)
 8000c7e:	f001 f801 	bl	8001c84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000c82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c90:	f107 0310 	add.w	r3, r7, #16
 8000c94:	4619      	mov	r1, r3
 8000c96:	4815      	ldr	r0, [pc, #84]	; (8000cec <HAL_CAN_MspInit+0xd4>)
 8000c98:	f000 fff4 	bl	8001c84 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 5, 0);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2105      	movs	r1, #5
 8000ca0:	2013      	movs	r0, #19
 8000ca2:	f000 ffc4 	bl	8001c2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8000ca6:	2013      	movs	r0, #19
 8000ca8:	f000 ffdd 	bl	8001c66 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2105      	movs	r1, #5
 8000cb0:	2014      	movs	r0, #20
 8000cb2:	f000 ffbc 	bl	8001c2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000cb6:	2014      	movs	r0, #20
 8000cb8:	f000 ffd5 	bl	8001c66 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2105      	movs	r1, #5
 8000cc0:	2015      	movs	r0, #21
 8000cc2:	f000 ffb4 	bl	8001c2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000cc6:	2015      	movs	r0, #21
 8000cc8:	f000 ffcd 	bl	8001c66 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2105      	movs	r1, #5
 8000cd0:	2016      	movs	r0, #22
 8000cd2:	f000 ffac 	bl	8001c2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000cd6:	2016      	movs	r0, #22
 8000cd8:	f000 ffc5 	bl	8001c66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000cdc:	bf00      	nop
 8000cde:	3720      	adds	r7, #32
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40006400 	.word	0x40006400
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	40010800 	.word	0x40010800

08000cf0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a09      	ldr	r2, [pc, #36]	; (8000d24 <HAL_TIM_Base_MspInit+0x34>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d10b      	bne.n	8000d1a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d02:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <HAL_TIM_Base_MspInit+0x38>)
 8000d04:	69db      	ldr	r3, [r3, #28]
 8000d06:	4a08      	ldr	r2, [pc, #32]	; (8000d28 <HAL_TIM_Base_MspInit+0x38>)
 8000d08:	f043 0302 	orr.w	r3, r3, #2
 8000d0c:	61d3      	str	r3, [r2, #28]
 8000d0e:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <HAL_TIM_Base_MspInit+0x38>)
 8000d10:	69db      	ldr	r3, [r3, #28]
 8000d12:	f003 0302 	and.w	r3, r3, #2
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d1a:	bf00      	nop
 8000d1c:	3714      	adds	r7, #20
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bc80      	pop	{r7}
 8000d22:	4770      	bx	lr
 8000d24:	40000400 	.word	0x40000400
 8000d28:	40021000 	.word	0x40021000

08000d2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b088      	sub	sp, #32
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	f107 0310 	add.w	r3, r7, #16
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a1c      	ldr	r2, [pc, #112]	; (8000db8 <HAL_UART_MspInit+0x8c>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d131      	bne.n	8000db0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d4c:	4b1b      	ldr	r3, [pc, #108]	; (8000dbc <HAL_UART_MspInit+0x90>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	4a1a      	ldr	r2, [pc, #104]	; (8000dbc <HAL_UART_MspInit+0x90>)
 8000d52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d56:	6193      	str	r3, [r2, #24]
 8000d58:	4b18      	ldr	r3, [pc, #96]	; (8000dbc <HAL_UART_MspInit+0x90>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d64:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <HAL_UART_MspInit+0x90>)
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	4a14      	ldr	r2, [pc, #80]	; (8000dbc <HAL_UART_MspInit+0x90>)
 8000d6a:	f043 0304 	orr.w	r3, r3, #4
 8000d6e:	6193      	str	r3, [r2, #24]
 8000d70:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <HAL_UART_MspInit+0x90>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	f003 0304 	and.w	r3, r3, #4
 8000d78:	60bb      	str	r3, [r7, #8]
 8000d7a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d80:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d82:	2302      	movs	r3, #2
 8000d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d86:	2303      	movs	r3, #3
 8000d88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8a:	f107 0310 	add.w	r3, r7, #16
 8000d8e:	4619      	mov	r1, r3
 8000d90:	480b      	ldr	r0, [pc, #44]	; (8000dc0 <HAL_UART_MspInit+0x94>)
 8000d92:	f000 ff77 	bl	8001c84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da4:	f107 0310 	add.w	r3, r7, #16
 8000da8:	4619      	mov	r1, r3
 8000daa:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <HAL_UART_MspInit+0x94>)
 8000dac:	f000 ff6a 	bl	8001c84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000db0:	bf00      	nop
 8000db2:	3720      	adds	r7, #32
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40013800 	.word	0x40013800
 8000dbc:	40021000 	.word	0x40021000
 8000dc0:	40010800 	.word	0x40010800

08000dc4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08e      	sub	sp, #56	; 0x38
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000dda:	4b34      	ldr	r3, [pc, #208]	; (8000eac <HAL_InitTick+0xe8>)
 8000ddc:	69db      	ldr	r3, [r3, #28]
 8000dde:	4a33      	ldr	r2, [pc, #204]	; (8000eac <HAL_InitTick+0xe8>)
 8000de0:	f043 0304 	orr.w	r3, r3, #4
 8000de4:	61d3      	str	r3, [r2, #28]
 8000de6:	4b31      	ldr	r3, [pc, #196]	; (8000eac <HAL_InitTick+0xe8>)
 8000de8:	69db      	ldr	r3, [r3, #28]
 8000dea:	f003 0304 	and.w	r3, r3, #4
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000df2:	f107 0210 	add.w	r2, r7, #16
 8000df6:	f107 0314 	add.w	r3, r7, #20
 8000dfa:	4611      	mov	r1, r2
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f001 fce9 	bl	80027d4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e02:	6a3b      	ldr	r3, [r7, #32]
 8000e04:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d103      	bne.n	8000e14 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e0c:	f001 fcba 	bl	8002784 <HAL_RCC_GetPCLK1Freq>
 8000e10:	6378      	str	r0, [r7, #52]	; 0x34
 8000e12:	e004      	b.n	8000e1e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e14:	f001 fcb6 	bl	8002784 <HAL_RCC_GetPCLK1Freq>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e20:	4a23      	ldr	r2, [pc, #140]	; (8000eb0 <HAL_InitTick+0xec>)
 8000e22:	fba2 2303 	umull	r2, r3, r2, r3
 8000e26:	0c9b      	lsrs	r3, r3, #18
 8000e28:	3b01      	subs	r3, #1
 8000e2a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000e2c:	4b21      	ldr	r3, [pc, #132]	; (8000eb4 <HAL_InitTick+0xf0>)
 8000e2e:	4a22      	ldr	r2, [pc, #136]	; (8000eb8 <HAL_InitTick+0xf4>)
 8000e30:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000e32:	4b20      	ldr	r3, [pc, #128]	; (8000eb4 <HAL_InitTick+0xf0>)
 8000e34:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e38:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000e3a:	4a1e      	ldr	r2, [pc, #120]	; (8000eb4 <HAL_InitTick+0xf0>)
 8000e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e3e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000e40:	4b1c      	ldr	r3, [pc, #112]	; (8000eb4 <HAL_InitTick+0xf0>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e46:	4b1b      	ldr	r3, [pc, #108]	; (8000eb4 <HAL_InitTick+0xf0>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e4c:	4b19      	ldr	r3, [pc, #100]	; (8000eb4 <HAL_InitTick+0xf0>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000e52:	4818      	ldr	r0, [pc, #96]	; (8000eb4 <HAL_InitTick+0xf0>)
 8000e54:	f001 fd0c 	bl	8002870 <HAL_TIM_Base_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000e5e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d11b      	bne.n	8000e9e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000e66:	4813      	ldr	r0, [pc, #76]	; (8000eb4 <HAL_InitTick+0xf0>)
 8000e68:	f001 fd52 	bl	8002910 <HAL_TIM_Base_Start_IT>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000e72:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d111      	bne.n	8000e9e <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000e7a:	201e      	movs	r0, #30
 8000e7c:	f000 fef3 	bl	8001c66 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2b0f      	cmp	r3, #15
 8000e84:	d808      	bhi.n	8000e98 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000e86:	2200      	movs	r2, #0
 8000e88:	6879      	ldr	r1, [r7, #4]
 8000e8a:	201e      	movs	r0, #30
 8000e8c:	f000 fecf 	bl	8001c2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e90:	4a0a      	ldr	r2, [pc, #40]	; (8000ebc <HAL_InitTick+0xf8>)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6013      	str	r3, [r2, #0]
 8000e96:	e002      	b.n	8000e9e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e9e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3738      	adds	r7, #56	; 0x38
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	431bde83 	.word	0x431bde83
 8000eb4:	20000140 	.word	0x20000140
 8000eb8:	40000800 	.word	0x40000800
 8000ebc:	20000004 	.word	0x20000004

08000ec0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <NMI_Handler+0x4>

08000ec6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eca:	e7fe      	b.n	8000eca <HardFault_Handler+0x4>

08000ecc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <MemManage_Handler+0x4>

08000ed2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ed6:	e7fe      	b.n	8000ed6 <BusFault_Handler+0x4>

08000ed8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <UsageFault_Handler+0x4>

08000ede <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bc80      	pop	{r7}
 8000ee8:	4770      	bx	lr
	...

08000eec <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000ef0:	4802      	ldr	r0, [pc, #8]	; (8000efc <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8000ef2:	f000 fbbb 	bl	800166c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	2000007c 	.word	0x2000007c

08000f00 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000f04:	4802      	ldr	r0, [pc, #8]	; (8000f10 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000f06:	f000 fbb1 	bl	800166c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	2000007c 	.word	0x2000007c

08000f14 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000f18:	4802      	ldr	r0, [pc, #8]	; (8000f24 <CAN1_RX1_IRQHandler+0x10>)
 8000f1a:	f000 fba7 	bl	800166c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	2000007c 	.word	0x2000007c

08000f28 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000f2c:	4802      	ldr	r0, [pc, #8]	; (8000f38 <CAN1_SCE_IRQHandler+0x10>)
 8000f2e:	f000 fb9d 	bl	800166c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	2000007c 	.word	0x2000007c

08000f3c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000f40:	4802      	ldr	r0, [pc, #8]	; (8000f4c <TIM4_IRQHandler+0x10>)
 8000f42:	f001 fd37 	bl	80029b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000140 	.word	0x20000140

08000f50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f58:	4a14      	ldr	r2, [pc, #80]	; (8000fac <_sbrk+0x5c>)
 8000f5a:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <_sbrk+0x60>)
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f64:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <_sbrk+0x64>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d102      	bne.n	8000f72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f6c:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <_sbrk+0x64>)
 8000f6e:	4a12      	ldr	r2, [pc, #72]	; (8000fb8 <_sbrk+0x68>)
 8000f70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f72:	4b10      	ldr	r3, [pc, #64]	; (8000fb4 <_sbrk+0x64>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4413      	add	r3, r2
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d207      	bcs.n	8000f90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f80:	f004 ff10 	bl	8005da4 <__errno>
 8000f84:	4603      	mov	r3, r0
 8000f86:	220c      	movs	r2, #12
 8000f88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8e:	e009      	b.n	8000fa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f90:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <_sbrk+0x64>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f96:	4b07      	ldr	r3, [pc, #28]	; (8000fb4 <_sbrk+0x64>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	4a05      	ldr	r2, [pc, #20]	; (8000fb4 <_sbrk+0x64>)
 8000fa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3718      	adds	r7, #24
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20005000 	.word	0x20005000
 8000fb0:	00000400 	.word	0x00000400
 8000fb4:	20000188 	.word	0x20000188
 8000fb8:	20001c20 	.word	0x20001c20

08000fbc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bc80      	pop	{r7}
 8000fc6:	4770      	bx	lr

08000fc8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fc8:	f7ff fff8 	bl	8000fbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fcc:	480b      	ldr	r0, [pc, #44]	; (8000ffc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000fce:	490c      	ldr	r1, [pc, #48]	; (8001000 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000fd0:	4a0c      	ldr	r2, [pc, #48]	; (8001004 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000fd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fd4:	e002      	b.n	8000fdc <LoopCopyDataInit>

08000fd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fda:	3304      	adds	r3, #4

08000fdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe0:	d3f9      	bcc.n	8000fd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fe2:	4a09      	ldr	r2, [pc, #36]	; (8001008 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000fe4:	4c09      	ldr	r4, [pc, #36]	; (800100c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fe6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe8:	e001      	b.n	8000fee <LoopFillZerobss>

08000fea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fec:	3204      	adds	r2, #4

08000fee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff0:	d3fb      	bcc.n	8000fea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ff2:	f004 fedd 	bl	8005db0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ff6:	f7ff fb8f 	bl	8000718 <main>
  bx lr
 8000ffa:	4770      	bx	lr
  ldr r0, =_sdata
 8000ffc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001000:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001004:	08006688 	.word	0x08006688
  ldr r2, =_sbss
 8001008:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800100c:	20001c20 	.word	0x20001c20

08001010 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001010:	e7fe      	b.n	8001010 <ADC1_2_IRQHandler>
	...

08001014 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001018:	4b08      	ldr	r3, [pc, #32]	; (800103c <HAL_Init+0x28>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a07      	ldr	r2, [pc, #28]	; (800103c <HAL_Init+0x28>)
 800101e:	f043 0310 	orr.w	r3, r3, #16
 8001022:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001024:	2003      	movs	r0, #3
 8001026:	f000 fdf7 	bl	8001c18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800102a:	200f      	movs	r0, #15
 800102c:	f7ff feca 	bl	8000dc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001030:	f7ff fdba 	bl	8000ba8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40022000 	.word	0x40022000

08001040 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <HAL_IncTick+0x1c>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	461a      	mov	r2, r3
 800104a:	4b05      	ldr	r3, [pc, #20]	; (8001060 <HAL_IncTick+0x20>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4413      	add	r3, r2
 8001050:	4a03      	ldr	r2, [pc, #12]	; (8001060 <HAL_IncTick+0x20>)
 8001052:	6013      	str	r3, [r2, #0]
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr
 800105c:	20000008 	.word	0x20000008
 8001060:	2000018c 	.word	0x2000018c

08001064 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return uwTick;
 8001068:	4b02      	ldr	r3, [pc, #8]	; (8001074 <HAL_GetTick+0x10>)
 800106a:	681b      	ldr	r3, [r3, #0]
}
 800106c:	4618      	mov	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr
 8001074:	2000018c 	.word	0x2000018c

08001078 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d101      	bne.n	800108a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e0ed      	b.n	8001266 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001090:	b2db      	uxtb	r3, r3
 8001092:	2b00      	cmp	r3, #0
 8001094:	d102      	bne.n	800109c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff fdbe 	bl	8000c18 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f042 0201 	orr.w	r2, r2, #1
 80010aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010ac:	f7ff ffda 	bl	8001064 <HAL_GetTick>
 80010b0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010b2:	e012      	b.n	80010da <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010b4:	f7ff ffd6 	bl	8001064 <HAL_GetTick>
 80010b8:	4602      	mov	r2, r0
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	2b0a      	cmp	r3, #10
 80010c0:	d90b      	bls.n	80010da <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2205      	movs	r2, #5
 80010d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e0c5      	b.n	8001266 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d0e5      	beq.n	80010b4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f022 0202 	bic.w	r2, r2, #2
 80010f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010f8:	f7ff ffb4 	bl	8001064 <HAL_GetTick>
 80010fc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010fe:	e012      	b.n	8001126 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001100:	f7ff ffb0 	bl	8001064 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	2b0a      	cmp	r3, #10
 800110c:	d90b      	bls.n	8001126 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001112:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2205      	movs	r2, #5
 800111e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e09f      	b.n	8001266 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f003 0302 	and.w	r3, r3, #2
 8001130:	2b00      	cmp	r3, #0
 8001132:	d1e5      	bne.n	8001100 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	7e1b      	ldrb	r3, [r3, #24]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d108      	bne.n	800114e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	e007      	b.n	800115e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800115c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	7e5b      	ldrb	r3, [r3, #25]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d108      	bne.n	8001178 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	e007      	b.n	8001188 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001186:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	7e9b      	ldrb	r3, [r3, #26]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d108      	bne.n	80011a2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f042 0220 	orr.w	r2, r2, #32
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	e007      	b.n	80011b2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f022 0220 	bic.w	r2, r2, #32
 80011b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	7edb      	ldrb	r3, [r3, #27]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d108      	bne.n	80011cc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f022 0210 	bic.w	r2, r2, #16
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	e007      	b.n	80011dc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f042 0210 	orr.w	r2, r2, #16
 80011da:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	7f1b      	ldrb	r3, [r3, #28]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d108      	bne.n	80011f6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f042 0208 	orr.w	r2, r2, #8
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	e007      	b.n	8001206 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f022 0208 	bic.w	r2, r2, #8
 8001204:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	7f5b      	ldrb	r3, [r3, #29]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d108      	bne.n	8001220 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f042 0204 	orr.w	r2, r2, #4
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	e007      	b.n	8001230 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f022 0204 	bic.w	r2, r2, #4
 800122e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	689a      	ldr	r2, [r3, #8]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	431a      	orrs	r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	691b      	ldr	r3, [r3, #16]
 800123e:	431a      	orrs	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	695b      	ldr	r3, [r3, #20]
 8001244:	ea42 0103 	orr.w	r1, r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	1e5a      	subs	r2, r3, #1
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	430a      	orrs	r2, r1
 8001254:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2201      	movs	r2, #1
 8001260:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800126e:	b480      	push	{r7}
 8001270:	b087      	sub	sp, #28
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
 8001276:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001284:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001286:	7cfb      	ldrb	r3, [r7, #19]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d003      	beq.n	8001294 <HAL_CAN_ConfigFilter+0x26>
 800128c:	7cfb      	ldrb	r3, [r7, #19]
 800128e:	2b02      	cmp	r3, #2
 8001290:	f040 80aa 	bne.w	80013e8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800129a:	f043 0201 	orr.w	r2, r3, #1
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	695b      	ldr	r3, [r3, #20]
 80012a8:	f003 031f 	and.w	r3, r3, #31
 80012ac:	2201      	movs	r2, #1
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	43db      	mvns	r3, r3
 80012be:	401a      	ands	r2, r3
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	69db      	ldr	r3, [r3, #28]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d123      	bne.n	8001316 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	43db      	mvns	r3, r3
 80012d8:	401a      	ands	r2, r3
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012ec:	683a      	ldr	r2, [r7, #0]
 80012ee:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80012f0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	3248      	adds	r2, #72	; 0x48
 80012f6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800130a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800130c:	6979      	ldr	r1, [r7, #20]
 800130e:	3348      	adds	r3, #72	; 0x48
 8001310:	00db      	lsls	r3, r3, #3
 8001312:	440b      	add	r3, r1
 8001314:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	69db      	ldr	r3, [r3, #28]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d122      	bne.n	8001364 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	431a      	orrs	r2, r3
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800133a:	683a      	ldr	r2, [r7, #0]
 800133c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800133e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	3248      	adds	r2, #72	; 0x48
 8001344:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001358:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800135a:	6979      	ldr	r1, [r7, #20]
 800135c:	3348      	adds	r3, #72	; 0x48
 800135e:	00db      	lsls	r3, r3, #3
 8001360:	440b      	add	r3, r1
 8001362:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d109      	bne.n	8001380 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	43db      	mvns	r3, r3
 8001376:	401a      	ands	r2, r3
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800137e:	e007      	b.n	8001390 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	431a      	orrs	r2, r3
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	691b      	ldr	r3, [r3, #16]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d109      	bne.n	80013ac <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	401a      	ands	r2, r3
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80013aa:	e007      	b.n	80013bc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	431a      	orrs	r2, r3
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	6a1b      	ldr	r3, [r3, #32]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d107      	bne.n	80013d4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	431a      	orrs	r2, r3
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80013da:	f023 0201 	bic.w	r2, r3, #1
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80013e4:	2300      	movs	r3, #0
 80013e6:	e006      	b.n	80013f6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ec:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
  }
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	371c      	adds	r7, #28
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr

08001400 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800140e:	b2db      	uxtb	r3, r3
 8001410:	2b01      	cmp	r3, #1
 8001412:	d12e      	bne.n	8001472 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2202      	movs	r2, #2
 8001418:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f022 0201 	bic.w	r2, r2, #1
 800142a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800142c:	f7ff fe1a 	bl	8001064 <HAL_GetTick>
 8001430:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001432:	e012      	b.n	800145a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001434:	f7ff fe16 	bl	8001064 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b0a      	cmp	r3, #10
 8001440:	d90b      	bls.n	800145a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001446:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2205      	movs	r2, #5
 8001452:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e012      	b.n	8001480 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	2b00      	cmp	r3, #0
 8001466:	d1e5      	bne.n	8001434 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800146e:	2300      	movs	r3, #0
 8001470:	e006      	b.n	8001480 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001476:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
  }
}
 8001480:	4618      	mov	r0, r3
 8001482:	3710      	adds	r7, #16
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001488:	b480      	push	{r7}
 800148a:	b089      	sub	sp, #36	; 0x24
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
 8001494:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	f893 3020 	ldrb.w	r3, [r3, #32]
 800149c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80014a6:	7ffb      	ldrb	r3, [r7, #31]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d003      	beq.n	80014b4 <HAL_CAN_AddTxMessage+0x2c>
 80014ac:	7ffb      	ldrb	r3, [r7, #31]
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	f040 80ad 	bne.w	800160e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d10a      	bne.n	80014d4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d105      	bne.n	80014d4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	f000 8095 	beq.w	80015fe <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	0e1b      	lsrs	r3, r3, #24
 80014d8:	f003 0303 	and.w	r3, r3, #3
 80014dc:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80014de:	2201      	movs	r2, #1
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	409a      	lsls	r2, r3
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d10d      	bne.n	800150c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80014fa:	68f9      	ldr	r1, [r7, #12]
 80014fc:	6809      	ldr	r1, [r1, #0]
 80014fe:	431a      	orrs	r2, r3
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	3318      	adds	r3, #24
 8001504:	011b      	lsls	r3, r3, #4
 8001506:	440b      	add	r3, r1
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	e00f      	b.n	800152c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001516:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800151c:	68f9      	ldr	r1, [r7, #12]
 800151e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001520:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	3318      	adds	r3, #24
 8001526:	011b      	lsls	r3, r3, #4
 8001528:	440b      	add	r3, r1
 800152a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	6819      	ldr	r1, [r3, #0]
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	691a      	ldr	r2, [r3, #16]
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	3318      	adds	r3, #24
 8001538:	011b      	lsls	r3, r3, #4
 800153a:	440b      	add	r3, r1
 800153c:	3304      	adds	r3, #4
 800153e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	7d1b      	ldrb	r3, [r3, #20]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d111      	bne.n	800156c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	3318      	adds	r3, #24
 8001550:	011b      	lsls	r3, r3, #4
 8001552:	4413      	add	r3, r2
 8001554:	3304      	adds	r3, #4
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	68fa      	ldr	r2, [r7, #12]
 800155a:	6811      	ldr	r1, [r2, #0]
 800155c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	3318      	adds	r3, #24
 8001564:	011b      	lsls	r3, r3, #4
 8001566:	440b      	add	r3, r1
 8001568:	3304      	adds	r3, #4
 800156a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3307      	adds	r3, #7
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	061a      	lsls	r2, r3, #24
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	3306      	adds	r3, #6
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	041b      	lsls	r3, r3, #16
 800157c:	431a      	orrs	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	3305      	adds	r3, #5
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	021b      	lsls	r3, r3, #8
 8001586:	4313      	orrs	r3, r2
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	3204      	adds	r2, #4
 800158c:	7812      	ldrb	r2, [r2, #0]
 800158e:	4610      	mov	r0, r2
 8001590:	68fa      	ldr	r2, [r7, #12]
 8001592:	6811      	ldr	r1, [r2, #0]
 8001594:	ea43 0200 	orr.w	r2, r3, r0
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	011b      	lsls	r3, r3, #4
 800159c:	440b      	add	r3, r1
 800159e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80015a2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3303      	adds	r3, #3
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	061a      	lsls	r2, r3, #24
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3302      	adds	r3, #2
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	041b      	lsls	r3, r3, #16
 80015b4:	431a      	orrs	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	3301      	adds	r3, #1
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	021b      	lsls	r3, r3, #8
 80015be:	4313      	orrs	r3, r2
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	7812      	ldrb	r2, [r2, #0]
 80015c4:	4610      	mov	r0, r2
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	6811      	ldr	r1, [r2, #0]
 80015ca:	ea43 0200 	orr.w	r2, r3, r0
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	011b      	lsls	r3, r3, #4
 80015d2:	440b      	add	r3, r1
 80015d4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80015d8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	3318      	adds	r3, #24
 80015e2:	011b      	lsls	r3, r3, #4
 80015e4:	4413      	add	r3, r2
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	68fa      	ldr	r2, [r7, #12]
 80015ea:	6811      	ldr	r1, [r2, #0]
 80015ec:	f043 0201 	orr.w	r2, r3, #1
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	3318      	adds	r3, #24
 80015f4:	011b      	lsls	r3, r3, #4
 80015f6:	440b      	add	r3, r1
 80015f8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80015fa:	2300      	movs	r3, #0
 80015fc:	e00e      	b.n	800161c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001602:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e006      	b.n	800161c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001612:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
  }
}
 800161c:	4618      	mov	r0, r3
 800161e:	3724      	adds	r7, #36	; 0x24
 8001620:	46bd      	mov	sp, r7
 8001622:	bc80      	pop	{r7}
 8001624:	4770      	bx	lr

08001626 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8001626:	b480      	push	{r7}
 8001628:	b085      	sub	sp, #20
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
 800162e:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8001630:	2300      	movs	r3, #0
 8001632:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f893 3020 	ldrb.w	r3, [r3, #32]
 800163a:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 800163c:	7afb      	ldrb	r3, [r7, #11]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d002      	beq.n	8001648 <HAL_CAN_IsTxMessagePending+0x22>
 8001642:	7afb      	ldrb	r3, [r7, #11]
 8001644:	2b02      	cmp	r3, #2
 8001646:	d10b      	bne.n	8001660 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	689a      	ldr	r2, [r3, #8]
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	069b      	lsls	r3, r3, #26
 8001652:	401a      	ands	r2, r3
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	069b      	lsls	r3, r3, #26
 8001658:	429a      	cmp	r2, r3
 800165a:	d001      	beq.n	8001660 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 800165c:	2301      	movs	r3, #1
 800165e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8001660:	68fb      	ldr	r3, [r7, #12]
}
 8001662:	4618      	mov	r0, r3
 8001664:	3714      	adds	r7, #20
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr

0800166c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08a      	sub	sp, #40	; 0x28
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001674:	2300      	movs	r3, #0
 8001676:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	695b      	ldr	r3, [r3, #20]
 800167e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	691b      	ldr	r3, [r3, #16]
 800169e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80016a8:	6a3b      	ldr	r3, [r7, #32]
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d07c      	beq.n	80017ac <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	f003 0301 	and.w	r3, r3, #1
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d023      	beq.n	8001704 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2201      	movs	r2, #1
 80016c2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f000 f983 	bl	80019da <HAL_CAN_TxMailbox0CompleteCallback>
 80016d4:	e016      	b.n	8001704 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	f003 0304 	and.w	r3, r3, #4
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d004      	beq.n	80016ea <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80016e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016e6:	627b      	str	r3, [r7, #36]	; 0x24
 80016e8:	e00c      	b.n	8001704 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	f003 0308 	and.w	r3, r3, #8
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d004      	beq.n	80016fe <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80016f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016fa:	627b      	str	r3, [r7, #36]	; 0x24
 80016fc:	e002      	b.n	8001704 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f000 f986 	bl	8001a10 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800170a:	2b00      	cmp	r3, #0
 800170c:	d024      	beq.n	8001758 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001716:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800171e:	2b00      	cmp	r3, #0
 8001720:	d003      	beq.n	800172a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f000 f962 	bl	80019ec <HAL_CAN_TxMailbox1CompleteCallback>
 8001728:	e016      	b.n	8001758 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001730:	2b00      	cmp	r3, #0
 8001732:	d004      	beq.n	800173e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001736:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
 800173c:	e00c      	b.n	8001758 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001744:	2b00      	cmp	r3, #0
 8001746:	d004      	beq.n	8001752 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800174e:	627b      	str	r3, [r7, #36]	; 0x24
 8001750:	e002      	b.n	8001758 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f000 f965 	bl	8001a22 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d024      	beq.n	80017ac <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800176a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d003      	beq.n	800177e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f000 f941 	bl	80019fe <HAL_CAN_TxMailbox2CompleteCallback>
 800177c:	e016      	b.n	80017ac <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d004      	beq.n	8001792 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800178e:	627b      	str	r3, [r7, #36]	; 0x24
 8001790:	e00c      	b.n	80017ac <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d004      	beq.n	80017a6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800179c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24
 80017a4:	e002      	b.n	80017ac <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f000 f944 	bl	8001a34 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80017ac:	6a3b      	ldr	r3, [r7, #32]
 80017ae:	f003 0308 	and.w	r3, r3, #8
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d00c      	beq.n	80017d0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	f003 0310 	and.w	r3, r3, #16
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d007      	beq.n	80017d0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80017c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017c6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2210      	movs	r2, #16
 80017ce:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80017d0:	6a3b      	ldr	r3, [r7, #32]
 80017d2:	f003 0304 	and.w	r3, r3, #4
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d00b      	beq.n	80017f2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	f003 0308 	and.w	r3, r3, #8
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d006      	beq.n	80017f2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2208      	movs	r2, #8
 80017ea:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f000 f933 	bl	8001a58 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80017f2:	6a3b      	ldr	r3, [r7, #32]
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d009      	beq.n	8001810 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	f003 0303 	and.w	r3, r3, #3
 8001806:	2b00      	cmp	r3, #0
 8001808:	d002      	beq.n	8001810 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f000 f91b 	bl	8001a46 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001810:	6a3b      	ldr	r3, [r7, #32]
 8001812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001816:	2b00      	cmp	r3, #0
 8001818:	d00c      	beq.n	8001834 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	f003 0310 	and.w	r3, r3, #16
 8001820:	2b00      	cmp	r3, #0
 8001822:	d007      	beq.n	8001834 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001826:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800182a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2210      	movs	r2, #16
 8001832:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001834:	6a3b      	ldr	r3, [r7, #32]
 8001836:	f003 0320 	and.w	r3, r3, #32
 800183a:	2b00      	cmp	r3, #0
 800183c:	d00b      	beq.n	8001856 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	f003 0308 	and.w	r3, r3, #8
 8001844:	2b00      	cmp	r3, #0
 8001846:	d006      	beq.n	8001856 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2208      	movs	r2, #8
 800184e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f000 f913 	bl	8001a7c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001856:	6a3b      	ldr	r3, [r7, #32]
 8001858:	f003 0310 	and.w	r3, r3, #16
 800185c:	2b00      	cmp	r3, #0
 800185e:	d009      	beq.n	8001874 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	691b      	ldr	r3, [r3, #16]
 8001866:	f003 0303 	and.w	r3, r3, #3
 800186a:	2b00      	cmp	r3, #0
 800186c:	d002      	beq.n	8001874 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f000 f8fb 	bl	8001a6a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001874:	6a3b      	ldr	r3, [r7, #32]
 8001876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d00b      	beq.n	8001896 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	f003 0310 	and.w	r3, r3, #16
 8001884:	2b00      	cmp	r3, #0
 8001886:	d006      	beq.n	8001896 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2210      	movs	r2, #16
 800188e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f000 f8fc 	bl	8001a8e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001896:	6a3b      	ldr	r3, [r7, #32]
 8001898:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d00b      	beq.n	80018b8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	f003 0308 	and.w	r3, r3, #8
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d006      	beq.n	80018b8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2208      	movs	r2, #8
 80018b0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f000 f8f4 	bl	8001aa0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80018b8:	6a3b      	ldr	r3, [r7, #32]
 80018ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d07b      	beq.n	80019ba <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	f003 0304 	and.w	r3, r3, #4
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d072      	beq.n	80019b2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80018cc:	6a3b      	ldr	r3, [r7, #32]
 80018ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d008      	beq.n	80018e8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d003      	beq.n	80018e8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80018e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e2:	f043 0301 	orr.w	r3, r3, #1
 80018e6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80018e8:	6a3b      	ldr	r3, [r7, #32]
 80018ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d008      	beq.n	8001904 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d003      	beq.n	8001904 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80018fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fe:	f043 0302 	orr.w	r3, r3, #2
 8001902:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001904:	6a3b      	ldr	r3, [r7, #32]
 8001906:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800190a:	2b00      	cmp	r3, #0
 800190c:	d008      	beq.n	8001920 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001914:	2b00      	cmp	r3, #0
 8001916:	d003      	beq.n	8001920 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191a:	f043 0304 	orr.w	r3, r3, #4
 800191e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001920:	6a3b      	ldr	r3, [r7, #32]
 8001922:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001926:	2b00      	cmp	r3, #0
 8001928:	d043      	beq.n	80019b2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001930:	2b00      	cmp	r3, #0
 8001932:	d03e      	beq.n	80019b2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800193a:	2b60      	cmp	r3, #96	; 0x60
 800193c:	d02b      	beq.n	8001996 <HAL_CAN_IRQHandler+0x32a>
 800193e:	2b60      	cmp	r3, #96	; 0x60
 8001940:	d82e      	bhi.n	80019a0 <HAL_CAN_IRQHandler+0x334>
 8001942:	2b50      	cmp	r3, #80	; 0x50
 8001944:	d022      	beq.n	800198c <HAL_CAN_IRQHandler+0x320>
 8001946:	2b50      	cmp	r3, #80	; 0x50
 8001948:	d82a      	bhi.n	80019a0 <HAL_CAN_IRQHandler+0x334>
 800194a:	2b40      	cmp	r3, #64	; 0x40
 800194c:	d019      	beq.n	8001982 <HAL_CAN_IRQHandler+0x316>
 800194e:	2b40      	cmp	r3, #64	; 0x40
 8001950:	d826      	bhi.n	80019a0 <HAL_CAN_IRQHandler+0x334>
 8001952:	2b30      	cmp	r3, #48	; 0x30
 8001954:	d010      	beq.n	8001978 <HAL_CAN_IRQHandler+0x30c>
 8001956:	2b30      	cmp	r3, #48	; 0x30
 8001958:	d822      	bhi.n	80019a0 <HAL_CAN_IRQHandler+0x334>
 800195a:	2b10      	cmp	r3, #16
 800195c:	d002      	beq.n	8001964 <HAL_CAN_IRQHandler+0x2f8>
 800195e:	2b20      	cmp	r3, #32
 8001960:	d005      	beq.n	800196e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001962:	e01d      	b.n	80019a0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001966:	f043 0308 	orr.w	r3, r3, #8
 800196a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800196c:	e019      	b.n	80019a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001970:	f043 0310 	orr.w	r3, r3, #16
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001976:	e014      	b.n	80019a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197a:	f043 0320 	orr.w	r3, r3, #32
 800197e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001980:	e00f      	b.n	80019a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001984:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001988:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800198a:	e00a      	b.n	80019a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800198c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001992:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001994:	e005      	b.n	80019a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001998:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800199c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800199e:	e000      	b.n	80019a2 <HAL_CAN_IRQHandler+0x336>
            break;
 80019a0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	699a      	ldr	r2, [r3, #24]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80019b0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2204      	movs	r2, #4
 80019b8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d008      	beq.n	80019d2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c6:	431a      	orrs	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f000 f870 	bl	8001ab2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80019d2:	bf00      	nop
 80019d4:	3728      	adds	r7, #40	; 0x28
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019da:	b480      	push	{r7}
 80019dc:	b083      	sub	sp, #12
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr

080019ec <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bc80      	pop	{r7}
 80019fc:	4770      	bx	lr

080019fe <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019fe:	b480      	push	{r7}
 8001a00:	b083      	sub	sp, #12
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr

08001a10 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bc80      	pop	{r7}
 8001a20:	4770      	bx	lr

08001a22 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b083      	sub	sp, #12
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr

08001a34 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bc80      	pop	{r7}
 8001a44:	4770      	bx	lr

08001a46 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a46:	b480      	push	{r7}
 8001a48:	b083      	sub	sp, #12
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr

08001a58 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bc80      	pop	{r7}
 8001a68:	4770      	bx	lr

08001a6a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bc80      	pop	{r7}
 8001a7a:	4770      	bx	lr

08001a7c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr

08001a8e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b083      	sub	sp, #12
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bc80      	pop	{r7}
 8001a9e:	4770      	bx	lr

08001aa0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bc80      	pop	{r7}
 8001ab0:	4770      	bx	lr

08001ab2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b083      	sub	sp, #12
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr

08001ac4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ad4:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ada:	68ba      	ldr	r2, [r7, #8]
 8001adc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001aec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001af4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001af6:	4a04      	ldr	r2, [pc, #16]	; (8001b08 <__NVIC_SetPriorityGrouping+0x44>)
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	60d3      	str	r3, [r2, #12]
}
 8001afc:	bf00      	nop
 8001afe:	3714      	adds	r7, #20
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bc80      	pop	{r7}
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	e000ed00 	.word	0xe000ed00

08001b0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b10:	4b04      	ldr	r3, [pc, #16]	; (8001b24 <__NVIC_GetPriorityGrouping+0x18>)
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	0a1b      	lsrs	r3, r3, #8
 8001b16:	f003 0307 	and.w	r3, r3, #7
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bc80      	pop	{r7}
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	e000ed00 	.word	0xe000ed00

08001b28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	db0b      	blt.n	8001b52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b3a:	79fb      	ldrb	r3, [r7, #7]
 8001b3c:	f003 021f 	and.w	r2, r3, #31
 8001b40:	4906      	ldr	r1, [pc, #24]	; (8001b5c <__NVIC_EnableIRQ+0x34>)
 8001b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b46:	095b      	lsrs	r3, r3, #5
 8001b48:	2001      	movs	r0, #1
 8001b4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bc80      	pop	{r7}
 8001b5a:	4770      	bx	lr
 8001b5c:	e000e100 	.word	0xe000e100

08001b60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	6039      	str	r1, [r7, #0]
 8001b6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	db0a      	blt.n	8001b8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	b2da      	uxtb	r2, r3
 8001b78:	490c      	ldr	r1, [pc, #48]	; (8001bac <__NVIC_SetPriority+0x4c>)
 8001b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7e:	0112      	lsls	r2, r2, #4
 8001b80:	b2d2      	uxtb	r2, r2
 8001b82:	440b      	add	r3, r1
 8001b84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b88:	e00a      	b.n	8001ba0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	4908      	ldr	r1, [pc, #32]	; (8001bb0 <__NVIC_SetPriority+0x50>)
 8001b90:	79fb      	ldrb	r3, [r7, #7]
 8001b92:	f003 030f 	and.w	r3, r3, #15
 8001b96:	3b04      	subs	r3, #4
 8001b98:	0112      	lsls	r2, r2, #4
 8001b9a:	b2d2      	uxtb	r2, r2
 8001b9c:	440b      	add	r3, r1
 8001b9e:	761a      	strb	r2, [r3, #24]
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bc80      	pop	{r7}
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	e000e100 	.word	0xe000e100
 8001bb0:	e000ed00 	.word	0xe000ed00

08001bb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b089      	sub	sp, #36	; 0x24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f003 0307 	and.w	r3, r3, #7
 8001bc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	f1c3 0307 	rsb	r3, r3, #7
 8001bce:	2b04      	cmp	r3, #4
 8001bd0:	bf28      	it	cs
 8001bd2:	2304      	movcs	r3, #4
 8001bd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	3304      	adds	r3, #4
 8001bda:	2b06      	cmp	r3, #6
 8001bdc:	d902      	bls.n	8001be4 <NVIC_EncodePriority+0x30>
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	3b03      	subs	r3, #3
 8001be2:	e000      	b.n	8001be6 <NVIC_EncodePriority+0x32>
 8001be4:	2300      	movs	r3, #0
 8001be6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	43da      	mvns	r2, r3
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	401a      	ands	r2, r3
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	fa01 f303 	lsl.w	r3, r1, r3
 8001c06:	43d9      	mvns	r1, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c0c:	4313      	orrs	r3, r2
         );
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3724      	adds	r7, #36	; 0x24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bc80      	pop	{r7}
 8001c16:	4770      	bx	lr

08001c18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f7ff ff4f 	bl	8001ac4 <__NVIC_SetPriorityGrouping>
}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b086      	sub	sp, #24
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	4603      	mov	r3, r0
 8001c36:	60b9      	str	r1, [r7, #8]
 8001c38:	607a      	str	r2, [r7, #4]
 8001c3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c40:	f7ff ff64 	bl	8001b0c <__NVIC_GetPriorityGrouping>
 8001c44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	68b9      	ldr	r1, [r7, #8]
 8001c4a:	6978      	ldr	r0, [r7, #20]
 8001c4c:	f7ff ffb2 	bl	8001bb4 <NVIC_EncodePriority>
 8001c50:	4602      	mov	r2, r0
 8001c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c56:	4611      	mov	r1, r2
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff ff81 	bl	8001b60 <__NVIC_SetPriority>
}
 8001c5e:	bf00      	nop
 8001c60:	3718      	adds	r7, #24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b082      	sub	sp, #8
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff ff57 	bl	8001b28 <__NVIC_EnableIRQ>
}
 8001c7a:	bf00      	nop
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
	...

08001c84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b08b      	sub	sp, #44	; 0x2c
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c92:	2300      	movs	r3, #0
 8001c94:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c96:	e169      	b.n	8001f6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c98:	2201      	movs	r2, #1
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	69fa      	ldr	r2, [r7, #28]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	f040 8158 	bne.w	8001f66 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	4a9a      	ldr	r2, [pc, #616]	; (8001f24 <HAL_GPIO_Init+0x2a0>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d05e      	beq.n	8001d7e <HAL_GPIO_Init+0xfa>
 8001cc0:	4a98      	ldr	r2, [pc, #608]	; (8001f24 <HAL_GPIO_Init+0x2a0>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d875      	bhi.n	8001db2 <HAL_GPIO_Init+0x12e>
 8001cc6:	4a98      	ldr	r2, [pc, #608]	; (8001f28 <HAL_GPIO_Init+0x2a4>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d058      	beq.n	8001d7e <HAL_GPIO_Init+0xfa>
 8001ccc:	4a96      	ldr	r2, [pc, #600]	; (8001f28 <HAL_GPIO_Init+0x2a4>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d86f      	bhi.n	8001db2 <HAL_GPIO_Init+0x12e>
 8001cd2:	4a96      	ldr	r2, [pc, #600]	; (8001f2c <HAL_GPIO_Init+0x2a8>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d052      	beq.n	8001d7e <HAL_GPIO_Init+0xfa>
 8001cd8:	4a94      	ldr	r2, [pc, #592]	; (8001f2c <HAL_GPIO_Init+0x2a8>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d869      	bhi.n	8001db2 <HAL_GPIO_Init+0x12e>
 8001cde:	4a94      	ldr	r2, [pc, #592]	; (8001f30 <HAL_GPIO_Init+0x2ac>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d04c      	beq.n	8001d7e <HAL_GPIO_Init+0xfa>
 8001ce4:	4a92      	ldr	r2, [pc, #584]	; (8001f30 <HAL_GPIO_Init+0x2ac>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d863      	bhi.n	8001db2 <HAL_GPIO_Init+0x12e>
 8001cea:	4a92      	ldr	r2, [pc, #584]	; (8001f34 <HAL_GPIO_Init+0x2b0>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d046      	beq.n	8001d7e <HAL_GPIO_Init+0xfa>
 8001cf0:	4a90      	ldr	r2, [pc, #576]	; (8001f34 <HAL_GPIO_Init+0x2b0>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d85d      	bhi.n	8001db2 <HAL_GPIO_Init+0x12e>
 8001cf6:	2b12      	cmp	r3, #18
 8001cf8:	d82a      	bhi.n	8001d50 <HAL_GPIO_Init+0xcc>
 8001cfa:	2b12      	cmp	r3, #18
 8001cfc:	d859      	bhi.n	8001db2 <HAL_GPIO_Init+0x12e>
 8001cfe:	a201      	add	r2, pc, #4	; (adr r2, 8001d04 <HAL_GPIO_Init+0x80>)
 8001d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d04:	08001d7f 	.word	0x08001d7f
 8001d08:	08001d59 	.word	0x08001d59
 8001d0c:	08001d6b 	.word	0x08001d6b
 8001d10:	08001dad 	.word	0x08001dad
 8001d14:	08001db3 	.word	0x08001db3
 8001d18:	08001db3 	.word	0x08001db3
 8001d1c:	08001db3 	.word	0x08001db3
 8001d20:	08001db3 	.word	0x08001db3
 8001d24:	08001db3 	.word	0x08001db3
 8001d28:	08001db3 	.word	0x08001db3
 8001d2c:	08001db3 	.word	0x08001db3
 8001d30:	08001db3 	.word	0x08001db3
 8001d34:	08001db3 	.word	0x08001db3
 8001d38:	08001db3 	.word	0x08001db3
 8001d3c:	08001db3 	.word	0x08001db3
 8001d40:	08001db3 	.word	0x08001db3
 8001d44:	08001db3 	.word	0x08001db3
 8001d48:	08001d61 	.word	0x08001d61
 8001d4c:	08001d75 	.word	0x08001d75
 8001d50:	4a79      	ldr	r2, [pc, #484]	; (8001f38 <HAL_GPIO_Init+0x2b4>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d013      	beq.n	8001d7e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d56:	e02c      	b.n	8001db2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	623b      	str	r3, [r7, #32]
          break;
 8001d5e:	e029      	b.n	8001db4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	3304      	adds	r3, #4
 8001d66:	623b      	str	r3, [r7, #32]
          break;
 8001d68:	e024      	b.n	8001db4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	3308      	adds	r3, #8
 8001d70:	623b      	str	r3, [r7, #32]
          break;
 8001d72:	e01f      	b.n	8001db4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	330c      	adds	r3, #12
 8001d7a:	623b      	str	r3, [r7, #32]
          break;
 8001d7c:	e01a      	b.n	8001db4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d102      	bne.n	8001d8c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d86:	2304      	movs	r3, #4
 8001d88:	623b      	str	r3, [r7, #32]
          break;
 8001d8a:	e013      	b.n	8001db4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d105      	bne.n	8001da0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d94:	2308      	movs	r3, #8
 8001d96:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	69fa      	ldr	r2, [r7, #28]
 8001d9c:	611a      	str	r2, [r3, #16]
          break;
 8001d9e:	e009      	b.n	8001db4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001da0:	2308      	movs	r3, #8
 8001da2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	69fa      	ldr	r2, [r7, #28]
 8001da8:	615a      	str	r2, [r3, #20]
          break;
 8001daa:	e003      	b.n	8001db4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001dac:	2300      	movs	r3, #0
 8001dae:	623b      	str	r3, [r7, #32]
          break;
 8001db0:	e000      	b.n	8001db4 <HAL_GPIO_Init+0x130>
          break;
 8001db2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	2bff      	cmp	r3, #255	; 0xff
 8001db8:	d801      	bhi.n	8001dbe <HAL_GPIO_Init+0x13a>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	e001      	b.n	8001dc2 <HAL_GPIO_Init+0x13e>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	2bff      	cmp	r3, #255	; 0xff
 8001dc8:	d802      	bhi.n	8001dd0 <HAL_GPIO_Init+0x14c>
 8001dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	e002      	b.n	8001dd6 <HAL_GPIO_Init+0x152>
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd2:	3b08      	subs	r3, #8
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	210f      	movs	r1, #15
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	fa01 f303 	lsl.w	r3, r1, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	401a      	ands	r2, r3
 8001de8:	6a39      	ldr	r1, [r7, #32]
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	fa01 f303 	lsl.w	r3, r1, r3
 8001df0:	431a      	orrs	r2, r3
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f000 80b1 	beq.w	8001f66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e04:	4b4d      	ldr	r3, [pc, #308]	; (8001f3c <HAL_GPIO_Init+0x2b8>)
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	4a4c      	ldr	r2, [pc, #304]	; (8001f3c <HAL_GPIO_Init+0x2b8>)
 8001e0a:	f043 0301 	orr.w	r3, r3, #1
 8001e0e:	6193      	str	r3, [r2, #24]
 8001e10:	4b4a      	ldr	r3, [pc, #296]	; (8001f3c <HAL_GPIO_Init+0x2b8>)
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	60bb      	str	r3, [r7, #8]
 8001e1a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e1c:	4a48      	ldr	r2, [pc, #288]	; (8001f40 <HAL_GPIO_Init+0x2bc>)
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	089b      	lsrs	r3, r3, #2
 8001e22:	3302      	adds	r3, #2
 8001e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e28:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	f003 0303 	and.w	r3, r3, #3
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	220f      	movs	r2, #15
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a40      	ldr	r2, [pc, #256]	; (8001f44 <HAL_GPIO_Init+0x2c0>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d013      	beq.n	8001e70 <HAL_GPIO_Init+0x1ec>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a3f      	ldr	r2, [pc, #252]	; (8001f48 <HAL_GPIO_Init+0x2c4>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d00d      	beq.n	8001e6c <HAL_GPIO_Init+0x1e8>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a3e      	ldr	r2, [pc, #248]	; (8001f4c <HAL_GPIO_Init+0x2c8>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d007      	beq.n	8001e68 <HAL_GPIO_Init+0x1e4>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a3d      	ldr	r2, [pc, #244]	; (8001f50 <HAL_GPIO_Init+0x2cc>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d101      	bne.n	8001e64 <HAL_GPIO_Init+0x1e0>
 8001e60:	2303      	movs	r3, #3
 8001e62:	e006      	b.n	8001e72 <HAL_GPIO_Init+0x1ee>
 8001e64:	2304      	movs	r3, #4
 8001e66:	e004      	b.n	8001e72 <HAL_GPIO_Init+0x1ee>
 8001e68:	2302      	movs	r3, #2
 8001e6a:	e002      	b.n	8001e72 <HAL_GPIO_Init+0x1ee>
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e000      	b.n	8001e72 <HAL_GPIO_Init+0x1ee>
 8001e70:	2300      	movs	r3, #0
 8001e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e74:	f002 0203 	and.w	r2, r2, #3
 8001e78:	0092      	lsls	r2, r2, #2
 8001e7a:	4093      	lsls	r3, r2
 8001e7c:	68fa      	ldr	r2, [r7, #12]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e82:	492f      	ldr	r1, [pc, #188]	; (8001f40 <HAL_GPIO_Init+0x2bc>)
 8001e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e86:	089b      	lsrs	r3, r3, #2
 8001e88:	3302      	adds	r3, #2
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d006      	beq.n	8001eaa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e9c:	4b2d      	ldr	r3, [pc, #180]	; (8001f54 <HAL_GPIO_Init+0x2d0>)
 8001e9e:	689a      	ldr	r2, [r3, #8]
 8001ea0:	492c      	ldr	r1, [pc, #176]	; (8001f54 <HAL_GPIO_Init+0x2d0>)
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	608b      	str	r3, [r1, #8]
 8001ea8:	e006      	b.n	8001eb8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001eaa:	4b2a      	ldr	r3, [pc, #168]	; (8001f54 <HAL_GPIO_Init+0x2d0>)
 8001eac:	689a      	ldr	r2, [r3, #8]
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	4928      	ldr	r1, [pc, #160]	; (8001f54 <HAL_GPIO_Init+0x2d0>)
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d006      	beq.n	8001ed2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ec4:	4b23      	ldr	r3, [pc, #140]	; (8001f54 <HAL_GPIO_Init+0x2d0>)
 8001ec6:	68da      	ldr	r2, [r3, #12]
 8001ec8:	4922      	ldr	r1, [pc, #136]	; (8001f54 <HAL_GPIO_Init+0x2d0>)
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	60cb      	str	r3, [r1, #12]
 8001ed0:	e006      	b.n	8001ee0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ed2:	4b20      	ldr	r3, [pc, #128]	; (8001f54 <HAL_GPIO_Init+0x2d0>)
 8001ed4:	68da      	ldr	r2, [r3, #12]
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	491e      	ldr	r1, [pc, #120]	; (8001f54 <HAL_GPIO_Init+0x2d0>)
 8001edc:	4013      	ands	r3, r2
 8001ede:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d006      	beq.n	8001efa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001eec:	4b19      	ldr	r3, [pc, #100]	; (8001f54 <HAL_GPIO_Init+0x2d0>)
 8001eee:	685a      	ldr	r2, [r3, #4]
 8001ef0:	4918      	ldr	r1, [pc, #96]	; (8001f54 <HAL_GPIO_Init+0x2d0>)
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	604b      	str	r3, [r1, #4]
 8001ef8:	e006      	b.n	8001f08 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001efa:	4b16      	ldr	r3, [pc, #88]	; (8001f54 <HAL_GPIO_Init+0x2d0>)
 8001efc:	685a      	ldr	r2, [r3, #4]
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	43db      	mvns	r3, r3
 8001f02:	4914      	ldr	r1, [pc, #80]	; (8001f54 <HAL_GPIO_Init+0x2d0>)
 8001f04:	4013      	ands	r3, r2
 8001f06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d021      	beq.n	8001f58 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f14:	4b0f      	ldr	r3, [pc, #60]	; (8001f54 <HAL_GPIO_Init+0x2d0>)
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	490e      	ldr	r1, [pc, #56]	; (8001f54 <HAL_GPIO_Init+0x2d0>)
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	600b      	str	r3, [r1, #0]
 8001f20:	e021      	b.n	8001f66 <HAL_GPIO_Init+0x2e2>
 8001f22:	bf00      	nop
 8001f24:	10320000 	.word	0x10320000
 8001f28:	10310000 	.word	0x10310000
 8001f2c:	10220000 	.word	0x10220000
 8001f30:	10210000 	.word	0x10210000
 8001f34:	10120000 	.word	0x10120000
 8001f38:	10110000 	.word	0x10110000
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	40010000 	.word	0x40010000
 8001f44:	40010800 	.word	0x40010800
 8001f48:	40010c00 	.word	0x40010c00
 8001f4c:	40011000 	.word	0x40011000
 8001f50:	40011400 	.word	0x40011400
 8001f54:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f58:	4b0b      	ldr	r3, [pc, #44]	; (8001f88 <HAL_GPIO_Init+0x304>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	4909      	ldr	r1, [pc, #36]	; (8001f88 <HAL_GPIO_Init+0x304>)
 8001f62:	4013      	ands	r3, r2
 8001f64:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f68:	3301      	adds	r3, #1
 8001f6a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f72:	fa22 f303 	lsr.w	r3, r2, r3
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f47f ae8e 	bne.w	8001c98 <HAL_GPIO_Init+0x14>
  }
}
 8001f7c:	bf00      	nop
 8001f7e:	bf00      	nop
 8001f80:	372c      	adds	r7, #44	; 0x2c
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bc80      	pop	{r7}
 8001f86:	4770      	bx	lr
 8001f88:	40010400 	.word	0x40010400

08001f8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	460b      	mov	r3, r1
 8001f96:	807b      	strh	r3, [r7, #2]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f9c:	787b      	ldrb	r3, [r7, #1]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fa2:	887a      	ldrh	r2, [r7, #2]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001fa8:	e003      	b.n	8001fb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001faa:	887b      	ldrh	r3, [r7, #2]
 8001fac:	041a      	lsls	r2, r3, #16
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	611a      	str	r2, [r3, #16]
}
 8001fb2:	bf00      	nop
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bc80      	pop	{r7}
 8001fba:	4770      	bx	lr

08001fbc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fce:	887a      	ldrh	r2, [r7, #2]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	041a      	lsls	r2, r3, #16
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	43d9      	mvns	r1, r3
 8001fda:	887b      	ldrh	r3, [r7, #2]
 8001fdc:	400b      	ands	r3, r1
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	611a      	str	r2, [r3, #16]
}
 8001fe4:	bf00      	nop
 8001fe6:	3714      	adds	r7, #20
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bc80      	pop	{r7}
 8001fec:	4770      	bx	lr
	...

08001ff0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e272      	b.n	80024e8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b00      	cmp	r3, #0
 800200c:	f000 8087 	beq.w	800211e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002010:	4b92      	ldr	r3, [pc, #584]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f003 030c 	and.w	r3, r3, #12
 8002018:	2b04      	cmp	r3, #4
 800201a:	d00c      	beq.n	8002036 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800201c:	4b8f      	ldr	r3, [pc, #572]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f003 030c 	and.w	r3, r3, #12
 8002024:	2b08      	cmp	r3, #8
 8002026:	d112      	bne.n	800204e <HAL_RCC_OscConfig+0x5e>
 8002028:	4b8c      	ldr	r3, [pc, #560]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002034:	d10b      	bne.n	800204e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002036:	4b89      	ldr	r3, [pc, #548]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d06c      	beq.n	800211c <HAL_RCC_OscConfig+0x12c>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d168      	bne.n	800211c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e24c      	b.n	80024e8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002056:	d106      	bne.n	8002066 <HAL_RCC_OscConfig+0x76>
 8002058:	4b80      	ldr	r3, [pc, #512]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a7f      	ldr	r2, [pc, #508]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 800205e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002062:	6013      	str	r3, [r2, #0]
 8002064:	e02e      	b.n	80020c4 <HAL_RCC_OscConfig+0xd4>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d10c      	bne.n	8002088 <HAL_RCC_OscConfig+0x98>
 800206e:	4b7b      	ldr	r3, [pc, #492]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a7a      	ldr	r2, [pc, #488]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 8002074:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002078:	6013      	str	r3, [r2, #0]
 800207a:	4b78      	ldr	r3, [pc, #480]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a77      	ldr	r2, [pc, #476]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 8002080:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002084:	6013      	str	r3, [r2, #0]
 8002086:	e01d      	b.n	80020c4 <HAL_RCC_OscConfig+0xd4>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002090:	d10c      	bne.n	80020ac <HAL_RCC_OscConfig+0xbc>
 8002092:	4b72      	ldr	r3, [pc, #456]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a71      	ldr	r2, [pc, #452]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 8002098:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800209c:	6013      	str	r3, [r2, #0]
 800209e:	4b6f      	ldr	r3, [pc, #444]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a6e      	ldr	r2, [pc, #440]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 80020a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a8:	6013      	str	r3, [r2, #0]
 80020aa:	e00b      	b.n	80020c4 <HAL_RCC_OscConfig+0xd4>
 80020ac:	4b6b      	ldr	r3, [pc, #428]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a6a      	ldr	r2, [pc, #424]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 80020b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020b6:	6013      	str	r3, [r2, #0]
 80020b8:	4b68      	ldr	r3, [pc, #416]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a67      	ldr	r2, [pc, #412]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 80020be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d013      	beq.n	80020f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020cc:	f7fe ffca 	bl	8001064 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020d4:	f7fe ffc6 	bl	8001064 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b64      	cmp	r3, #100	; 0x64
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e200      	b.n	80024e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e6:	4b5d      	ldr	r3, [pc, #372]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d0f0      	beq.n	80020d4 <HAL_RCC_OscConfig+0xe4>
 80020f2:	e014      	b.n	800211e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f4:	f7fe ffb6 	bl	8001064 <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020fc:	f7fe ffb2 	bl	8001064 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b64      	cmp	r3, #100	; 0x64
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e1ec      	b.n	80024e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800210e:	4b53      	ldr	r3, [pc, #332]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1f0      	bne.n	80020fc <HAL_RCC_OscConfig+0x10c>
 800211a:	e000      	b.n	800211e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800211c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d063      	beq.n	80021f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800212a:	4b4c      	ldr	r3, [pc, #304]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f003 030c 	and.w	r3, r3, #12
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00b      	beq.n	800214e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002136:	4b49      	ldr	r3, [pc, #292]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f003 030c 	and.w	r3, r3, #12
 800213e:	2b08      	cmp	r3, #8
 8002140:	d11c      	bne.n	800217c <HAL_RCC_OscConfig+0x18c>
 8002142:	4b46      	ldr	r3, [pc, #280]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d116      	bne.n	800217c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800214e:	4b43      	ldr	r3, [pc, #268]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d005      	beq.n	8002166 <HAL_RCC_OscConfig+0x176>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d001      	beq.n	8002166 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e1c0      	b.n	80024e8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002166:	4b3d      	ldr	r3, [pc, #244]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	4939      	ldr	r1, [pc, #228]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 8002176:	4313      	orrs	r3, r2
 8002178:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800217a:	e03a      	b.n	80021f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	691b      	ldr	r3, [r3, #16]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d020      	beq.n	80021c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002184:	4b36      	ldr	r3, [pc, #216]	; (8002260 <HAL_RCC_OscConfig+0x270>)
 8002186:	2201      	movs	r2, #1
 8002188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218a:	f7fe ff6b 	bl	8001064 <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002190:	e008      	b.n	80021a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002192:	f7fe ff67 	bl	8001064 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e1a1      	b.n	80024e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a4:	4b2d      	ldr	r3, [pc, #180]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0302 	and.w	r3, r3, #2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d0f0      	beq.n	8002192 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b0:	4b2a      	ldr	r3, [pc, #168]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	4927      	ldr	r1, [pc, #156]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	600b      	str	r3, [r1, #0]
 80021c4:	e015      	b.n	80021f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021c6:	4b26      	ldr	r3, [pc, #152]	; (8002260 <HAL_RCC_OscConfig+0x270>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021cc:	f7fe ff4a 	bl	8001064 <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021d4:	f7fe ff46 	bl	8001064 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e180      	b.n	80024e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021e6:	4b1d      	ldr	r3, [pc, #116]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1f0      	bne.n	80021d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0308 	and.w	r3, r3, #8
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d03a      	beq.n	8002274 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d019      	beq.n	800223a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002206:	4b17      	ldr	r3, [pc, #92]	; (8002264 <HAL_RCC_OscConfig+0x274>)
 8002208:	2201      	movs	r2, #1
 800220a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800220c:	f7fe ff2a 	bl	8001064 <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002214:	f7fe ff26 	bl	8001064 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e160      	b.n	80024e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002226:	4b0d      	ldr	r3, [pc, #52]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 8002228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d0f0      	beq.n	8002214 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002232:	2001      	movs	r0, #1
 8002234:	f000 fafe 	bl	8002834 <RCC_Delay>
 8002238:	e01c      	b.n	8002274 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800223a:	4b0a      	ldr	r3, [pc, #40]	; (8002264 <HAL_RCC_OscConfig+0x274>)
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002240:	f7fe ff10 	bl	8001064 <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002246:	e00f      	b.n	8002268 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002248:	f7fe ff0c 	bl	8001064 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d908      	bls.n	8002268 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e146      	b.n	80024e8 <HAL_RCC_OscConfig+0x4f8>
 800225a:	bf00      	nop
 800225c:	40021000 	.word	0x40021000
 8002260:	42420000 	.word	0x42420000
 8002264:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002268:	4b92      	ldr	r3, [pc, #584]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 800226a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1e9      	bne.n	8002248 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0304 	and.w	r3, r3, #4
 800227c:	2b00      	cmp	r3, #0
 800227e:	f000 80a6 	beq.w	80023ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002282:	2300      	movs	r3, #0
 8002284:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002286:	4b8b      	ldr	r3, [pc, #556]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 8002288:	69db      	ldr	r3, [r3, #28]
 800228a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10d      	bne.n	80022ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002292:	4b88      	ldr	r3, [pc, #544]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	4a87      	ldr	r2, [pc, #540]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 8002298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800229c:	61d3      	str	r3, [r2, #28]
 800229e:	4b85      	ldr	r3, [pc, #532]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a6:	60bb      	str	r3, [r7, #8]
 80022a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022aa:	2301      	movs	r3, #1
 80022ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ae:	4b82      	ldr	r3, [pc, #520]	; (80024b8 <HAL_RCC_OscConfig+0x4c8>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d118      	bne.n	80022ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ba:	4b7f      	ldr	r3, [pc, #508]	; (80024b8 <HAL_RCC_OscConfig+0x4c8>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a7e      	ldr	r2, [pc, #504]	; (80024b8 <HAL_RCC_OscConfig+0x4c8>)
 80022c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022c6:	f7fe fecd 	bl	8001064 <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ce:	f7fe fec9 	bl	8001064 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b64      	cmp	r3, #100	; 0x64
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e103      	b.n	80024e8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e0:	4b75      	ldr	r3, [pc, #468]	; (80024b8 <HAL_RCC_OscConfig+0x4c8>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0f0      	beq.n	80022ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d106      	bne.n	8002302 <HAL_RCC_OscConfig+0x312>
 80022f4:	4b6f      	ldr	r3, [pc, #444]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	4a6e      	ldr	r2, [pc, #440]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 80022fa:	f043 0301 	orr.w	r3, r3, #1
 80022fe:	6213      	str	r3, [r2, #32]
 8002300:	e02d      	b.n	800235e <HAL_RCC_OscConfig+0x36e>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d10c      	bne.n	8002324 <HAL_RCC_OscConfig+0x334>
 800230a:	4b6a      	ldr	r3, [pc, #424]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	4a69      	ldr	r2, [pc, #420]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 8002310:	f023 0301 	bic.w	r3, r3, #1
 8002314:	6213      	str	r3, [r2, #32]
 8002316:	4b67      	ldr	r3, [pc, #412]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 8002318:	6a1b      	ldr	r3, [r3, #32]
 800231a:	4a66      	ldr	r2, [pc, #408]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 800231c:	f023 0304 	bic.w	r3, r3, #4
 8002320:	6213      	str	r3, [r2, #32]
 8002322:	e01c      	b.n	800235e <HAL_RCC_OscConfig+0x36e>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	2b05      	cmp	r3, #5
 800232a:	d10c      	bne.n	8002346 <HAL_RCC_OscConfig+0x356>
 800232c:	4b61      	ldr	r3, [pc, #388]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	4a60      	ldr	r2, [pc, #384]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 8002332:	f043 0304 	orr.w	r3, r3, #4
 8002336:	6213      	str	r3, [r2, #32]
 8002338:	4b5e      	ldr	r3, [pc, #376]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 800233a:	6a1b      	ldr	r3, [r3, #32]
 800233c:	4a5d      	ldr	r2, [pc, #372]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 800233e:	f043 0301 	orr.w	r3, r3, #1
 8002342:	6213      	str	r3, [r2, #32]
 8002344:	e00b      	b.n	800235e <HAL_RCC_OscConfig+0x36e>
 8002346:	4b5b      	ldr	r3, [pc, #364]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 8002348:	6a1b      	ldr	r3, [r3, #32]
 800234a:	4a5a      	ldr	r2, [pc, #360]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 800234c:	f023 0301 	bic.w	r3, r3, #1
 8002350:	6213      	str	r3, [r2, #32]
 8002352:	4b58      	ldr	r3, [pc, #352]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	4a57      	ldr	r2, [pc, #348]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 8002358:	f023 0304 	bic.w	r3, r3, #4
 800235c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d015      	beq.n	8002392 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002366:	f7fe fe7d 	bl	8001064 <HAL_GetTick>
 800236a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800236c:	e00a      	b.n	8002384 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800236e:	f7fe fe79 	bl	8001064 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	f241 3288 	movw	r2, #5000	; 0x1388
 800237c:	4293      	cmp	r3, r2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e0b1      	b.n	80024e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002384:	4b4b      	ldr	r3, [pc, #300]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0ee      	beq.n	800236e <HAL_RCC_OscConfig+0x37e>
 8002390:	e014      	b.n	80023bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002392:	f7fe fe67 	bl	8001064 <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002398:	e00a      	b.n	80023b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800239a:	f7fe fe63 	bl	8001064 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e09b      	b.n	80024e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b0:	4b40      	ldr	r3, [pc, #256]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 80023b2:	6a1b      	ldr	r3, [r3, #32]
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1ee      	bne.n	800239a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023bc:	7dfb      	ldrb	r3, [r7, #23]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d105      	bne.n	80023ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023c2:	4b3c      	ldr	r3, [pc, #240]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	4a3b      	ldr	r2, [pc, #236]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 80023c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f000 8087 	beq.w	80024e6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023d8:	4b36      	ldr	r3, [pc, #216]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f003 030c 	and.w	r3, r3, #12
 80023e0:	2b08      	cmp	r3, #8
 80023e2:	d061      	beq.n	80024a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	69db      	ldr	r3, [r3, #28]
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d146      	bne.n	800247a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ec:	4b33      	ldr	r3, [pc, #204]	; (80024bc <HAL_RCC_OscConfig+0x4cc>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f2:	f7fe fe37 	bl	8001064 <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023f8:	e008      	b.n	800240c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023fa:	f7fe fe33 	bl	8001064 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e06d      	b.n	80024e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800240c:	4b29      	ldr	r3, [pc, #164]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1f0      	bne.n	80023fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002420:	d108      	bne.n	8002434 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002422:	4b24      	ldr	r3, [pc, #144]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	4921      	ldr	r1, [pc, #132]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 8002430:	4313      	orrs	r3, r2
 8002432:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002434:	4b1f      	ldr	r3, [pc, #124]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a19      	ldr	r1, [r3, #32]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002444:	430b      	orrs	r3, r1
 8002446:	491b      	ldr	r1, [pc, #108]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 8002448:	4313      	orrs	r3, r2
 800244a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800244c:	4b1b      	ldr	r3, [pc, #108]	; (80024bc <HAL_RCC_OscConfig+0x4cc>)
 800244e:	2201      	movs	r2, #1
 8002450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002452:	f7fe fe07 	bl	8001064 <HAL_GetTick>
 8002456:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002458:	e008      	b.n	800246c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800245a:	f7fe fe03 	bl	8001064 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e03d      	b.n	80024e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800246c:	4b11      	ldr	r3, [pc, #68]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d0f0      	beq.n	800245a <HAL_RCC_OscConfig+0x46a>
 8002478:	e035      	b.n	80024e6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800247a:	4b10      	ldr	r3, [pc, #64]	; (80024bc <HAL_RCC_OscConfig+0x4cc>)
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002480:	f7fe fdf0 	bl	8001064 <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002488:	f7fe fdec 	bl	8001064 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e026      	b.n	80024e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800249a:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1f0      	bne.n	8002488 <HAL_RCC_OscConfig+0x498>
 80024a6:	e01e      	b.n	80024e6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	69db      	ldr	r3, [r3, #28]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d107      	bne.n	80024c0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e019      	b.n	80024e8 <HAL_RCC_OscConfig+0x4f8>
 80024b4:	40021000 	.word	0x40021000
 80024b8:	40007000 	.word	0x40007000
 80024bc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024c0:	4b0b      	ldr	r3, [pc, #44]	; (80024f0 <HAL_RCC_OscConfig+0x500>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d106      	bne.n	80024e2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024de:	429a      	cmp	r2, r3
 80024e0:	d001      	beq.n	80024e6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e000      	b.n	80024e8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3718      	adds	r7, #24
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40021000 	.word	0x40021000

080024f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d101      	bne.n	8002508 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e0d0      	b.n	80026aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002508:	4b6a      	ldr	r3, [pc, #424]	; (80026b4 <HAL_RCC_ClockConfig+0x1c0>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0307 	and.w	r3, r3, #7
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	429a      	cmp	r2, r3
 8002514:	d910      	bls.n	8002538 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002516:	4b67      	ldr	r3, [pc, #412]	; (80026b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f023 0207 	bic.w	r2, r3, #7
 800251e:	4965      	ldr	r1, [pc, #404]	; (80026b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	4313      	orrs	r3, r2
 8002524:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002526:	4b63      	ldr	r3, [pc, #396]	; (80026b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	429a      	cmp	r2, r3
 8002532:	d001      	beq.n	8002538 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e0b8      	b.n	80026aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d020      	beq.n	8002586 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0304 	and.w	r3, r3, #4
 800254c:	2b00      	cmp	r3, #0
 800254e:	d005      	beq.n	800255c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002550:	4b59      	ldr	r3, [pc, #356]	; (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	4a58      	ldr	r2, [pc, #352]	; (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002556:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800255a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0308 	and.w	r3, r3, #8
 8002564:	2b00      	cmp	r3, #0
 8002566:	d005      	beq.n	8002574 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002568:	4b53      	ldr	r3, [pc, #332]	; (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	4a52      	ldr	r2, [pc, #328]	; (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 800256e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002572:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002574:	4b50      	ldr	r3, [pc, #320]	; (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	494d      	ldr	r1, [pc, #308]	; (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002582:	4313      	orrs	r3, r2
 8002584:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	2b00      	cmp	r3, #0
 8002590:	d040      	beq.n	8002614 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d107      	bne.n	80025aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800259a:	4b47      	ldr	r3, [pc, #284]	; (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d115      	bne.n	80025d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e07f      	b.n	80026aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d107      	bne.n	80025c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025b2:	4b41      	ldr	r3, [pc, #260]	; (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d109      	bne.n	80025d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e073      	b.n	80026aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c2:	4b3d      	ldr	r3, [pc, #244]	; (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e06b      	b.n	80026aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025d2:	4b39      	ldr	r3, [pc, #228]	; (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f023 0203 	bic.w	r2, r3, #3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	4936      	ldr	r1, [pc, #216]	; (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025e4:	f7fe fd3e 	bl	8001064 <HAL_GetTick>
 80025e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ea:	e00a      	b.n	8002602 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025ec:	f7fe fd3a 	bl	8001064 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e053      	b.n	80026aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002602:	4b2d      	ldr	r3, [pc, #180]	; (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f003 020c 	and.w	r2, r3, #12
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	429a      	cmp	r2, r3
 8002612:	d1eb      	bne.n	80025ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002614:	4b27      	ldr	r3, [pc, #156]	; (80026b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0307 	and.w	r3, r3, #7
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	429a      	cmp	r2, r3
 8002620:	d210      	bcs.n	8002644 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002622:	4b24      	ldr	r3, [pc, #144]	; (80026b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f023 0207 	bic.w	r2, r3, #7
 800262a:	4922      	ldr	r1, [pc, #136]	; (80026b4 <HAL_RCC_ClockConfig+0x1c0>)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	4313      	orrs	r3, r2
 8002630:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002632:	4b20      	ldr	r3, [pc, #128]	; (80026b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	429a      	cmp	r2, r3
 800263e:	d001      	beq.n	8002644 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e032      	b.n	80026aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0304 	and.w	r3, r3, #4
 800264c:	2b00      	cmp	r3, #0
 800264e:	d008      	beq.n	8002662 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002650:	4b19      	ldr	r3, [pc, #100]	; (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	4916      	ldr	r1, [pc, #88]	; (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 800265e:	4313      	orrs	r3, r2
 8002660:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0308 	and.w	r3, r3, #8
 800266a:	2b00      	cmp	r3, #0
 800266c:	d009      	beq.n	8002682 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800266e:	4b12      	ldr	r3, [pc, #72]	; (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	490e      	ldr	r1, [pc, #56]	; (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 800267e:	4313      	orrs	r3, r2
 8002680:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002682:	f000 f821 	bl	80026c8 <HAL_RCC_GetSysClockFreq>
 8002686:	4602      	mov	r2, r0
 8002688:	4b0b      	ldr	r3, [pc, #44]	; (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	091b      	lsrs	r3, r3, #4
 800268e:	f003 030f 	and.w	r3, r3, #15
 8002692:	490a      	ldr	r1, [pc, #40]	; (80026bc <HAL_RCC_ClockConfig+0x1c8>)
 8002694:	5ccb      	ldrb	r3, [r1, r3]
 8002696:	fa22 f303 	lsr.w	r3, r2, r3
 800269a:	4a09      	ldr	r2, [pc, #36]	; (80026c0 <HAL_RCC_ClockConfig+0x1cc>)
 800269c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800269e:	4b09      	ldr	r3, [pc, #36]	; (80026c4 <HAL_RCC_ClockConfig+0x1d0>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fe fb8e 	bl	8000dc4 <HAL_InitTick>

  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40022000 	.word	0x40022000
 80026b8:	40021000 	.word	0x40021000
 80026bc:	08006620 	.word	0x08006620
 80026c0:	20000000 	.word	0x20000000
 80026c4:	20000004 	.word	0x20000004

080026c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b087      	sub	sp, #28
 80026cc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026ce:	2300      	movs	r3, #0
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	2300      	movs	r3, #0
 80026d4:	60bb      	str	r3, [r7, #8]
 80026d6:	2300      	movs	r3, #0
 80026d8:	617b      	str	r3, [r7, #20]
 80026da:	2300      	movs	r3, #0
 80026dc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80026de:	2300      	movs	r3, #0
 80026e0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026e2:	4b1e      	ldr	r3, [pc, #120]	; (800275c <HAL_RCC_GetSysClockFreq+0x94>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f003 030c 	and.w	r3, r3, #12
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	d002      	beq.n	80026f8 <HAL_RCC_GetSysClockFreq+0x30>
 80026f2:	2b08      	cmp	r3, #8
 80026f4:	d003      	beq.n	80026fe <HAL_RCC_GetSysClockFreq+0x36>
 80026f6:	e027      	b.n	8002748 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026f8:	4b19      	ldr	r3, [pc, #100]	; (8002760 <HAL_RCC_GetSysClockFreq+0x98>)
 80026fa:	613b      	str	r3, [r7, #16]
      break;
 80026fc:	e027      	b.n	800274e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	0c9b      	lsrs	r3, r3, #18
 8002702:	f003 030f 	and.w	r3, r3, #15
 8002706:	4a17      	ldr	r2, [pc, #92]	; (8002764 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002708:	5cd3      	ldrb	r3, [r2, r3]
 800270a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d010      	beq.n	8002738 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002716:	4b11      	ldr	r3, [pc, #68]	; (800275c <HAL_RCC_GetSysClockFreq+0x94>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	0c5b      	lsrs	r3, r3, #17
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	4a11      	ldr	r2, [pc, #68]	; (8002768 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002722:	5cd3      	ldrb	r3, [r2, r3]
 8002724:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a0d      	ldr	r2, [pc, #52]	; (8002760 <HAL_RCC_GetSysClockFreq+0x98>)
 800272a:	fb03 f202 	mul.w	r2, r3, r2
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	fbb2 f3f3 	udiv	r3, r2, r3
 8002734:	617b      	str	r3, [r7, #20]
 8002736:	e004      	b.n	8002742 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a0c      	ldr	r2, [pc, #48]	; (800276c <HAL_RCC_GetSysClockFreq+0xa4>)
 800273c:	fb02 f303 	mul.w	r3, r2, r3
 8002740:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	613b      	str	r3, [r7, #16]
      break;
 8002746:	e002      	b.n	800274e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002748:	4b05      	ldr	r3, [pc, #20]	; (8002760 <HAL_RCC_GetSysClockFreq+0x98>)
 800274a:	613b      	str	r3, [r7, #16]
      break;
 800274c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800274e:	693b      	ldr	r3, [r7, #16]
}
 8002750:	4618      	mov	r0, r3
 8002752:	371c      	adds	r7, #28
 8002754:	46bd      	mov	sp, r7
 8002756:	bc80      	pop	{r7}
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	40021000 	.word	0x40021000
 8002760:	007a1200 	.word	0x007a1200
 8002764:	08006638 	.word	0x08006638
 8002768:	08006648 	.word	0x08006648
 800276c:	003d0900 	.word	0x003d0900

08002770 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002774:	4b02      	ldr	r3, [pc, #8]	; (8002780 <HAL_RCC_GetHCLKFreq+0x10>)
 8002776:	681b      	ldr	r3, [r3, #0]
}
 8002778:	4618      	mov	r0, r3
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr
 8002780:	20000000 	.word	0x20000000

08002784 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002788:	f7ff fff2 	bl	8002770 <HAL_RCC_GetHCLKFreq>
 800278c:	4602      	mov	r2, r0
 800278e:	4b05      	ldr	r3, [pc, #20]	; (80027a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	0a1b      	lsrs	r3, r3, #8
 8002794:	f003 0307 	and.w	r3, r3, #7
 8002798:	4903      	ldr	r1, [pc, #12]	; (80027a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800279a:	5ccb      	ldrb	r3, [r1, r3]
 800279c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40021000 	.word	0x40021000
 80027a8:	08006630 	.word	0x08006630

080027ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027b0:	f7ff ffde 	bl	8002770 <HAL_RCC_GetHCLKFreq>
 80027b4:	4602      	mov	r2, r0
 80027b6:	4b05      	ldr	r3, [pc, #20]	; (80027cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	0adb      	lsrs	r3, r3, #11
 80027bc:	f003 0307 	and.w	r3, r3, #7
 80027c0:	4903      	ldr	r1, [pc, #12]	; (80027d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027c2:	5ccb      	ldrb	r3, [r1, r3]
 80027c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40021000 	.word	0x40021000
 80027d0:	08006630 	.word	0x08006630

080027d4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	220f      	movs	r2, #15
 80027e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80027e4:	4b11      	ldr	r3, [pc, #68]	; (800282c <HAL_RCC_GetClockConfig+0x58>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f003 0203 	and.w	r2, r3, #3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80027f0:	4b0e      	ldr	r3, [pc, #56]	; (800282c <HAL_RCC_GetClockConfig+0x58>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80027fc:	4b0b      	ldr	r3, [pc, #44]	; (800282c <HAL_RCC_GetClockConfig+0x58>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002808:	4b08      	ldr	r3, [pc, #32]	; (800282c <HAL_RCC_GetClockConfig+0x58>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	08db      	lsrs	r3, r3, #3
 800280e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002816:	4b06      	ldr	r3, [pc, #24]	; (8002830 <HAL_RCC_GetClockConfig+0x5c>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0207 	and.w	r2, r3, #7
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002822:	bf00      	nop
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	bc80      	pop	{r7}
 800282a:	4770      	bx	lr
 800282c:	40021000 	.word	0x40021000
 8002830:	40022000 	.word	0x40022000

08002834 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800283c:	4b0a      	ldr	r3, [pc, #40]	; (8002868 <RCC_Delay+0x34>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a0a      	ldr	r2, [pc, #40]	; (800286c <RCC_Delay+0x38>)
 8002842:	fba2 2303 	umull	r2, r3, r2, r3
 8002846:	0a5b      	lsrs	r3, r3, #9
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	fb02 f303 	mul.w	r3, r2, r3
 800284e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002850:	bf00      	nop
  }
  while (Delay --);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	1e5a      	subs	r2, r3, #1
 8002856:	60fa      	str	r2, [r7, #12]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1f9      	bne.n	8002850 <RCC_Delay+0x1c>
}
 800285c:	bf00      	nop
 800285e:	bf00      	nop
 8002860:	3714      	adds	r7, #20
 8002862:	46bd      	mov	sp, r7
 8002864:	bc80      	pop	{r7}
 8002866:	4770      	bx	lr
 8002868:	20000000 	.word	0x20000000
 800286c:	10624dd3 	.word	0x10624dd3

08002870 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e041      	b.n	8002906 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d106      	bne.n	800289c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7fe fa2a 	bl	8000cf0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2202      	movs	r2, #2
 80028a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3304      	adds	r3, #4
 80028ac:	4619      	mov	r1, r3
 80028ae:	4610      	mov	r0, r2
 80028b0:	f000 fa74 	bl	8002d9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
	...

08002910 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b01      	cmp	r3, #1
 8002922:	d001      	beq.n	8002928 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e03a      	b.n	800299e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2202      	movs	r2, #2
 800292c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68da      	ldr	r2, [r3, #12]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f042 0201 	orr.w	r2, r2, #1
 800293e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a18      	ldr	r2, [pc, #96]	; (80029a8 <HAL_TIM_Base_Start_IT+0x98>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d00e      	beq.n	8002968 <HAL_TIM_Base_Start_IT+0x58>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002952:	d009      	beq.n	8002968 <HAL_TIM_Base_Start_IT+0x58>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a14      	ldr	r2, [pc, #80]	; (80029ac <HAL_TIM_Base_Start_IT+0x9c>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d004      	beq.n	8002968 <HAL_TIM_Base_Start_IT+0x58>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a13      	ldr	r2, [pc, #76]	; (80029b0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d111      	bne.n	800298c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2b06      	cmp	r3, #6
 8002978:	d010      	beq.n	800299c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f042 0201 	orr.w	r2, r2, #1
 8002988:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800298a:	e007      	b.n	800299c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f042 0201 	orr.w	r2, r2, #1
 800299a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3714      	adds	r7, #20
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bc80      	pop	{r7}
 80029a6:	4770      	bx	lr
 80029a8:	40012c00 	.word	0x40012c00
 80029ac:	40000400 	.word	0x40000400
 80029b0:	40000800 	.word	0x40000800

080029b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d122      	bne.n	8002a10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d11b      	bne.n	8002a10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f06f 0202 	mvn.w	r2, #2
 80029e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	f003 0303 	and.w	r3, r3, #3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f9b4 	bl	8002d64 <HAL_TIM_IC_CaptureCallback>
 80029fc:	e005      	b.n	8002a0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f9a7 	bl	8002d52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 f9b6 	bl	8002d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	f003 0304 	and.w	r3, r3, #4
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	d122      	bne.n	8002a64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	f003 0304 	and.w	r3, r3, #4
 8002a28:	2b04      	cmp	r3, #4
 8002a2a:	d11b      	bne.n	8002a64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f06f 0204 	mvn.w	r2, #4
 8002a34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2202      	movs	r2, #2
 8002a3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f98a 	bl	8002d64 <HAL_TIM_IC_CaptureCallback>
 8002a50:	e005      	b.n	8002a5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 f97d 	bl	8002d52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 f98c 	bl	8002d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	f003 0308 	and.w	r3, r3, #8
 8002a6e:	2b08      	cmp	r3, #8
 8002a70:	d122      	bne.n	8002ab8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	f003 0308 	and.w	r3, r3, #8
 8002a7c:	2b08      	cmp	r3, #8
 8002a7e:	d11b      	bne.n	8002ab8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f06f 0208 	mvn.w	r2, #8
 8002a88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2204      	movs	r2, #4
 8002a8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	f003 0303 	and.w	r3, r3, #3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 f960 	bl	8002d64 <HAL_TIM_IC_CaptureCallback>
 8002aa4:	e005      	b.n	8002ab2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 f953 	bl	8002d52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f000 f962 	bl	8002d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	f003 0310 	and.w	r3, r3, #16
 8002ac2:	2b10      	cmp	r3, #16
 8002ac4:	d122      	bne.n	8002b0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	f003 0310 	and.w	r3, r3, #16
 8002ad0:	2b10      	cmp	r3, #16
 8002ad2:	d11b      	bne.n	8002b0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f06f 0210 	mvn.w	r2, #16
 8002adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2208      	movs	r2, #8
 8002ae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f936 	bl	8002d64 <HAL_TIM_IC_CaptureCallback>
 8002af8:	e005      	b.n	8002b06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f929 	bl	8002d52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 f938 	bl	8002d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d10e      	bne.n	8002b38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d107      	bne.n	8002b38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f06f 0201 	mvn.w	r2, #1
 8002b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7fe f820 	bl	8000b78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b42:	2b80      	cmp	r3, #128	; 0x80
 8002b44:	d10e      	bne.n	8002b64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b50:	2b80      	cmp	r3, #128	; 0x80
 8002b52:	d107      	bne.n	8002b64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 fa7b 	bl	800305a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b6e:	2b40      	cmp	r3, #64	; 0x40
 8002b70:	d10e      	bne.n	8002b90 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b7c:	2b40      	cmp	r3, #64	; 0x40
 8002b7e:	d107      	bne.n	8002b90 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 f8fc 	bl	8002d88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	f003 0320 	and.w	r3, r3, #32
 8002b9a:	2b20      	cmp	r3, #32
 8002b9c:	d10e      	bne.n	8002bbc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	f003 0320 	and.w	r3, r3, #32
 8002ba8:	2b20      	cmp	r3, #32
 8002baa:	d107      	bne.n	8002bbc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f06f 0220 	mvn.w	r2, #32
 8002bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 fa46 	bl	8003048 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bbc:	bf00      	nop
 8002bbe:	3708      	adds	r7, #8
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d101      	bne.n	8002be0 <HAL_TIM_ConfigClockSource+0x1c>
 8002bdc:	2302      	movs	r3, #2
 8002bde:	e0b4      	b.n	8002d4a <HAL_TIM_ConfigClockSource+0x186>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2202      	movs	r2, #2
 8002bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002bfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68ba      	ldr	r2, [r7, #8]
 8002c0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c18:	d03e      	beq.n	8002c98 <HAL_TIM_ConfigClockSource+0xd4>
 8002c1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c1e:	f200 8087 	bhi.w	8002d30 <HAL_TIM_ConfigClockSource+0x16c>
 8002c22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c26:	f000 8086 	beq.w	8002d36 <HAL_TIM_ConfigClockSource+0x172>
 8002c2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c2e:	d87f      	bhi.n	8002d30 <HAL_TIM_ConfigClockSource+0x16c>
 8002c30:	2b70      	cmp	r3, #112	; 0x70
 8002c32:	d01a      	beq.n	8002c6a <HAL_TIM_ConfigClockSource+0xa6>
 8002c34:	2b70      	cmp	r3, #112	; 0x70
 8002c36:	d87b      	bhi.n	8002d30 <HAL_TIM_ConfigClockSource+0x16c>
 8002c38:	2b60      	cmp	r3, #96	; 0x60
 8002c3a:	d050      	beq.n	8002cde <HAL_TIM_ConfigClockSource+0x11a>
 8002c3c:	2b60      	cmp	r3, #96	; 0x60
 8002c3e:	d877      	bhi.n	8002d30 <HAL_TIM_ConfigClockSource+0x16c>
 8002c40:	2b50      	cmp	r3, #80	; 0x50
 8002c42:	d03c      	beq.n	8002cbe <HAL_TIM_ConfigClockSource+0xfa>
 8002c44:	2b50      	cmp	r3, #80	; 0x50
 8002c46:	d873      	bhi.n	8002d30 <HAL_TIM_ConfigClockSource+0x16c>
 8002c48:	2b40      	cmp	r3, #64	; 0x40
 8002c4a:	d058      	beq.n	8002cfe <HAL_TIM_ConfigClockSource+0x13a>
 8002c4c:	2b40      	cmp	r3, #64	; 0x40
 8002c4e:	d86f      	bhi.n	8002d30 <HAL_TIM_ConfigClockSource+0x16c>
 8002c50:	2b30      	cmp	r3, #48	; 0x30
 8002c52:	d064      	beq.n	8002d1e <HAL_TIM_ConfigClockSource+0x15a>
 8002c54:	2b30      	cmp	r3, #48	; 0x30
 8002c56:	d86b      	bhi.n	8002d30 <HAL_TIM_ConfigClockSource+0x16c>
 8002c58:	2b20      	cmp	r3, #32
 8002c5a:	d060      	beq.n	8002d1e <HAL_TIM_ConfigClockSource+0x15a>
 8002c5c:	2b20      	cmp	r3, #32
 8002c5e:	d867      	bhi.n	8002d30 <HAL_TIM_ConfigClockSource+0x16c>
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d05c      	beq.n	8002d1e <HAL_TIM_ConfigClockSource+0x15a>
 8002c64:	2b10      	cmp	r3, #16
 8002c66:	d05a      	beq.n	8002d1e <HAL_TIM_ConfigClockSource+0x15a>
 8002c68:	e062      	b.n	8002d30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c7a:	f000 f968 	bl	8002f4e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68ba      	ldr	r2, [r7, #8]
 8002c94:	609a      	str	r2, [r3, #8]
      break;
 8002c96:	e04f      	b.n	8002d38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ca8:	f000 f951 	bl	8002f4e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689a      	ldr	r2, [r3, #8]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cba:	609a      	str	r2, [r3, #8]
      break;
 8002cbc:	e03c      	b.n	8002d38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cca:	461a      	mov	r2, r3
 8002ccc:	f000 f8c8 	bl	8002e60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2150      	movs	r1, #80	; 0x50
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f000 f91f 	bl	8002f1a <TIM_ITRx_SetConfig>
      break;
 8002cdc:	e02c      	b.n	8002d38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cea:	461a      	mov	r2, r3
 8002cec:	f000 f8e6 	bl	8002ebc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2160      	movs	r1, #96	; 0x60
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f000 f90f 	bl	8002f1a <TIM_ITRx_SetConfig>
      break;
 8002cfc:	e01c      	b.n	8002d38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	f000 f8a8 	bl	8002e60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2140      	movs	r1, #64	; 0x40
 8002d16:	4618      	mov	r0, r3
 8002d18:	f000 f8ff 	bl	8002f1a <TIM_ITRx_SetConfig>
      break;
 8002d1c:	e00c      	b.n	8002d38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4619      	mov	r1, r3
 8002d28:	4610      	mov	r0, r2
 8002d2a:	f000 f8f6 	bl	8002f1a <TIM_ITRx_SetConfig>
      break;
 8002d2e:	e003      	b.n	8002d38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	73fb      	strb	r3, [r7, #15]
      break;
 8002d34:	e000      	b.n	8002d38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b083      	sub	sp, #12
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d5a:	bf00      	nop
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bc80      	pop	{r7}
 8002d62:	4770      	bx	lr

08002d64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bc80      	pop	{r7}
 8002d74:	4770      	bx	lr

08002d76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bc80      	pop	{r7}
 8002d86:	4770      	bx	lr

08002d88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bc80      	pop	{r7}
 8002d98:	4770      	bx	lr
	...

08002d9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a29      	ldr	r2, [pc, #164]	; (8002e54 <TIM_Base_SetConfig+0xb8>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d00b      	beq.n	8002dcc <TIM_Base_SetConfig+0x30>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dba:	d007      	beq.n	8002dcc <TIM_Base_SetConfig+0x30>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a26      	ldr	r2, [pc, #152]	; (8002e58 <TIM_Base_SetConfig+0xbc>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d003      	beq.n	8002dcc <TIM_Base_SetConfig+0x30>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a25      	ldr	r2, [pc, #148]	; (8002e5c <TIM_Base_SetConfig+0xc0>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d108      	bne.n	8002dde <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a1c      	ldr	r2, [pc, #112]	; (8002e54 <TIM_Base_SetConfig+0xb8>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d00b      	beq.n	8002dfe <TIM_Base_SetConfig+0x62>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dec:	d007      	beq.n	8002dfe <TIM_Base_SetConfig+0x62>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a19      	ldr	r2, [pc, #100]	; (8002e58 <TIM_Base_SetConfig+0xbc>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d003      	beq.n	8002dfe <TIM_Base_SetConfig+0x62>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a18      	ldr	r2, [pc, #96]	; (8002e5c <TIM_Base_SetConfig+0xc0>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d108      	bne.n	8002e10 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a07      	ldr	r2, [pc, #28]	; (8002e54 <TIM_Base_SetConfig+0xb8>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d103      	bne.n	8002e44 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	691a      	ldr	r2, [r3, #16]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	615a      	str	r2, [r3, #20]
}
 8002e4a:	bf00      	nop
 8002e4c:	3714      	adds	r7, #20
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bc80      	pop	{r7}
 8002e52:	4770      	bx	lr
 8002e54:	40012c00 	.word	0x40012c00
 8002e58:	40000400 	.word	0x40000400
 8002e5c:	40000800 	.word	0x40000800

08002e60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b087      	sub	sp, #28
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	f023 0201 	bic.w	r2, r3, #1
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	011b      	lsls	r3, r3, #4
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	f023 030a 	bic.w	r3, r3, #10
 8002e9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	621a      	str	r2, [r3, #32]
}
 8002eb2:	bf00      	nop
 8002eb4:	371c      	adds	r7, #28
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bc80      	pop	{r7}
 8002eba:	4770      	bx	lr

08002ebc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b087      	sub	sp, #28
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6a1b      	ldr	r3, [r3, #32]
 8002ecc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	f023 0210 	bic.w	r2, r3, #16
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ee6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	031b      	lsls	r3, r3, #12
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ef8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	011b      	lsls	r3, r3, #4
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	693a      	ldr	r2, [r7, #16]
 8002f08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	621a      	str	r2, [r3, #32]
}
 8002f10:	bf00      	nop
 8002f12:	371c      	adds	r7, #28
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bc80      	pop	{r7}
 8002f18:	4770      	bx	lr

08002f1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b085      	sub	sp, #20
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
 8002f22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f32:	683a      	ldr	r2, [r7, #0]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	f043 0307 	orr.w	r3, r3, #7
 8002f3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	609a      	str	r2, [r3, #8]
}
 8002f44:	bf00      	nop
 8002f46:	3714      	adds	r7, #20
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bc80      	pop	{r7}
 8002f4c:	4770      	bx	lr

08002f4e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	b087      	sub	sp, #28
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	60f8      	str	r0, [r7, #12]
 8002f56:	60b9      	str	r1, [r7, #8]
 8002f58:	607a      	str	r2, [r7, #4]
 8002f5a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f68:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	021a      	lsls	r2, r3, #8
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	431a      	orrs	r2, r3
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	609a      	str	r2, [r3, #8]
}
 8002f82:	bf00      	nop
 8002f84:	371c      	adds	r7, #28
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bc80      	pop	{r7}
 8002f8a:	4770      	bx	lr

08002f8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d101      	bne.n	8002fa4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	e046      	b.n	8003032 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2202      	movs	r2, #2
 8002fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a16      	ldr	r2, [pc, #88]	; (800303c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d00e      	beq.n	8003006 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ff0:	d009      	beq.n	8003006 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a12      	ldr	r2, [pc, #72]	; (8003040 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d004      	beq.n	8003006 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a10      	ldr	r2, [pc, #64]	; (8003044 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d10c      	bne.n	8003020 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800300c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	4313      	orrs	r3, r2
 8003016:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68ba      	ldr	r2, [r7, #8]
 800301e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3714      	adds	r7, #20
 8003036:	46bd      	mov	sp, r7
 8003038:	bc80      	pop	{r7}
 800303a:	4770      	bx	lr
 800303c:	40012c00 	.word	0x40012c00
 8003040:	40000400 	.word	0x40000400
 8003044:	40000800 	.word	0x40000800

08003048 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	bc80      	pop	{r7}
 8003058:	4770      	bx	lr

0800305a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800305a:	b480      	push	{r7}
 800305c:	b083      	sub	sp, #12
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003062:	bf00      	nop
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	bc80      	pop	{r7}
 800306a:	4770      	bx	lr

0800306c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e042      	b.n	8003104 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d106      	bne.n	8003098 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7fd fe4a 	bl	8000d2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2224      	movs	r2, #36	; 0x24
 800309c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68da      	ldr	r2, [r3, #12]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 f82b 	bl	800310c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	691a      	ldr	r2, [r3, #16]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	695a      	ldr	r2, [r3, #20]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68da      	ldr	r2, [r3, #12]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2220      	movs	r2, #32
 80030f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2220      	movs	r2, #32
 80030f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3708      	adds	r7, #8
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	68da      	ldr	r2, [r3, #12]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	430a      	orrs	r2, r1
 8003128:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689a      	ldr	r2, [r3, #8]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	431a      	orrs	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	695b      	ldr	r3, [r3, #20]
 8003138:	4313      	orrs	r3, r2
 800313a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003146:	f023 030c 	bic.w	r3, r3, #12
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	6812      	ldr	r2, [r2, #0]
 800314e:	68b9      	ldr	r1, [r7, #8]
 8003150:	430b      	orrs	r3, r1
 8003152:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	699a      	ldr	r2, [r3, #24]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	430a      	orrs	r2, r1
 8003168:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a2c      	ldr	r2, [pc, #176]	; (8003220 <UART_SetConfig+0x114>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d103      	bne.n	800317c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003174:	f7ff fb1a 	bl	80027ac <HAL_RCC_GetPCLK2Freq>
 8003178:	60f8      	str	r0, [r7, #12]
 800317a:	e002      	b.n	8003182 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800317c:	f7ff fb02 	bl	8002784 <HAL_RCC_GetPCLK1Freq>
 8003180:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	4613      	mov	r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	4413      	add	r3, r2
 800318a:	009a      	lsls	r2, r3, #2
 800318c:	441a      	add	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	fbb2 f3f3 	udiv	r3, r2, r3
 8003198:	4a22      	ldr	r2, [pc, #136]	; (8003224 <UART_SetConfig+0x118>)
 800319a:	fba2 2303 	umull	r2, r3, r2, r3
 800319e:	095b      	lsrs	r3, r3, #5
 80031a0:	0119      	lsls	r1, r3, #4
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	4613      	mov	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4413      	add	r3, r2
 80031aa:	009a      	lsls	r2, r3, #2
 80031ac:	441a      	add	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80031b8:	4b1a      	ldr	r3, [pc, #104]	; (8003224 <UART_SetConfig+0x118>)
 80031ba:	fba3 0302 	umull	r0, r3, r3, r2
 80031be:	095b      	lsrs	r3, r3, #5
 80031c0:	2064      	movs	r0, #100	; 0x64
 80031c2:	fb00 f303 	mul.w	r3, r0, r3
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	011b      	lsls	r3, r3, #4
 80031ca:	3332      	adds	r3, #50	; 0x32
 80031cc:	4a15      	ldr	r2, [pc, #84]	; (8003224 <UART_SetConfig+0x118>)
 80031ce:	fba2 2303 	umull	r2, r3, r2, r3
 80031d2:	095b      	lsrs	r3, r3, #5
 80031d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031d8:	4419      	add	r1, r3
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	4613      	mov	r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	4413      	add	r3, r2
 80031e2:	009a      	lsls	r2, r3, #2
 80031e4:	441a      	add	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80031f0:	4b0c      	ldr	r3, [pc, #48]	; (8003224 <UART_SetConfig+0x118>)
 80031f2:	fba3 0302 	umull	r0, r3, r3, r2
 80031f6:	095b      	lsrs	r3, r3, #5
 80031f8:	2064      	movs	r0, #100	; 0x64
 80031fa:	fb00 f303 	mul.w	r3, r0, r3
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	011b      	lsls	r3, r3, #4
 8003202:	3332      	adds	r3, #50	; 0x32
 8003204:	4a07      	ldr	r2, [pc, #28]	; (8003224 <UART_SetConfig+0x118>)
 8003206:	fba2 2303 	umull	r2, r3, r2, r3
 800320a:	095b      	lsrs	r3, r3, #5
 800320c:	f003 020f 	and.w	r2, r3, #15
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	440a      	add	r2, r1
 8003216:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003218:	bf00      	nop
 800321a:	3710      	adds	r7, #16
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	40013800 	.word	0x40013800
 8003224:	51eb851f 	.word	0x51eb851f

08003228 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800322e:	f3ef 8305 	mrs	r3, IPSR
 8003232:	60bb      	str	r3, [r7, #8]
  return(result);
 8003234:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003236:	2b00      	cmp	r3, #0
 8003238:	d10f      	bne.n	800325a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800323a:	f3ef 8310 	mrs	r3, PRIMASK
 800323e:	607b      	str	r3, [r7, #4]
  return(result);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d109      	bne.n	800325a <osKernelInitialize+0x32>
 8003246:	4b10      	ldr	r3, [pc, #64]	; (8003288 <osKernelInitialize+0x60>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2b02      	cmp	r3, #2
 800324c:	d109      	bne.n	8003262 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800324e:	f3ef 8311 	mrs	r3, BASEPRI
 8003252:	603b      	str	r3, [r7, #0]
  return(result);
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800325a:	f06f 0305 	mvn.w	r3, #5
 800325e:	60fb      	str	r3, [r7, #12]
 8003260:	e00c      	b.n	800327c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003262:	4b09      	ldr	r3, [pc, #36]	; (8003288 <osKernelInitialize+0x60>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d105      	bne.n	8003276 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800326a:	4b07      	ldr	r3, [pc, #28]	; (8003288 <osKernelInitialize+0x60>)
 800326c:	2201      	movs	r2, #1
 800326e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003270:	2300      	movs	r3, #0
 8003272:	60fb      	str	r3, [r7, #12]
 8003274:	e002      	b.n	800327c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003276:	f04f 33ff 	mov.w	r3, #4294967295
 800327a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800327c:	68fb      	ldr	r3, [r7, #12]
}
 800327e:	4618      	mov	r0, r3
 8003280:	3714      	adds	r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	bc80      	pop	{r7}
 8003286:	4770      	bx	lr
 8003288:	20000190 	.word	0x20000190

0800328c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003292:	f3ef 8305 	mrs	r3, IPSR
 8003296:	60bb      	str	r3, [r7, #8]
  return(result);
 8003298:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800329a:	2b00      	cmp	r3, #0
 800329c:	d10f      	bne.n	80032be <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800329e:	f3ef 8310 	mrs	r3, PRIMASK
 80032a2:	607b      	str	r3, [r7, #4]
  return(result);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d109      	bne.n	80032be <osKernelStart+0x32>
 80032aa:	4b11      	ldr	r3, [pc, #68]	; (80032f0 <osKernelStart+0x64>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d109      	bne.n	80032c6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80032b2:	f3ef 8311 	mrs	r3, BASEPRI
 80032b6:	603b      	str	r3, [r7, #0]
  return(result);
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d003      	beq.n	80032c6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80032be:	f06f 0305 	mvn.w	r3, #5
 80032c2:	60fb      	str	r3, [r7, #12]
 80032c4:	e00e      	b.n	80032e4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80032c6:	4b0a      	ldr	r3, [pc, #40]	; (80032f0 <osKernelStart+0x64>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d107      	bne.n	80032de <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80032ce:	4b08      	ldr	r3, [pc, #32]	; (80032f0 <osKernelStart+0x64>)
 80032d0:	2202      	movs	r2, #2
 80032d2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80032d4:	f001 f878 	bl	80043c8 <vTaskStartScheduler>
      stat = osOK;
 80032d8:	2300      	movs	r3, #0
 80032da:	60fb      	str	r3, [r7, #12]
 80032dc:	e002      	b.n	80032e4 <osKernelStart+0x58>
    } else {
      stat = osError;
 80032de:	f04f 33ff 	mov.w	r3, #4294967295
 80032e2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80032e4:	68fb      	ldr	r3, [r7, #12]
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	20000190 	.word	0x20000190

080032f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b092      	sub	sp, #72	; 0x48
 80032f8:	af04      	add	r7, sp, #16
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003300:	2300      	movs	r3, #0
 8003302:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003304:	f3ef 8305 	mrs	r3, IPSR
 8003308:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800330a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800330c:	2b00      	cmp	r3, #0
 800330e:	f040 8094 	bne.w	800343a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003312:	f3ef 8310 	mrs	r3, PRIMASK
 8003316:	623b      	str	r3, [r7, #32]
  return(result);
 8003318:	6a3b      	ldr	r3, [r7, #32]
 800331a:	2b00      	cmp	r3, #0
 800331c:	f040 808d 	bne.w	800343a <osThreadNew+0x146>
 8003320:	4b48      	ldr	r3, [pc, #288]	; (8003444 <osThreadNew+0x150>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2b02      	cmp	r3, #2
 8003326:	d106      	bne.n	8003336 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003328:	f3ef 8311 	mrs	r3, BASEPRI
 800332c:	61fb      	str	r3, [r7, #28]
  return(result);
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	2b00      	cmp	r3, #0
 8003332:	f040 8082 	bne.w	800343a <osThreadNew+0x146>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d07e      	beq.n	800343a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800333c:	2380      	movs	r3, #128	; 0x80
 800333e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003340:	2318      	movs	r3, #24
 8003342:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003344:	2300      	movs	r3, #0
 8003346:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003348:	f107 031b 	add.w	r3, r7, #27
 800334c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800334e:	f04f 33ff 	mov.w	r3, #4294967295
 8003352:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d045      	beq.n	80033e6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d002      	beq.n	8003368 <osThreadNew+0x74>
        name = attr->name;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d002      	beq.n	8003376 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003378:	2b00      	cmp	r3, #0
 800337a:	d008      	beq.n	800338e <osThreadNew+0x9a>
 800337c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800337e:	2b38      	cmp	r3, #56	; 0x38
 8003380:	d805      	bhi.n	800338e <osThreadNew+0x9a>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <osThreadNew+0x9e>
        return (NULL);
 800338e:	2300      	movs	r3, #0
 8003390:	e054      	b.n	800343c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	089b      	lsrs	r3, r3, #2
 80033a0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00e      	beq.n	80033c8 <osThreadNew+0xd4>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	2b5b      	cmp	r3, #91	; 0x5b
 80033b0:	d90a      	bls.n	80033c8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d006      	beq.n	80033c8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d002      	beq.n	80033c8 <osThreadNew+0xd4>
        mem = 1;
 80033c2:	2301      	movs	r3, #1
 80033c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80033c6:	e010      	b.n	80033ea <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d10c      	bne.n	80033ea <osThreadNew+0xf6>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d108      	bne.n	80033ea <osThreadNew+0xf6>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d104      	bne.n	80033ea <osThreadNew+0xf6>
          mem = 0;
 80033e0:	2300      	movs	r3, #0
 80033e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80033e4:	e001      	b.n	80033ea <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80033e6:	2300      	movs	r3, #0
 80033e8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80033ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d110      	bne.n	8003412 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80033f8:	9202      	str	r2, [sp, #8]
 80033fa:	9301      	str	r3, [sp, #4]
 80033fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033fe:	9300      	str	r3, [sp, #0]
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003404:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003406:	68f8      	ldr	r0, [r7, #12]
 8003408:	f000 fe12 	bl	8004030 <xTaskCreateStatic>
 800340c:	4603      	mov	r3, r0
 800340e:	617b      	str	r3, [r7, #20]
 8003410:	e013      	b.n	800343a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003414:	2b00      	cmp	r3, #0
 8003416:	d110      	bne.n	800343a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800341a:	b29a      	uxth	r2, r3
 800341c:	f107 0314 	add.w	r3, r7, #20
 8003420:	9301      	str	r3, [sp, #4]
 8003422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003424:	9300      	str	r3, [sp, #0]
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800342a:	68f8      	ldr	r0, [r7, #12]
 800342c:	f000 fe5c 	bl	80040e8 <xTaskCreate>
 8003430:	4603      	mov	r3, r0
 8003432:	2b01      	cmp	r3, #1
 8003434:	d001      	beq.n	800343a <osThreadNew+0x146>
          hTask = NULL;
 8003436:	2300      	movs	r3, #0
 8003438:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800343a:	697b      	ldr	r3, [r7, #20]
}
 800343c:	4618      	mov	r0, r3
 800343e:	3738      	adds	r7, #56	; 0x38
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	20000190 	.word	0x20000190

08003448 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003448:	b580      	push	{r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003450:	f3ef 8305 	mrs	r3, IPSR
 8003454:	613b      	str	r3, [r7, #16]
  return(result);
 8003456:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003458:	2b00      	cmp	r3, #0
 800345a:	d10f      	bne.n	800347c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800345c:	f3ef 8310 	mrs	r3, PRIMASK
 8003460:	60fb      	str	r3, [r7, #12]
  return(result);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d109      	bne.n	800347c <osDelay+0x34>
 8003468:	4b0d      	ldr	r3, [pc, #52]	; (80034a0 <osDelay+0x58>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2b02      	cmp	r3, #2
 800346e:	d109      	bne.n	8003484 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003470:	f3ef 8311 	mrs	r3, BASEPRI
 8003474:	60bb      	str	r3, [r7, #8]
  return(result);
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d003      	beq.n	8003484 <osDelay+0x3c>
    stat = osErrorISR;
 800347c:	f06f 0305 	mvn.w	r3, #5
 8003480:	617b      	str	r3, [r7, #20]
 8003482:	e007      	b.n	8003494 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003484:	2300      	movs	r3, #0
 8003486:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d002      	beq.n	8003494 <osDelay+0x4c>
      vTaskDelay(ticks);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 ff66 	bl	8004360 <vTaskDelay>
    }
  }

  return (stat);
 8003494:	697b      	ldr	r3, [r7, #20]
}
 8003496:	4618      	mov	r0, r3
 8003498:	3718      	adds	r7, #24
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	20000190 	.word	0x20000190

080034a4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	4a06      	ldr	r2, [pc, #24]	; (80034cc <vApplicationGetIdleTaskMemory+0x28>)
 80034b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	4a05      	ldr	r2, [pc, #20]	; (80034d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80034ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2280      	movs	r2, #128	; 0x80
 80034c0:	601a      	str	r2, [r3, #0]
}
 80034c2:	bf00      	nop
 80034c4:	3714      	adds	r7, #20
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bc80      	pop	{r7}
 80034ca:	4770      	bx	lr
 80034cc:	20000194 	.word	0x20000194
 80034d0:	200001f0 	.word	0x200001f0

080034d4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80034d4:	b480      	push	{r7}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4a07      	ldr	r2, [pc, #28]	; (8003500 <vApplicationGetTimerTaskMemory+0x2c>)
 80034e4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	4a06      	ldr	r2, [pc, #24]	; (8003504 <vApplicationGetTimerTaskMemory+0x30>)
 80034ea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034f2:	601a      	str	r2, [r3, #0]
}
 80034f4:	bf00      	nop
 80034f6:	3714      	adds	r7, #20
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bc80      	pop	{r7}
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	200003f0 	.word	0x200003f0
 8003504:	2000044c 	.word	0x2000044c

08003508 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f103 0208 	add.w	r2, r3, #8
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f04f 32ff 	mov.w	r2, #4294967295
 8003520:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f103 0208 	add.w	r2, r3, #8
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f103 0208 	add.w	r2, r3, #8
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	bc80      	pop	{r7}
 8003544:	4770      	bx	lr

08003546 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003546:	b480      	push	{r7}
 8003548:	b083      	sub	sp, #12
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	bc80      	pop	{r7}
 800355c:	4770      	bx	lr

0800355e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800355e:	b480      	push	{r7}
 8003560:	b085      	sub	sp, #20
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
 8003566:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	1c5a      	adds	r2, r3, #1
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	601a      	str	r2, [r3, #0]
}
 800359a:	bf00      	nop
 800359c:	3714      	adds	r7, #20
 800359e:	46bd      	mov	sp, r7
 80035a0:	bc80      	pop	{r7}
 80035a2:	4770      	bx	lr

080035a4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80035a4:	b480      	push	{r7}
 80035a6:	b085      	sub	sp, #20
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ba:	d103      	bne.n	80035c4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	60fb      	str	r3, [r7, #12]
 80035c2:	e00c      	b.n	80035de <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3308      	adds	r3, #8
 80035c8:	60fb      	str	r3, [r7, #12]
 80035ca:	e002      	b.n	80035d2 <vListInsert+0x2e>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	60fb      	str	r3, [r7, #12]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68ba      	ldr	r2, [r7, #8]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d2f6      	bcs.n	80035cc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	683a      	ldr	r2, [r7, #0]
 80035f8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	1c5a      	adds	r2, r3, #1
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	601a      	str	r2, [r3, #0]
}
 800360a:	bf00      	nop
 800360c:	3714      	adds	r7, #20
 800360e:	46bd      	mov	sp, r7
 8003610:	bc80      	pop	{r7}
 8003612:	4770      	bx	lr

08003614 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	6892      	ldr	r2, [r2, #8]
 800362a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	6852      	ldr	r2, [r2, #4]
 8003634:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	429a      	cmp	r2, r3
 800363e:	d103      	bne.n	8003648 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689a      	ldr	r2, [r3, #8]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	1e5a      	subs	r2, r3, #1
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
}
 800365c:	4618      	mov	r0, r3
 800365e:	3714      	adds	r7, #20
 8003660:	46bd      	mov	sp, r7
 8003662:	bc80      	pop	{r7}
 8003664:	4770      	bx	lr
	...

08003668 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d10a      	bne.n	8003692 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800367c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003680:	f383 8811 	msr	BASEPRI, r3
 8003684:	f3bf 8f6f 	isb	sy
 8003688:	f3bf 8f4f 	dsb	sy
 800368c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800368e:	bf00      	nop
 8003690:	e7fe      	b.n	8003690 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003692:	f001 ffcb 	bl	800562c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800369e:	68f9      	ldr	r1, [r7, #12]
 80036a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80036a2:	fb01 f303 	mul.w	r3, r1, r3
 80036a6:	441a      	add	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c2:	3b01      	subs	r3, #1
 80036c4:	68f9      	ldr	r1, [r7, #12]
 80036c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80036c8:	fb01 f303 	mul.w	r3, r1, r3
 80036cc:	441a      	add	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	22ff      	movs	r2, #255	; 0xff
 80036d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	22ff      	movs	r2, #255	; 0xff
 80036de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d114      	bne.n	8003712 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d01a      	beq.n	8003726 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	3310      	adds	r3, #16
 80036f4:	4618      	mov	r0, r3
 80036f6:	f001 f8f1 	bl	80048dc <xTaskRemoveFromEventList>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d012      	beq.n	8003726 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003700:	4b0c      	ldr	r3, [pc, #48]	; (8003734 <xQueueGenericReset+0xcc>)
 8003702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003706:	601a      	str	r2, [r3, #0]
 8003708:	f3bf 8f4f 	dsb	sy
 800370c:	f3bf 8f6f 	isb	sy
 8003710:	e009      	b.n	8003726 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	3310      	adds	r3, #16
 8003716:	4618      	mov	r0, r3
 8003718:	f7ff fef6 	bl	8003508 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	3324      	adds	r3, #36	; 0x24
 8003720:	4618      	mov	r0, r3
 8003722:	f7ff fef1 	bl	8003508 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003726:	f001 ffb1 	bl	800568c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800372a:	2301      	movs	r3, #1
}
 800372c:	4618      	mov	r0, r3
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	e000ed04 	.word	0xe000ed04

08003738 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003738:	b580      	push	{r7, lr}
 800373a:	b08e      	sub	sp, #56	; 0x38
 800373c:	af02      	add	r7, sp, #8
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
 8003744:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d10a      	bne.n	8003762 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800374c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003750:	f383 8811 	msr	BASEPRI, r3
 8003754:	f3bf 8f6f 	isb	sy
 8003758:	f3bf 8f4f 	dsb	sy
 800375c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800375e:	bf00      	nop
 8003760:	e7fe      	b.n	8003760 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d10a      	bne.n	800377e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800376c:	f383 8811 	msr	BASEPRI, r3
 8003770:	f3bf 8f6f 	isb	sy
 8003774:	f3bf 8f4f 	dsb	sy
 8003778:	627b      	str	r3, [r7, #36]	; 0x24
}
 800377a:	bf00      	nop
 800377c:	e7fe      	b.n	800377c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d002      	beq.n	800378a <xQueueGenericCreateStatic+0x52>
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <xQueueGenericCreateStatic+0x56>
 800378a:	2301      	movs	r3, #1
 800378c:	e000      	b.n	8003790 <xQueueGenericCreateStatic+0x58>
 800378e:	2300      	movs	r3, #0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d10a      	bne.n	80037aa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003798:	f383 8811 	msr	BASEPRI, r3
 800379c:	f3bf 8f6f 	isb	sy
 80037a0:	f3bf 8f4f 	dsb	sy
 80037a4:	623b      	str	r3, [r7, #32]
}
 80037a6:	bf00      	nop
 80037a8:	e7fe      	b.n	80037a8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d102      	bne.n	80037b6 <xQueueGenericCreateStatic+0x7e>
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <xQueueGenericCreateStatic+0x82>
 80037b6:	2301      	movs	r3, #1
 80037b8:	e000      	b.n	80037bc <xQueueGenericCreateStatic+0x84>
 80037ba:	2300      	movs	r3, #0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10a      	bne.n	80037d6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80037c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c4:	f383 8811 	msr	BASEPRI, r3
 80037c8:	f3bf 8f6f 	isb	sy
 80037cc:	f3bf 8f4f 	dsb	sy
 80037d0:	61fb      	str	r3, [r7, #28]
}
 80037d2:	bf00      	nop
 80037d4:	e7fe      	b.n	80037d4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80037d6:	2350      	movs	r3, #80	; 0x50
 80037d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	2b50      	cmp	r3, #80	; 0x50
 80037de:	d00a      	beq.n	80037f6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80037e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e4:	f383 8811 	msr	BASEPRI, r3
 80037e8:	f3bf 8f6f 	isb	sy
 80037ec:	f3bf 8f4f 	dsb	sy
 80037f0:	61bb      	str	r3, [r7, #24]
}
 80037f2:	bf00      	nop
 80037f4:	e7fe      	b.n	80037f4 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80037fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00d      	beq.n	800381c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003808:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800380c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	4613      	mov	r3, r2
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	68b9      	ldr	r1, [r7, #8]
 8003816:	68f8      	ldr	r0, [r7, #12]
 8003818:	f000 f805 	bl	8003826 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800381c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800381e:	4618      	mov	r0, r3
 8003820:	3730      	adds	r7, #48	; 0x30
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b084      	sub	sp, #16
 800382a:	af00      	add	r7, sp, #0
 800382c:	60f8      	str	r0, [r7, #12]
 800382e:	60b9      	str	r1, [r7, #8]
 8003830:	607a      	str	r2, [r7, #4]
 8003832:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d103      	bne.n	8003842 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	601a      	str	r2, [r3, #0]
 8003840:	e002      	b.n	8003848 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	68ba      	ldr	r2, [r7, #8]
 8003852:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003854:	2101      	movs	r1, #1
 8003856:	69b8      	ldr	r0, [r7, #24]
 8003858:	f7ff ff06 	bl	8003668 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	78fa      	ldrb	r2, [r7, #3]
 8003860:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003864:	bf00      	nop
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b08e      	sub	sp, #56	; 0x38
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
 8003878:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800387a:	2300      	movs	r3, #0
 800387c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003884:	2b00      	cmp	r3, #0
 8003886:	d10a      	bne.n	800389e <xQueueGenericSend+0x32>
	__asm volatile
 8003888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800388c:	f383 8811 	msr	BASEPRI, r3
 8003890:	f3bf 8f6f 	isb	sy
 8003894:	f3bf 8f4f 	dsb	sy
 8003898:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800389a:	bf00      	nop
 800389c:	e7fe      	b.n	800389c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d103      	bne.n	80038ac <xQueueGenericSend+0x40>
 80038a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d101      	bne.n	80038b0 <xQueueGenericSend+0x44>
 80038ac:	2301      	movs	r3, #1
 80038ae:	e000      	b.n	80038b2 <xQueueGenericSend+0x46>
 80038b0:	2300      	movs	r3, #0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10a      	bne.n	80038cc <xQueueGenericSend+0x60>
	__asm volatile
 80038b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ba:	f383 8811 	msr	BASEPRI, r3
 80038be:	f3bf 8f6f 	isb	sy
 80038c2:	f3bf 8f4f 	dsb	sy
 80038c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80038c8:	bf00      	nop
 80038ca:	e7fe      	b.n	80038ca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d103      	bne.n	80038da <xQueueGenericSend+0x6e>
 80038d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d101      	bne.n	80038de <xQueueGenericSend+0x72>
 80038da:	2301      	movs	r3, #1
 80038dc:	e000      	b.n	80038e0 <xQueueGenericSend+0x74>
 80038de:	2300      	movs	r3, #0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d10a      	bne.n	80038fa <xQueueGenericSend+0x8e>
	__asm volatile
 80038e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e8:	f383 8811 	msr	BASEPRI, r3
 80038ec:	f3bf 8f6f 	isb	sy
 80038f0:	f3bf 8f4f 	dsb	sy
 80038f4:	623b      	str	r3, [r7, #32]
}
 80038f6:	bf00      	nop
 80038f8:	e7fe      	b.n	80038f8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80038fa:	f001 f9b1 	bl	8004c60 <xTaskGetSchedulerState>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d102      	bne.n	800390a <xQueueGenericSend+0x9e>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <xQueueGenericSend+0xa2>
 800390a:	2301      	movs	r3, #1
 800390c:	e000      	b.n	8003910 <xQueueGenericSend+0xa4>
 800390e:	2300      	movs	r3, #0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d10a      	bne.n	800392a <xQueueGenericSend+0xbe>
	__asm volatile
 8003914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003918:	f383 8811 	msr	BASEPRI, r3
 800391c:	f3bf 8f6f 	isb	sy
 8003920:	f3bf 8f4f 	dsb	sy
 8003924:	61fb      	str	r3, [r7, #28]
}
 8003926:	bf00      	nop
 8003928:	e7fe      	b.n	8003928 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800392a:	f001 fe7f 	bl	800562c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800392e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003930:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003936:	429a      	cmp	r2, r3
 8003938:	d302      	bcc.n	8003940 <xQueueGenericSend+0xd4>
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	2b02      	cmp	r3, #2
 800393e:	d129      	bne.n	8003994 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	68b9      	ldr	r1, [r7, #8]
 8003944:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003946:	f000 fa07 	bl	8003d58 <prvCopyDataToQueue>
 800394a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800394c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	2b00      	cmp	r3, #0
 8003952:	d010      	beq.n	8003976 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003956:	3324      	adds	r3, #36	; 0x24
 8003958:	4618      	mov	r0, r3
 800395a:	f000 ffbf 	bl	80048dc <xTaskRemoveFromEventList>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d013      	beq.n	800398c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003964:	4b3f      	ldr	r3, [pc, #252]	; (8003a64 <xQueueGenericSend+0x1f8>)
 8003966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800396a:	601a      	str	r2, [r3, #0]
 800396c:	f3bf 8f4f 	dsb	sy
 8003970:	f3bf 8f6f 	isb	sy
 8003974:	e00a      	b.n	800398c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003978:	2b00      	cmp	r3, #0
 800397a:	d007      	beq.n	800398c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800397c:	4b39      	ldr	r3, [pc, #228]	; (8003a64 <xQueueGenericSend+0x1f8>)
 800397e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003982:	601a      	str	r2, [r3, #0]
 8003984:	f3bf 8f4f 	dsb	sy
 8003988:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800398c:	f001 fe7e 	bl	800568c <vPortExitCritical>
				return pdPASS;
 8003990:	2301      	movs	r3, #1
 8003992:	e063      	b.n	8003a5c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d103      	bne.n	80039a2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800399a:	f001 fe77 	bl	800568c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800399e:	2300      	movs	r3, #0
 80039a0:	e05c      	b.n	8003a5c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80039a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d106      	bne.n	80039b6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80039a8:	f107 0314 	add.w	r3, r7, #20
 80039ac:	4618      	mov	r0, r3
 80039ae:	f000 fff9 	bl	80049a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80039b2:	2301      	movs	r3, #1
 80039b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80039b6:	f001 fe69 	bl	800568c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80039ba:	f000 fd6b 	bl	8004494 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80039be:	f001 fe35 	bl	800562c <vPortEnterCritical>
 80039c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039c8:	b25b      	sxtb	r3, r3
 80039ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ce:	d103      	bne.n	80039d8 <xQueueGenericSend+0x16c>
 80039d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039de:	b25b      	sxtb	r3, r3
 80039e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e4:	d103      	bne.n	80039ee <xQueueGenericSend+0x182>
 80039e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039ee:	f001 fe4d 	bl	800568c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80039f2:	1d3a      	adds	r2, r7, #4
 80039f4:	f107 0314 	add.w	r3, r7, #20
 80039f8:	4611      	mov	r1, r2
 80039fa:	4618      	mov	r0, r3
 80039fc:	f000 ffe8 	bl	80049d0 <xTaskCheckForTimeOut>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d124      	bne.n	8003a50 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003a06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a08:	f000 fa9e 	bl	8003f48 <prvIsQueueFull>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d018      	beq.n	8003a44 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a14:	3310      	adds	r3, #16
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	4611      	mov	r1, r2
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 ff0e 	bl	800483c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003a20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a22:	f000 fa29 	bl	8003e78 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003a26:	f000 fd43 	bl	80044b0 <xTaskResumeAll>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f47f af7c 	bne.w	800392a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003a32:	4b0c      	ldr	r3, [pc, #48]	; (8003a64 <xQueueGenericSend+0x1f8>)
 8003a34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a38:	601a      	str	r2, [r3, #0]
 8003a3a:	f3bf 8f4f 	dsb	sy
 8003a3e:	f3bf 8f6f 	isb	sy
 8003a42:	e772      	b.n	800392a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003a44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a46:	f000 fa17 	bl	8003e78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a4a:	f000 fd31 	bl	80044b0 <xTaskResumeAll>
 8003a4e:	e76c      	b.n	800392a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003a50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a52:	f000 fa11 	bl	8003e78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a56:	f000 fd2b 	bl	80044b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003a5a:	2300      	movs	r3, #0
		}
	}
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3738      	adds	r7, #56	; 0x38
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	e000ed04 	.word	0xe000ed04

08003a68 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b08e      	sub	sp, #56	; 0x38
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
 8003a74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10a      	bne.n	8003a96 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a84:	f383 8811 	msr	BASEPRI, r3
 8003a88:	f3bf 8f6f 	isb	sy
 8003a8c:	f3bf 8f4f 	dsb	sy
 8003a90:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003a92:	bf00      	nop
 8003a94:	e7fe      	b.n	8003a94 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d103      	bne.n	8003aa4 <xQueueGenericSendFromISR+0x3c>
 8003a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d101      	bne.n	8003aa8 <xQueueGenericSendFromISR+0x40>
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e000      	b.n	8003aaa <xQueueGenericSendFromISR+0x42>
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d10a      	bne.n	8003ac4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab2:	f383 8811 	msr	BASEPRI, r3
 8003ab6:	f3bf 8f6f 	isb	sy
 8003aba:	f3bf 8f4f 	dsb	sy
 8003abe:	623b      	str	r3, [r7, #32]
}
 8003ac0:	bf00      	nop
 8003ac2:	e7fe      	b.n	8003ac2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d103      	bne.n	8003ad2 <xQueueGenericSendFromISR+0x6a>
 8003aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d101      	bne.n	8003ad6 <xQueueGenericSendFromISR+0x6e>
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e000      	b.n	8003ad8 <xQueueGenericSendFromISR+0x70>
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10a      	bne.n	8003af2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae0:	f383 8811 	msr	BASEPRI, r3
 8003ae4:	f3bf 8f6f 	isb	sy
 8003ae8:	f3bf 8f4f 	dsb	sy
 8003aec:	61fb      	str	r3, [r7, #28]
}
 8003aee:	bf00      	nop
 8003af0:	e7fe      	b.n	8003af0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003af2:	f001 fe5d 	bl	80057b0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003af6:	f3ef 8211 	mrs	r2, BASEPRI
 8003afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003afe:	f383 8811 	msr	BASEPRI, r3
 8003b02:	f3bf 8f6f 	isb	sy
 8003b06:	f3bf 8f4f 	dsb	sy
 8003b0a:	61ba      	str	r2, [r7, #24]
 8003b0c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003b0e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b10:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d302      	bcc.n	8003b24 <xQueueGenericSendFromISR+0xbc>
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d12c      	bne.n	8003b7e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	68b9      	ldr	r1, [r7, #8]
 8003b32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b34:	f000 f910 	bl	8003d58 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003b38:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b40:	d112      	bne.n	8003b68 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d016      	beq.n	8003b78 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4c:	3324      	adds	r3, #36	; 0x24
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f000 fec4 	bl	80048dc <xTaskRemoveFromEventList>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00e      	beq.n	8003b78 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00b      	beq.n	8003b78 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	601a      	str	r2, [r3, #0]
 8003b66:	e007      	b.n	8003b78 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003b68:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	b25a      	sxtb	r2, r3
 8003b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003b7c:	e001      	b.n	8003b82 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	637b      	str	r3, [r7, #52]	; 0x34
 8003b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b84:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003b8c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3738      	adds	r7, #56	; 0x38
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b08c      	sub	sp, #48	; 0x30
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10a      	bne.n	8003bc8 <xQueueReceive+0x30>
	__asm volatile
 8003bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb6:	f383 8811 	msr	BASEPRI, r3
 8003bba:	f3bf 8f6f 	isb	sy
 8003bbe:	f3bf 8f4f 	dsb	sy
 8003bc2:	623b      	str	r3, [r7, #32]
}
 8003bc4:	bf00      	nop
 8003bc6:	e7fe      	b.n	8003bc6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d103      	bne.n	8003bd6 <xQueueReceive+0x3e>
 8003bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d101      	bne.n	8003bda <xQueueReceive+0x42>
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e000      	b.n	8003bdc <xQueueReceive+0x44>
 8003bda:	2300      	movs	r3, #0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d10a      	bne.n	8003bf6 <xQueueReceive+0x5e>
	__asm volatile
 8003be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be4:	f383 8811 	msr	BASEPRI, r3
 8003be8:	f3bf 8f6f 	isb	sy
 8003bec:	f3bf 8f4f 	dsb	sy
 8003bf0:	61fb      	str	r3, [r7, #28]
}
 8003bf2:	bf00      	nop
 8003bf4:	e7fe      	b.n	8003bf4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003bf6:	f001 f833 	bl	8004c60 <xTaskGetSchedulerState>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d102      	bne.n	8003c06 <xQueueReceive+0x6e>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <xQueueReceive+0x72>
 8003c06:	2301      	movs	r3, #1
 8003c08:	e000      	b.n	8003c0c <xQueueReceive+0x74>
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d10a      	bne.n	8003c26 <xQueueReceive+0x8e>
	__asm volatile
 8003c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c14:	f383 8811 	msr	BASEPRI, r3
 8003c18:	f3bf 8f6f 	isb	sy
 8003c1c:	f3bf 8f4f 	dsb	sy
 8003c20:	61bb      	str	r3, [r7, #24]
}
 8003c22:	bf00      	nop
 8003c24:	e7fe      	b.n	8003c24 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c26:	f001 fd01 	bl	800562c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c2e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d01f      	beq.n	8003c76 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003c36:	68b9      	ldr	r1, [r7, #8]
 8003c38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c3a:	f000 f8f7 	bl	8003e2c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c40:	1e5a      	subs	r2, r3, #1
 8003c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c44:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00f      	beq.n	8003c6e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c50:	3310      	adds	r3, #16
 8003c52:	4618      	mov	r0, r3
 8003c54:	f000 fe42 	bl	80048dc <xTaskRemoveFromEventList>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d007      	beq.n	8003c6e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003c5e:	4b3d      	ldr	r3, [pc, #244]	; (8003d54 <xQueueReceive+0x1bc>)
 8003c60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c64:	601a      	str	r2, [r3, #0]
 8003c66:	f3bf 8f4f 	dsb	sy
 8003c6a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003c6e:	f001 fd0d 	bl	800568c <vPortExitCritical>
				return pdPASS;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e069      	b.n	8003d4a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d103      	bne.n	8003c84 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c7c:	f001 fd06 	bl	800568c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003c80:	2300      	movs	r3, #0
 8003c82:	e062      	b.n	8003d4a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d106      	bne.n	8003c98 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c8a:	f107 0310 	add.w	r3, r7, #16
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f000 fe88 	bl	80049a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c94:	2301      	movs	r3, #1
 8003c96:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c98:	f001 fcf8 	bl	800568c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c9c:	f000 fbfa 	bl	8004494 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ca0:	f001 fcc4 	bl	800562c <vPortEnterCritical>
 8003ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003caa:	b25b      	sxtb	r3, r3
 8003cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb0:	d103      	bne.n	8003cba <xQueueReceive+0x122>
 8003cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cc0:	b25b      	sxtb	r3, r3
 8003cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc6:	d103      	bne.n	8003cd0 <xQueueReceive+0x138>
 8003cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cd0:	f001 fcdc 	bl	800568c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003cd4:	1d3a      	adds	r2, r7, #4
 8003cd6:	f107 0310 	add.w	r3, r7, #16
 8003cda:	4611      	mov	r1, r2
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f000 fe77 	bl	80049d0 <xTaskCheckForTimeOut>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d123      	bne.n	8003d30 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ce8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cea:	f000 f917 	bl	8003f1c <prvIsQueueEmpty>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d017      	beq.n	8003d24 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf6:	3324      	adds	r3, #36	; 0x24
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	4611      	mov	r1, r2
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f000 fd9d 	bl	800483c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d04:	f000 f8b8 	bl	8003e78 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d08:	f000 fbd2 	bl	80044b0 <xTaskResumeAll>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d189      	bne.n	8003c26 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003d12:	4b10      	ldr	r3, [pc, #64]	; (8003d54 <xQueueReceive+0x1bc>)
 8003d14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d18:	601a      	str	r2, [r3, #0]
 8003d1a:	f3bf 8f4f 	dsb	sy
 8003d1e:	f3bf 8f6f 	isb	sy
 8003d22:	e780      	b.n	8003c26 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003d24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d26:	f000 f8a7 	bl	8003e78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d2a:	f000 fbc1 	bl	80044b0 <xTaskResumeAll>
 8003d2e:	e77a      	b.n	8003c26 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003d30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d32:	f000 f8a1 	bl	8003e78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d36:	f000 fbbb 	bl	80044b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d3c:	f000 f8ee 	bl	8003f1c <prvIsQueueEmpty>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f43f af6f 	beq.w	8003c26 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003d48:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3730      	adds	r7, #48	; 0x30
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	e000ed04 	.word	0xe000ed04

08003d58 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003d64:	2300      	movs	r3, #0
 8003d66:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d10d      	bne.n	8003d92 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d14d      	bne.n	8003e1a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f000 ff8a 	bl	8004c9c <xTaskPriorityDisinherit>
 8003d88:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	605a      	str	r2, [r3, #4]
 8003d90:	e043      	b.n	8003e1a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d119      	bne.n	8003dcc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6898      	ldr	r0, [r3, #8]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da0:	461a      	mov	r2, r3
 8003da2:	68b9      	ldr	r1, [r7, #8]
 8003da4:	f002 f82a 	bl	8005dfc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	689a      	ldr	r2, [r3, #8]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db0:	441a      	add	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	689a      	ldr	r2, [r3, #8]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d32b      	bcc.n	8003e1a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	609a      	str	r2, [r3, #8]
 8003dca:	e026      	b.n	8003e1a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	68d8      	ldr	r0, [r3, #12]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	68b9      	ldr	r1, [r7, #8]
 8003dd8:	f002 f810 	bl	8005dfc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	68da      	ldr	r2, [r3, #12]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de4:	425b      	negs	r3, r3
 8003de6:	441a      	add	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	68da      	ldr	r2, [r3, #12]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d207      	bcs.n	8003e08 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	685a      	ldr	r2, [r3, #4]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e00:	425b      	negs	r3, r3
 8003e02:	441a      	add	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d105      	bne.n	8003e1a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d002      	beq.n	8003e1a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	3b01      	subs	r3, #1
 8003e18:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1c5a      	adds	r2, r3, #1
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003e22:	697b      	ldr	r3, [r7, #20]
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3718      	adds	r7, #24
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d018      	beq.n	8003e70 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	68da      	ldr	r2, [r3, #12]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	441a      	add	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	68da      	ldr	r2, [r3, #12]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d303      	bcc.n	8003e60 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	68d9      	ldr	r1, [r3, #12]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e68:	461a      	mov	r2, r3
 8003e6a:	6838      	ldr	r0, [r7, #0]
 8003e6c:	f001 ffc6 	bl	8005dfc <memcpy>
	}
}
 8003e70:	bf00      	nop
 8003e72:	3708      	adds	r7, #8
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003e80:	f001 fbd4 	bl	800562c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e8a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e8c:	e011      	b.n	8003eb2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d012      	beq.n	8003ebc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	3324      	adds	r3, #36	; 0x24
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 fd1e 	bl	80048dc <xTaskRemoveFromEventList>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003ea6:	f000 fdf5 	bl	8004a94 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003eaa:	7bfb      	ldrb	r3, [r7, #15]
 8003eac:	3b01      	subs	r3, #1
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	dce9      	bgt.n	8003e8e <prvUnlockQueue+0x16>
 8003eba:	e000      	b.n	8003ebe <prvUnlockQueue+0x46>
					break;
 8003ebc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	22ff      	movs	r2, #255	; 0xff
 8003ec2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003ec6:	f001 fbe1 	bl	800568c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003eca:	f001 fbaf 	bl	800562c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ed4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ed6:	e011      	b.n	8003efc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d012      	beq.n	8003f06 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	3310      	adds	r3, #16
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f000 fcf9 	bl	80048dc <xTaskRemoveFromEventList>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d001      	beq.n	8003ef4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003ef0:	f000 fdd0 	bl	8004a94 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003ef4:	7bbb      	ldrb	r3, [r7, #14]
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003efc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	dce9      	bgt.n	8003ed8 <prvUnlockQueue+0x60>
 8003f04:	e000      	b.n	8003f08 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003f06:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	22ff      	movs	r2, #255	; 0xff
 8003f0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003f10:	f001 fbbc 	bl	800568c <vPortExitCritical>
}
 8003f14:	bf00      	nop
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f24:	f001 fb82 	bl	800562c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d102      	bne.n	8003f36 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003f30:	2301      	movs	r3, #1
 8003f32:	60fb      	str	r3, [r7, #12]
 8003f34:	e001      	b.n	8003f3a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003f36:	2300      	movs	r3, #0
 8003f38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f3a:	f001 fba7 	bl	800568c <vPortExitCritical>

	return xReturn;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3710      	adds	r7, #16
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f50:	f001 fb6c 	bl	800562c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d102      	bne.n	8003f66 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003f60:	2301      	movs	r3, #1
 8003f62:	60fb      	str	r3, [r7, #12]
 8003f64:	e001      	b.n	8003f6a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003f66:	2300      	movs	r3, #0
 8003f68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f6a:	f001 fb8f 	bl	800568c <vPortExitCritical>

	return xReturn;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3710      	adds	r7, #16
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003f78:	b480      	push	{r7}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003f82:	2300      	movs	r3, #0
 8003f84:	60fb      	str	r3, [r7, #12]
 8003f86:	e014      	b.n	8003fb2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003f88:	4a0e      	ldr	r2, [pc, #56]	; (8003fc4 <vQueueAddToRegistry+0x4c>)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d10b      	bne.n	8003fac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003f94:	490b      	ldr	r1, [pc, #44]	; (8003fc4 <vQueueAddToRegistry+0x4c>)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	683a      	ldr	r2, [r7, #0]
 8003f9a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003f9e:	4a09      	ldr	r2, [pc, #36]	; (8003fc4 <vQueueAddToRegistry+0x4c>)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	00db      	lsls	r3, r3, #3
 8003fa4:	4413      	add	r3, r2
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003faa:	e006      	b.n	8003fba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	3301      	adds	r3, #1
 8003fb0:	60fb      	str	r3, [r7, #12]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2b07      	cmp	r3, #7
 8003fb6:	d9e7      	bls.n	8003f88 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003fb8:	bf00      	nop
 8003fba:	bf00      	nop
 8003fbc:	3714      	adds	r7, #20
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bc80      	pop	{r7}
 8003fc2:	4770      	bx	lr
 8003fc4:	2000084c 	.word	0x2000084c

08003fc8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b086      	sub	sp, #24
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003fd8:	f001 fb28 	bl	800562c <vPortEnterCritical>
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fe2:	b25b      	sxtb	r3, r3
 8003fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe8:	d103      	bne.n	8003ff2 <vQueueWaitForMessageRestricted+0x2a>
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ff8:	b25b      	sxtb	r3, r3
 8003ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ffe:	d103      	bne.n	8004008 <vQueueWaitForMessageRestricted+0x40>
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004008:	f001 fb40 	bl	800568c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004010:	2b00      	cmp	r3, #0
 8004012:	d106      	bne.n	8004022 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	3324      	adds	r3, #36	; 0x24
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	68b9      	ldr	r1, [r7, #8]
 800401c:	4618      	mov	r0, r3
 800401e:	f000 fc31 	bl	8004884 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004022:	6978      	ldr	r0, [r7, #20]
 8004024:	f7ff ff28 	bl	8003e78 <prvUnlockQueue>
	}
 8004028:	bf00      	nop
 800402a:	3718      	adds	r7, #24
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004030:	b580      	push	{r7, lr}
 8004032:	b08e      	sub	sp, #56	; 0x38
 8004034:	af04      	add	r7, sp, #16
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
 800403c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800403e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004040:	2b00      	cmp	r3, #0
 8004042:	d10a      	bne.n	800405a <xTaskCreateStatic+0x2a>
	__asm volatile
 8004044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004048:	f383 8811 	msr	BASEPRI, r3
 800404c:	f3bf 8f6f 	isb	sy
 8004050:	f3bf 8f4f 	dsb	sy
 8004054:	623b      	str	r3, [r7, #32]
}
 8004056:	bf00      	nop
 8004058:	e7fe      	b.n	8004058 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800405a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10a      	bne.n	8004076 <xTaskCreateStatic+0x46>
	__asm volatile
 8004060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004064:	f383 8811 	msr	BASEPRI, r3
 8004068:	f3bf 8f6f 	isb	sy
 800406c:	f3bf 8f4f 	dsb	sy
 8004070:	61fb      	str	r3, [r7, #28]
}
 8004072:	bf00      	nop
 8004074:	e7fe      	b.n	8004074 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004076:	235c      	movs	r3, #92	; 0x5c
 8004078:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	2b5c      	cmp	r3, #92	; 0x5c
 800407e:	d00a      	beq.n	8004096 <xTaskCreateStatic+0x66>
	__asm volatile
 8004080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004084:	f383 8811 	msr	BASEPRI, r3
 8004088:	f3bf 8f6f 	isb	sy
 800408c:	f3bf 8f4f 	dsb	sy
 8004090:	61bb      	str	r3, [r7, #24]
}
 8004092:	bf00      	nop
 8004094:	e7fe      	b.n	8004094 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004098:	2b00      	cmp	r3, #0
 800409a:	d01e      	beq.n	80040da <xTaskCreateStatic+0xaa>
 800409c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d01b      	beq.n	80040da <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80040a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80040a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040aa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80040ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ae:	2202      	movs	r2, #2
 80040b0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80040b4:	2300      	movs	r3, #0
 80040b6:	9303      	str	r3, [sp, #12]
 80040b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ba:	9302      	str	r3, [sp, #8]
 80040bc:	f107 0314 	add.w	r3, r7, #20
 80040c0:	9301      	str	r3, [sp, #4]
 80040c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c4:	9300      	str	r3, [sp, #0]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	68b9      	ldr	r1, [r7, #8]
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	f000 f850 	bl	8004172 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80040d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80040d4:	f000 f8d4 	bl	8004280 <prvAddNewTaskToReadyList>
 80040d8:	e001      	b.n	80040de <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80040da:	2300      	movs	r3, #0
 80040dc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80040de:	697b      	ldr	r3, [r7, #20]
	}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3728      	adds	r7, #40	; 0x28
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b08c      	sub	sp, #48	; 0x30
 80040ec:	af04      	add	r7, sp, #16
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	603b      	str	r3, [r7, #0]
 80040f4:	4613      	mov	r3, r2
 80040f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040f8:	88fb      	ldrh	r3, [r7, #6]
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	4618      	mov	r0, r3
 80040fe:	f001 fb95 	bl	800582c <pvPortMalloc>
 8004102:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00e      	beq.n	8004128 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800410a:	205c      	movs	r0, #92	; 0x5c
 800410c:	f001 fb8e 	bl	800582c <pvPortMalloc>
 8004110:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d003      	beq.n	8004120 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	631a      	str	r2, [r3, #48]	; 0x30
 800411e:	e005      	b.n	800412c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004120:	6978      	ldr	r0, [r7, #20]
 8004122:	f001 fc47 	bl	80059b4 <vPortFree>
 8004126:	e001      	b.n	800412c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004128:	2300      	movs	r3, #0
 800412a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d017      	beq.n	8004162 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800413a:	88fa      	ldrh	r2, [r7, #6]
 800413c:	2300      	movs	r3, #0
 800413e:	9303      	str	r3, [sp, #12]
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	9302      	str	r3, [sp, #8]
 8004144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004146:	9301      	str	r3, [sp, #4]
 8004148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800414a:	9300      	str	r3, [sp, #0]
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	68b9      	ldr	r1, [r7, #8]
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f000 f80e 	bl	8004172 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004156:	69f8      	ldr	r0, [r7, #28]
 8004158:	f000 f892 	bl	8004280 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800415c:	2301      	movs	r3, #1
 800415e:	61bb      	str	r3, [r7, #24]
 8004160:	e002      	b.n	8004168 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004162:	f04f 33ff 	mov.w	r3, #4294967295
 8004166:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004168:	69bb      	ldr	r3, [r7, #24]
	}
 800416a:	4618      	mov	r0, r3
 800416c:	3720      	adds	r7, #32
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004172:	b580      	push	{r7, lr}
 8004174:	b088      	sub	sp, #32
 8004176:	af00      	add	r7, sp, #0
 8004178:	60f8      	str	r0, [r7, #12]
 800417a:	60b9      	str	r1, [r7, #8]
 800417c:	607a      	str	r2, [r7, #4]
 800417e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004182:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	461a      	mov	r2, r3
 800418a:	21a5      	movs	r1, #165	; 0xa5
 800418c:	f001 fdf2 	bl	8005d74 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004192:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800419a:	3b01      	subs	r3, #1
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	4413      	add	r3, r2
 80041a0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	f023 0307 	bic.w	r3, r3, #7
 80041a8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	f003 0307 	and.w	r3, r3, #7
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00a      	beq.n	80041ca <prvInitialiseNewTask+0x58>
	__asm volatile
 80041b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b8:	f383 8811 	msr	BASEPRI, r3
 80041bc:	f3bf 8f6f 	isb	sy
 80041c0:	f3bf 8f4f 	dsb	sy
 80041c4:	617b      	str	r3, [r7, #20]
}
 80041c6:	bf00      	nop
 80041c8:	e7fe      	b.n	80041c8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041ca:	2300      	movs	r3, #0
 80041cc:	61fb      	str	r3, [r7, #28]
 80041ce:	e012      	b.n	80041f6 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	4413      	add	r3, r2
 80041d6:	7819      	ldrb	r1, [r3, #0]
 80041d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	4413      	add	r3, r2
 80041de:	3334      	adds	r3, #52	; 0x34
 80041e0:	460a      	mov	r2, r1
 80041e2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80041e4:	68ba      	ldr	r2, [r7, #8]
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	4413      	add	r3, r2
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d006      	beq.n	80041fe <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	3301      	adds	r3, #1
 80041f4:	61fb      	str	r3, [r7, #28]
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	2b0f      	cmp	r3, #15
 80041fa:	d9e9      	bls.n	80041d0 <prvInitialiseNewTask+0x5e>
 80041fc:	e000      	b.n	8004200 <prvInitialiseNewTask+0x8e>
		{
			break;
 80041fe:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004202:	2200      	movs	r2, #0
 8004204:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800420a:	2b37      	cmp	r3, #55	; 0x37
 800420c:	d901      	bls.n	8004212 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800420e:	2337      	movs	r3, #55	; 0x37
 8004210:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004214:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004216:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800421c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800421e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004220:	2200      	movs	r2, #0
 8004222:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004226:	3304      	adds	r3, #4
 8004228:	4618      	mov	r0, r3
 800422a:	f7ff f98c 	bl	8003546 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800422e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004230:	3318      	adds	r3, #24
 8004232:	4618      	mov	r0, r3
 8004234:	f7ff f987 	bl	8003546 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800423a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800423c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800423e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004240:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004246:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800424c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800424e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004250:	2200      	movs	r2, #0
 8004252:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004256:	2200      	movs	r2, #0
 8004258:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	68f9      	ldr	r1, [r7, #12]
 8004260:	69b8      	ldr	r0, [r7, #24]
 8004262:	f001 f8ef 	bl	8005444 <pxPortInitialiseStack>
 8004266:	4602      	mov	r2, r0
 8004268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800426c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800426e:	2b00      	cmp	r3, #0
 8004270:	d002      	beq.n	8004278 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004274:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004276:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004278:	bf00      	nop
 800427a:	3720      	adds	r7, #32
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004288:	f001 f9d0 	bl	800562c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800428c:	4b2d      	ldr	r3, [pc, #180]	; (8004344 <prvAddNewTaskToReadyList+0xc4>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	3301      	adds	r3, #1
 8004292:	4a2c      	ldr	r2, [pc, #176]	; (8004344 <prvAddNewTaskToReadyList+0xc4>)
 8004294:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004296:	4b2c      	ldr	r3, [pc, #176]	; (8004348 <prvAddNewTaskToReadyList+0xc8>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d109      	bne.n	80042b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800429e:	4a2a      	ldr	r2, [pc, #168]	; (8004348 <prvAddNewTaskToReadyList+0xc8>)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80042a4:	4b27      	ldr	r3, [pc, #156]	; (8004344 <prvAddNewTaskToReadyList+0xc4>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d110      	bne.n	80042ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80042ac:	f000 fc16 	bl	8004adc <prvInitialiseTaskLists>
 80042b0:	e00d      	b.n	80042ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80042b2:	4b26      	ldr	r3, [pc, #152]	; (800434c <prvAddNewTaskToReadyList+0xcc>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d109      	bne.n	80042ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80042ba:	4b23      	ldr	r3, [pc, #140]	; (8004348 <prvAddNewTaskToReadyList+0xc8>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d802      	bhi.n	80042ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80042c8:	4a1f      	ldr	r2, [pc, #124]	; (8004348 <prvAddNewTaskToReadyList+0xc8>)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80042ce:	4b20      	ldr	r3, [pc, #128]	; (8004350 <prvAddNewTaskToReadyList+0xd0>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	3301      	adds	r3, #1
 80042d4:	4a1e      	ldr	r2, [pc, #120]	; (8004350 <prvAddNewTaskToReadyList+0xd0>)
 80042d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80042d8:	4b1d      	ldr	r3, [pc, #116]	; (8004350 <prvAddNewTaskToReadyList+0xd0>)
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042e4:	4b1b      	ldr	r3, [pc, #108]	; (8004354 <prvAddNewTaskToReadyList+0xd4>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d903      	bls.n	80042f4 <prvAddNewTaskToReadyList+0x74>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f0:	4a18      	ldr	r2, [pc, #96]	; (8004354 <prvAddNewTaskToReadyList+0xd4>)
 80042f2:	6013      	str	r3, [r2, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f8:	4613      	mov	r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4413      	add	r3, r2
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	4a15      	ldr	r2, [pc, #84]	; (8004358 <prvAddNewTaskToReadyList+0xd8>)
 8004302:	441a      	add	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	3304      	adds	r3, #4
 8004308:	4619      	mov	r1, r3
 800430a:	4610      	mov	r0, r2
 800430c:	f7ff f927 	bl	800355e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004310:	f001 f9bc 	bl	800568c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004314:	4b0d      	ldr	r3, [pc, #52]	; (800434c <prvAddNewTaskToReadyList+0xcc>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00e      	beq.n	800433a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800431c:	4b0a      	ldr	r3, [pc, #40]	; (8004348 <prvAddNewTaskToReadyList+0xc8>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004326:	429a      	cmp	r2, r3
 8004328:	d207      	bcs.n	800433a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800432a:	4b0c      	ldr	r3, [pc, #48]	; (800435c <prvAddNewTaskToReadyList+0xdc>)
 800432c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004330:	601a      	str	r2, [r3, #0]
 8004332:	f3bf 8f4f 	dsb	sy
 8004336:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800433a:	bf00      	nop
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	20000d60 	.word	0x20000d60
 8004348:	2000088c 	.word	0x2000088c
 800434c:	20000d6c 	.word	0x20000d6c
 8004350:	20000d7c 	.word	0x20000d7c
 8004354:	20000d68 	.word	0x20000d68
 8004358:	20000890 	.word	0x20000890
 800435c:	e000ed04 	.word	0xe000ed04

08004360 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004368:	2300      	movs	r3, #0
 800436a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d017      	beq.n	80043a2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004372:	4b13      	ldr	r3, [pc, #76]	; (80043c0 <vTaskDelay+0x60>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00a      	beq.n	8004390 <vTaskDelay+0x30>
	__asm volatile
 800437a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437e:	f383 8811 	msr	BASEPRI, r3
 8004382:	f3bf 8f6f 	isb	sy
 8004386:	f3bf 8f4f 	dsb	sy
 800438a:	60bb      	str	r3, [r7, #8]
}
 800438c:	bf00      	nop
 800438e:	e7fe      	b.n	800438e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004390:	f000 f880 	bl	8004494 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004394:	2100      	movs	r1, #0
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 fcee 	bl	8004d78 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800439c:	f000 f888 	bl	80044b0 <xTaskResumeAll>
 80043a0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d107      	bne.n	80043b8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80043a8:	4b06      	ldr	r3, [pc, #24]	; (80043c4 <vTaskDelay+0x64>)
 80043aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043ae:	601a      	str	r2, [r3, #0]
 80043b0:	f3bf 8f4f 	dsb	sy
 80043b4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80043b8:	bf00      	nop
 80043ba:	3710      	adds	r7, #16
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	20000d88 	.word	0x20000d88
 80043c4:	e000ed04 	.word	0xe000ed04

080043c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b08a      	sub	sp, #40	; 0x28
 80043cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80043ce:	2300      	movs	r3, #0
 80043d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80043d2:	2300      	movs	r3, #0
 80043d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80043d6:	463a      	mov	r2, r7
 80043d8:	1d39      	adds	r1, r7, #4
 80043da:	f107 0308 	add.w	r3, r7, #8
 80043de:	4618      	mov	r0, r3
 80043e0:	f7ff f860 	bl	80034a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80043e4:	6839      	ldr	r1, [r7, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	68ba      	ldr	r2, [r7, #8]
 80043ea:	9202      	str	r2, [sp, #8]
 80043ec:	9301      	str	r3, [sp, #4]
 80043ee:	2300      	movs	r3, #0
 80043f0:	9300      	str	r3, [sp, #0]
 80043f2:	2300      	movs	r3, #0
 80043f4:	460a      	mov	r2, r1
 80043f6:	4921      	ldr	r1, [pc, #132]	; (800447c <vTaskStartScheduler+0xb4>)
 80043f8:	4821      	ldr	r0, [pc, #132]	; (8004480 <vTaskStartScheduler+0xb8>)
 80043fa:	f7ff fe19 	bl	8004030 <xTaskCreateStatic>
 80043fe:	4603      	mov	r3, r0
 8004400:	4a20      	ldr	r2, [pc, #128]	; (8004484 <vTaskStartScheduler+0xbc>)
 8004402:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004404:	4b1f      	ldr	r3, [pc, #124]	; (8004484 <vTaskStartScheduler+0xbc>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d002      	beq.n	8004412 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800440c:	2301      	movs	r3, #1
 800440e:	617b      	str	r3, [r7, #20]
 8004410:	e001      	b.n	8004416 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004412:	2300      	movs	r3, #0
 8004414:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	2b01      	cmp	r3, #1
 800441a:	d102      	bne.n	8004422 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800441c:	f000 fd00 	bl	8004e20 <xTimerCreateTimerTask>
 8004420:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d116      	bne.n	8004456 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442c:	f383 8811 	msr	BASEPRI, r3
 8004430:	f3bf 8f6f 	isb	sy
 8004434:	f3bf 8f4f 	dsb	sy
 8004438:	613b      	str	r3, [r7, #16]
}
 800443a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800443c:	4b12      	ldr	r3, [pc, #72]	; (8004488 <vTaskStartScheduler+0xc0>)
 800443e:	f04f 32ff 	mov.w	r2, #4294967295
 8004442:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004444:	4b11      	ldr	r3, [pc, #68]	; (800448c <vTaskStartScheduler+0xc4>)
 8004446:	2201      	movs	r2, #1
 8004448:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800444a:	4b11      	ldr	r3, [pc, #68]	; (8004490 <vTaskStartScheduler+0xc8>)
 800444c:	2200      	movs	r2, #0
 800444e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004450:	f001 f87a 	bl	8005548 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004454:	e00e      	b.n	8004474 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800445c:	d10a      	bne.n	8004474 <vTaskStartScheduler+0xac>
	__asm volatile
 800445e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004462:	f383 8811 	msr	BASEPRI, r3
 8004466:	f3bf 8f6f 	isb	sy
 800446a:	f3bf 8f4f 	dsb	sy
 800446e:	60fb      	str	r3, [r7, #12]
}
 8004470:	bf00      	nop
 8004472:	e7fe      	b.n	8004472 <vTaskStartScheduler+0xaa>
}
 8004474:	bf00      	nop
 8004476:	3718      	adds	r7, #24
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	0800659c 	.word	0x0800659c
 8004480:	08004aad 	.word	0x08004aad
 8004484:	20000d84 	.word	0x20000d84
 8004488:	20000d80 	.word	0x20000d80
 800448c:	20000d6c 	.word	0x20000d6c
 8004490:	20000d64 	.word	0x20000d64

08004494 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004494:	b480      	push	{r7}
 8004496:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004498:	4b04      	ldr	r3, [pc, #16]	; (80044ac <vTaskSuspendAll+0x18>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	3301      	adds	r3, #1
 800449e:	4a03      	ldr	r2, [pc, #12]	; (80044ac <vTaskSuspendAll+0x18>)
 80044a0:	6013      	str	r3, [r2, #0]
}
 80044a2:	bf00      	nop
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bc80      	pop	{r7}
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	20000d88 	.word	0x20000d88

080044b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80044b6:	2300      	movs	r3, #0
 80044b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80044ba:	2300      	movs	r3, #0
 80044bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80044be:	4b42      	ldr	r3, [pc, #264]	; (80045c8 <xTaskResumeAll+0x118>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10a      	bne.n	80044dc <xTaskResumeAll+0x2c>
	__asm volatile
 80044c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ca:	f383 8811 	msr	BASEPRI, r3
 80044ce:	f3bf 8f6f 	isb	sy
 80044d2:	f3bf 8f4f 	dsb	sy
 80044d6:	603b      	str	r3, [r7, #0]
}
 80044d8:	bf00      	nop
 80044da:	e7fe      	b.n	80044da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80044dc:	f001 f8a6 	bl	800562c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80044e0:	4b39      	ldr	r3, [pc, #228]	; (80045c8 <xTaskResumeAll+0x118>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	3b01      	subs	r3, #1
 80044e6:	4a38      	ldr	r2, [pc, #224]	; (80045c8 <xTaskResumeAll+0x118>)
 80044e8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044ea:	4b37      	ldr	r3, [pc, #220]	; (80045c8 <xTaskResumeAll+0x118>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d162      	bne.n	80045b8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80044f2:	4b36      	ldr	r3, [pc, #216]	; (80045cc <xTaskResumeAll+0x11c>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d05e      	beq.n	80045b8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80044fa:	e02f      	b.n	800455c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80044fc:	4b34      	ldr	r3, [pc, #208]	; (80045d0 <xTaskResumeAll+0x120>)
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	3318      	adds	r3, #24
 8004508:	4618      	mov	r0, r3
 800450a:	f7ff f883 	bl	8003614 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	3304      	adds	r3, #4
 8004512:	4618      	mov	r0, r3
 8004514:	f7ff f87e 	bl	8003614 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800451c:	4b2d      	ldr	r3, [pc, #180]	; (80045d4 <xTaskResumeAll+0x124>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	429a      	cmp	r2, r3
 8004522:	d903      	bls.n	800452c <xTaskResumeAll+0x7c>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004528:	4a2a      	ldr	r2, [pc, #168]	; (80045d4 <xTaskResumeAll+0x124>)
 800452a:	6013      	str	r3, [r2, #0]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004530:	4613      	mov	r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	4413      	add	r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4a27      	ldr	r2, [pc, #156]	; (80045d8 <xTaskResumeAll+0x128>)
 800453a:	441a      	add	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	3304      	adds	r3, #4
 8004540:	4619      	mov	r1, r3
 8004542:	4610      	mov	r0, r2
 8004544:	f7ff f80b 	bl	800355e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800454c:	4b23      	ldr	r3, [pc, #140]	; (80045dc <xTaskResumeAll+0x12c>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004552:	429a      	cmp	r2, r3
 8004554:	d302      	bcc.n	800455c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004556:	4b22      	ldr	r3, [pc, #136]	; (80045e0 <xTaskResumeAll+0x130>)
 8004558:	2201      	movs	r2, #1
 800455a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800455c:	4b1c      	ldr	r3, [pc, #112]	; (80045d0 <xTaskResumeAll+0x120>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d1cb      	bne.n	80044fc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d001      	beq.n	800456e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800456a:	f000 fb55 	bl	8004c18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800456e:	4b1d      	ldr	r3, [pc, #116]	; (80045e4 <xTaskResumeAll+0x134>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d010      	beq.n	800459c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800457a:	f000 f845 	bl	8004608 <xTaskIncrementTick>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d002      	beq.n	800458a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004584:	4b16      	ldr	r3, [pc, #88]	; (80045e0 <xTaskResumeAll+0x130>)
 8004586:	2201      	movs	r2, #1
 8004588:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	3b01      	subs	r3, #1
 800458e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1f1      	bne.n	800457a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8004596:	4b13      	ldr	r3, [pc, #76]	; (80045e4 <xTaskResumeAll+0x134>)
 8004598:	2200      	movs	r2, #0
 800459a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800459c:	4b10      	ldr	r3, [pc, #64]	; (80045e0 <xTaskResumeAll+0x130>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d009      	beq.n	80045b8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80045a4:	2301      	movs	r3, #1
 80045a6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80045a8:	4b0f      	ldr	r3, [pc, #60]	; (80045e8 <xTaskResumeAll+0x138>)
 80045aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045ae:	601a      	str	r2, [r3, #0]
 80045b0:	f3bf 8f4f 	dsb	sy
 80045b4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80045b8:	f001 f868 	bl	800568c <vPortExitCritical>

	return xAlreadyYielded;
 80045bc:	68bb      	ldr	r3, [r7, #8]
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	20000d88 	.word	0x20000d88
 80045cc:	20000d60 	.word	0x20000d60
 80045d0:	20000d20 	.word	0x20000d20
 80045d4:	20000d68 	.word	0x20000d68
 80045d8:	20000890 	.word	0x20000890
 80045dc:	2000088c 	.word	0x2000088c
 80045e0:	20000d74 	.word	0x20000d74
 80045e4:	20000d70 	.word	0x20000d70
 80045e8:	e000ed04 	.word	0xe000ed04

080045ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80045f2:	4b04      	ldr	r3, [pc, #16]	; (8004604 <xTaskGetTickCount+0x18>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80045f8:	687b      	ldr	r3, [r7, #4]
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	370c      	adds	r7, #12
 80045fe:	46bd      	mov	sp, r7
 8004600:	bc80      	pop	{r7}
 8004602:	4770      	bx	lr
 8004604:	20000d64 	.word	0x20000d64

08004608 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b086      	sub	sp, #24
 800460c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800460e:	2300      	movs	r3, #0
 8004610:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004612:	4b51      	ldr	r3, [pc, #324]	; (8004758 <xTaskIncrementTick+0x150>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2b00      	cmp	r3, #0
 8004618:	f040 808e 	bne.w	8004738 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800461c:	4b4f      	ldr	r3, [pc, #316]	; (800475c <xTaskIncrementTick+0x154>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	3301      	adds	r3, #1
 8004622:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004624:	4a4d      	ldr	r2, [pc, #308]	; (800475c <xTaskIncrementTick+0x154>)
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d120      	bne.n	8004672 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004630:	4b4b      	ldr	r3, [pc, #300]	; (8004760 <xTaskIncrementTick+0x158>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00a      	beq.n	8004650 <xTaskIncrementTick+0x48>
	__asm volatile
 800463a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463e:	f383 8811 	msr	BASEPRI, r3
 8004642:	f3bf 8f6f 	isb	sy
 8004646:	f3bf 8f4f 	dsb	sy
 800464a:	603b      	str	r3, [r7, #0]
}
 800464c:	bf00      	nop
 800464e:	e7fe      	b.n	800464e <xTaskIncrementTick+0x46>
 8004650:	4b43      	ldr	r3, [pc, #268]	; (8004760 <xTaskIncrementTick+0x158>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	60fb      	str	r3, [r7, #12]
 8004656:	4b43      	ldr	r3, [pc, #268]	; (8004764 <xTaskIncrementTick+0x15c>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a41      	ldr	r2, [pc, #260]	; (8004760 <xTaskIncrementTick+0x158>)
 800465c:	6013      	str	r3, [r2, #0]
 800465e:	4a41      	ldr	r2, [pc, #260]	; (8004764 <xTaskIncrementTick+0x15c>)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6013      	str	r3, [r2, #0]
 8004664:	4b40      	ldr	r3, [pc, #256]	; (8004768 <xTaskIncrementTick+0x160>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	3301      	adds	r3, #1
 800466a:	4a3f      	ldr	r2, [pc, #252]	; (8004768 <xTaskIncrementTick+0x160>)
 800466c:	6013      	str	r3, [r2, #0]
 800466e:	f000 fad3 	bl	8004c18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004672:	4b3e      	ldr	r3, [pc, #248]	; (800476c <xTaskIncrementTick+0x164>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	693a      	ldr	r2, [r7, #16]
 8004678:	429a      	cmp	r2, r3
 800467a:	d34e      	bcc.n	800471a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800467c:	4b38      	ldr	r3, [pc, #224]	; (8004760 <xTaskIncrementTick+0x158>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <xTaskIncrementTick+0x82>
 8004686:	2301      	movs	r3, #1
 8004688:	e000      	b.n	800468c <xTaskIncrementTick+0x84>
 800468a:	2300      	movs	r3, #0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d004      	beq.n	800469a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004690:	4b36      	ldr	r3, [pc, #216]	; (800476c <xTaskIncrementTick+0x164>)
 8004692:	f04f 32ff 	mov.w	r2, #4294967295
 8004696:	601a      	str	r2, [r3, #0]
					break;
 8004698:	e03f      	b.n	800471a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800469a:	4b31      	ldr	r3, [pc, #196]	; (8004760 <xTaskIncrementTick+0x158>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d203      	bcs.n	80046ba <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80046b2:	4a2e      	ldr	r2, [pc, #184]	; (800476c <xTaskIncrementTick+0x164>)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6013      	str	r3, [r2, #0]
						break;
 80046b8:	e02f      	b.n	800471a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	3304      	adds	r3, #4
 80046be:	4618      	mov	r0, r3
 80046c0:	f7fe ffa8 	bl	8003614 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d004      	beq.n	80046d6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	3318      	adds	r3, #24
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7fe ff9f 	bl	8003614 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046da:	4b25      	ldr	r3, [pc, #148]	; (8004770 <xTaskIncrementTick+0x168>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d903      	bls.n	80046ea <xTaskIncrementTick+0xe2>
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e6:	4a22      	ldr	r2, [pc, #136]	; (8004770 <xTaskIncrementTick+0x168>)
 80046e8:	6013      	str	r3, [r2, #0]
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ee:	4613      	mov	r3, r2
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	4413      	add	r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	4a1f      	ldr	r2, [pc, #124]	; (8004774 <xTaskIncrementTick+0x16c>)
 80046f8:	441a      	add	r2, r3
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	3304      	adds	r3, #4
 80046fe:	4619      	mov	r1, r3
 8004700:	4610      	mov	r0, r2
 8004702:	f7fe ff2c 	bl	800355e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800470a:	4b1b      	ldr	r3, [pc, #108]	; (8004778 <xTaskIncrementTick+0x170>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004710:	429a      	cmp	r2, r3
 8004712:	d3b3      	bcc.n	800467c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004714:	2301      	movs	r3, #1
 8004716:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004718:	e7b0      	b.n	800467c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800471a:	4b17      	ldr	r3, [pc, #92]	; (8004778 <xTaskIncrementTick+0x170>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004720:	4914      	ldr	r1, [pc, #80]	; (8004774 <xTaskIncrementTick+0x16c>)
 8004722:	4613      	mov	r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	4413      	add	r3, r2
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	440b      	add	r3, r1
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d907      	bls.n	8004742 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004732:	2301      	movs	r3, #1
 8004734:	617b      	str	r3, [r7, #20]
 8004736:	e004      	b.n	8004742 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004738:	4b10      	ldr	r3, [pc, #64]	; (800477c <xTaskIncrementTick+0x174>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	3301      	adds	r3, #1
 800473e:	4a0f      	ldr	r2, [pc, #60]	; (800477c <xTaskIncrementTick+0x174>)
 8004740:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004742:	4b0f      	ldr	r3, [pc, #60]	; (8004780 <xTaskIncrementTick+0x178>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d001      	beq.n	800474e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800474a:	2301      	movs	r3, #1
 800474c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800474e:	697b      	ldr	r3, [r7, #20]
}
 8004750:	4618      	mov	r0, r3
 8004752:	3718      	adds	r7, #24
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	20000d88 	.word	0x20000d88
 800475c:	20000d64 	.word	0x20000d64
 8004760:	20000d18 	.word	0x20000d18
 8004764:	20000d1c 	.word	0x20000d1c
 8004768:	20000d78 	.word	0x20000d78
 800476c:	20000d80 	.word	0x20000d80
 8004770:	20000d68 	.word	0x20000d68
 8004774:	20000890 	.word	0x20000890
 8004778:	2000088c 	.word	0x2000088c
 800477c:	20000d70 	.word	0x20000d70
 8004780:	20000d74 	.word	0x20000d74

08004784 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004784:	b480      	push	{r7}
 8004786:	b085      	sub	sp, #20
 8004788:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800478a:	4b27      	ldr	r3, [pc, #156]	; (8004828 <vTaskSwitchContext+0xa4>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d003      	beq.n	800479a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004792:	4b26      	ldr	r3, [pc, #152]	; (800482c <vTaskSwitchContext+0xa8>)
 8004794:	2201      	movs	r2, #1
 8004796:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004798:	e041      	b.n	800481e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800479a:	4b24      	ldr	r3, [pc, #144]	; (800482c <vTaskSwitchContext+0xa8>)
 800479c:	2200      	movs	r2, #0
 800479e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80047a0:	4b23      	ldr	r3, [pc, #140]	; (8004830 <vTaskSwitchContext+0xac>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	60fb      	str	r3, [r7, #12]
 80047a6:	e010      	b.n	80047ca <vTaskSwitchContext+0x46>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10a      	bne.n	80047c4 <vTaskSwitchContext+0x40>
	__asm volatile
 80047ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b2:	f383 8811 	msr	BASEPRI, r3
 80047b6:	f3bf 8f6f 	isb	sy
 80047ba:	f3bf 8f4f 	dsb	sy
 80047be:	607b      	str	r3, [r7, #4]
}
 80047c0:	bf00      	nop
 80047c2:	e7fe      	b.n	80047c2 <vTaskSwitchContext+0x3e>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	3b01      	subs	r3, #1
 80047c8:	60fb      	str	r3, [r7, #12]
 80047ca:	491a      	ldr	r1, [pc, #104]	; (8004834 <vTaskSwitchContext+0xb0>)
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	4613      	mov	r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	4413      	add	r3, r2
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	440b      	add	r3, r1
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d0e4      	beq.n	80047a8 <vTaskSwitchContext+0x24>
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	4613      	mov	r3, r2
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	4413      	add	r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	4a12      	ldr	r2, [pc, #72]	; (8004834 <vTaskSwitchContext+0xb0>)
 80047ea:	4413      	add	r3, r2
 80047ec:	60bb      	str	r3, [r7, #8]
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	685a      	ldr	r2, [r3, #4]
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	605a      	str	r2, [r3, #4]
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	685a      	ldr	r2, [r3, #4]
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	3308      	adds	r3, #8
 8004800:	429a      	cmp	r2, r3
 8004802:	d104      	bne.n	800480e <vTaskSwitchContext+0x8a>
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	685a      	ldr	r2, [r3, #4]
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	605a      	str	r2, [r3, #4]
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	4a08      	ldr	r2, [pc, #32]	; (8004838 <vTaskSwitchContext+0xb4>)
 8004816:	6013      	str	r3, [r2, #0]
 8004818:	4a05      	ldr	r2, [pc, #20]	; (8004830 <vTaskSwitchContext+0xac>)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6013      	str	r3, [r2, #0]
}
 800481e:	bf00      	nop
 8004820:	3714      	adds	r7, #20
 8004822:	46bd      	mov	sp, r7
 8004824:	bc80      	pop	{r7}
 8004826:	4770      	bx	lr
 8004828:	20000d88 	.word	0x20000d88
 800482c:	20000d74 	.word	0x20000d74
 8004830:	20000d68 	.word	0x20000d68
 8004834:	20000890 	.word	0x20000890
 8004838:	2000088c 	.word	0x2000088c

0800483c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d10a      	bne.n	8004862 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800484c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004850:	f383 8811 	msr	BASEPRI, r3
 8004854:	f3bf 8f6f 	isb	sy
 8004858:	f3bf 8f4f 	dsb	sy
 800485c:	60fb      	str	r3, [r7, #12]
}
 800485e:	bf00      	nop
 8004860:	e7fe      	b.n	8004860 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004862:	4b07      	ldr	r3, [pc, #28]	; (8004880 <vTaskPlaceOnEventList+0x44>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	3318      	adds	r3, #24
 8004868:	4619      	mov	r1, r3
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f7fe fe9a 	bl	80035a4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004870:	2101      	movs	r1, #1
 8004872:	6838      	ldr	r0, [r7, #0]
 8004874:	f000 fa80 	bl	8004d78 <prvAddCurrentTaskToDelayedList>
}
 8004878:	bf00      	nop
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	2000088c 	.word	0x2000088c

08004884 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004884:	b580      	push	{r7, lr}
 8004886:	b086      	sub	sp, #24
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d10a      	bne.n	80048ac <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489a:	f383 8811 	msr	BASEPRI, r3
 800489e:	f3bf 8f6f 	isb	sy
 80048a2:	f3bf 8f4f 	dsb	sy
 80048a6:	617b      	str	r3, [r7, #20]
}
 80048a8:	bf00      	nop
 80048aa:	e7fe      	b.n	80048aa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80048ac:	4b0a      	ldr	r3, [pc, #40]	; (80048d8 <vTaskPlaceOnEventListRestricted+0x54>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	3318      	adds	r3, #24
 80048b2:	4619      	mov	r1, r3
 80048b4:	68f8      	ldr	r0, [r7, #12]
 80048b6:	f7fe fe52 	bl	800355e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d002      	beq.n	80048c6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80048c0:	f04f 33ff 	mov.w	r3, #4294967295
 80048c4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80048c6:	6879      	ldr	r1, [r7, #4]
 80048c8:	68b8      	ldr	r0, [r7, #8]
 80048ca:	f000 fa55 	bl	8004d78 <prvAddCurrentTaskToDelayedList>
	}
 80048ce:	bf00      	nop
 80048d0:	3718      	adds	r7, #24
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	2000088c 	.word	0x2000088c

080048dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b086      	sub	sp, #24
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d10a      	bne.n	8004908 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80048f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f6:	f383 8811 	msr	BASEPRI, r3
 80048fa:	f3bf 8f6f 	isb	sy
 80048fe:	f3bf 8f4f 	dsb	sy
 8004902:	60fb      	str	r3, [r7, #12]
}
 8004904:	bf00      	nop
 8004906:	e7fe      	b.n	8004906 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	3318      	adds	r3, #24
 800490c:	4618      	mov	r0, r3
 800490e:	f7fe fe81 	bl	8003614 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004912:	4b1e      	ldr	r3, [pc, #120]	; (800498c <xTaskRemoveFromEventList+0xb0>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d11d      	bne.n	8004956 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	3304      	adds	r3, #4
 800491e:	4618      	mov	r0, r3
 8004920:	f7fe fe78 	bl	8003614 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004928:	4b19      	ldr	r3, [pc, #100]	; (8004990 <xTaskRemoveFromEventList+0xb4>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	429a      	cmp	r2, r3
 800492e:	d903      	bls.n	8004938 <xTaskRemoveFromEventList+0x5c>
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004934:	4a16      	ldr	r2, [pc, #88]	; (8004990 <xTaskRemoveFromEventList+0xb4>)
 8004936:	6013      	str	r3, [r2, #0]
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800493c:	4613      	mov	r3, r2
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	4413      	add	r3, r2
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	4a13      	ldr	r2, [pc, #76]	; (8004994 <xTaskRemoveFromEventList+0xb8>)
 8004946:	441a      	add	r2, r3
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	3304      	adds	r3, #4
 800494c:	4619      	mov	r1, r3
 800494e:	4610      	mov	r0, r2
 8004950:	f7fe fe05 	bl	800355e <vListInsertEnd>
 8004954:	e005      	b.n	8004962 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	3318      	adds	r3, #24
 800495a:	4619      	mov	r1, r3
 800495c:	480e      	ldr	r0, [pc, #56]	; (8004998 <xTaskRemoveFromEventList+0xbc>)
 800495e:	f7fe fdfe 	bl	800355e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004966:	4b0d      	ldr	r3, [pc, #52]	; (800499c <xTaskRemoveFromEventList+0xc0>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800496c:	429a      	cmp	r2, r3
 800496e:	d905      	bls.n	800497c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004970:	2301      	movs	r3, #1
 8004972:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004974:	4b0a      	ldr	r3, [pc, #40]	; (80049a0 <xTaskRemoveFromEventList+0xc4>)
 8004976:	2201      	movs	r2, #1
 8004978:	601a      	str	r2, [r3, #0]
 800497a:	e001      	b.n	8004980 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800497c:	2300      	movs	r3, #0
 800497e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004980:	697b      	ldr	r3, [r7, #20]
}
 8004982:	4618      	mov	r0, r3
 8004984:	3718      	adds	r7, #24
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	20000d88 	.word	0x20000d88
 8004990:	20000d68 	.word	0x20000d68
 8004994:	20000890 	.word	0x20000890
 8004998:	20000d20 	.word	0x20000d20
 800499c:	2000088c 	.word	0x2000088c
 80049a0:	20000d74 	.word	0x20000d74

080049a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80049ac:	4b06      	ldr	r3, [pc, #24]	; (80049c8 <vTaskInternalSetTimeOutState+0x24>)
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80049b4:	4b05      	ldr	r3, [pc, #20]	; (80049cc <vTaskInternalSetTimeOutState+0x28>)
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	605a      	str	r2, [r3, #4]
}
 80049bc:	bf00      	nop
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bc80      	pop	{r7}
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	20000d78 	.word	0x20000d78
 80049cc:	20000d64 	.word	0x20000d64

080049d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b088      	sub	sp, #32
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d10a      	bne.n	80049f6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80049e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e4:	f383 8811 	msr	BASEPRI, r3
 80049e8:	f3bf 8f6f 	isb	sy
 80049ec:	f3bf 8f4f 	dsb	sy
 80049f0:	613b      	str	r3, [r7, #16]
}
 80049f2:	bf00      	nop
 80049f4:	e7fe      	b.n	80049f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d10a      	bne.n	8004a12 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80049fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a00:	f383 8811 	msr	BASEPRI, r3
 8004a04:	f3bf 8f6f 	isb	sy
 8004a08:	f3bf 8f4f 	dsb	sy
 8004a0c:	60fb      	str	r3, [r7, #12]
}
 8004a0e:	bf00      	nop
 8004a10:	e7fe      	b.n	8004a10 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004a12:	f000 fe0b 	bl	800562c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004a16:	4b1d      	ldr	r3, [pc, #116]	; (8004a8c <xTaskCheckForTimeOut+0xbc>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	69ba      	ldr	r2, [r7, #24]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a2e:	d102      	bne.n	8004a36 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004a30:	2300      	movs	r3, #0
 8004a32:	61fb      	str	r3, [r7, #28]
 8004a34:	e023      	b.n	8004a7e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	4b15      	ldr	r3, [pc, #84]	; (8004a90 <xTaskCheckForTimeOut+0xc0>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d007      	beq.n	8004a52 <xTaskCheckForTimeOut+0x82>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	69ba      	ldr	r2, [r7, #24]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d302      	bcc.n	8004a52 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	61fb      	str	r3, [r7, #28]
 8004a50:	e015      	b.n	8004a7e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	697a      	ldr	r2, [r7, #20]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d20b      	bcs.n	8004a74 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	1ad2      	subs	r2, r2, r3
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f7ff ff9b 	bl	80049a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	61fb      	str	r3, [r7, #28]
 8004a72:	e004      	b.n	8004a7e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	2200      	movs	r2, #0
 8004a78:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004a7e:	f000 fe05 	bl	800568c <vPortExitCritical>

	return xReturn;
 8004a82:	69fb      	ldr	r3, [r7, #28]
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3720      	adds	r7, #32
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	20000d64 	.word	0x20000d64
 8004a90:	20000d78 	.word	0x20000d78

08004a94 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004a94:	b480      	push	{r7}
 8004a96:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004a98:	4b03      	ldr	r3, [pc, #12]	; (8004aa8 <vTaskMissedYield+0x14>)
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	601a      	str	r2, [r3, #0]
}
 8004a9e:	bf00      	nop
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bc80      	pop	{r7}
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	20000d74 	.word	0x20000d74

08004aac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004ab4:	f000 f852 	bl	8004b5c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004ab8:	4b06      	ldr	r3, [pc, #24]	; (8004ad4 <prvIdleTask+0x28>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d9f9      	bls.n	8004ab4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004ac0:	4b05      	ldr	r3, [pc, #20]	; (8004ad8 <prvIdleTask+0x2c>)
 8004ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ac6:	601a      	str	r2, [r3, #0]
 8004ac8:	f3bf 8f4f 	dsb	sy
 8004acc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004ad0:	e7f0      	b.n	8004ab4 <prvIdleTask+0x8>
 8004ad2:	bf00      	nop
 8004ad4:	20000890 	.word	0x20000890
 8004ad8:	e000ed04 	.word	0xe000ed04

08004adc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b082      	sub	sp, #8
 8004ae0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	607b      	str	r3, [r7, #4]
 8004ae6:	e00c      	b.n	8004b02 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	4613      	mov	r3, r2
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	4413      	add	r3, r2
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	4a12      	ldr	r2, [pc, #72]	; (8004b3c <prvInitialiseTaskLists+0x60>)
 8004af4:	4413      	add	r3, r2
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7fe fd06 	bl	8003508 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	3301      	adds	r3, #1
 8004b00:	607b      	str	r3, [r7, #4]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2b37      	cmp	r3, #55	; 0x37
 8004b06:	d9ef      	bls.n	8004ae8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004b08:	480d      	ldr	r0, [pc, #52]	; (8004b40 <prvInitialiseTaskLists+0x64>)
 8004b0a:	f7fe fcfd 	bl	8003508 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004b0e:	480d      	ldr	r0, [pc, #52]	; (8004b44 <prvInitialiseTaskLists+0x68>)
 8004b10:	f7fe fcfa 	bl	8003508 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004b14:	480c      	ldr	r0, [pc, #48]	; (8004b48 <prvInitialiseTaskLists+0x6c>)
 8004b16:	f7fe fcf7 	bl	8003508 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004b1a:	480c      	ldr	r0, [pc, #48]	; (8004b4c <prvInitialiseTaskLists+0x70>)
 8004b1c:	f7fe fcf4 	bl	8003508 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004b20:	480b      	ldr	r0, [pc, #44]	; (8004b50 <prvInitialiseTaskLists+0x74>)
 8004b22:	f7fe fcf1 	bl	8003508 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004b26:	4b0b      	ldr	r3, [pc, #44]	; (8004b54 <prvInitialiseTaskLists+0x78>)
 8004b28:	4a05      	ldr	r2, [pc, #20]	; (8004b40 <prvInitialiseTaskLists+0x64>)
 8004b2a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004b2c:	4b0a      	ldr	r3, [pc, #40]	; (8004b58 <prvInitialiseTaskLists+0x7c>)
 8004b2e:	4a05      	ldr	r2, [pc, #20]	; (8004b44 <prvInitialiseTaskLists+0x68>)
 8004b30:	601a      	str	r2, [r3, #0]
}
 8004b32:	bf00      	nop
 8004b34:	3708      	adds	r7, #8
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	20000890 	.word	0x20000890
 8004b40:	20000cf0 	.word	0x20000cf0
 8004b44:	20000d04 	.word	0x20000d04
 8004b48:	20000d20 	.word	0x20000d20
 8004b4c:	20000d34 	.word	0x20000d34
 8004b50:	20000d4c 	.word	0x20000d4c
 8004b54:	20000d18 	.word	0x20000d18
 8004b58:	20000d1c 	.word	0x20000d1c

08004b5c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b62:	e019      	b.n	8004b98 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004b64:	f000 fd62 	bl	800562c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004b68:	4b10      	ldr	r3, [pc, #64]	; (8004bac <prvCheckTasksWaitingTermination+0x50>)
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	3304      	adds	r3, #4
 8004b74:	4618      	mov	r0, r3
 8004b76:	f7fe fd4d 	bl	8003614 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004b7a:	4b0d      	ldr	r3, [pc, #52]	; (8004bb0 <prvCheckTasksWaitingTermination+0x54>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	3b01      	subs	r3, #1
 8004b80:	4a0b      	ldr	r2, [pc, #44]	; (8004bb0 <prvCheckTasksWaitingTermination+0x54>)
 8004b82:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004b84:	4b0b      	ldr	r3, [pc, #44]	; (8004bb4 <prvCheckTasksWaitingTermination+0x58>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	4a0a      	ldr	r2, [pc, #40]	; (8004bb4 <prvCheckTasksWaitingTermination+0x58>)
 8004b8c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004b8e:	f000 fd7d 	bl	800568c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 f810 	bl	8004bb8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b98:	4b06      	ldr	r3, [pc, #24]	; (8004bb4 <prvCheckTasksWaitingTermination+0x58>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d1e1      	bne.n	8004b64 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004ba0:	bf00      	nop
 8004ba2:	bf00      	nop
 8004ba4:	3708      	adds	r7, #8
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	20000d34 	.word	0x20000d34
 8004bb0:	20000d60 	.word	0x20000d60
 8004bb4:	20000d48 	.word	0x20000d48

08004bb8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d108      	bne.n	8004bdc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f000 fef0 	bl	80059b4 <vPortFree>
				vPortFree( pxTCB );
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 feed 	bl	80059b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004bda:	e018      	b.n	8004c0e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d103      	bne.n	8004bee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 fee4 	bl	80059b4 <vPortFree>
	}
 8004bec:	e00f      	b.n	8004c0e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d00a      	beq.n	8004c0e <prvDeleteTCB+0x56>
	__asm volatile
 8004bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfc:	f383 8811 	msr	BASEPRI, r3
 8004c00:	f3bf 8f6f 	isb	sy
 8004c04:	f3bf 8f4f 	dsb	sy
 8004c08:	60fb      	str	r3, [r7, #12]
}
 8004c0a:	bf00      	nop
 8004c0c:	e7fe      	b.n	8004c0c <prvDeleteTCB+0x54>
	}
 8004c0e:	bf00      	nop
 8004c10:	3710      	adds	r7, #16
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
	...

08004c18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c1e:	4b0e      	ldr	r3, [pc, #56]	; (8004c58 <prvResetNextTaskUnblockTime+0x40>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d101      	bne.n	8004c2c <prvResetNextTaskUnblockTime+0x14>
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e000      	b.n	8004c2e <prvResetNextTaskUnblockTime+0x16>
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d004      	beq.n	8004c3c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004c32:	4b0a      	ldr	r3, [pc, #40]	; (8004c5c <prvResetNextTaskUnblockTime+0x44>)
 8004c34:	f04f 32ff 	mov.w	r2, #4294967295
 8004c38:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004c3a:	e008      	b.n	8004c4e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004c3c:	4b06      	ldr	r3, [pc, #24]	; (8004c58 <prvResetNextTaskUnblockTime+0x40>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	4a04      	ldr	r2, [pc, #16]	; (8004c5c <prvResetNextTaskUnblockTime+0x44>)
 8004c4c:	6013      	str	r3, [r2, #0]
}
 8004c4e:	bf00      	nop
 8004c50:	370c      	adds	r7, #12
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bc80      	pop	{r7}
 8004c56:	4770      	bx	lr
 8004c58:	20000d18 	.word	0x20000d18
 8004c5c:	20000d80 	.word	0x20000d80

08004c60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004c66:	4b0b      	ldr	r3, [pc, #44]	; (8004c94 <xTaskGetSchedulerState+0x34>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d102      	bne.n	8004c74 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	607b      	str	r3, [r7, #4]
 8004c72:	e008      	b.n	8004c86 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c74:	4b08      	ldr	r3, [pc, #32]	; (8004c98 <xTaskGetSchedulerState+0x38>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d102      	bne.n	8004c82 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	607b      	str	r3, [r7, #4]
 8004c80:	e001      	b.n	8004c86 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004c82:	2300      	movs	r3, #0
 8004c84:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004c86:	687b      	ldr	r3, [r7, #4]
	}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bc80      	pop	{r7}
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	20000d6c 	.word	0x20000d6c
 8004c98:	20000d88 	.word	0x20000d88

08004c9c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b086      	sub	sp, #24
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d056      	beq.n	8004d60 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004cb2:	4b2e      	ldr	r3, [pc, #184]	; (8004d6c <xTaskPriorityDisinherit+0xd0>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	693a      	ldr	r2, [r7, #16]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d00a      	beq.n	8004cd2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc0:	f383 8811 	msr	BASEPRI, r3
 8004cc4:	f3bf 8f6f 	isb	sy
 8004cc8:	f3bf 8f4f 	dsb	sy
 8004ccc:	60fb      	str	r3, [r7, #12]
}
 8004cce:	bf00      	nop
 8004cd0:	e7fe      	b.n	8004cd0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d10a      	bne.n	8004cf0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cde:	f383 8811 	msr	BASEPRI, r3
 8004ce2:	f3bf 8f6f 	isb	sy
 8004ce6:	f3bf 8f4f 	dsb	sy
 8004cea:	60bb      	str	r3, [r7, #8]
}
 8004cec:	bf00      	nop
 8004cee:	e7fe      	b.n	8004cee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cf4:	1e5a      	subs	r2, r3, #1
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d02c      	beq.n	8004d60 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d128      	bne.n	8004d60 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	3304      	adds	r3, #4
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7fe fc7e 	bl	8003614 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d24:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d30:	4b0f      	ldr	r3, [pc, #60]	; (8004d70 <xTaskPriorityDisinherit+0xd4>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d903      	bls.n	8004d40 <xTaskPriorityDisinherit+0xa4>
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3c:	4a0c      	ldr	r2, [pc, #48]	; (8004d70 <xTaskPriorityDisinherit+0xd4>)
 8004d3e:	6013      	str	r3, [r2, #0]
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d44:	4613      	mov	r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4413      	add	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	4a09      	ldr	r2, [pc, #36]	; (8004d74 <xTaskPriorityDisinherit+0xd8>)
 8004d4e:	441a      	add	r2, r3
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	3304      	adds	r3, #4
 8004d54:	4619      	mov	r1, r3
 8004d56:	4610      	mov	r0, r2
 8004d58:	f7fe fc01 	bl	800355e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004d60:	697b      	ldr	r3, [r7, #20]
	}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3718      	adds	r7, #24
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	2000088c 	.word	0x2000088c
 8004d70:	20000d68 	.word	0x20000d68
 8004d74:	20000890 	.word	0x20000890

08004d78 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004d82:	4b21      	ldr	r3, [pc, #132]	; (8004e08 <prvAddCurrentTaskToDelayedList+0x90>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d88:	4b20      	ldr	r3, [pc, #128]	; (8004e0c <prvAddCurrentTaskToDelayedList+0x94>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	3304      	adds	r3, #4
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f7fe fc40 	bl	8003614 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d9a:	d10a      	bne.n	8004db2 <prvAddCurrentTaskToDelayedList+0x3a>
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d007      	beq.n	8004db2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004da2:	4b1a      	ldr	r3, [pc, #104]	; (8004e0c <prvAddCurrentTaskToDelayedList+0x94>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	3304      	adds	r3, #4
 8004da8:	4619      	mov	r1, r3
 8004daa:	4819      	ldr	r0, [pc, #100]	; (8004e10 <prvAddCurrentTaskToDelayedList+0x98>)
 8004dac:	f7fe fbd7 	bl	800355e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004db0:	e026      	b.n	8004e00 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4413      	add	r3, r2
 8004db8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004dba:	4b14      	ldr	r3, [pc, #80]	; (8004e0c <prvAddCurrentTaskToDelayedList+0x94>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68ba      	ldr	r2, [r7, #8]
 8004dc0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004dc2:	68ba      	ldr	r2, [r7, #8]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d209      	bcs.n	8004dde <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004dca:	4b12      	ldr	r3, [pc, #72]	; (8004e14 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	4b0f      	ldr	r3, [pc, #60]	; (8004e0c <prvAddCurrentTaskToDelayedList+0x94>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	3304      	adds	r3, #4
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	4610      	mov	r0, r2
 8004dd8:	f7fe fbe4 	bl	80035a4 <vListInsert>
}
 8004ddc:	e010      	b.n	8004e00 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004dde:	4b0e      	ldr	r3, [pc, #56]	; (8004e18 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	4b0a      	ldr	r3, [pc, #40]	; (8004e0c <prvAddCurrentTaskToDelayedList+0x94>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	3304      	adds	r3, #4
 8004de8:	4619      	mov	r1, r3
 8004dea:	4610      	mov	r0, r2
 8004dec:	f7fe fbda 	bl	80035a4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004df0:	4b0a      	ldr	r3, [pc, #40]	; (8004e1c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68ba      	ldr	r2, [r7, #8]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d202      	bcs.n	8004e00 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004dfa:	4a08      	ldr	r2, [pc, #32]	; (8004e1c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	6013      	str	r3, [r2, #0]
}
 8004e00:	bf00      	nop
 8004e02:	3710      	adds	r7, #16
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	20000d64 	.word	0x20000d64
 8004e0c:	2000088c 	.word	0x2000088c
 8004e10:	20000d4c 	.word	0x20000d4c
 8004e14:	20000d1c 	.word	0x20000d1c
 8004e18:	20000d18 	.word	0x20000d18
 8004e1c:	20000d80 	.word	0x20000d80

08004e20 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b08a      	sub	sp, #40	; 0x28
 8004e24:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004e26:	2300      	movs	r3, #0
 8004e28:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004e2a:	f000 facb 	bl	80053c4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004e2e:	4b1c      	ldr	r3, [pc, #112]	; (8004ea0 <xTimerCreateTimerTask+0x80>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d021      	beq.n	8004e7a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004e36:	2300      	movs	r3, #0
 8004e38:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004e3e:	1d3a      	adds	r2, r7, #4
 8004e40:	f107 0108 	add.w	r1, r7, #8
 8004e44:	f107 030c 	add.w	r3, r7, #12
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f7fe fb43 	bl	80034d4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004e4e:	6879      	ldr	r1, [r7, #4]
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	9202      	str	r2, [sp, #8]
 8004e56:	9301      	str	r3, [sp, #4]
 8004e58:	2302      	movs	r3, #2
 8004e5a:	9300      	str	r3, [sp, #0]
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	460a      	mov	r2, r1
 8004e60:	4910      	ldr	r1, [pc, #64]	; (8004ea4 <xTimerCreateTimerTask+0x84>)
 8004e62:	4811      	ldr	r0, [pc, #68]	; (8004ea8 <xTimerCreateTimerTask+0x88>)
 8004e64:	f7ff f8e4 	bl	8004030 <xTaskCreateStatic>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	4a10      	ldr	r2, [pc, #64]	; (8004eac <xTimerCreateTimerTask+0x8c>)
 8004e6c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004e6e:	4b0f      	ldr	r3, [pc, #60]	; (8004eac <xTimerCreateTimerTask+0x8c>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d001      	beq.n	8004e7a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004e76:	2301      	movs	r3, #1
 8004e78:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10a      	bne.n	8004e96 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e84:	f383 8811 	msr	BASEPRI, r3
 8004e88:	f3bf 8f6f 	isb	sy
 8004e8c:	f3bf 8f4f 	dsb	sy
 8004e90:	613b      	str	r3, [r7, #16]
}
 8004e92:	bf00      	nop
 8004e94:	e7fe      	b.n	8004e94 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004e96:	697b      	ldr	r3, [r7, #20]
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3718      	adds	r7, #24
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	20000dbc 	.word	0x20000dbc
 8004ea4:	080065a4 	.word	0x080065a4
 8004ea8:	08004fcd 	.word	0x08004fcd
 8004eac:	20000dc0 	.word	0x20000dc0

08004eb0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b08a      	sub	sp, #40	; 0x28
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	607a      	str	r2, [r7, #4]
 8004ebc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d10a      	bne.n	8004ede <xTimerGenericCommand+0x2e>
	__asm volatile
 8004ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ecc:	f383 8811 	msr	BASEPRI, r3
 8004ed0:	f3bf 8f6f 	isb	sy
 8004ed4:	f3bf 8f4f 	dsb	sy
 8004ed8:	623b      	str	r3, [r7, #32]
}
 8004eda:	bf00      	nop
 8004edc:	e7fe      	b.n	8004edc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004ede:	4b1a      	ldr	r3, [pc, #104]	; (8004f48 <xTimerGenericCommand+0x98>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d02a      	beq.n	8004f3c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	2b05      	cmp	r3, #5
 8004ef6:	dc18      	bgt.n	8004f2a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004ef8:	f7ff feb2 	bl	8004c60 <xTaskGetSchedulerState>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d109      	bne.n	8004f16 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004f02:	4b11      	ldr	r3, [pc, #68]	; (8004f48 <xTimerGenericCommand+0x98>)
 8004f04:	6818      	ldr	r0, [r3, #0]
 8004f06:	f107 0110 	add.w	r1, r7, #16
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f0e:	f7fe fcad 	bl	800386c <xQueueGenericSend>
 8004f12:	6278      	str	r0, [r7, #36]	; 0x24
 8004f14:	e012      	b.n	8004f3c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004f16:	4b0c      	ldr	r3, [pc, #48]	; (8004f48 <xTimerGenericCommand+0x98>)
 8004f18:	6818      	ldr	r0, [r3, #0]
 8004f1a:	f107 0110 	add.w	r1, r7, #16
 8004f1e:	2300      	movs	r3, #0
 8004f20:	2200      	movs	r2, #0
 8004f22:	f7fe fca3 	bl	800386c <xQueueGenericSend>
 8004f26:	6278      	str	r0, [r7, #36]	; 0x24
 8004f28:	e008      	b.n	8004f3c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004f2a:	4b07      	ldr	r3, [pc, #28]	; (8004f48 <xTimerGenericCommand+0x98>)
 8004f2c:	6818      	ldr	r0, [r3, #0]
 8004f2e:	f107 0110 	add.w	r1, r7, #16
 8004f32:	2300      	movs	r3, #0
 8004f34:	683a      	ldr	r2, [r7, #0]
 8004f36:	f7fe fd97 	bl	8003a68 <xQueueGenericSendFromISR>
 8004f3a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3728      	adds	r7, #40	; 0x28
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	20000dbc 	.word	0x20000dbc

08004f4c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b088      	sub	sp, #32
 8004f50:	af02      	add	r7, sp, #8
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f56:	4b1c      	ldr	r3, [pc, #112]	; (8004fc8 <prvProcessExpiredTimer+0x7c>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	3304      	adds	r3, #4
 8004f64:	4618      	mov	r0, r3
 8004f66:	f7fe fb55 	bl	8003614 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	69db      	ldr	r3, [r3, #28]
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d122      	bne.n	8004fb8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	699a      	ldr	r2, [r3, #24]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	18d1      	adds	r1, r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	683a      	ldr	r2, [r7, #0]
 8004f7e:	6978      	ldr	r0, [r7, #20]
 8004f80:	f000 f8c8 	bl	8005114 <prvInsertTimerInActiveList>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d016      	beq.n	8004fb8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	9300      	str	r3, [sp, #0]
 8004f8e:	2300      	movs	r3, #0
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	2100      	movs	r1, #0
 8004f94:	6978      	ldr	r0, [r7, #20]
 8004f96:	f7ff ff8b 	bl	8004eb0 <xTimerGenericCommand>
 8004f9a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10a      	bne.n	8004fb8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8004fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa6:	f383 8811 	msr	BASEPRI, r3
 8004faa:	f3bf 8f6f 	isb	sy
 8004fae:	f3bf 8f4f 	dsb	sy
 8004fb2:	60fb      	str	r3, [r7, #12]
}
 8004fb4:	bf00      	nop
 8004fb6:	e7fe      	b.n	8004fb6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbc:	6978      	ldr	r0, [r7, #20]
 8004fbe:	4798      	blx	r3
}
 8004fc0:	bf00      	nop
 8004fc2:	3718      	adds	r7, #24
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	20000db4 	.word	0x20000db4

08004fcc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004fd4:	f107 0308 	add.w	r3, r7, #8
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f000 f857 	bl	800508c <prvGetNextExpireTime>
 8004fde:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	68f8      	ldr	r0, [r7, #12]
 8004fe6:	f000 f803 	bl	8004ff0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004fea:	f000 f8d5 	bl	8005198 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004fee:	e7f1      	b.n	8004fd4 <prvTimerTask+0x8>

08004ff0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004ffa:	f7ff fa4b 	bl	8004494 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004ffe:	f107 0308 	add.w	r3, r7, #8
 8005002:	4618      	mov	r0, r3
 8005004:	f000 f866 	bl	80050d4 <prvSampleTimeNow>
 8005008:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d130      	bne.n	8005072 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d10a      	bne.n	800502c <prvProcessTimerOrBlockTask+0x3c>
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	429a      	cmp	r2, r3
 800501c:	d806      	bhi.n	800502c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800501e:	f7ff fa47 	bl	80044b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005022:	68f9      	ldr	r1, [r7, #12]
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f7ff ff91 	bl	8004f4c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800502a:	e024      	b.n	8005076 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d008      	beq.n	8005044 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005032:	4b13      	ldr	r3, [pc, #76]	; (8005080 <prvProcessTimerOrBlockTask+0x90>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	bf0c      	ite	eq
 800503c:	2301      	moveq	r3, #1
 800503e:	2300      	movne	r3, #0
 8005040:	b2db      	uxtb	r3, r3
 8005042:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005044:	4b0f      	ldr	r3, [pc, #60]	; (8005084 <prvProcessTimerOrBlockTask+0x94>)
 8005046:	6818      	ldr	r0, [r3, #0]
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	683a      	ldr	r2, [r7, #0]
 8005050:	4619      	mov	r1, r3
 8005052:	f7fe ffb9 	bl	8003fc8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005056:	f7ff fa2b 	bl	80044b0 <xTaskResumeAll>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d10a      	bne.n	8005076 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005060:	4b09      	ldr	r3, [pc, #36]	; (8005088 <prvProcessTimerOrBlockTask+0x98>)
 8005062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005066:	601a      	str	r2, [r3, #0]
 8005068:	f3bf 8f4f 	dsb	sy
 800506c:	f3bf 8f6f 	isb	sy
}
 8005070:	e001      	b.n	8005076 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005072:	f7ff fa1d 	bl	80044b0 <xTaskResumeAll>
}
 8005076:	bf00      	nop
 8005078:	3710      	adds	r7, #16
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	20000db8 	.word	0x20000db8
 8005084:	20000dbc 	.word	0x20000dbc
 8005088:	e000ed04 	.word	0xe000ed04

0800508c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800508c:	b480      	push	{r7}
 800508e:	b085      	sub	sp, #20
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005094:	4b0e      	ldr	r3, [pc, #56]	; (80050d0 <prvGetNextExpireTime+0x44>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	bf0c      	ite	eq
 800509e:	2301      	moveq	r3, #1
 80050a0:	2300      	movne	r3, #0
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	461a      	mov	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d105      	bne.n	80050be <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80050b2:	4b07      	ldr	r3, [pc, #28]	; (80050d0 <prvGetNextExpireTime+0x44>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	60fb      	str	r3, [r7, #12]
 80050bc:	e001      	b.n	80050c2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80050be:	2300      	movs	r3, #0
 80050c0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80050c2:	68fb      	ldr	r3, [r7, #12]
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3714      	adds	r7, #20
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bc80      	pop	{r7}
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	20000db4 	.word	0x20000db4

080050d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80050dc:	f7ff fa86 	bl	80045ec <xTaskGetTickCount>
 80050e0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80050e2:	4b0b      	ldr	r3, [pc, #44]	; (8005110 <prvSampleTimeNow+0x3c>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d205      	bcs.n	80050f8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80050ec:	f000 f908 	bl	8005300 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	601a      	str	r2, [r3, #0]
 80050f6:	e002      	b.n	80050fe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80050fe:	4a04      	ldr	r2, [pc, #16]	; (8005110 <prvSampleTimeNow+0x3c>)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005104:	68fb      	ldr	r3, [r7, #12]
}
 8005106:	4618      	mov	r0, r3
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	20000dc4 	.word	0x20000dc4

08005114 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b086      	sub	sp, #24
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
 8005120:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005122:	2300      	movs	r3, #0
 8005124:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	68ba      	ldr	r2, [r7, #8]
 800512a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005132:	68ba      	ldr	r2, [r7, #8]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	429a      	cmp	r2, r3
 8005138:	d812      	bhi.n	8005160 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	1ad2      	subs	r2, r2, r3
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	429a      	cmp	r2, r3
 8005146:	d302      	bcc.n	800514e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005148:	2301      	movs	r3, #1
 800514a:	617b      	str	r3, [r7, #20]
 800514c:	e01b      	b.n	8005186 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800514e:	4b10      	ldr	r3, [pc, #64]	; (8005190 <prvInsertTimerInActiveList+0x7c>)
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	3304      	adds	r3, #4
 8005156:	4619      	mov	r1, r3
 8005158:	4610      	mov	r0, r2
 800515a:	f7fe fa23 	bl	80035a4 <vListInsert>
 800515e:	e012      	b.n	8005186 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	429a      	cmp	r2, r3
 8005166:	d206      	bcs.n	8005176 <prvInsertTimerInActiveList+0x62>
 8005168:	68ba      	ldr	r2, [r7, #8]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	429a      	cmp	r2, r3
 800516e:	d302      	bcc.n	8005176 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005170:	2301      	movs	r3, #1
 8005172:	617b      	str	r3, [r7, #20]
 8005174:	e007      	b.n	8005186 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005176:	4b07      	ldr	r3, [pc, #28]	; (8005194 <prvInsertTimerInActiveList+0x80>)
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	3304      	adds	r3, #4
 800517e:	4619      	mov	r1, r3
 8005180:	4610      	mov	r0, r2
 8005182:	f7fe fa0f 	bl	80035a4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005186:	697b      	ldr	r3, [r7, #20]
}
 8005188:	4618      	mov	r0, r3
 800518a:	3718      	adds	r7, #24
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	20000db8 	.word	0x20000db8
 8005194:	20000db4 	.word	0x20000db4

08005198 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b08e      	sub	sp, #56	; 0x38
 800519c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800519e:	e09d      	b.n	80052dc <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	da18      	bge.n	80051d8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80051a6:	1d3b      	adds	r3, r7, #4
 80051a8:	3304      	adds	r3, #4
 80051aa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80051ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d10a      	bne.n	80051c8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80051b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b6:	f383 8811 	msr	BASEPRI, r3
 80051ba:	f3bf 8f6f 	isb	sy
 80051be:	f3bf 8f4f 	dsb	sy
 80051c2:	61fb      	str	r3, [r7, #28]
}
 80051c4:	bf00      	nop
 80051c6:	e7fe      	b.n	80051c6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80051c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051ce:	6850      	ldr	r0, [r2, #4]
 80051d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051d2:	6892      	ldr	r2, [r2, #8]
 80051d4:	4611      	mov	r1, r2
 80051d6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	db7e      	blt.n	80052dc <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80051e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d004      	beq.n	80051f4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80051ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ec:	3304      	adds	r3, #4
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7fe fa10 	bl	8003614 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80051f4:	463b      	mov	r3, r7
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7ff ff6c 	bl	80050d4 <prvSampleTimeNow>
 80051fc:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2b09      	cmp	r3, #9
 8005202:	d86a      	bhi.n	80052da <prvProcessReceivedCommands+0x142>
 8005204:	a201      	add	r2, pc, #4	; (adr r2, 800520c <prvProcessReceivedCommands+0x74>)
 8005206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800520a:	bf00      	nop
 800520c:	08005235 	.word	0x08005235
 8005210:	08005235 	.word	0x08005235
 8005214:	08005235 	.word	0x08005235
 8005218:	080052dd 	.word	0x080052dd
 800521c:	08005291 	.word	0x08005291
 8005220:	080052c9 	.word	0x080052c9
 8005224:	08005235 	.word	0x08005235
 8005228:	08005235 	.word	0x08005235
 800522c:	080052dd 	.word	0x080052dd
 8005230:	08005291 	.word	0x08005291
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005234:	68ba      	ldr	r2, [r7, #8]
 8005236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	18d1      	adds	r1, r2, r3
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005240:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005242:	f7ff ff67 	bl	8005114 <prvInsertTimerInActiveList>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d047      	beq.n	80052dc <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800524c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005250:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005252:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005256:	69db      	ldr	r3, [r3, #28]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d13f      	bne.n	80052dc <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800525c:	68ba      	ldr	r2, [r7, #8]
 800525e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005260:	699b      	ldr	r3, [r3, #24]
 8005262:	441a      	add	r2, r3
 8005264:	2300      	movs	r3, #0
 8005266:	9300      	str	r3, [sp, #0]
 8005268:	2300      	movs	r3, #0
 800526a:	2100      	movs	r1, #0
 800526c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800526e:	f7ff fe1f 	bl	8004eb0 <xTimerGenericCommand>
 8005272:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005274:	6a3b      	ldr	r3, [r7, #32]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d130      	bne.n	80052dc <prvProcessReceivedCommands+0x144>
	__asm volatile
 800527a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527e:	f383 8811 	msr	BASEPRI, r3
 8005282:	f3bf 8f6f 	isb	sy
 8005286:	f3bf 8f4f 	dsb	sy
 800528a:	61bb      	str	r3, [r7, #24]
}
 800528c:	bf00      	nop
 800528e:	e7fe      	b.n	800528e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005290:	68ba      	ldr	r2, [r7, #8]
 8005292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005294:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d10a      	bne.n	80052b4 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800529e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a2:	f383 8811 	msr	BASEPRI, r3
 80052a6:	f3bf 8f6f 	isb	sy
 80052aa:	f3bf 8f4f 	dsb	sy
 80052ae:	617b      	str	r3, [r7, #20]
}
 80052b0:	bf00      	nop
 80052b2:	e7fe      	b.n	80052b2 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80052b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b6:	699a      	ldr	r2, [r3, #24]
 80052b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ba:	18d1      	adds	r1, r2, r3
 80052bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052c2:	f7ff ff27 	bl	8005114 <prvInsertTimerInActiveList>
					break;
 80052c6:	e009      	b.n	80052dc <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80052c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d104      	bne.n	80052dc <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80052d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052d4:	f000 fb6e 	bl	80059b4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80052d8:	e000      	b.n	80052dc <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 80052da:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80052dc:	4b07      	ldr	r3, [pc, #28]	; (80052fc <prvProcessReceivedCommands+0x164>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	1d39      	adds	r1, r7, #4
 80052e2:	2200      	movs	r2, #0
 80052e4:	4618      	mov	r0, r3
 80052e6:	f7fe fc57 	bl	8003b98 <xQueueReceive>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f47f af57 	bne.w	80051a0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80052f2:	bf00      	nop
 80052f4:	bf00      	nop
 80052f6:	3730      	adds	r7, #48	; 0x30
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	20000dbc 	.word	0x20000dbc

08005300 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b088      	sub	sp, #32
 8005304:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005306:	e045      	b.n	8005394 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005308:	4b2c      	ldr	r3, [pc, #176]	; (80053bc <prvSwitchTimerLists+0xbc>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005312:	4b2a      	ldr	r3, [pc, #168]	; (80053bc <prvSwitchTimerLists+0xbc>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	3304      	adds	r3, #4
 8005320:	4618      	mov	r0, r3
 8005322:	f7fe f977 	bl	8003614 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532a:	68f8      	ldr	r0, [r7, #12]
 800532c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	69db      	ldr	r3, [r3, #28]
 8005332:	2b01      	cmp	r3, #1
 8005334:	d12e      	bne.n	8005394 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	693a      	ldr	r2, [r7, #16]
 800533c:	4413      	add	r3, r2
 800533e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005340:	68ba      	ldr	r2, [r7, #8]
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	429a      	cmp	r2, r3
 8005346:	d90e      	bls.n	8005366 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	68ba      	ldr	r2, [r7, #8]
 800534c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005354:	4b19      	ldr	r3, [pc, #100]	; (80053bc <prvSwitchTimerLists+0xbc>)
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	3304      	adds	r3, #4
 800535c:	4619      	mov	r1, r3
 800535e:	4610      	mov	r0, r2
 8005360:	f7fe f920 	bl	80035a4 <vListInsert>
 8005364:	e016      	b.n	8005394 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005366:	2300      	movs	r3, #0
 8005368:	9300      	str	r3, [sp, #0]
 800536a:	2300      	movs	r3, #0
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	2100      	movs	r1, #0
 8005370:	68f8      	ldr	r0, [r7, #12]
 8005372:	f7ff fd9d 	bl	8004eb0 <xTimerGenericCommand>
 8005376:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d10a      	bne.n	8005394 <prvSwitchTimerLists+0x94>
	__asm volatile
 800537e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005382:	f383 8811 	msr	BASEPRI, r3
 8005386:	f3bf 8f6f 	isb	sy
 800538a:	f3bf 8f4f 	dsb	sy
 800538e:	603b      	str	r3, [r7, #0]
}
 8005390:	bf00      	nop
 8005392:	e7fe      	b.n	8005392 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005394:	4b09      	ldr	r3, [pc, #36]	; (80053bc <prvSwitchTimerLists+0xbc>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d1b4      	bne.n	8005308 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800539e:	4b07      	ldr	r3, [pc, #28]	; (80053bc <prvSwitchTimerLists+0xbc>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80053a4:	4b06      	ldr	r3, [pc, #24]	; (80053c0 <prvSwitchTimerLists+0xc0>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a04      	ldr	r2, [pc, #16]	; (80053bc <prvSwitchTimerLists+0xbc>)
 80053aa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80053ac:	4a04      	ldr	r2, [pc, #16]	; (80053c0 <prvSwitchTimerLists+0xc0>)
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	6013      	str	r3, [r2, #0]
}
 80053b2:	bf00      	nop
 80053b4:	3718      	adds	r7, #24
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	20000db4 	.word	0x20000db4
 80053c0:	20000db8 	.word	0x20000db8

080053c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80053ca:	f000 f92f 	bl	800562c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80053ce:	4b15      	ldr	r3, [pc, #84]	; (8005424 <prvCheckForValidListAndQueue+0x60>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d120      	bne.n	8005418 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80053d6:	4814      	ldr	r0, [pc, #80]	; (8005428 <prvCheckForValidListAndQueue+0x64>)
 80053d8:	f7fe f896 	bl	8003508 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80053dc:	4813      	ldr	r0, [pc, #76]	; (800542c <prvCheckForValidListAndQueue+0x68>)
 80053de:	f7fe f893 	bl	8003508 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80053e2:	4b13      	ldr	r3, [pc, #76]	; (8005430 <prvCheckForValidListAndQueue+0x6c>)
 80053e4:	4a10      	ldr	r2, [pc, #64]	; (8005428 <prvCheckForValidListAndQueue+0x64>)
 80053e6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80053e8:	4b12      	ldr	r3, [pc, #72]	; (8005434 <prvCheckForValidListAndQueue+0x70>)
 80053ea:	4a10      	ldr	r2, [pc, #64]	; (800542c <prvCheckForValidListAndQueue+0x68>)
 80053ec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80053ee:	2300      	movs	r3, #0
 80053f0:	9300      	str	r3, [sp, #0]
 80053f2:	4b11      	ldr	r3, [pc, #68]	; (8005438 <prvCheckForValidListAndQueue+0x74>)
 80053f4:	4a11      	ldr	r2, [pc, #68]	; (800543c <prvCheckForValidListAndQueue+0x78>)
 80053f6:	2110      	movs	r1, #16
 80053f8:	200a      	movs	r0, #10
 80053fa:	f7fe f99d 	bl	8003738 <xQueueGenericCreateStatic>
 80053fe:	4603      	mov	r3, r0
 8005400:	4a08      	ldr	r2, [pc, #32]	; (8005424 <prvCheckForValidListAndQueue+0x60>)
 8005402:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005404:	4b07      	ldr	r3, [pc, #28]	; (8005424 <prvCheckForValidListAndQueue+0x60>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d005      	beq.n	8005418 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800540c:	4b05      	ldr	r3, [pc, #20]	; (8005424 <prvCheckForValidListAndQueue+0x60>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	490b      	ldr	r1, [pc, #44]	; (8005440 <prvCheckForValidListAndQueue+0x7c>)
 8005412:	4618      	mov	r0, r3
 8005414:	f7fe fdb0 	bl	8003f78 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005418:	f000 f938 	bl	800568c <vPortExitCritical>
}
 800541c:	bf00      	nop
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	20000dbc 	.word	0x20000dbc
 8005428:	20000d8c 	.word	0x20000d8c
 800542c:	20000da0 	.word	0x20000da0
 8005430:	20000db4 	.word	0x20000db4
 8005434:	20000db8 	.word	0x20000db8
 8005438:	20000e68 	.word	0x20000e68
 800543c:	20000dc8 	.word	0x20000dc8
 8005440:	080065ac 	.word	0x080065ac

08005444 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005444:	b480      	push	{r7}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	3b04      	subs	r3, #4
 8005454:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800545c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	3b04      	subs	r3, #4
 8005462:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	f023 0201 	bic.w	r2, r3, #1
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	3b04      	subs	r3, #4
 8005472:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005474:	4a08      	ldr	r2, [pc, #32]	; (8005498 <pxPortInitialiseStack+0x54>)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	3b14      	subs	r3, #20
 800547e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	3b20      	subs	r3, #32
 800548a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800548c:	68fb      	ldr	r3, [r7, #12]
}
 800548e:	4618      	mov	r0, r3
 8005490:	3714      	adds	r7, #20
 8005492:	46bd      	mov	sp, r7
 8005494:	bc80      	pop	{r7}
 8005496:	4770      	bx	lr
 8005498:	0800549d 	.word	0x0800549d

0800549c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800549c:	b480      	push	{r7}
 800549e:	b085      	sub	sp, #20
 80054a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80054a2:	2300      	movs	r3, #0
 80054a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80054a6:	4b12      	ldr	r3, [pc, #72]	; (80054f0 <prvTaskExitError+0x54>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ae:	d00a      	beq.n	80054c6 <prvTaskExitError+0x2a>
	__asm volatile
 80054b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b4:	f383 8811 	msr	BASEPRI, r3
 80054b8:	f3bf 8f6f 	isb	sy
 80054bc:	f3bf 8f4f 	dsb	sy
 80054c0:	60fb      	str	r3, [r7, #12]
}
 80054c2:	bf00      	nop
 80054c4:	e7fe      	b.n	80054c4 <prvTaskExitError+0x28>
	__asm volatile
 80054c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ca:	f383 8811 	msr	BASEPRI, r3
 80054ce:	f3bf 8f6f 	isb	sy
 80054d2:	f3bf 8f4f 	dsb	sy
 80054d6:	60bb      	str	r3, [r7, #8]
}
 80054d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80054da:	bf00      	nop
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d0fc      	beq.n	80054dc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80054e2:	bf00      	nop
 80054e4:	bf00      	nop
 80054e6:	3714      	adds	r7, #20
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bc80      	pop	{r7}
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	2000000c 	.word	0x2000000c
	...

08005500 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005500:	4b07      	ldr	r3, [pc, #28]	; (8005520 <pxCurrentTCBConst2>)
 8005502:	6819      	ldr	r1, [r3, #0]
 8005504:	6808      	ldr	r0, [r1, #0]
 8005506:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800550a:	f380 8809 	msr	PSP, r0
 800550e:	f3bf 8f6f 	isb	sy
 8005512:	f04f 0000 	mov.w	r0, #0
 8005516:	f380 8811 	msr	BASEPRI, r0
 800551a:	f04e 0e0d 	orr.w	lr, lr, #13
 800551e:	4770      	bx	lr

08005520 <pxCurrentTCBConst2>:
 8005520:	2000088c 	.word	0x2000088c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005524:	bf00      	nop
 8005526:	bf00      	nop

08005528 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005528:	4806      	ldr	r0, [pc, #24]	; (8005544 <prvPortStartFirstTask+0x1c>)
 800552a:	6800      	ldr	r0, [r0, #0]
 800552c:	6800      	ldr	r0, [r0, #0]
 800552e:	f380 8808 	msr	MSP, r0
 8005532:	b662      	cpsie	i
 8005534:	b661      	cpsie	f
 8005536:	f3bf 8f4f 	dsb	sy
 800553a:	f3bf 8f6f 	isb	sy
 800553e:	df00      	svc	0
 8005540:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005542:	bf00      	nop
 8005544:	e000ed08 	.word	0xe000ed08

08005548 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800554e:	4b32      	ldr	r3, [pc, #200]	; (8005618 <xPortStartScheduler+0xd0>)
 8005550:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	b2db      	uxtb	r3, r3
 8005558:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	22ff      	movs	r2, #255	; 0xff
 800555e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	b2db      	uxtb	r3, r3
 8005566:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005568:	78fb      	ldrb	r3, [r7, #3]
 800556a:	b2db      	uxtb	r3, r3
 800556c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005570:	b2da      	uxtb	r2, r3
 8005572:	4b2a      	ldr	r3, [pc, #168]	; (800561c <xPortStartScheduler+0xd4>)
 8005574:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005576:	4b2a      	ldr	r3, [pc, #168]	; (8005620 <xPortStartScheduler+0xd8>)
 8005578:	2207      	movs	r2, #7
 800557a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800557c:	e009      	b.n	8005592 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800557e:	4b28      	ldr	r3, [pc, #160]	; (8005620 <xPortStartScheduler+0xd8>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	3b01      	subs	r3, #1
 8005584:	4a26      	ldr	r2, [pc, #152]	; (8005620 <xPortStartScheduler+0xd8>)
 8005586:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005588:	78fb      	ldrb	r3, [r7, #3]
 800558a:	b2db      	uxtb	r3, r3
 800558c:	005b      	lsls	r3, r3, #1
 800558e:	b2db      	uxtb	r3, r3
 8005590:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005592:	78fb      	ldrb	r3, [r7, #3]
 8005594:	b2db      	uxtb	r3, r3
 8005596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800559a:	2b80      	cmp	r3, #128	; 0x80
 800559c:	d0ef      	beq.n	800557e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800559e:	4b20      	ldr	r3, [pc, #128]	; (8005620 <xPortStartScheduler+0xd8>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f1c3 0307 	rsb	r3, r3, #7
 80055a6:	2b04      	cmp	r3, #4
 80055a8:	d00a      	beq.n	80055c0 <xPortStartScheduler+0x78>
	__asm volatile
 80055aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ae:	f383 8811 	msr	BASEPRI, r3
 80055b2:	f3bf 8f6f 	isb	sy
 80055b6:	f3bf 8f4f 	dsb	sy
 80055ba:	60bb      	str	r3, [r7, #8]
}
 80055bc:	bf00      	nop
 80055be:	e7fe      	b.n	80055be <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80055c0:	4b17      	ldr	r3, [pc, #92]	; (8005620 <xPortStartScheduler+0xd8>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	021b      	lsls	r3, r3, #8
 80055c6:	4a16      	ldr	r2, [pc, #88]	; (8005620 <xPortStartScheduler+0xd8>)
 80055c8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80055ca:	4b15      	ldr	r3, [pc, #84]	; (8005620 <xPortStartScheduler+0xd8>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80055d2:	4a13      	ldr	r2, [pc, #76]	; (8005620 <xPortStartScheduler+0xd8>)
 80055d4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	b2da      	uxtb	r2, r3
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80055de:	4b11      	ldr	r3, [pc, #68]	; (8005624 <xPortStartScheduler+0xdc>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a10      	ldr	r2, [pc, #64]	; (8005624 <xPortStartScheduler+0xdc>)
 80055e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80055e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80055ea:	4b0e      	ldr	r3, [pc, #56]	; (8005624 <xPortStartScheduler+0xdc>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a0d      	ldr	r2, [pc, #52]	; (8005624 <xPortStartScheduler+0xdc>)
 80055f0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80055f4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80055f6:	f000 f8b9 	bl	800576c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80055fa:	4b0b      	ldr	r3, [pc, #44]	; (8005628 <xPortStartScheduler+0xe0>)
 80055fc:	2200      	movs	r2, #0
 80055fe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005600:	f7ff ff92 	bl	8005528 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005604:	f7ff f8be 	bl	8004784 <vTaskSwitchContext>
	prvTaskExitError();
 8005608:	f7ff ff48 	bl	800549c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3710      	adds	r7, #16
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	e000e400 	.word	0xe000e400
 800561c:	20000eb8 	.word	0x20000eb8
 8005620:	20000ebc 	.word	0x20000ebc
 8005624:	e000ed20 	.word	0xe000ed20
 8005628:	2000000c 	.word	0x2000000c

0800562c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
	__asm volatile
 8005632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005636:	f383 8811 	msr	BASEPRI, r3
 800563a:	f3bf 8f6f 	isb	sy
 800563e:	f3bf 8f4f 	dsb	sy
 8005642:	607b      	str	r3, [r7, #4]
}
 8005644:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005646:	4b0f      	ldr	r3, [pc, #60]	; (8005684 <vPortEnterCritical+0x58>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	3301      	adds	r3, #1
 800564c:	4a0d      	ldr	r2, [pc, #52]	; (8005684 <vPortEnterCritical+0x58>)
 800564e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005650:	4b0c      	ldr	r3, [pc, #48]	; (8005684 <vPortEnterCritical+0x58>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d10f      	bne.n	8005678 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005658:	4b0b      	ldr	r3, [pc, #44]	; (8005688 <vPortEnterCritical+0x5c>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	b2db      	uxtb	r3, r3
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00a      	beq.n	8005678 <vPortEnterCritical+0x4c>
	__asm volatile
 8005662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005666:	f383 8811 	msr	BASEPRI, r3
 800566a:	f3bf 8f6f 	isb	sy
 800566e:	f3bf 8f4f 	dsb	sy
 8005672:	603b      	str	r3, [r7, #0]
}
 8005674:	bf00      	nop
 8005676:	e7fe      	b.n	8005676 <vPortEnterCritical+0x4a>
	}
}
 8005678:	bf00      	nop
 800567a:	370c      	adds	r7, #12
 800567c:	46bd      	mov	sp, r7
 800567e:	bc80      	pop	{r7}
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	2000000c 	.word	0x2000000c
 8005688:	e000ed04 	.word	0xe000ed04

0800568c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005692:	4b11      	ldr	r3, [pc, #68]	; (80056d8 <vPortExitCritical+0x4c>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d10a      	bne.n	80056b0 <vPortExitCritical+0x24>
	__asm volatile
 800569a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800569e:	f383 8811 	msr	BASEPRI, r3
 80056a2:	f3bf 8f6f 	isb	sy
 80056a6:	f3bf 8f4f 	dsb	sy
 80056aa:	607b      	str	r3, [r7, #4]
}
 80056ac:	bf00      	nop
 80056ae:	e7fe      	b.n	80056ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80056b0:	4b09      	ldr	r3, [pc, #36]	; (80056d8 <vPortExitCritical+0x4c>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	3b01      	subs	r3, #1
 80056b6:	4a08      	ldr	r2, [pc, #32]	; (80056d8 <vPortExitCritical+0x4c>)
 80056b8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80056ba:	4b07      	ldr	r3, [pc, #28]	; (80056d8 <vPortExitCritical+0x4c>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d105      	bne.n	80056ce <vPortExitCritical+0x42>
 80056c2:	2300      	movs	r3, #0
 80056c4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	f383 8811 	msr	BASEPRI, r3
}
 80056cc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80056ce:	bf00      	nop
 80056d0:	370c      	adds	r7, #12
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bc80      	pop	{r7}
 80056d6:	4770      	bx	lr
 80056d8:	2000000c 	.word	0x2000000c
 80056dc:	00000000 	.word	0x00000000

080056e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80056e0:	f3ef 8009 	mrs	r0, PSP
 80056e4:	f3bf 8f6f 	isb	sy
 80056e8:	4b0d      	ldr	r3, [pc, #52]	; (8005720 <pxCurrentTCBConst>)
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80056f0:	6010      	str	r0, [r2, #0]
 80056f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80056f6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80056fa:	f380 8811 	msr	BASEPRI, r0
 80056fe:	f7ff f841 	bl	8004784 <vTaskSwitchContext>
 8005702:	f04f 0000 	mov.w	r0, #0
 8005706:	f380 8811 	msr	BASEPRI, r0
 800570a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800570e:	6819      	ldr	r1, [r3, #0]
 8005710:	6808      	ldr	r0, [r1, #0]
 8005712:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005716:	f380 8809 	msr	PSP, r0
 800571a:	f3bf 8f6f 	isb	sy
 800571e:	4770      	bx	lr

08005720 <pxCurrentTCBConst>:
 8005720:	2000088c 	.word	0x2000088c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005724:	bf00      	nop
 8005726:	bf00      	nop

08005728 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
	__asm volatile
 800572e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005732:	f383 8811 	msr	BASEPRI, r3
 8005736:	f3bf 8f6f 	isb	sy
 800573a:	f3bf 8f4f 	dsb	sy
 800573e:	607b      	str	r3, [r7, #4]
}
 8005740:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005742:	f7fe ff61 	bl	8004608 <xTaskIncrementTick>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d003      	beq.n	8005754 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800574c:	4b06      	ldr	r3, [pc, #24]	; (8005768 <SysTick_Handler+0x40>)
 800574e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005752:	601a      	str	r2, [r3, #0]
 8005754:	2300      	movs	r3, #0
 8005756:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	f383 8811 	msr	BASEPRI, r3
}
 800575e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005760:	bf00      	nop
 8005762:	3708      	adds	r7, #8
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	e000ed04 	.word	0xe000ed04

0800576c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800576c:	b480      	push	{r7}
 800576e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005770:	4b0a      	ldr	r3, [pc, #40]	; (800579c <vPortSetupTimerInterrupt+0x30>)
 8005772:	2200      	movs	r2, #0
 8005774:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005776:	4b0a      	ldr	r3, [pc, #40]	; (80057a0 <vPortSetupTimerInterrupt+0x34>)
 8005778:	2200      	movs	r2, #0
 800577a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800577c:	4b09      	ldr	r3, [pc, #36]	; (80057a4 <vPortSetupTimerInterrupt+0x38>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a09      	ldr	r2, [pc, #36]	; (80057a8 <vPortSetupTimerInterrupt+0x3c>)
 8005782:	fba2 2303 	umull	r2, r3, r2, r3
 8005786:	099b      	lsrs	r3, r3, #6
 8005788:	4a08      	ldr	r2, [pc, #32]	; (80057ac <vPortSetupTimerInterrupt+0x40>)
 800578a:	3b01      	subs	r3, #1
 800578c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800578e:	4b03      	ldr	r3, [pc, #12]	; (800579c <vPortSetupTimerInterrupt+0x30>)
 8005790:	2207      	movs	r2, #7
 8005792:	601a      	str	r2, [r3, #0]
}
 8005794:	bf00      	nop
 8005796:	46bd      	mov	sp, r7
 8005798:	bc80      	pop	{r7}
 800579a:	4770      	bx	lr
 800579c:	e000e010 	.word	0xe000e010
 80057a0:	e000e018 	.word	0xe000e018
 80057a4:	20000000 	.word	0x20000000
 80057a8:	10624dd3 	.word	0x10624dd3
 80057ac:	e000e014 	.word	0xe000e014

080057b0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80057b6:	f3ef 8305 	mrs	r3, IPSR
 80057ba:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2b0f      	cmp	r3, #15
 80057c0:	d914      	bls.n	80057ec <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80057c2:	4a16      	ldr	r2, [pc, #88]	; (800581c <vPortValidateInterruptPriority+0x6c>)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	4413      	add	r3, r2
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80057cc:	4b14      	ldr	r3, [pc, #80]	; (8005820 <vPortValidateInterruptPriority+0x70>)
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	7afa      	ldrb	r2, [r7, #11]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d20a      	bcs.n	80057ec <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80057d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057da:	f383 8811 	msr	BASEPRI, r3
 80057de:	f3bf 8f6f 	isb	sy
 80057e2:	f3bf 8f4f 	dsb	sy
 80057e6:	607b      	str	r3, [r7, #4]
}
 80057e8:	bf00      	nop
 80057ea:	e7fe      	b.n	80057ea <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80057ec:	4b0d      	ldr	r3, [pc, #52]	; (8005824 <vPortValidateInterruptPriority+0x74>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80057f4:	4b0c      	ldr	r3, [pc, #48]	; (8005828 <vPortValidateInterruptPriority+0x78>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d90a      	bls.n	8005812 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80057fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005800:	f383 8811 	msr	BASEPRI, r3
 8005804:	f3bf 8f6f 	isb	sy
 8005808:	f3bf 8f4f 	dsb	sy
 800580c:	603b      	str	r3, [r7, #0]
}
 800580e:	bf00      	nop
 8005810:	e7fe      	b.n	8005810 <vPortValidateInterruptPriority+0x60>
	}
 8005812:	bf00      	nop
 8005814:	3714      	adds	r7, #20
 8005816:	46bd      	mov	sp, r7
 8005818:	bc80      	pop	{r7}
 800581a:	4770      	bx	lr
 800581c:	e000e3f0 	.word	0xe000e3f0
 8005820:	20000eb8 	.word	0x20000eb8
 8005824:	e000ed0c 	.word	0xe000ed0c
 8005828:	20000ebc 	.word	0x20000ebc

0800582c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b08a      	sub	sp, #40	; 0x28
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005834:	2300      	movs	r3, #0
 8005836:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005838:	f7fe fe2c 	bl	8004494 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800583c:	4b58      	ldr	r3, [pc, #352]	; (80059a0 <pvPortMalloc+0x174>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d101      	bne.n	8005848 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005844:	f000 f910 	bl	8005a68 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005848:	4b56      	ldr	r3, [pc, #344]	; (80059a4 <pvPortMalloc+0x178>)
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4013      	ands	r3, r2
 8005850:	2b00      	cmp	r3, #0
 8005852:	f040 808e 	bne.w	8005972 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d01d      	beq.n	8005898 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800585c:	2208      	movs	r2, #8
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4413      	add	r3, r2
 8005862:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f003 0307 	and.w	r3, r3, #7
 800586a:	2b00      	cmp	r3, #0
 800586c:	d014      	beq.n	8005898 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f023 0307 	bic.w	r3, r3, #7
 8005874:	3308      	adds	r3, #8
 8005876:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f003 0307 	and.w	r3, r3, #7
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00a      	beq.n	8005898 <pvPortMalloc+0x6c>
	__asm volatile
 8005882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005886:	f383 8811 	msr	BASEPRI, r3
 800588a:	f3bf 8f6f 	isb	sy
 800588e:	f3bf 8f4f 	dsb	sy
 8005892:	617b      	str	r3, [r7, #20]
}
 8005894:	bf00      	nop
 8005896:	e7fe      	b.n	8005896 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d069      	beq.n	8005972 <pvPortMalloc+0x146>
 800589e:	4b42      	ldr	r3, [pc, #264]	; (80059a8 <pvPortMalloc+0x17c>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d864      	bhi.n	8005972 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80058a8:	4b40      	ldr	r3, [pc, #256]	; (80059ac <pvPortMalloc+0x180>)
 80058aa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80058ac:	4b3f      	ldr	r3, [pc, #252]	; (80059ac <pvPortMalloc+0x180>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80058b2:	e004      	b.n	80058be <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80058b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80058b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80058be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d903      	bls.n	80058d0 <pvPortMalloc+0xa4>
 80058c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1f1      	bne.n	80058b4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80058d0:	4b33      	ldr	r3, [pc, #204]	; (80059a0 <pvPortMalloc+0x174>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d04b      	beq.n	8005972 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80058da:	6a3b      	ldr	r3, [r7, #32]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2208      	movs	r2, #8
 80058e0:	4413      	add	r3, r2
 80058e2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80058e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	6a3b      	ldr	r3, [r7, #32]
 80058ea:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80058ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ee:	685a      	ldr	r2, [r3, #4]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	1ad2      	subs	r2, r2, r3
 80058f4:	2308      	movs	r3, #8
 80058f6:	005b      	lsls	r3, r3, #1
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d91f      	bls.n	800593c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80058fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4413      	add	r3, r2
 8005902:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	f003 0307 	and.w	r3, r3, #7
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00a      	beq.n	8005924 <pvPortMalloc+0xf8>
	__asm volatile
 800590e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005912:	f383 8811 	msr	BASEPRI, r3
 8005916:	f3bf 8f6f 	isb	sy
 800591a:	f3bf 8f4f 	dsb	sy
 800591e:	613b      	str	r3, [r7, #16]
}
 8005920:	bf00      	nop
 8005922:	e7fe      	b.n	8005922 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005926:	685a      	ldr	r2, [r3, #4]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	1ad2      	subs	r2, r2, r3
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005936:	69b8      	ldr	r0, [r7, #24]
 8005938:	f000 f8f8 	bl	8005b2c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800593c:	4b1a      	ldr	r3, [pc, #104]	; (80059a8 <pvPortMalloc+0x17c>)
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	4a18      	ldr	r2, [pc, #96]	; (80059a8 <pvPortMalloc+0x17c>)
 8005948:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800594a:	4b17      	ldr	r3, [pc, #92]	; (80059a8 <pvPortMalloc+0x17c>)
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	4b18      	ldr	r3, [pc, #96]	; (80059b0 <pvPortMalloc+0x184>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	429a      	cmp	r2, r3
 8005954:	d203      	bcs.n	800595e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005956:	4b14      	ldr	r3, [pc, #80]	; (80059a8 <pvPortMalloc+0x17c>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a15      	ldr	r2, [pc, #84]	; (80059b0 <pvPortMalloc+0x184>)
 800595c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800595e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005960:	685a      	ldr	r2, [r3, #4]
 8005962:	4b10      	ldr	r3, [pc, #64]	; (80059a4 <pvPortMalloc+0x178>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	431a      	orrs	r2, r3
 8005968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800596c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596e:	2200      	movs	r2, #0
 8005970:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005972:	f7fe fd9d 	bl	80044b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	f003 0307 	and.w	r3, r3, #7
 800597c:	2b00      	cmp	r3, #0
 800597e:	d00a      	beq.n	8005996 <pvPortMalloc+0x16a>
	__asm volatile
 8005980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005984:	f383 8811 	msr	BASEPRI, r3
 8005988:	f3bf 8f6f 	isb	sy
 800598c:	f3bf 8f4f 	dsb	sy
 8005990:	60fb      	str	r3, [r7, #12]
}
 8005992:	bf00      	nop
 8005994:	e7fe      	b.n	8005994 <pvPortMalloc+0x168>
	return pvReturn;
 8005996:	69fb      	ldr	r3, [r7, #28]
}
 8005998:	4618      	mov	r0, r3
 800599a:	3728      	adds	r7, #40	; 0x28
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	20001ac8 	.word	0x20001ac8
 80059a4:	20001ad4 	.word	0x20001ad4
 80059a8:	20001acc 	.word	0x20001acc
 80059ac:	20001ac0 	.word	0x20001ac0
 80059b0:	20001ad0 	.word	0x20001ad0

080059b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b086      	sub	sp, #24
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d048      	beq.n	8005a58 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80059c6:	2308      	movs	r3, #8
 80059c8:	425b      	negs	r3, r3
 80059ca:	697a      	ldr	r2, [r7, #20]
 80059cc:	4413      	add	r3, r2
 80059ce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	685a      	ldr	r2, [r3, #4]
 80059d8:	4b21      	ldr	r3, [pc, #132]	; (8005a60 <vPortFree+0xac>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4013      	ands	r3, r2
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d10a      	bne.n	80059f8 <vPortFree+0x44>
	__asm volatile
 80059e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e6:	f383 8811 	msr	BASEPRI, r3
 80059ea:	f3bf 8f6f 	isb	sy
 80059ee:	f3bf 8f4f 	dsb	sy
 80059f2:	60fb      	str	r3, [r7, #12]
}
 80059f4:	bf00      	nop
 80059f6:	e7fe      	b.n	80059f6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d00a      	beq.n	8005a16 <vPortFree+0x62>
	__asm volatile
 8005a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a04:	f383 8811 	msr	BASEPRI, r3
 8005a08:	f3bf 8f6f 	isb	sy
 8005a0c:	f3bf 8f4f 	dsb	sy
 8005a10:	60bb      	str	r3, [r7, #8]
}
 8005a12:	bf00      	nop
 8005a14:	e7fe      	b.n	8005a14 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	685a      	ldr	r2, [r3, #4]
 8005a1a:	4b11      	ldr	r3, [pc, #68]	; (8005a60 <vPortFree+0xac>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4013      	ands	r3, r2
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d019      	beq.n	8005a58 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d115      	bne.n	8005a58 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	685a      	ldr	r2, [r3, #4]
 8005a30:	4b0b      	ldr	r3, [pc, #44]	; (8005a60 <vPortFree+0xac>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	43db      	mvns	r3, r3
 8005a36:	401a      	ands	r2, r3
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005a3c:	f7fe fd2a 	bl	8004494 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	685a      	ldr	r2, [r3, #4]
 8005a44:	4b07      	ldr	r3, [pc, #28]	; (8005a64 <vPortFree+0xb0>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4413      	add	r3, r2
 8005a4a:	4a06      	ldr	r2, [pc, #24]	; (8005a64 <vPortFree+0xb0>)
 8005a4c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005a4e:	6938      	ldr	r0, [r7, #16]
 8005a50:	f000 f86c 	bl	8005b2c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005a54:	f7fe fd2c 	bl	80044b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005a58:	bf00      	nop
 8005a5a:	3718      	adds	r7, #24
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	20001ad4 	.word	0x20001ad4
 8005a64:	20001acc 	.word	0x20001acc

08005a68 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b085      	sub	sp, #20
 8005a6c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005a6e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005a72:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005a74:	4b27      	ldr	r3, [pc, #156]	; (8005b14 <prvHeapInit+0xac>)
 8005a76:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f003 0307 	and.w	r3, r3, #7
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00c      	beq.n	8005a9c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	3307      	adds	r3, #7
 8005a86:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f023 0307 	bic.w	r3, r3, #7
 8005a8e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005a90:	68ba      	ldr	r2, [r7, #8]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	4a1f      	ldr	r2, [pc, #124]	; (8005b14 <prvHeapInit+0xac>)
 8005a98:	4413      	add	r3, r2
 8005a9a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005aa0:	4a1d      	ldr	r2, [pc, #116]	; (8005b18 <prvHeapInit+0xb0>)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005aa6:	4b1c      	ldr	r3, [pc, #112]	; (8005b18 <prvHeapInit+0xb0>)
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	68ba      	ldr	r2, [r7, #8]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005ab4:	2208      	movs	r2, #8
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	1a9b      	subs	r3, r3, r2
 8005aba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f023 0307 	bic.w	r3, r3, #7
 8005ac2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	4a15      	ldr	r2, [pc, #84]	; (8005b1c <prvHeapInit+0xb4>)
 8005ac8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005aca:	4b14      	ldr	r3, [pc, #80]	; (8005b1c <prvHeapInit+0xb4>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005ad2:	4b12      	ldr	r3, [pc, #72]	; (8005b1c <prvHeapInit+0xb4>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	1ad2      	subs	r2, r2, r3
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005ae8:	4b0c      	ldr	r3, [pc, #48]	; (8005b1c <prvHeapInit+0xb4>)
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	4a0a      	ldr	r2, [pc, #40]	; (8005b20 <prvHeapInit+0xb8>)
 8005af6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	4a09      	ldr	r2, [pc, #36]	; (8005b24 <prvHeapInit+0xbc>)
 8005afe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005b00:	4b09      	ldr	r3, [pc, #36]	; (8005b28 <prvHeapInit+0xc0>)
 8005b02:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005b06:	601a      	str	r2, [r3, #0]
}
 8005b08:	bf00      	nop
 8005b0a:	3714      	adds	r7, #20
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bc80      	pop	{r7}
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	20000ec0 	.word	0x20000ec0
 8005b18:	20001ac0 	.word	0x20001ac0
 8005b1c:	20001ac8 	.word	0x20001ac8
 8005b20:	20001ad0 	.word	0x20001ad0
 8005b24:	20001acc 	.word	0x20001acc
 8005b28:	20001ad4 	.word	0x20001ad4

08005b2c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b085      	sub	sp, #20
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005b34:	4b27      	ldr	r3, [pc, #156]	; (8005bd4 <prvInsertBlockIntoFreeList+0xa8>)
 8005b36:	60fb      	str	r3, [r7, #12]
 8005b38:	e002      	b.n	8005b40 <prvInsertBlockIntoFreeList+0x14>
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	60fb      	str	r3, [r7, #12]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d8f7      	bhi.n	8005b3a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	68ba      	ldr	r2, [r7, #8]
 8005b54:	4413      	add	r3, r2
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d108      	bne.n	8005b6e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	685a      	ldr	r2, [r3, #4]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	441a      	add	r2, r3
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	68ba      	ldr	r2, [r7, #8]
 8005b78:	441a      	add	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d118      	bne.n	8005bb4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	4b14      	ldr	r3, [pc, #80]	; (8005bd8 <prvInsertBlockIntoFreeList+0xac>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d00d      	beq.n	8005baa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685a      	ldr	r2, [r3, #4]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	441a      	add	r2, r3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	601a      	str	r2, [r3, #0]
 8005ba8:	e008      	b.n	8005bbc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005baa:	4b0b      	ldr	r3, [pc, #44]	; (8005bd8 <prvInsertBlockIntoFreeList+0xac>)
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	601a      	str	r2, [r3, #0]
 8005bb2:	e003      	b.n	8005bbc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d002      	beq.n	8005bca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005bca:	bf00      	nop
 8005bcc:	3714      	adds	r7, #20
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bc80      	pop	{r7}
 8005bd2:	4770      	bx	lr
 8005bd4:	20001ac0 	.word	0x20001ac0
 8005bd8:	20001ac8 	.word	0x20001ac8

08005bdc <sbrk_aligned>:
 8005bdc:	b570      	push	{r4, r5, r6, lr}
 8005bde:	4e0e      	ldr	r6, [pc, #56]	; (8005c18 <sbrk_aligned+0x3c>)
 8005be0:	460c      	mov	r4, r1
 8005be2:	6831      	ldr	r1, [r6, #0]
 8005be4:	4605      	mov	r5, r0
 8005be6:	b911      	cbnz	r1, 8005bee <sbrk_aligned+0x12>
 8005be8:	f000 f8cc 	bl	8005d84 <_sbrk_r>
 8005bec:	6030      	str	r0, [r6, #0]
 8005bee:	4621      	mov	r1, r4
 8005bf0:	4628      	mov	r0, r5
 8005bf2:	f000 f8c7 	bl	8005d84 <_sbrk_r>
 8005bf6:	1c43      	adds	r3, r0, #1
 8005bf8:	d00a      	beq.n	8005c10 <sbrk_aligned+0x34>
 8005bfa:	1cc4      	adds	r4, r0, #3
 8005bfc:	f024 0403 	bic.w	r4, r4, #3
 8005c00:	42a0      	cmp	r0, r4
 8005c02:	d007      	beq.n	8005c14 <sbrk_aligned+0x38>
 8005c04:	1a21      	subs	r1, r4, r0
 8005c06:	4628      	mov	r0, r5
 8005c08:	f000 f8bc 	bl	8005d84 <_sbrk_r>
 8005c0c:	3001      	adds	r0, #1
 8005c0e:	d101      	bne.n	8005c14 <sbrk_aligned+0x38>
 8005c10:	f04f 34ff 	mov.w	r4, #4294967295
 8005c14:	4620      	mov	r0, r4
 8005c16:	bd70      	pop	{r4, r5, r6, pc}
 8005c18:	20001adc 	.word	0x20001adc

08005c1c <_malloc_r>:
 8005c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c20:	1ccd      	adds	r5, r1, #3
 8005c22:	f025 0503 	bic.w	r5, r5, #3
 8005c26:	3508      	adds	r5, #8
 8005c28:	2d0c      	cmp	r5, #12
 8005c2a:	bf38      	it	cc
 8005c2c:	250c      	movcc	r5, #12
 8005c2e:	2d00      	cmp	r5, #0
 8005c30:	4607      	mov	r7, r0
 8005c32:	db01      	blt.n	8005c38 <_malloc_r+0x1c>
 8005c34:	42a9      	cmp	r1, r5
 8005c36:	d905      	bls.n	8005c44 <_malloc_r+0x28>
 8005c38:	230c      	movs	r3, #12
 8005c3a:	2600      	movs	r6, #0
 8005c3c:	603b      	str	r3, [r7, #0]
 8005c3e:	4630      	mov	r0, r6
 8005c40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c44:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005d18 <_malloc_r+0xfc>
 8005c48:	f000 f868 	bl	8005d1c <__malloc_lock>
 8005c4c:	f8d8 3000 	ldr.w	r3, [r8]
 8005c50:	461c      	mov	r4, r3
 8005c52:	bb5c      	cbnz	r4, 8005cac <_malloc_r+0x90>
 8005c54:	4629      	mov	r1, r5
 8005c56:	4638      	mov	r0, r7
 8005c58:	f7ff ffc0 	bl	8005bdc <sbrk_aligned>
 8005c5c:	1c43      	adds	r3, r0, #1
 8005c5e:	4604      	mov	r4, r0
 8005c60:	d155      	bne.n	8005d0e <_malloc_r+0xf2>
 8005c62:	f8d8 4000 	ldr.w	r4, [r8]
 8005c66:	4626      	mov	r6, r4
 8005c68:	2e00      	cmp	r6, #0
 8005c6a:	d145      	bne.n	8005cf8 <_malloc_r+0xdc>
 8005c6c:	2c00      	cmp	r4, #0
 8005c6e:	d048      	beq.n	8005d02 <_malloc_r+0xe6>
 8005c70:	6823      	ldr	r3, [r4, #0]
 8005c72:	4631      	mov	r1, r6
 8005c74:	4638      	mov	r0, r7
 8005c76:	eb04 0903 	add.w	r9, r4, r3
 8005c7a:	f000 f883 	bl	8005d84 <_sbrk_r>
 8005c7e:	4581      	cmp	r9, r0
 8005c80:	d13f      	bne.n	8005d02 <_malloc_r+0xe6>
 8005c82:	6821      	ldr	r1, [r4, #0]
 8005c84:	4638      	mov	r0, r7
 8005c86:	1a6d      	subs	r5, r5, r1
 8005c88:	4629      	mov	r1, r5
 8005c8a:	f7ff ffa7 	bl	8005bdc <sbrk_aligned>
 8005c8e:	3001      	adds	r0, #1
 8005c90:	d037      	beq.n	8005d02 <_malloc_r+0xe6>
 8005c92:	6823      	ldr	r3, [r4, #0]
 8005c94:	442b      	add	r3, r5
 8005c96:	6023      	str	r3, [r4, #0]
 8005c98:	f8d8 3000 	ldr.w	r3, [r8]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d038      	beq.n	8005d12 <_malloc_r+0xf6>
 8005ca0:	685a      	ldr	r2, [r3, #4]
 8005ca2:	42a2      	cmp	r2, r4
 8005ca4:	d12b      	bne.n	8005cfe <_malloc_r+0xe2>
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	605a      	str	r2, [r3, #4]
 8005caa:	e00f      	b.n	8005ccc <_malloc_r+0xb0>
 8005cac:	6822      	ldr	r2, [r4, #0]
 8005cae:	1b52      	subs	r2, r2, r5
 8005cb0:	d41f      	bmi.n	8005cf2 <_malloc_r+0xd6>
 8005cb2:	2a0b      	cmp	r2, #11
 8005cb4:	d917      	bls.n	8005ce6 <_malloc_r+0xca>
 8005cb6:	1961      	adds	r1, r4, r5
 8005cb8:	42a3      	cmp	r3, r4
 8005cba:	6025      	str	r5, [r4, #0]
 8005cbc:	bf18      	it	ne
 8005cbe:	6059      	strne	r1, [r3, #4]
 8005cc0:	6863      	ldr	r3, [r4, #4]
 8005cc2:	bf08      	it	eq
 8005cc4:	f8c8 1000 	streq.w	r1, [r8]
 8005cc8:	5162      	str	r2, [r4, r5]
 8005cca:	604b      	str	r3, [r1, #4]
 8005ccc:	4638      	mov	r0, r7
 8005cce:	f104 060b 	add.w	r6, r4, #11
 8005cd2:	f000 f829 	bl	8005d28 <__malloc_unlock>
 8005cd6:	f026 0607 	bic.w	r6, r6, #7
 8005cda:	1d23      	adds	r3, r4, #4
 8005cdc:	1af2      	subs	r2, r6, r3
 8005cde:	d0ae      	beq.n	8005c3e <_malloc_r+0x22>
 8005ce0:	1b9b      	subs	r3, r3, r6
 8005ce2:	50a3      	str	r3, [r4, r2]
 8005ce4:	e7ab      	b.n	8005c3e <_malloc_r+0x22>
 8005ce6:	42a3      	cmp	r3, r4
 8005ce8:	6862      	ldr	r2, [r4, #4]
 8005cea:	d1dd      	bne.n	8005ca8 <_malloc_r+0x8c>
 8005cec:	f8c8 2000 	str.w	r2, [r8]
 8005cf0:	e7ec      	b.n	8005ccc <_malloc_r+0xb0>
 8005cf2:	4623      	mov	r3, r4
 8005cf4:	6864      	ldr	r4, [r4, #4]
 8005cf6:	e7ac      	b.n	8005c52 <_malloc_r+0x36>
 8005cf8:	4634      	mov	r4, r6
 8005cfa:	6876      	ldr	r6, [r6, #4]
 8005cfc:	e7b4      	b.n	8005c68 <_malloc_r+0x4c>
 8005cfe:	4613      	mov	r3, r2
 8005d00:	e7cc      	b.n	8005c9c <_malloc_r+0x80>
 8005d02:	230c      	movs	r3, #12
 8005d04:	4638      	mov	r0, r7
 8005d06:	603b      	str	r3, [r7, #0]
 8005d08:	f000 f80e 	bl	8005d28 <__malloc_unlock>
 8005d0c:	e797      	b.n	8005c3e <_malloc_r+0x22>
 8005d0e:	6025      	str	r5, [r4, #0]
 8005d10:	e7dc      	b.n	8005ccc <_malloc_r+0xb0>
 8005d12:	605b      	str	r3, [r3, #4]
 8005d14:	deff      	udf	#255	; 0xff
 8005d16:	bf00      	nop
 8005d18:	20001ad8 	.word	0x20001ad8

08005d1c <__malloc_lock>:
 8005d1c:	4801      	ldr	r0, [pc, #4]	; (8005d24 <__malloc_lock+0x8>)
 8005d1e:	f000 b86b 	b.w	8005df8 <__retarget_lock_acquire_recursive>
 8005d22:	bf00      	nop
 8005d24:	20001c1c 	.word	0x20001c1c

08005d28 <__malloc_unlock>:
 8005d28:	4801      	ldr	r0, [pc, #4]	; (8005d30 <__malloc_unlock+0x8>)
 8005d2a:	f000 b866 	b.w	8005dfa <__retarget_lock_release_recursive>
 8005d2e:	bf00      	nop
 8005d30:	20001c1c 	.word	0x20001c1c

08005d34 <siprintf>:
 8005d34:	b40e      	push	{r1, r2, r3}
 8005d36:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005d3a:	b500      	push	{lr}
 8005d3c:	b09c      	sub	sp, #112	; 0x70
 8005d3e:	ab1d      	add	r3, sp, #116	; 0x74
 8005d40:	9002      	str	r0, [sp, #8]
 8005d42:	9006      	str	r0, [sp, #24]
 8005d44:	9107      	str	r1, [sp, #28]
 8005d46:	9104      	str	r1, [sp, #16]
 8005d48:	4808      	ldr	r0, [pc, #32]	; (8005d6c <siprintf+0x38>)
 8005d4a:	4909      	ldr	r1, [pc, #36]	; (8005d70 <siprintf+0x3c>)
 8005d4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d50:	9105      	str	r1, [sp, #20]
 8005d52:	6800      	ldr	r0, [r0, #0]
 8005d54:	a902      	add	r1, sp, #8
 8005d56:	9301      	str	r3, [sp, #4]
 8005d58:	f000 f900 	bl	8005f5c <_svfiprintf_r>
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	9b02      	ldr	r3, [sp, #8]
 8005d60:	701a      	strb	r2, [r3, #0]
 8005d62:	b01c      	add	sp, #112	; 0x70
 8005d64:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d68:	b003      	add	sp, #12
 8005d6a:	4770      	bx	lr
 8005d6c:	2000005c 	.word	0x2000005c
 8005d70:	ffff0208 	.word	0xffff0208

08005d74 <memset>:
 8005d74:	4603      	mov	r3, r0
 8005d76:	4402      	add	r2, r0
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d100      	bne.n	8005d7e <memset+0xa>
 8005d7c:	4770      	bx	lr
 8005d7e:	f803 1b01 	strb.w	r1, [r3], #1
 8005d82:	e7f9      	b.n	8005d78 <memset+0x4>

08005d84 <_sbrk_r>:
 8005d84:	b538      	push	{r3, r4, r5, lr}
 8005d86:	2300      	movs	r3, #0
 8005d88:	4d05      	ldr	r5, [pc, #20]	; (8005da0 <_sbrk_r+0x1c>)
 8005d8a:	4604      	mov	r4, r0
 8005d8c:	4608      	mov	r0, r1
 8005d8e:	602b      	str	r3, [r5, #0]
 8005d90:	f7fb f8de 	bl	8000f50 <_sbrk>
 8005d94:	1c43      	adds	r3, r0, #1
 8005d96:	d102      	bne.n	8005d9e <_sbrk_r+0x1a>
 8005d98:	682b      	ldr	r3, [r5, #0]
 8005d9a:	b103      	cbz	r3, 8005d9e <_sbrk_r+0x1a>
 8005d9c:	6023      	str	r3, [r4, #0]
 8005d9e:	bd38      	pop	{r3, r4, r5, pc}
 8005da0:	20001c18 	.word	0x20001c18

08005da4 <__errno>:
 8005da4:	4b01      	ldr	r3, [pc, #4]	; (8005dac <__errno+0x8>)
 8005da6:	6818      	ldr	r0, [r3, #0]
 8005da8:	4770      	bx	lr
 8005daa:	bf00      	nop
 8005dac:	2000005c 	.word	0x2000005c

08005db0 <__libc_init_array>:
 8005db0:	b570      	push	{r4, r5, r6, lr}
 8005db2:	2600      	movs	r6, #0
 8005db4:	4d0c      	ldr	r5, [pc, #48]	; (8005de8 <__libc_init_array+0x38>)
 8005db6:	4c0d      	ldr	r4, [pc, #52]	; (8005dec <__libc_init_array+0x3c>)
 8005db8:	1b64      	subs	r4, r4, r5
 8005dba:	10a4      	asrs	r4, r4, #2
 8005dbc:	42a6      	cmp	r6, r4
 8005dbe:	d109      	bne.n	8005dd4 <__libc_init_array+0x24>
 8005dc0:	f000 fbbe 	bl	8006540 <_init>
 8005dc4:	2600      	movs	r6, #0
 8005dc6:	4d0a      	ldr	r5, [pc, #40]	; (8005df0 <__libc_init_array+0x40>)
 8005dc8:	4c0a      	ldr	r4, [pc, #40]	; (8005df4 <__libc_init_array+0x44>)
 8005dca:	1b64      	subs	r4, r4, r5
 8005dcc:	10a4      	asrs	r4, r4, #2
 8005dce:	42a6      	cmp	r6, r4
 8005dd0:	d105      	bne.n	8005dde <__libc_init_array+0x2e>
 8005dd2:	bd70      	pop	{r4, r5, r6, pc}
 8005dd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dd8:	4798      	blx	r3
 8005dda:	3601      	adds	r6, #1
 8005ddc:	e7ee      	b.n	8005dbc <__libc_init_array+0xc>
 8005dde:	f855 3b04 	ldr.w	r3, [r5], #4
 8005de2:	4798      	blx	r3
 8005de4:	3601      	adds	r6, #1
 8005de6:	e7f2      	b.n	8005dce <__libc_init_array+0x1e>
 8005de8:	08006680 	.word	0x08006680
 8005dec:	08006680 	.word	0x08006680
 8005df0:	08006680 	.word	0x08006680
 8005df4:	08006684 	.word	0x08006684

08005df8 <__retarget_lock_acquire_recursive>:
 8005df8:	4770      	bx	lr

08005dfa <__retarget_lock_release_recursive>:
 8005dfa:	4770      	bx	lr

08005dfc <memcpy>:
 8005dfc:	440a      	add	r2, r1
 8005dfe:	4291      	cmp	r1, r2
 8005e00:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e04:	d100      	bne.n	8005e08 <memcpy+0xc>
 8005e06:	4770      	bx	lr
 8005e08:	b510      	push	{r4, lr}
 8005e0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e0e:	4291      	cmp	r1, r2
 8005e10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e14:	d1f9      	bne.n	8005e0a <memcpy+0xe>
 8005e16:	bd10      	pop	{r4, pc}

08005e18 <_free_r>:
 8005e18:	b538      	push	{r3, r4, r5, lr}
 8005e1a:	4605      	mov	r5, r0
 8005e1c:	2900      	cmp	r1, #0
 8005e1e:	d040      	beq.n	8005ea2 <_free_r+0x8a>
 8005e20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e24:	1f0c      	subs	r4, r1, #4
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	bfb8      	it	lt
 8005e2a:	18e4      	addlt	r4, r4, r3
 8005e2c:	f7ff ff76 	bl	8005d1c <__malloc_lock>
 8005e30:	4a1c      	ldr	r2, [pc, #112]	; (8005ea4 <_free_r+0x8c>)
 8005e32:	6813      	ldr	r3, [r2, #0]
 8005e34:	b933      	cbnz	r3, 8005e44 <_free_r+0x2c>
 8005e36:	6063      	str	r3, [r4, #4]
 8005e38:	6014      	str	r4, [r2, #0]
 8005e3a:	4628      	mov	r0, r5
 8005e3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e40:	f7ff bf72 	b.w	8005d28 <__malloc_unlock>
 8005e44:	42a3      	cmp	r3, r4
 8005e46:	d908      	bls.n	8005e5a <_free_r+0x42>
 8005e48:	6820      	ldr	r0, [r4, #0]
 8005e4a:	1821      	adds	r1, r4, r0
 8005e4c:	428b      	cmp	r3, r1
 8005e4e:	bf01      	itttt	eq
 8005e50:	6819      	ldreq	r1, [r3, #0]
 8005e52:	685b      	ldreq	r3, [r3, #4]
 8005e54:	1809      	addeq	r1, r1, r0
 8005e56:	6021      	streq	r1, [r4, #0]
 8005e58:	e7ed      	b.n	8005e36 <_free_r+0x1e>
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	b10b      	cbz	r3, 8005e64 <_free_r+0x4c>
 8005e60:	42a3      	cmp	r3, r4
 8005e62:	d9fa      	bls.n	8005e5a <_free_r+0x42>
 8005e64:	6811      	ldr	r1, [r2, #0]
 8005e66:	1850      	adds	r0, r2, r1
 8005e68:	42a0      	cmp	r0, r4
 8005e6a:	d10b      	bne.n	8005e84 <_free_r+0x6c>
 8005e6c:	6820      	ldr	r0, [r4, #0]
 8005e6e:	4401      	add	r1, r0
 8005e70:	1850      	adds	r0, r2, r1
 8005e72:	4283      	cmp	r3, r0
 8005e74:	6011      	str	r1, [r2, #0]
 8005e76:	d1e0      	bne.n	8005e3a <_free_r+0x22>
 8005e78:	6818      	ldr	r0, [r3, #0]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	4408      	add	r0, r1
 8005e7e:	6010      	str	r0, [r2, #0]
 8005e80:	6053      	str	r3, [r2, #4]
 8005e82:	e7da      	b.n	8005e3a <_free_r+0x22>
 8005e84:	d902      	bls.n	8005e8c <_free_r+0x74>
 8005e86:	230c      	movs	r3, #12
 8005e88:	602b      	str	r3, [r5, #0]
 8005e8a:	e7d6      	b.n	8005e3a <_free_r+0x22>
 8005e8c:	6820      	ldr	r0, [r4, #0]
 8005e8e:	1821      	adds	r1, r4, r0
 8005e90:	428b      	cmp	r3, r1
 8005e92:	bf01      	itttt	eq
 8005e94:	6819      	ldreq	r1, [r3, #0]
 8005e96:	685b      	ldreq	r3, [r3, #4]
 8005e98:	1809      	addeq	r1, r1, r0
 8005e9a:	6021      	streq	r1, [r4, #0]
 8005e9c:	6063      	str	r3, [r4, #4]
 8005e9e:	6054      	str	r4, [r2, #4]
 8005ea0:	e7cb      	b.n	8005e3a <_free_r+0x22>
 8005ea2:	bd38      	pop	{r3, r4, r5, pc}
 8005ea4:	20001ad8 	.word	0x20001ad8

08005ea8 <__ssputs_r>:
 8005ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005eac:	461f      	mov	r7, r3
 8005eae:	688e      	ldr	r6, [r1, #8]
 8005eb0:	4682      	mov	sl, r0
 8005eb2:	42be      	cmp	r6, r7
 8005eb4:	460c      	mov	r4, r1
 8005eb6:	4690      	mov	r8, r2
 8005eb8:	680b      	ldr	r3, [r1, #0]
 8005eba:	d82c      	bhi.n	8005f16 <__ssputs_r+0x6e>
 8005ebc:	898a      	ldrh	r2, [r1, #12]
 8005ebe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005ec2:	d026      	beq.n	8005f12 <__ssputs_r+0x6a>
 8005ec4:	6965      	ldr	r5, [r4, #20]
 8005ec6:	6909      	ldr	r1, [r1, #16]
 8005ec8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ecc:	eba3 0901 	sub.w	r9, r3, r1
 8005ed0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005ed4:	1c7b      	adds	r3, r7, #1
 8005ed6:	444b      	add	r3, r9
 8005ed8:	106d      	asrs	r5, r5, #1
 8005eda:	429d      	cmp	r5, r3
 8005edc:	bf38      	it	cc
 8005ede:	461d      	movcc	r5, r3
 8005ee0:	0553      	lsls	r3, r2, #21
 8005ee2:	d527      	bpl.n	8005f34 <__ssputs_r+0x8c>
 8005ee4:	4629      	mov	r1, r5
 8005ee6:	f7ff fe99 	bl	8005c1c <_malloc_r>
 8005eea:	4606      	mov	r6, r0
 8005eec:	b360      	cbz	r0, 8005f48 <__ssputs_r+0xa0>
 8005eee:	464a      	mov	r2, r9
 8005ef0:	6921      	ldr	r1, [r4, #16]
 8005ef2:	f7ff ff83 	bl	8005dfc <memcpy>
 8005ef6:	89a3      	ldrh	r3, [r4, #12]
 8005ef8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005efc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f00:	81a3      	strh	r3, [r4, #12]
 8005f02:	6126      	str	r6, [r4, #16]
 8005f04:	444e      	add	r6, r9
 8005f06:	6026      	str	r6, [r4, #0]
 8005f08:	463e      	mov	r6, r7
 8005f0a:	6165      	str	r5, [r4, #20]
 8005f0c:	eba5 0509 	sub.w	r5, r5, r9
 8005f10:	60a5      	str	r5, [r4, #8]
 8005f12:	42be      	cmp	r6, r7
 8005f14:	d900      	bls.n	8005f18 <__ssputs_r+0x70>
 8005f16:	463e      	mov	r6, r7
 8005f18:	4632      	mov	r2, r6
 8005f1a:	4641      	mov	r1, r8
 8005f1c:	6820      	ldr	r0, [r4, #0]
 8005f1e:	f000 faaf 	bl	8006480 <memmove>
 8005f22:	2000      	movs	r0, #0
 8005f24:	68a3      	ldr	r3, [r4, #8]
 8005f26:	1b9b      	subs	r3, r3, r6
 8005f28:	60a3      	str	r3, [r4, #8]
 8005f2a:	6823      	ldr	r3, [r4, #0]
 8005f2c:	4433      	add	r3, r6
 8005f2e:	6023      	str	r3, [r4, #0]
 8005f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f34:	462a      	mov	r2, r5
 8005f36:	f000 facb 	bl	80064d0 <_realloc_r>
 8005f3a:	4606      	mov	r6, r0
 8005f3c:	2800      	cmp	r0, #0
 8005f3e:	d1e0      	bne.n	8005f02 <__ssputs_r+0x5a>
 8005f40:	4650      	mov	r0, sl
 8005f42:	6921      	ldr	r1, [r4, #16]
 8005f44:	f7ff ff68 	bl	8005e18 <_free_r>
 8005f48:	230c      	movs	r3, #12
 8005f4a:	f8ca 3000 	str.w	r3, [sl]
 8005f4e:	89a3      	ldrh	r3, [r4, #12]
 8005f50:	f04f 30ff 	mov.w	r0, #4294967295
 8005f54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f58:	81a3      	strh	r3, [r4, #12]
 8005f5a:	e7e9      	b.n	8005f30 <__ssputs_r+0x88>

08005f5c <_svfiprintf_r>:
 8005f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f60:	4698      	mov	r8, r3
 8005f62:	898b      	ldrh	r3, [r1, #12]
 8005f64:	4607      	mov	r7, r0
 8005f66:	061b      	lsls	r3, r3, #24
 8005f68:	460d      	mov	r5, r1
 8005f6a:	4614      	mov	r4, r2
 8005f6c:	b09d      	sub	sp, #116	; 0x74
 8005f6e:	d50e      	bpl.n	8005f8e <_svfiprintf_r+0x32>
 8005f70:	690b      	ldr	r3, [r1, #16]
 8005f72:	b963      	cbnz	r3, 8005f8e <_svfiprintf_r+0x32>
 8005f74:	2140      	movs	r1, #64	; 0x40
 8005f76:	f7ff fe51 	bl	8005c1c <_malloc_r>
 8005f7a:	6028      	str	r0, [r5, #0]
 8005f7c:	6128      	str	r0, [r5, #16]
 8005f7e:	b920      	cbnz	r0, 8005f8a <_svfiprintf_r+0x2e>
 8005f80:	230c      	movs	r3, #12
 8005f82:	603b      	str	r3, [r7, #0]
 8005f84:	f04f 30ff 	mov.w	r0, #4294967295
 8005f88:	e0d0      	b.n	800612c <_svfiprintf_r+0x1d0>
 8005f8a:	2340      	movs	r3, #64	; 0x40
 8005f8c:	616b      	str	r3, [r5, #20]
 8005f8e:	2300      	movs	r3, #0
 8005f90:	9309      	str	r3, [sp, #36]	; 0x24
 8005f92:	2320      	movs	r3, #32
 8005f94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f98:	2330      	movs	r3, #48	; 0x30
 8005f9a:	f04f 0901 	mov.w	r9, #1
 8005f9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005fa2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8006144 <_svfiprintf_r+0x1e8>
 8005fa6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005faa:	4623      	mov	r3, r4
 8005fac:	469a      	mov	sl, r3
 8005fae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005fb2:	b10a      	cbz	r2, 8005fb8 <_svfiprintf_r+0x5c>
 8005fb4:	2a25      	cmp	r2, #37	; 0x25
 8005fb6:	d1f9      	bne.n	8005fac <_svfiprintf_r+0x50>
 8005fb8:	ebba 0b04 	subs.w	fp, sl, r4
 8005fbc:	d00b      	beq.n	8005fd6 <_svfiprintf_r+0x7a>
 8005fbe:	465b      	mov	r3, fp
 8005fc0:	4622      	mov	r2, r4
 8005fc2:	4629      	mov	r1, r5
 8005fc4:	4638      	mov	r0, r7
 8005fc6:	f7ff ff6f 	bl	8005ea8 <__ssputs_r>
 8005fca:	3001      	adds	r0, #1
 8005fcc:	f000 80a9 	beq.w	8006122 <_svfiprintf_r+0x1c6>
 8005fd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fd2:	445a      	add	r2, fp
 8005fd4:	9209      	str	r2, [sp, #36]	; 0x24
 8005fd6:	f89a 3000 	ldrb.w	r3, [sl]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	f000 80a1 	beq.w	8006122 <_svfiprintf_r+0x1c6>
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8005fe6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005fea:	f10a 0a01 	add.w	sl, sl, #1
 8005fee:	9304      	str	r3, [sp, #16]
 8005ff0:	9307      	str	r3, [sp, #28]
 8005ff2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ff6:	931a      	str	r3, [sp, #104]	; 0x68
 8005ff8:	4654      	mov	r4, sl
 8005ffa:	2205      	movs	r2, #5
 8005ffc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006000:	4850      	ldr	r0, [pc, #320]	; (8006144 <_svfiprintf_r+0x1e8>)
 8006002:	f000 fa57 	bl	80064b4 <memchr>
 8006006:	9a04      	ldr	r2, [sp, #16]
 8006008:	b9d8      	cbnz	r0, 8006042 <_svfiprintf_r+0xe6>
 800600a:	06d0      	lsls	r0, r2, #27
 800600c:	bf44      	itt	mi
 800600e:	2320      	movmi	r3, #32
 8006010:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006014:	0711      	lsls	r1, r2, #28
 8006016:	bf44      	itt	mi
 8006018:	232b      	movmi	r3, #43	; 0x2b
 800601a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800601e:	f89a 3000 	ldrb.w	r3, [sl]
 8006022:	2b2a      	cmp	r3, #42	; 0x2a
 8006024:	d015      	beq.n	8006052 <_svfiprintf_r+0xf6>
 8006026:	4654      	mov	r4, sl
 8006028:	2000      	movs	r0, #0
 800602a:	f04f 0c0a 	mov.w	ip, #10
 800602e:	9a07      	ldr	r2, [sp, #28]
 8006030:	4621      	mov	r1, r4
 8006032:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006036:	3b30      	subs	r3, #48	; 0x30
 8006038:	2b09      	cmp	r3, #9
 800603a:	d94d      	bls.n	80060d8 <_svfiprintf_r+0x17c>
 800603c:	b1b0      	cbz	r0, 800606c <_svfiprintf_r+0x110>
 800603e:	9207      	str	r2, [sp, #28]
 8006040:	e014      	b.n	800606c <_svfiprintf_r+0x110>
 8006042:	eba0 0308 	sub.w	r3, r0, r8
 8006046:	fa09 f303 	lsl.w	r3, r9, r3
 800604a:	4313      	orrs	r3, r2
 800604c:	46a2      	mov	sl, r4
 800604e:	9304      	str	r3, [sp, #16]
 8006050:	e7d2      	b.n	8005ff8 <_svfiprintf_r+0x9c>
 8006052:	9b03      	ldr	r3, [sp, #12]
 8006054:	1d19      	adds	r1, r3, #4
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	9103      	str	r1, [sp, #12]
 800605a:	2b00      	cmp	r3, #0
 800605c:	bfbb      	ittet	lt
 800605e:	425b      	neglt	r3, r3
 8006060:	f042 0202 	orrlt.w	r2, r2, #2
 8006064:	9307      	strge	r3, [sp, #28]
 8006066:	9307      	strlt	r3, [sp, #28]
 8006068:	bfb8      	it	lt
 800606a:	9204      	strlt	r2, [sp, #16]
 800606c:	7823      	ldrb	r3, [r4, #0]
 800606e:	2b2e      	cmp	r3, #46	; 0x2e
 8006070:	d10c      	bne.n	800608c <_svfiprintf_r+0x130>
 8006072:	7863      	ldrb	r3, [r4, #1]
 8006074:	2b2a      	cmp	r3, #42	; 0x2a
 8006076:	d134      	bne.n	80060e2 <_svfiprintf_r+0x186>
 8006078:	9b03      	ldr	r3, [sp, #12]
 800607a:	3402      	adds	r4, #2
 800607c:	1d1a      	adds	r2, r3, #4
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	9203      	str	r2, [sp, #12]
 8006082:	2b00      	cmp	r3, #0
 8006084:	bfb8      	it	lt
 8006086:	f04f 33ff 	movlt.w	r3, #4294967295
 800608a:	9305      	str	r3, [sp, #20]
 800608c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8006148 <_svfiprintf_r+0x1ec>
 8006090:	2203      	movs	r2, #3
 8006092:	4650      	mov	r0, sl
 8006094:	7821      	ldrb	r1, [r4, #0]
 8006096:	f000 fa0d 	bl	80064b4 <memchr>
 800609a:	b138      	cbz	r0, 80060ac <_svfiprintf_r+0x150>
 800609c:	2240      	movs	r2, #64	; 0x40
 800609e:	9b04      	ldr	r3, [sp, #16]
 80060a0:	eba0 000a 	sub.w	r0, r0, sl
 80060a4:	4082      	lsls	r2, r0
 80060a6:	4313      	orrs	r3, r2
 80060a8:	3401      	adds	r4, #1
 80060aa:	9304      	str	r3, [sp, #16]
 80060ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060b0:	2206      	movs	r2, #6
 80060b2:	4826      	ldr	r0, [pc, #152]	; (800614c <_svfiprintf_r+0x1f0>)
 80060b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80060b8:	f000 f9fc 	bl	80064b4 <memchr>
 80060bc:	2800      	cmp	r0, #0
 80060be:	d038      	beq.n	8006132 <_svfiprintf_r+0x1d6>
 80060c0:	4b23      	ldr	r3, [pc, #140]	; (8006150 <_svfiprintf_r+0x1f4>)
 80060c2:	bb1b      	cbnz	r3, 800610c <_svfiprintf_r+0x1b0>
 80060c4:	9b03      	ldr	r3, [sp, #12]
 80060c6:	3307      	adds	r3, #7
 80060c8:	f023 0307 	bic.w	r3, r3, #7
 80060cc:	3308      	adds	r3, #8
 80060ce:	9303      	str	r3, [sp, #12]
 80060d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060d2:	4433      	add	r3, r6
 80060d4:	9309      	str	r3, [sp, #36]	; 0x24
 80060d6:	e768      	b.n	8005faa <_svfiprintf_r+0x4e>
 80060d8:	460c      	mov	r4, r1
 80060da:	2001      	movs	r0, #1
 80060dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80060e0:	e7a6      	b.n	8006030 <_svfiprintf_r+0xd4>
 80060e2:	2300      	movs	r3, #0
 80060e4:	f04f 0c0a 	mov.w	ip, #10
 80060e8:	4619      	mov	r1, r3
 80060ea:	3401      	adds	r4, #1
 80060ec:	9305      	str	r3, [sp, #20]
 80060ee:	4620      	mov	r0, r4
 80060f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060f4:	3a30      	subs	r2, #48	; 0x30
 80060f6:	2a09      	cmp	r2, #9
 80060f8:	d903      	bls.n	8006102 <_svfiprintf_r+0x1a6>
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d0c6      	beq.n	800608c <_svfiprintf_r+0x130>
 80060fe:	9105      	str	r1, [sp, #20]
 8006100:	e7c4      	b.n	800608c <_svfiprintf_r+0x130>
 8006102:	4604      	mov	r4, r0
 8006104:	2301      	movs	r3, #1
 8006106:	fb0c 2101 	mla	r1, ip, r1, r2
 800610a:	e7f0      	b.n	80060ee <_svfiprintf_r+0x192>
 800610c:	ab03      	add	r3, sp, #12
 800610e:	9300      	str	r3, [sp, #0]
 8006110:	462a      	mov	r2, r5
 8006112:	4638      	mov	r0, r7
 8006114:	4b0f      	ldr	r3, [pc, #60]	; (8006154 <_svfiprintf_r+0x1f8>)
 8006116:	a904      	add	r1, sp, #16
 8006118:	f3af 8000 	nop.w
 800611c:	1c42      	adds	r2, r0, #1
 800611e:	4606      	mov	r6, r0
 8006120:	d1d6      	bne.n	80060d0 <_svfiprintf_r+0x174>
 8006122:	89ab      	ldrh	r3, [r5, #12]
 8006124:	065b      	lsls	r3, r3, #25
 8006126:	f53f af2d 	bmi.w	8005f84 <_svfiprintf_r+0x28>
 800612a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800612c:	b01d      	add	sp, #116	; 0x74
 800612e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006132:	ab03      	add	r3, sp, #12
 8006134:	9300      	str	r3, [sp, #0]
 8006136:	462a      	mov	r2, r5
 8006138:	4638      	mov	r0, r7
 800613a:	4b06      	ldr	r3, [pc, #24]	; (8006154 <_svfiprintf_r+0x1f8>)
 800613c:	a904      	add	r1, sp, #16
 800613e:	f000 f87d 	bl	800623c <_printf_i>
 8006142:	e7eb      	b.n	800611c <_svfiprintf_r+0x1c0>
 8006144:	0800664a 	.word	0x0800664a
 8006148:	08006650 	.word	0x08006650
 800614c:	08006654 	.word	0x08006654
 8006150:	00000000 	.word	0x00000000
 8006154:	08005ea9 	.word	0x08005ea9

08006158 <_printf_common>:
 8006158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800615c:	4616      	mov	r6, r2
 800615e:	4699      	mov	r9, r3
 8006160:	688a      	ldr	r2, [r1, #8]
 8006162:	690b      	ldr	r3, [r1, #16]
 8006164:	4607      	mov	r7, r0
 8006166:	4293      	cmp	r3, r2
 8006168:	bfb8      	it	lt
 800616a:	4613      	movlt	r3, r2
 800616c:	6033      	str	r3, [r6, #0]
 800616e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006172:	460c      	mov	r4, r1
 8006174:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006178:	b10a      	cbz	r2, 800617e <_printf_common+0x26>
 800617a:	3301      	adds	r3, #1
 800617c:	6033      	str	r3, [r6, #0]
 800617e:	6823      	ldr	r3, [r4, #0]
 8006180:	0699      	lsls	r1, r3, #26
 8006182:	bf42      	ittt	mi
 8006184:	6833      	ldrmi	r3, [r6, #0]
 8006186:	3302      	addmi	r3, #2
 8006188:	6033      	strmi	r3, [r6, #0]
 800618a:	6825      	ldr	r5, [r4, #0]
 800618c:	f015 0506 	ands.w	r5, r5, #6
 8006190:	d106      	bne.n	80061a0 <_printf_common+0x48>
 8006192:	f104 0a19 	add.w	sl, r4, #25
 8006196:	68e3      	ldr	r3, [r4, #12]
 8006198:	6832      	ldr	r2, [r6, #0]
 800619a:	1a9b      	subs	r3, r3, r2
 800619c:	42ab      	cmp	r3, r5
 800619e:	dc2b      	bgt.n	80061f8 <_printf_common+0xa0>
 80061a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80061a4:	1e13      	subs	r3, r2, #0
 80061a6:	6822      	ldr	r2, [r4, #0]
 80061a8:	bf18      	it	ne
 80061aa:	2301      	movne	r3, #1
 80061ac:	0692      	lsls	r2, r2, #26
 80061ae:	d430      	bmi.n	8006212 <_printf_common+0xba>
 80061b0:	4649      	mov	r1, r9
 80061b2:	4638      	mov	r0, r7
 80061b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80061b8:	47c0      	blx	r8
 80061ba:	3001      	adds	r0, #1
 80061bc:	d023      	beq.n	8006206 <_printf_common+0xae>
 80061be:	6823      	ldr	r3, [r4, #0]
 80061c0:	6922      	ldr	r2, [r4, #16]
 80061c2:	f003 0306 	and.w	r3, r3, #6
 80061c6:	2b04      	cmp	r3, #4
 80061c8:	bf14      	ite	ne
 80061ca:	2500      	movne	r5, #0
 80061cc:	6833      	ldreq	r3, [r6, #0]
 80061ce:	f04f 0600 	mov.w	r6, #0
 80061d2:	bf08      	it	eq
 80061d4:	68e5      	ldreq	r5, [r4, #12]
 80061d6:	f104 041a 	add.w	r4, r4, #26
 80061da:	bf08      	it	eq
 80061dc:	1aed      	subeq	r5, r5, r3
 80061de:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80061e2:	bf08      	it	eq
 80061e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061e8:	4293      	cmp	r3, r2
 80061ea:	bfc4      	itt	gt
 80061ec:	1a9b      	subgt	r3, r3, r2
 80061ee:	18ed      	addgt	r5, r5, r3
 80061f0:	42b5      	cmp	r5, r6
 80061f2:	d11a      	bne.n	800622a <_printf_common+0xd2>
 80061f4:	2000      	movs	r0, #0
 80061f6:	e008      	b.n	800620a <_printf_common+0xb2>
 80061f8:	2301      	movs	r3, #1
 80061fa:	4652      	mov	r2, sl
 80061fc:	4649      	mov	r1, r9
 80061fe:	4638      	mov	r0, r7
 8006200:	47c0      	blx	r8
 8006202:	3001      	adds	r0, #1
 8006204:	d103      	bne.n	800620e <_printf_common+0xb6>
 8006206:	f04f 30ff 	mov.w	r0, #4294967295
 800620a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800620e:	3501      	adds	r5, #1
 8006210:	e7c1      	b.n	8006196 <_printf_common+0x3e>
 8006212:	2030      	movs	r0, #48	; 0x30
 8006214:	18e1      	adds	r1, r4, r3
 8006216:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800621a:	1c5a      	adds	r2, r3, #1
 800621c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006220:	4422      	add	r2, r4
 8006222:	3302      	adds	r3, #2
 8006224:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006228:	e7c2      	b.n	80061b0 <_printf_common+0x58>
 800622a:	2301      	movs	r3, #1
 800622c:	4622      	mov	r2, r4
 800622e:	4649      	mov	r1, r9
 8006230:	4638      	mov	r0, r7
 8006232:	47c0      	blx	r8
 8006234:	3001      	adds	r0, #1
 8006236:	d0e6      	beq.n	8006206 <_printf_common+0xae>
 8006238:	3601      	adds	r6, #1
 800623a:	e7d9      	b.n	80061f0 <_printf_common+0x98>

0800623c <_printf_i>:
 800623c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006240:	7e0f      	ldrb	r7, [r1, #24]
 8006242:	4691      	mov	r9, r2
 8006244:	2f78      	cmp	r7, #120	; 0x78
 8006246:	4680      	mov	r8, r0
 8006248:	460c      	mov	r4, r1
 800624a:	469a      	mov	sl, r3
 800624c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800624e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006252:	d807      	bhi.n	8006264 <_printf_i+0x28>
 8006254:	2f62      	cmp	r7, #98	; 0x62
 8006256:	d80a      	bhi.n	800626e <_printf_i+0x32>
 8006258:	2f00      	cmp	r7, #0
 800625a:	f000 80d5 	beq.w	8006408 <_printf_i+0x1cc>
 800625e:	2f58      	cmp	r7, #88	; 0x58
 8006260:	f000 80c1 	beq.w	80063e6 <_printf_i+0x1aa>
 8006264:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006268:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800626c:	e03a      	b.n	80062e4 <_printf_i+0xa8>
 800626e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006272:	2b15      	cmp	r3, #21
 8006274:	d8f6      	bhi.n	8006264 <_printf_i+0x28>
 8006276:	a101      	add	r1, pc, #4	; (adr r1, 800627c <_printf_i+0x40>)
 8006278:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800627c:	080062d5 	.word	0x080062d5
 8006280:	080062e9 	.word	0x080062e9
 8006284:	08006265 	.word	0x08006265
 8006288:	08006265 	.word	0x08006265
 800628c:	08006265 	.word	0x08006265
 8006290:	08006265 	.word	0x08006265
 8006294:	080062e9 	.word	0x080062e9
 8006298:	08006265 	.word	0x08006265
 800629c:	08006265 	.word	0x08006265
 80062a0:	08006265 	.word	0x08006265
 80062a4:	08006265 	.word	0x08006265
 80062a8:	080063ef 	.word	0x080063ef
 80062ac:	08006315 	.word	0x08006315
 80062b0:	080063a9 	.word	0x080063a9
 80062b4:	08006265 	.word	0x08006265
 80062b8:	08006265 	.word	0x08006265
 80062bc:	08006411 	.word	0x08006411
 80062c0:	08006265 	.word	0x08006265
 80062c4:	08006315 	.word	0x08006315
 80062c8:	08006265 	.word	0x08006265
 80062cc:	08006265 	.word	0x08006265
 80062d0:	080063b1 	.word	0x080063b1
 80062d4:	682b      	ldr	r3, [r5, #0]
 80062d6:	1d1a      	adds	r2, r3, #4
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	602a      	str	r2, [r5, #0]
 80062dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062e4:	2301      	movs	r3, #1
 80062e6:	e0a0      	b.n	800642a <_printf_i+0x1ee>
 80062e8:	6820      	ldr	r0, [r4, #0]
 80062ea:	682b      	ldr	r3, [r5, #0]
 80062ec:	0607      	lsls	r7, r0, #24
 80062ee:	f103 0104 	add.w	r1, r3, #4
 80062f2:	6029      	str	r1, [r5, #0]
 80062f4:	d501      	bpl.n	80062fa <_printf_i+0xbe>
 80062f6:	681e      	ldr	r6, [r3, #0]
 80062f8:	e003      	b.n	8006302 <_printf_i+0xc6>
 80062fa:	0646      	lsls	r6, r0, #25
 80062fc:	d5fb      	bpl.n	80062f6 <_printf_i+0xba>
 80062fe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006302:	2e00      	cmp	r6, #0
 8006304:	da03      	bge.n	800630e <_printf_i+0xd2>
 8006306:	232d      	movs	r3, #45	; 0x2d
 8006308:	4276      	negs	r6, r6
 800630a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800630e:	230a      	movs	r3, #10
 8006310:	4859      	ldr	r0, [pc, #356]	; (8006478 <_printf_i+0x23c>)
 8006312:	e012      	b.n	800633a <_printf_i+0xfe>
 8006314:	682b      	ldr	r3, [r5, #0]
 8006316:	6820      	ldr	r0, [r4, #0]
 8006318:	1d19      	adds	r1, r3, #4
 800631a:	6029      	str	r1, [r5, #0]
 800631c:	0605      	lsls	r5, r0, #24
 800631e:	d501      	bpl.n	8006324 <_printf_i+0xe8>
 8006320:	681e      	ldr	r6, [r3, #0]
 8006322:	e002      	b.n	800632a <_printf_i+0xee>
 8006324:	0641      	lsls	r1, r0, #25
 8006326:	d5fb      	bpl.n	8006320 <_printf_i+0xe4>
 8006328:	881e      	ldrh	r6, [r3, #0]
 800632a:	2f6f      	cmp	r7, #111	; 0x6f
 800632c:	bf0c      	ite	eq
 800632e:	2308      	moveq	r3, #8
 8006330:	230a      	movne	r3, #10
 8006332:	4851      	ldr	r0, [pc, #324]	; (8006478 <_printf_i+0x23c>)
 8006334:	2100      	movs	r1, #0
 8006336:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800633a:	6865      	ldr	r5, [r4, #4]
 800633c:	2d00      	cmp	r5, #0
 800633e:	bfa8      	it	ge
 8006340:	6821      	ldrge	r1, [r4, #0]
 8006342:	60a5      	str	r5, [r4, #8]
 8006344:	bfa4      	itt	ge
 8006346:	f021 0104 	bicge.w	r1, r1, #4
 800634a:	6021      	strge	r1, [r4, #0]
 800634c:	b90e      	cbnz	r6, 8006352 <_printf_i+0x116>
 800634e:	2d00      	cmp	r5, #0
 8006350:	d04b      	beq.n	80063ea <_printf_i+0x1ae>
 8006352:	4615      	mov	r5, r2
 8006354:	fbb6 f1f3 	udiv	r1, r6, r3
 8006358:	fb03 6711 	mls	r7, r3, r1, r6
 800635c:	5dc7      	ldrb	r7, [r0, r7]
 800635e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006362:	4637      	mov	r7, r6
 8006364:	42bb      	cmp	r3, r7
 8006366:	460e      	mov	r6, r1
 8006368:	d9f4      	bls.n	8006354 <_printf_i+0x118>
 800636a:	2b08      	cmp	r3, #8
 800636c:	d10b      	bne.n	8006386 <_printf_i+0x14a>
 800636e:	6823      	ldr	r3, [r4, #0]
 8006370:	07de      	lsls	r6, r3, #31
 8006372:	d508      	bpl.n	8006386 <_printf_i+0x14a>
 8006374:	6923      	ldr	r3, [r4, #16]
 8006376:	6861      	ldr	r1, [r4, #4]
 8006378:	4299      	cmp	r1, r3
 800637a:	bfde      	ittt	le
 800637c:	2330      	movle	r3, #48	; 0x30
 800637e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006382:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006386:	1b52      	subs	r2, r2, r5
 8006388:	6122      	str	r2, [r4, #16]
 800638a:	464b      	mov	r3, r9
 800638c:	4621      	mov	r1, r4
 800638e:	4640      	mov	r0, r8
 8006390:	f8cd a000 	str.w	sl, [sp]
 8006394:	aa03      	add	r2, sp, #12
 8006396:	f7ff fedf 	bl	8006158 <_printf_common>
 800639a:	3001      	adds	r0, #1
 800639c:	d14a      	bne.n	8006434 <_printf_i+0x1f8>
 800639e:	f04f 30ff 	mov.w	r0, #4294967295
 80063a2:	b004      	add	sp, #16
 80063a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063a8:	6823      	ldr	r3, [r4, #0]
 80063aa:	f043 0320 	orr.w	r3, r3, #32
 80063ae:	6023      	str	r3, [r4, #0]
 80063b0:	2778      	movs	r7, #120	; 0x78
 80063b2:	4832      	ldr	r0, [pc, #200]	; (800647c <_printf_i+0x240>)
 80063b4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80063b8:	6823      	ldr	r3, [r4, #0]
 80063ba:	6829      	ldr	r1, [r5, #0]
 80063bc:	061f      	lsls	r7, r3, #24
 80063be:	f851 6b04 	ldr.w	r6, [r1], #4
 80063c2:	d402      	bmi.n	80063ca <_printf_i+0x18e>
 80063c4:	065f      	lsls	r7, r3, #25
 80063c6:	bf48      	it	mi
 80063c8:	b2b6      	uxthmi	r6, r6
 80063ca:	07df      	lsls	r7, r3, #31
 80063cc:	bf48      	it	mi
 80063ce:	f043 0320 	orrmi.w	r3, r3, #32
 80063d2:	6029      	str	r1, [r5, #0]
 80063d4:	bf48      	it	mi
 80063d6:	6023      	strmi	r3, [r4, #0]
 80063d8:	b91e      	cbnz	r6, 80063e2 <_printf_i+0x1a6>
 80063da:	6823      	ldr	r3, [r4, #0]
 80063dc:	f023 0320 	bic.w	r3, r3, #32
 80063e0:	6023      	str	r3, [r4, #0]
 80063e2:	2310      	movs	r3, #16
 80063e4:	e7a6      	b.n	8006334 <_printf_i+0xf8>
 80063e6:	4824      	ldr	r0, [pc, #144]	; (8006478 <_printf_i+0x23c>)
 80063e8:	e7e4      	b.n	80063b4 <_printf_i+0x178>
 80063ea:	4615      	mov	r5, r2
 80063ec:	e7bd      	b.n	800636a <_printf_i+0x12e>
 80063ee:	682b      	ldr	r3, [r5, #0]
 80063f0:	6826      	ldr	r6, [r4, #0]
 80063f2:	1d18      	adds	r0, r3, #4
 80063f4:	6961      	ldr	r1, [r4, #20]
 80063f6:	6028      	str	r0, [r5, #0]
 80063f8:	0635      	lsls	r5, r6, #24
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	d501      	bpl.n	8006402 <_printf_i+0x1c6>
 80063fe:	6019      	str	r1, [r3, #0]
 8006400:	e002      	b.n	8006408 <_printf_i+0x1cc>
 8006402:	0670      	lsls	r0, r6, #25
 8006404:	d5fb      	bpl.n	80063fe <_printf_i+0x1c2>
 8006406:	8019      	strh	r1, [r3, #0]
 8006408:	2300      	movs	r3, #0
 800640a:	4615      	mov	r5, r2
 800640c:	6123      	str	r3, [r4, #16]
 800640e:	e7bc      	b.n	800638a <_printf_i+0x14e>
 8006410:	682b      	ldr	r3, [r5, #0]
 8006412:	2100      	movs	r1, #0
 8006414:	1d1a      	adds	r2, r3, #4
 8006416:	602a      	str	r2, [r5, #0]
 8006418:	681d      	ldr	r5, [r3, #0]
 800641a:	6862      	ldr	r2, [r4, #4]
 800641c:	4628      	mov	r0, r5
 800641e:	f000 f849 	bl	80064b4 <memchr>
 8006422:	b108      	cbz	r0, 8006428 <_printf_i+0x1ec>
 8006424:	1b40      	subs	r0, r0, r5
 8006426:	6060      	str	r0, [r4, #4]
 8006428:	6863      	ldr	r3, [r4, #4]
 800642a:	6123      	str	r3, [r4, #16]
 800642c:	2300      	movs	r3, #0
 800642e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006432:	e7aa      	b.n	800638a <_printf_i+0x14e>
 8006434:	462a      	mov	r2, r5
 8006436:	4649      	mov	r1, r9
 8006438:	4640      	mov	r0, r8
 800643a:	6923      	ldr	r3, [r4, #16]
 800643c:	47d0      	blx	sl
 800643e:	3001      	adds	r0, #1
 8006440:	d0ad      	beq.n	800639e <_printf_i+0x162>
 8006442:	6823      	ldr	r3, [r4, #0]
 8006444:	079b      	lsls	r3, r3, #30
 8006446:	d413      	bmi.n	8006470 <_printf_i+0x234>
 8006448:	68e0      	ldr	r0, [r4, #12]
 800644a:	9b03      	ldr	r3, [sp, #12]
 800644c:	4298      	cmp	r0, r3
 800644e:	bfb8      	it	lt
 8006450:	4618      	movlt	r0, r3
 8006452:	e7a6      	b.n	80063a2 <_printf_i+0x166>
 8006454:	2301      	movs	r3, #1
 8006456:	4632      	mov	r2, r6
 8006458:	4649      	mov	r1, r9
 800645a:	4640      	mov	r0, r8
 800645c:	47d0      	blx	sl
 800645e:	3001      	adds	r0, #1
 8006460:	d09d      	beq.n	800639e <_printf_i+0x162>
 8006462:	3501      	adds	r5, #1
 8006464:	68e3      	ldr	r3, [r4, #12]
 8006466:	9903      	ldr	r1, [sp, #12]
 8006468:	1a5b      	subs	r3, r3, r1
 800646a:	42ab      	cmp	r3, r5
 800646c:	dcf2      	bgt.n	8006454 <_printf_i+0x218>
 800646e:	e7eb      	b.n	8006448 <_printf_i+0x20c>
 8006470:	2500      	movs	r5, #0
 8006472:	f104 0619 	add.w	r6, r4, #25
 8006476:	e7f5      	b.n	8006464 <_printf_i+0x228>
 8006478:	0800665b 	.word	0x0800665b
 800647c:	0800666c 	.word	0x0800666c

08006480 <memmove>:
 8006480:	4288      	cmp	r0, r1
 8006482:	b510      	push	{r4, lr}
 8006484:	eb01 0402 	add.w	r4, r1, r2
 8006488:	d902      	bls.n	8006490 <memmove+0x10>
 800648a:	4284      	cmp	r4, r0
 800648c:	4623      	mov	r3, r4
 800648e:	d807      	bhi.n	80064a0 <memmove+0x20>
 8006490:	1e43      	subs	r3, r0, #1
 8006492:	42a1      	cmp	r1, r4
 8006494:	d008      	beq.n	80064a8 <memmove+0x28>
 8006496:	f811 2b01 	ldrb.w	r2, [r1], #1
 800649a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800649e:	e7f8      	b.n	8006492 <memmove+0x12>
 80064a0:	4601      	mov	r1, r0
 80064a2:	4402      	add	r2, r0
 80064a4:	428a      	cmp	r2, r1
 80064a6:	d100      	bne.n	80064aa <memmove+0x2a>
 80064a8:	bd10      	pop	{r4, pc}
 80064aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80064ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80064b2:	e7f7      	b.n	80064a4 <memmove+0x24>

080064b4 <memchr>:
 80064b4:	4603      	mov	r3, r0
 80064b6:	b510      	push	{r4, lr}
 80064b8:	b2c9      	uxtb	r1, r1
 80064ba:	4402      	add	r2, r0
 80064bc:	4293      	cmp	r3, r2
 80064be:	4618      	mov	r0, r3
 80064c0:	d101      	bne.n	80064c6 <memchr+0x12>
 80064c2:	2000      	movs	r0, #0
 80064c4:	e003      	b.n	80064ce <memchr+0x1a>
 80064c6:	7804      	ldrb	r4, [r0, #0]
 80064c8:	3301      	adds	r3, #1
 80064ca:	428c      	cmp	r4, r1
 80064cc:	d1f6      	bne.n	80064bc <memchr+0x8>
 80064ce:	bd10      	pop	{r4, pc}

080064d0 <_realloc_r>:
 80064d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064d4:	4680      	mov	r8, r0
 80064d6:	4614      	mov	r4, r2
 80064d8:	460e      	mov	r6, r1
 80064da:	b921      	cbnz	r1, 80064e6 <_realloc_r+0x16>
 80064dc:	4611      	mov	r1, r2
 80064de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064e2:	f7ff bb9b 	b.w	8005c1c <_malloc_r>
 80064e6:	b92a      	cbnz	r2, 80064f4 <_realloc_r+0x24>
 80064e8:	f7ff fc96 	bl	8005e18 <_free_r>
 80064ec:	4625      	mov	r5, r4
 80064ee:	4628      	mov	r0, r5
 80064f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064f4:	f000 f81b 	bl	800652e <_malloc_usable_size_r>
 80064f8:	4284      	cmp	r4, r0
 80064fa:	4607      	mov	r7, r0
 80064fc:	d802      	bhi.n	8006504 <_realloc_r+0x34>
 80064fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006502:	d812      	bhi.n	800652a <_realloc_r+0x5a>
 8006504:	4621      	mov	r1, r4
 8006506:	4640      	mov	r0, r8
 8006508:	f7ff fb88 	bl	8005c1c <_malloc_r>
 800650c:	4605      	mov	r5, r0
 800650e:	2800      	cmp	r0, #0
 8006510:	d0ed      	beq.n	80064ee <_realloc_r+0x1e>
 8006512:	42bc      	cmp	r4, r7
 8006514:	4622      	mov	r2, r4
 8006516:	4631      	mov	r1, r6
 8006518:	bf28      	it	cs
 800651a:	463a      	movcs	r2, r7
 800651c:	f7ff fc6e 	bl	8005dfc <memcpy>
 8006520:	4631      	mov	r1, r6
 8006522:	4640      	mov	r0, r8
 8006524:	f7ff fc78 	bl	8005e18 <_free_r>
 8006528:	e7e1      	b.n	80064ee <_realloc_r+0x1e>
 800652a:	4635      	mov	r5, r6
 800652c:	e7df      	b.n	80064ee <_realloc_r+0x1e>

0800652e <_malloc_usable_size_r>:
 800652e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006532:	1f18      	subs	r0, r3, #4
 8006534:	2b00      	cmp	r3, #0
 8006536:	bfbc      	itt	lt
 8006538:	580b      	ldrlt	r3, [r1, r0]
 800653a:	18c0      	addlt	r0, r0, r3
 800653c:	4770      	bx	lr
	...

08006540 <_init>:
 8006540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006542:	bf00      	nop
 8006544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006546:	bc08      	pop	{r3}
 8006548:	469e      	mov	lr, r3
 800654a:	4770      	bx	lr

0800654c <_fini>:
 800654c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800654e:	bf00      	nop
 8006550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006552:	bc08      	pop	{r3}
 8006554:	469e      	mov	lr, r3
 8006556:	4770      	bx	lr
