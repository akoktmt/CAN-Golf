
CAN_Golf_OS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063b8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  080064c8  080064c8  000164c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065f0  080065f0  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  080065f0  080065f0  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080065f0  080065f0  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065f0  080065f0  000165f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065f4  080065f4  000165f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080065f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bc0  20000060  08006658  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c20  08006658  00021c20  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018964  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038d2  00000000  00000000  00038a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001548  00000000  00000000  0003c308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000108a  00000000  00000000  0003d850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019a4b  00000000  00000000  0003e8da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001822d  00000000  00000000  00058325  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097041  00000000  00000000  00070552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005e08  00000000  00000000  00107594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  0010d39c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	080064b0 	.word	0x080064b0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	080064b0 	.word	0x080064b0

08000150 <CANBufferHandleStruct_Init>:
 *      Author: win 10
 */
#include <CAN_OSI.h>
#include <string.h>
#include "CAN_Flag.h"
void CANBufferHandleStruct_Init(CANBufferHandleStruct *Buffer) {
 8000150:	b580      	push	{r7, lr}
 8000152:	b096      	sub	sp, #88	; 0x58
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
	NodeBufferHandle defaultNodeHandle = {0};
 8000158:	f107 030c 	add.w	r3, r7, #12
 800015c:	2247      	movs	r2, #71	; 0x47
 800015e:	2100      	movs	r1, #0
 8000160:	4618      	mov	r0, r3
 8000162:	f005 fdbf 	bl	8005ce4 <memset>
	Buffer->Buffer_Index = 0;
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	2200      	movs	r2, #0
 800016a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	Buffer->SenderID = 0;
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	2200      	movs	r2, #0
 8000172:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	Buffer->RecvID = 0;
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	2200      	movs	r2, #0
 800017a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	Buffer->FrameType_Index = SET_UP_FRAME;
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	2200      	movs	r2, #0
 8000182:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	Buffer->PacketDataLength = 0;
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	2200      	movs	r2, #0
 800018a:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	Buffer->CRCValue = 0;
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	2200      	movs	r2, #0
 8000192:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	Buffer->NumberOfFrame=0;
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	2200      	movs	r2, #0
 800019a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	memset(Buffer->NetworkBuffer, 0, sizeof(Buffer->NetworkBuffer));
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	2240      	movs	r2, #64	; 0x40
 80001a2:	2100      	movs	r1, #0
 80001a4:	4618      	mov	r0, r3
 80001a6:	f005 fd9d 	bl	8005ce4 <memset>
	memset(Buffer->Buffer, 0x55, sizeof(Buffer->Buffer));
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	3348      	adds	r3, #72	; 0x48
 80001ae:	2240      	movs	r2, #64	; 0x40
 80001b0:	2155      	movs	r1, #85	; 0x55
 80001b2:	4618      	mov	r0, r3
 80001b4:	f005 fd96 	bl	8005ce4 <memset>
	memset(Buffer->StoreData, 0, sizeof(Buffer->StoreData));
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	3388      	adds	r3, #136	; 0x88
 80001bc:	2240      	movs	r2, #64	; 0x40
 80001be:	2100      	movs	r1, #0
 80001c0:	4618      	mov	r0, r3
 80001c2:	f005 fd8f 	bl	8005ce4 <memset>
	for (int i = 0; i < 16; i++) {
 80001c6:	2300      	movs	r3, #0
 80001c8:	657b      	str	r3, [r7, #84]	; 0x54
 80001ca:	e012      	b.n	80001f2 <CANBufferHandleStruct_Init+0xa2>
		Buffer->NodeHandle[i] = defaultNodeHandle;
 80001cc:	6879      	ldr	r1, [r7, #4]
 80001ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80001d0:	4613      	mov	r3, r2
 80001d2:	00db      	lsls	r3, r3, #3
 80001d4:	4413      	add	r3, r2
 80001d6:	00db      	lsls	r3, r3, #3
 80001d8:	1a9b      	subs	r3, r3, r2
 80001da:	440b      	add	r3, r1
 80001dc:	33c8      	adds	r3, #200	; 0xc8
 80001de:	3302      	adds	r3, #2
 80001e0:	f107 010c 	add.w	r1, r7, #12
 80001e4:	2247      	movs	r2, #71	; 0x47
 80001e6:	4618      	mov	r0, r3
 80001e8:	f005 fdc0 	bl	8005d6c <memcpy>
	for (int i = 0; i < 16; i++) {
 80001ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80001ee:	3301      	adds	r3, #1
 80001f0:	657b      	str	r3, [r7, #84]	; 0x54
 80001f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80001f4:	2b0f      	cmp	r3, #15
 80001f6:	dde9      	ble.n	80001cc <CANBufferHandleStruct_Init+0x7c>
	}
}
 80001f8:	bf00      	nop
 80001fa:	bf00      	nop
 80001fc:	3758      	adds	r7, #88	; 0x58
 80001fe:	46bd      	mov	sp, r7
 8000200:	bd80      	pop	{r7, pc}

08000202 <FlagsFrameHandle_Init>:
void FlagsFrameHandle_Init(FlagFrameHandle *FlagInit) {
 8000202:	b4b0      	push	{r4, r5, r7}
 8000204:	b089      	sub	sp, #36	; 0x24
 8000206:	af00      	add	r7, sp, #0
 8000208:	6078      	str	r0, [r7, #4]
	FlagIdHandle DefaultFlagID= {0};
 800020a:	f107 0308 	add.w	r3, r7, #8
 800020e:	2200      	movs	r2, #0
 8000210:	601a      	str	r2, [r3, #0]
 8000212:	605a      	str	r2, [r3, #4]
 8000214:	609a      	str	r2, [r3, #8]
 8000216:	60da      	str	r2, [r3, #12]
 8000218:	741a      	strb	r2, [r3, #16]
	FlagInit->FrameBits.Flag_Frame_0 = 0;
 800021a:	687a      	ldr	r2, [r7, #4]
 800021c:	f892 3112 	ldrb.w	r3, [r2, #274]	; 0x112
 8000220:	f36f 0300 	bfc	r3, #0, #1
 8000224:	f882 3112 	strb.w	r3, [r2, #274]	; 0x112
	FlagInit->FrameBits.Flag_Frame_1 = 0;
 8000228:	687a      	ldr	r2, [r7, #4]
 800022a:	f892 3112 	ldrb.w	r3, [r2, #274]	; 0x112
 800022e:	f36f 0341 	bfc	r3, #1, #1
 8000232:	f882 3112 	strb.w	r3, [r2, #274]	; 0x112
	FlagInit->FrameBits.Flag_Frame_2 = 0;
 8000236:	687a      	ldr	r2, [r7, #4]
 8000238:	f892 3112 	ldrb.w	r3, [r2, #274]	; 0x112
 800023c:	f36f 0382 	bfc	r3, #2, #1
 8000240:	f882 3112 	strb.w	r3, [r2, #274]	; 0x112
	FlagInit->FrameBits.Flag_Frame_3 = 0;
 8000244:	687a      	ldr	r2, [r7, #4]
 8000246:	f892 3112 	ldrb.w	r3, [r2, #274]	; 0x112
 800024a:	f36f 03c3 	bfc	r3, #3, #1
 800024e:	f882 3112 	strb.w	r3, [r2, #274]	; 0x112
	FlagInit->FrameBits.Flag_Frame_4 = 0;
 8000252:	687a      	ldr	r2, [r7, #4]
 8000254:	f892 3112 	ldrb.w	r3, [r2, #274]	; 0x112
 8000258:	f36f 1304 	bfc	r3, #4, #1
 800025c:	f882 3112 	strb.w	r3, [r2, #274]	; 0x112
	FlagInit->FrameBits.Flag_Frame_5 = 0;
 8000260:	687a      	ldr	r2, [r7, #4]
 8000262:	f892 3112 	ldrb.w	r3, [r2, #274]	; 0x112
 8000266:	f36f 1345 	bfc	r3, #5, #1
 800026a:	f882 3112 	strb.w	r3, [r2, #274]	; 0x112
	FlagInit->FrameBits.Flag_Frame_6 = 0;
 800026e:	687a      	ldr	r2, [r7, #4]
 8000270:	f892 3112 	ldrb.w	r3, [r2, #274]	; 0x112
 8000274:	f36f 1386 	bfc	r3, #6, #1
 8000278:	f882 3112 	strb.w	r3, [r2, #274]	; 0x112
	FlagInit->FrameBits.Flag_Frame_7 = 0;
 800027c:	687a      	ldr	r2, [r7, #4]
 800027e:	f892 3112 	ldrb.w	r3, [r2, #274]	; 0x112
 8000282:	f36f 13c7 	bfc	r3, #7, #1
 8000286:	f882 3112 	strb.w	r3, [r2, #274]	; 0x112
	for(int i=0; i<16;i++)
 800028a:	2300      	movs	r3, #0
 800028c:	61fb      	str	r3, [r7, #28]
 800028e:	e012      	b.n	80002b6 <FlagsFrameHandle_Init+0xb4>
	{
		FlagInit->FlagID[i]=DefaultFlagID;
 8000290:	6879      	ldr	r1, [r7, #4]
 8000292:	69fa      	ldr	r2, [r7, #28]
 8000294:	4613      	mov	r3, r2
 8000296:	011b      	lsls	r3, r3, #4
 8000298:	4413      	add	r3, r2
 800029a:	440b      	add	r3, r1
 800029c:	461d      	mov	r5, r3
 800029e:	f107 0408 	add.w	r4, r7, #8
 80002a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80002a4:	6028      	str	r0, [r5, #0]
 80002a6:	6069      	str	r1, [r5, #4]
 80002a8:	60aa      	str	r2, [r5, #8]
 80002aa:	60eb      	str	r3, [r5, #12]
 80002ac:	7823      	ldrb	r3, [r4, #0]
 80002ae:	742b      	strb	r3, [r5, #16]
	for(int i=0; i<16;i++)
 80002b0:	69fb      	ldr	r3, [r7, #28]
 80002b2:	3301      	adds	r3, #1
 80002b4:	61fb      	str	r3, [r7, #28]
 80002b6:	69fb      	ldr	r3, [r7, #28]
 80002b8:	2b0f      	cmp	r3, #15
 80002ba:	dde9      	ble.n	8000290 <FlagsFrameHandle_Init+0x8e>
	}
}
 80002bc:	bf00      	nop
 80002be:	bf00      	nop
 80002c0:	3724      	adds	r7, #36	; 0x24
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bcb0      	pop	{r4, r5, r7}
 80002c6:	4770      	bx	lr

080002c8 <CAN_Send_Application>:
				FlagHandle->FlagID[ID].FlagFrameFull[FrameType];
	}
}

uint8_t CAN_Send_Application(CANBufferHandleStruct *AppBuffer,
		CANConfigIDTxtypedef *pStID, uint8_t *Data, uint8_t DataLength) {
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b084      	sub	sp, #16
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	60f8      	str	r0, [r7, #12]
 80002d0:	60b9      	str	r1, [r7, #8]
 80002d2:	607a      	str	r2, [r7, #4]
 80002d4:	70fb      	strb	r3, [r7, #3]
	return CAN_Send_Network_Packet(AppBuffer, Data, DataLength, pStID);
 80002d6:	78fa      	ldrb	r2, [r7, #3]
 80002d8:	68bb      	ldr	r3, [r7, #8]
 80002da:	6879      	ldr	r1, [r7, #4]
 80002dc:	68f8      	ldr	r0, [r7, #12]
 80002de:	f000 f805 	bl	80002ec <CAN_Send_Network_Packet>
 80002e2:	4603      	mov	r3, r0
}
 80002e4:	4618      	mov	r0, r3
 80002e6:	3710      	adds	r7, #16
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}

080002ec <CAN_Send_Network_Packet>:

uint8_t CAN_Send_Network_Packet(CANBufferHandleStruct *TxBuffer, uint8_t *Data,
		uint8_t DataLength, CANConfigIDTxtypedef *pStID) {
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b084      	sub	sp, #16
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	60f8      	str	r0, [r7, #12]
 80002f4:	60b9      	str	r1, [r7, #8]
 80002f6:	603b      	str	r3, [r7, #0]
 80002f8:	4613      	mov	r3, r2
 80002fa:	71fb      	strb	r3, [r7, #7]
	TxBuffer->PacketDataLength = DataLength + 2;
 80002fc:	79fb      	ldrb	r3, [r7, #7]
 80002fe:	3302      	adds	r3, #2
 8000300:	b2db      	uxtb	r3, r3
 8000302:	b25a      	sxtb	r2, r3
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	TxBuffer->CRCValue = crc_8(Data, DataLength);
 800030a:	79fb      	ldrb	r3, [r7, #7]
 800030c:	4619      	mov	r1, r3
 800030e:	68b8      	ldr	r0, [r7, #8]
 8000310:	f000 f9c8 	bl	80006a4 <crc_8>
 8000314:	4603      	mov	r3, r0
 8000316:	461a      	mov	r2, r3
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	TxBuffer->Buffer_Index = DataLength;
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	79fa      	ldrb	r2, [r7, #7]
 8000322:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	if (TxBuffer->PacketDataLength % 8 == 0) {
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 800032c:	b2db      	uxtb	r3, r3
 800032e:	f003 0307 	and.w	r3, r3, #7
 8000332:	b2db      	uxtb	r3, r3
 8000334:	2b00      	cmp	r3, #0
 8000336:	d10c      	bne.n	8000352 <CAN_Send_Network_Packet+0x66>
		TxBuffer->NumberOfFrame = (TxBuffer->PacketDataLength / 8);
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 800033e:	2b00      	cmp	r3, #0
 8000340:	da00      	bge.n	8000344 <CAN_Send_Network_Packet+0x58>
 8000342:	3307      	adds	r3, #7
 8000344:	10db      	asrs	r3, r3, #3
 8000346:	b25b      	sxtb	r3, r3
 8000348:	b2da      	uxtb	r2, r3
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000350:	e00d      	b.n	800036e <CAN_Send_Network_Packet+0x82>
	} else {
		TxBuffer->NumberOfFrame = (TxBuffer->PacketDataLength / 8) + 1;
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 8000358:	2b00      	cmp	r3, #0
 800035a:	da00      	bge.n	800035e <CAN_Send_Network_Packet+0x72>
 800035c:	3307      	adds	r3, #7
 800035e:	10db      	asrs	r3, r3, #3
 8000360:	b25b      	sxtb	r3, r3
 8000362:	b2db      	uxtb	r3, r3
 8000364:	3301      	adds	r3, #1
 8000366:	b2da      	uxtb	r2, r3
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	}
	memcpy(TxBuffer->NetworkBuffer, Data, DataLength);
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	79fa      	ldrb	r2, [r7, #7]
 8000372:	68b9      	ldr	r1, [r7, #8]
 8000374:	4618      	mov	r0, r3
 8000376:	f005 fcf9 	bl	8005d6c <memcpy>
	TxBuffer->NetworkBuffer[TxBuffer->Buffer_Index] =
			TxBuffer->PacketDataLength;
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	f993 10c8 	ldrsb.w	r1, [r3, #200]	; 0xc8
	TxBuffer->NetworkBuffer[TxBuffer->Buffer_Index] =
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000386:	461a      	mov	r2, r3
			TxBuffer->PacketDataLength;
 8000388:	b2c9      	uxtb	r1, r1
	TxBuffer->NetworkBuffer[TxBuffer->Buffer_Index] =
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	5499      	strb	r1, [r3, r2]
	TxBuffer->NetworkBuffer[TxBuffer->Buffer_Index + 1] = TxBuffer->CRCValue;
 800038e:	68fb      	ldr	r3, [r7, #12]
 8000390:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000394:	3301      	adds	r3, #1
 8000396:	68fa      	ldr	r2, [r7, #12]
 8000398:	f892 10c9 	ldrb.w	r1, [r2, #201]	; 0xc9
 800039c:	68fa      	ldr	r2, [r7, #12]
 800039e:	54d1      	strb	r1, [r2, r3]
	TxBuffer->Buffer_Index = 0;
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	2200      	movs	r2, #0
 80003a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	return CAN_Send_DataLink_Separate(TxBuffer, Data, pStID);
 80003a8:	683a      	ldr	r2, [r7, #0]
 80003aa:	68b9      	ldr	r1, [r7, #8]
 80003ac:	68f8      	ldr	r0, [r7, #12]
 80003ae:	f000 f805 	bl	80003bc <CAN_Send_DataLink_Separate>
 80003b2:	4603      	mov	r3, r0
}
 80003b4:	4618      	mov	r0, r3
 80003b6:	3710      	adds	r7, #16
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}

080003bc <CAN_Send_DataLink_Separate>:
uint8_t CAN_Send_DataLink_Separate(CANBufferHandleStruct *TxBuffer,
		uint8_t *Data, CANConfigIDTxtypedef *pStID) {
 80003bc:	b580      	push	{r7, lr}
 80003be:	b088      	sub	sp, #32
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	60f8      	str	r0, [r7, #12]
 80003c4:	60b9      	str	r1, [r7, #8]
 80003c6:	607a      	str	r2, [r7, #4]
	uint8_t PacketLength = TxBuffer->PacketDataLength;
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 80003ce:	77fb      	strb	r3, [r7, #31]
	uint8_t NumberOfFrame = TxBuffer->NumberOfFrame;
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80003d6:	75fb      	strb	r3, [r7, #23]
	TxBuffer->Buffer[NumberOfFrame - 1][6] = PacketLength;
 80003d8:	7dfb      	ldrb	r3, [r7, #23]
 80003da:	3b01      	subs	r3, #1
 80003dc:	68fa      	ldr	r2, [r7, #12]
 80003de:	00db      	lsls	r3, r3, #3
 80003e0:	4413      	add	r3, r2
 80003e2:	7ffa      	ldrb	r2, [r7, #31]
 80003e4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	TxBuffer->Buffer[NumberOfFrame - 1][7] = TxBuffer->CRCValue;
 80003e8:	7dfb      	ldrb	r3, [r7, #23]
 80003ea:	3b01      	subs	r3, #1
 80003ec:	68fa      	ldr	r2, [r7, #12]
 80003ee:	f892 10c9 	ldrb.w	r1, [r2, #201]	; 0xc9
 80003f2:	68fa      	ldr	r2, [r7, #12]
 80003f4:	00db      	lsls	r3, r3, #3
 80003f6:	4413      	add	r3, r2
 80003f8:	460a      	mov	r2, r1
 80003fa:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	for (int i = 0; i < NumberOfFrame; i++) {
 80003fe:	2300      	movs	r3, #0
 8000400:	61bb      	str	r3, [r7, #24]
 8000402:	e033      	b.n	800046c <CAN_Send_DataLink_Separate+0xb0>
		for (TxBuffer->Buffer_Index = 0; TxBuffer->Buffer_Index < 8;
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	2200      	movs	r2, #0
 8000408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800040c:	e021      	b.n	8000452 <CAN_Send_DataLink_Separate+0x96>
				TxBuffer->Buffer_Index++) {
			TxBuffer->Buffer[i][TxBuffer->Buffer_Index] =
					TxBuffer->NetworkBuffer[i * 8 + TxBuffer->Buffer_Index];
 800040e:	69bb      	ldr	r3, [r7, #24]
 8000410:	00db      	lsls	r3, r3, #3
 8000412:	68fa      	ldr	r2, [r7, #12]
 8000414:	f892 2041 	ldrb.w	r2, [r2, #65]	; 0x41
 8000418:	4413      	add	r3, r2
			TxBuffer->Buffer[i][TxBuffer->Buffer_Index] =
 800041a:	68fa      	ldr	r2, [r7, #12]
 800041c:	f892 2041 	ldrb.w	r2, [r2, #65]	; 0x41
 8000420:	4610      	mov	r0, r2
					TxBuffer->NetworkBuffer[i * 8 + TxBuffer->Buffer_Index];
 8000422:	68fa      	ldr	r2, [r7, #12]
 8000424:	5cd1      	ldrb	r1, [r2, r3]
			TxBuffer->Buffer[i][TxBuffer->Buffer_Index] =
 8000426:	68fa      	ldr	r2, [r7, #12]
 8000428:	69bb      	ldr	r3, [r7, #24]
 800042a:	00db      	lsls	r3, r3, #3
 800042c:	4413      	add	r3, r2
 800042e:	4403      	add	r3, r0
 8000430:	3348      	adds	r3, #72	; 0x48
 8000432:	460a      	mov	r2, r1
 8000434:	701a      	strb	r2, [r3, #0]
			PacketLength--;
 8000436:	7ffb      	ldrb	r3, [r7, #31]
 8000438:	3b01      	subs	r3, #1
 800043a:	77fb      	strb	r3, [r7, #31]
			if (PacketLength == 2) {
 800043c:	7ffb      	ldrb	r3, [r7, #31]
 800043e:	2b02      	cmp	r3, #2
 8000440:	d00d      	beq.n	800045e <CAN_Send_DataLink_Separate+0xa2>
				TxBuffer->Buffer_Index++) {
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000448:	3301      	adds	r3, #1
 800044a:	b2da      	uxtb	r2, r3
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		for (TxBuffer->Buffer_Index = 0; TxBuffer->Buffer_Index < 8;
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000458:	2b07      	cmp	r3, #7
 800045a:	d9d8      	bls.n	800040e <CAN_Send_DataLink_Separate+0x52>
 800045c:	e000      	b.n	8000460 <CAN_Send_DataLink_Separate+0xa4>
				break;
 800045e:	bf00      	nop
			}
		}
		if (PacketLength == 2) {
 8000460:	7ffb      	ldrb	r3, [r7, #31]
 8000462:	2b02      	cmp	r3, #2
 8000464:	d007      	beq.n	8000476 <CAN_Send_DataLink_Separate+0xba>
	for (int i = 0; i < NumberOfFrame; i++) {
 8000466:	69bb      	ldr	r3, [r7, #24]
 8000468:	3301      	adds	r3, #1
 800046a:	61bb      	str	r3, [r7, #24]
 800046c:	7dfb      	ldrb	r3, [r7, #23]
 800046e:	69ba      	ldr	r2, [r7, #24]
 8000470:	429a      	cmp	r2, r3
 8000472:	dbc7      	blt.n	8000404 <CAN_Send_DataLink_Separate+0x48>
 8000474:	e000      	b.n	8000478 <CAN_Send_DataLink_Separate+0xbc>
			break;
 8000476:	bf00      	nop
		}
	}
	TxBuffer->Buffer_Index = 0;
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	2200      	movs	r2, #0
 800047c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	return CAN_Send_Physical_Send(TxBuffer, Data, pStID);
 8000480:	687a      	ldr	r2, [r7, #4]
 8000482:	68b9      	ldr	r1, [r7, #8]
 8000484:	68f8      	ldr	r0, [r7, #12]
 8000486:	f000 f805 	bl	8000494 <CAN_Send_Physical_Send>
 800048a:	4603      	mov	r3, r0
}
 800048c:	4618      	mov	r0, r3
 800048e:	3720      	adds	r7, #32
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}

08000494 <CAN_Send_Physical_Send>:
uint8_t CAN_Send_Physical_Send(CANBufferHandleStruct *TxBuffer, uint8_t *Data,
		CANConfigIDTxtypedef *pIDtype) {
 8000494:	b580      	push	{r7, lr}
 8000496:	b08e      	sub	sp, #56	; 0x38
 8000498:	af00      	add	r7, sp, #0
 800049a:	60f8      	str	r0, [r7, #12]
 800049c:	60b9      	str	r1, [r7, #8]
 800049e:	607a      	str	r2, [r7, #4]

	uint32_t Txmailbox;
	CAN_TxHeaderTypeDef Txheader;

	uint8_t Message_ID = pIDtype->MessageType;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	881b      	ldrh	r3, [r3, #0]
 80004a4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint8_t Sender_ID = pIDtype->SenderID;
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	885b      	ldrh	r3, [r3, #2]
 80004ac:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	uint8_t FrameType = TxBuffer->FrameType_Index;
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80004b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t NumberOfFrame = TxBuffer->NumberOfFrame;
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80004c0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	uint16_t StdId = 0x00;
 80004c4:	2300      	movs	r3, #0
 80004c6:	86bb      	strh	r3, [r7, #52]	; 0x34

	StdId |= Message_ID;
 80004c8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80004cc:	b29a      	uxth	r2, r3
 80004ce:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80004d0:	4313      	orrs	r3, r2
 80004d2:	86bb      	strh	r3, [r7, #52]	; 0x34
	StdId = (StdId << 4) | Sender_ID;
 80004d4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80004d6:	011b      	lsls	r3, r3, #4
 80004d8:	b21a      	sxth	r2, r3
 80004da:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80004de:	b21b      	sxth	r3, r3
 80004e0:	4313      	orrs	r3, r2
 80004e2:	b21b      	sxth	r3, r3
 80004e4:	86bb      	strh	r3, [r7, #52]	; 0x34
	StdId = (StdId << 3) | TxBuffer->FrameType_Index;
 80004e6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80004e8:	00db      	lsls	r3, r3, #3
 80004ea:	b21a      	sxth	r2, r3
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80004f2:	b21b      	sxth	r3, r3
 80004f4:	4313      	orrs	r3, r2
 80004f6:	b21b      	sxth	r3, r3
 80004f8:	86bb      	strh	r3, [r7, #52]	; 0x34

	Txheader.DLC = 8;
 80004fa:	2308      	movs	r3, #8
 80004fc:	627b      	str	r3, [r7, #36]	; 0x24
	Txheader.RTR = CAN_RTR_DATA;
 80004fe:	2300      	movs	r3, #0
 8000500:	623b      	str	r3, [r7, #32]
	Txheader.IDE = CAN_ID_STD;
 8000502:	2300      	movs	r3, #0
 8000504:	61fb      	str	r3, [r7, #28]

	CAN_Store_Data(TxBuffer, pIDtype);
 8000506:	6879      	ldr	r1, [r7, #4]
 8000508:	68f8      	ldr	r0, [r7, #12]
 800050a:	f000 f847 	bl	800059c <CAN_Store_Data>

	for (int8_t i = NumberOfFrame - 1; i >= 0; i--) {
 800050e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000512:	3b01      	subs	r3, #1
 8000514:	b2db      	uxtb	r3, r3
 8000516:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800051a:	e034      	b.n	8000586 <CAN_Send_Physical_Send+0xf2>
		Txheader.StdId = StdId;
 800051c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800051e:	617b      	str	r3, [r7, #20]
		if (HAL_CAN_AddTxMessage(&hcan, &Txheader, TxBuffer->Buffer[i],
 8000520:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000524:	3309      	adds	r3, #9
 8000526:	00db      	lsls	r3, r3, #3
 8000528:	68fa      	ldr	r2, [r7, #12]
 800052a:	441a      	add	r2, r3
 800052c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000530:	f107 0114 	add.w	r1, r7, #20
 8000534:	4818      	ldr	r0, [pc, #96]	; (8000598 <CAN_Send_Physical_Send+0x104>)
 8000536:	f000 ff63 	bl	8001400 <HAL_CAN_AddTxMessage>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <CAN_Send_Physical_Send+0xb0>
				&Txmailbox) != HAL_OK) {
			Error_Handler();
 8000540:	f000 fae8 	bl	8000b14 <Error_Handler>
		}
		while (HAL_CAN_IsTxMessagePending(&hcan, Txmailbox))
 8000544:	bf00      	nop
 8000546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000548:	4619      	mov	r1, r3
 800054a:	4813      	ldr	r0, [pc, #76]	; (8000598 <CAN_Send_Physical_Send+0x104>)
 800054c:	f001 f827 	bl	800159e <HAL_CAN_IsTxMessagePending>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d1f7      	bne.n	8000546 <CAN_Send_Physical_Send+0xb2>
			;

		StdId = StdId >> 3;
 8000556:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000558:	08db      	lsrs	r3, r3, #3
 800055a:	86bb      	strh	r3, [r7, #52]	; 0x34
		FrameType++;
 800055c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000560:	3301      	adds	r3, #1
 8000562:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		StdId = (StdId << 3) | FrameType;
 8000566:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000568:	00db      	lsls	r3, r3, #3
 800056a:	b21a      	sxth	r2, r3
 800056c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000570:	b21b      	sxth	r3, r3
 8000572:	4313      	orrs	r3, r2
 8000574:	b21b      	sxth	r3, r3
 8000576:	86bb      	strh	r3, [r7, #52]	; 0x34
	for (int8_t i = NumberOfFrame - 1; i >= 0; i--) {
 8000578:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800057c:	b2db      	uxtb	r3, r3
 800057e:	3b01      	subs	r3, #1
 8000580:	b2db      	uxtb	r3, r3
 8000582:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8000586:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800058a:	2b00      	cmp	r3, #0
 800058c:	dac6      	bge.n	800051c <CAN_Send_Physical_Send+0x88>

	}
	return HAL_OK;
 800058e:	2300      	movs	r3, #0
}
 8000590:	4618      	mov	r0, r3
 8000592:	3738      	adds	r7, #56	; 0x38
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	2000007c 	.word	0x2000007c

0800059c <CAN_Store_Data>:

uint8_t CAN_Store_Data(CANBufferHandleStruct *Store, CANConfigIDTxtypedef *ID) {
 800059c:	b480      	push	{r7}
 800059e:	b087      	sub	sp, #28
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]
	uint8_t FrameType = Store->FrameType_Index;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80005ac:	75fb      	strb	r3, [r7, #23]
	uint8_t BufferIndex = Store->Buffer_Index;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80005b4:	75bb      	strb	r3, [r7, #22]
	uint8_t NumberFrame = Store->NumberOfFrame;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80005bc:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < NumberFrame; i++) {
 80005be:	2300      	movs	r3, #0
 80005c0:	613b      	str	r3, [r7, #16]
 80005c2:	e03b      	b.n	800063c <CAN_Store_Data+0xa0>
		Store->StoreData[i][BufferIndex] = ID->SenderID;
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	885a      	ldrh	r2, [r3, #2]
 80005c8:	7dbb      	ldrb	r3, [r7, #22]
 80005ca:	b2d0      	uxtb	r0, r2
 80005cc:	6879      	ldr	r1, [r7, #4]
 80005ce:	693a      	ldr	r2, [r7, #16]
 80005d0:	00d2      	lsls	r2, r2, #3
 80005d2:	440a      	add	r2, r1
 80005d4:	4413      	add	r3, r2
 80005d6:	3388      	adds	r3, #136	; 0x88
 80005d8:	4602      	mov	r2, r0
 80005da:	701a      	strb	r2, [r3, #0]
		BufferIndex++;
 80005dc:	7dbb      	ldrb	r3, [r7, #22]
 80005de:	3301      	adds	r3, #1
 80005e0:	75bb      	strb	r3, [r7, #22]
		Store->StoreData[i][BufferIndex] = FrameType;
 80005e2:	7dbb      	ldrb	r3, [r7, #22]
 80005e4:	6879      	ldr	r1, [r7, #4]
 80005e6:	693a      	ldr	r2, [r7, #16]
 80005e8:	00d2      	lsls	r2, r2, #3
 80005ea:	440a      	add	r2, r1
 80005ec:	4413      	add	r3, r2
 80005ee:	3388      	adds	r3, #136	; 0x88
 80005f0:	7dfa      	ldrb	r2, [r7, #23]
 80005f2:	701a      	strb	r2, [r3, #0]
		BufferIndex++;
 80005f4:	7dbb      	ldrb	r3, [r7, #22]
 80005f6:	3301      	adds	r3, #1
 80005f8:	75bb      	strb	r3, [r7, #22]
		for (; BufferIndex < 10; BufferIndex++) {
 80005fa:	e014      	b.n	8000626 <CAN_Store_Data+0x8a>
			Store->StoreData[i][BufferIndex] =
					Store->Buffer[i][BufferIndex - 2];
 80005fc:	7dbb      	ldrb	r3, [r7, #22]
 80005fe:	1e9a      	subs	r2, r3, #2
			Store->StoreData[i][BufferIndex] =
 8000600:	7dbb      	ldrb	r3, [r7, #22]
					Store->Buffer[i][BufferIndex - 2];
 8000602:	6878      	ldr	r0, [r7, #4]
 8000604:	6939      	ldr	r1, [r7, #16]
 8000606:	00c9      	lsls	r1, r1, #3
 8000608:	4401      	add	r1, r0
 800060a:	440a      	add	r2, r1
 800060c:	3248      	adds	r2, #72	; 0x48
 800060e:	7810      	ldrb	r0, [r2, #0]
			Store->StoreData[i][BufferIndex] =
 8000610:	6879      	ldr	r1, [r7, #4]
 8000612:	693a      	ldr	r2, [r7, #16]
 8000614:	00d2      	lsls	r2, r2, #3
 8000616:	440a      	add	r2, r1
 8000618:	4413      	add	r3, r2
 800061a:	3388      	adds	r3, #136	; 0x88
 800061c:	4602      	mov	r2, r0
 800061e:	701a      	strb	r2, [r3, #0]
		for (; BufferIndex < 10; BufferIndex++) {
 8000620:	7dbb      	ldrb	r3, [r7, #22]
 8000622:	3301      	adds	r3, #1
 8000624:	75bb      	strb	r3, [r7, #22]
 8000626:	7dbb      	ldrb	r3, [r7, #22]
 8000628:	2b09      	cmp	r3, #9
 800062a:	d9e7      	bls.n	80005fc <CAN_Store_Data+0x60>
		}
		FrameType++;
 800062c:	7dfb      	ldrb	r3, [r7, #23]
 800062e:	3301      	adds	r3, #1
 8000630:	75fb      	strb	r3, [r7, #23]
		BufferIndex = 0;
 8000632:	2300      	movs	r3, #0
 8000634:	75bb      	strb	r3, [r7, #22]
	for (int i = 0; i < NumberFrame; i++) {
 8000636:	693b      	ldr	r3, [r7, #16]
 8000638:	3301      	adds	r3, #1
 800063a:	613b      	str	r3, [r7, #16]
 800063c:	7bfb      	ldrb	r3, [r7, #15]
 800063e:	693a      	ldr	r2, [r7, #16]
 8000640:	429a      	cmp	r2, r3
 8000642:	dbbf      	blt.n	80005c4 <CAN_Store_Data+0x28>
	}
	return HAL_OK;
 8000644:	2300      	movs	r3, #0
}
 8000646:	4618      	mov	r0, r3
 8000648:	371c      	adds	r7, #28
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr

08000650 <CAN_Config_filtering>:
	if (*FlagNotification == REC_PACKET_SUCCESS) {
		memcpy(Data, AppBuffer->NetworkBuffer, AppDataLength);
	}
	return HAL_OK;
}
uint32_t CAN_Config_filtering(uint8_t FIFO) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b08c      	sub	sp, #48	; 0x30
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	71fb      	strb	r3, [r7, #7]
	CAN_FilterTypeDef Can_filter_init;
	Can_filter_init.FilterActivation = ENABLE;
 800065a:	2301      	movs	r3, #1
 800065c:	62bb      	str	r3, [r7, #40]	; 0x28
	Can_filter_init.FilterBank = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	61fb      	str	r3, [r7, #28]
	Can_filter_init.FilterFIFOAssignment = FIFO;
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	61bb      	str	r3, [r7, #24]
	Can_filter_init.FilterIdHigh = 0x0000;
 8000666:	2300      	movs	r3, #0
 8000668:	60bb      	str	r3, [r7, #8]
	Can_filter_init.FilterIdLow = 0x0000;
 800066a:	2300      	movs	r3, #0
 800066c:	60fb      	str	r3, [r7, #12]
	Can_filter_init.FilterMaskIdHigh = 0x0000;
 800066e:	2300      	movs	r3, #0
 8000670:	613b      	str	r3, [r7, #16]
	Can_filter_init.FilterMaskIdLow = 0x0000;
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]
	Can_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 8000676:	2300      	movs	r3, #0
 8000678:	623b      	str	r3, [r7, #32]
	Can_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 800067a:	2301      	movs	r3, #1
 800067c:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_CAN_ConfigFilter(&hcan, &Can_filter_init) != HAL_OK) {
 800067e:	f107 0308 	add.w	r3, r7, #8
 8000682:	4619      	mov	r1, r3
 8000684:	4806      	ldr	r0, [pc, #24]	; (80006a0 <CAN_Config_filtering+0x50>)
 8000686:	f000 fdae 	bl	80011e6 <HAL_CAN_ConfigFilter>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <CAN_Config_filtering+0x44>
		Error_Handler();
 8000690:	f000 fa40 	bl	8000b14 <Error_Handler>
	}
	return HAL_OK;
 8000694:	2300      	movs	r3, #0
}
 8000696:	4618      	mov	r0, r3
 8000698:	3730      	adds	r7, #48	; 0x30
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	2000007c 	.word	0x2000007c

080006a4 <crc_8>:

#include "CRC.h"
#include "stdint.h"
unsigned char table[256] = {0};

uint8_t crc_8(uint8_t* data, uint8_t len) {
 80006a4:	b480      	push	{r7}
 80006a6:	b087      	sub	sp, #28
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	460b      	mov	r3, r1
 80006ae:	70fb      	strb	r3, [r7, #3]
  unsigned crc = 0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
  int i, j;
  for (j = len; j; j--, data++) {
 80006b4:	78fb      	ldrb	r3, [r7, #3]
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	e023      	b.n	8000702 <crc_8+0x5e>
    crc ^= (*data << 8);
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	021b      	lsls	r3, r3, #8
 80006c0:	461a      	mov	r2, r3
 80006c2:	697b      	ldr	r3, [r7, #20]
 80006c4:	4053      	eors	r3, r2
 80006c6:	617b      	str	r3, [r7, #20]
    for(i = 8; i; i--) {
 80006c8:	2308      	movs	r3, #8
 80006ca:	613b      	str	r3, [r7, #16]
 80006cc:	e010      	b.n	80006f0 <crc_8+0x4c>
      if (crc & 0x8000)
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d005      	beq.n	80006e4 <crc_8+0x40>
        crc ^= (0x1070 << 3);
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	f483 4303 	eor.w	r3, r3, #33536	; 0x8300
 80006de:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 80006e2:	617b      	str	r3, [r7, #20]
      crc <<= 1;
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	005b      	lsls	r3, r3, #1
 80006e8:	617b      	str	r3, [r7, #20]
    for(i = 8; i; i--) {
 80006ea:	693b      	ldr	r3, [r7, #16]
 80006ec:	3b01      	subs	r3, #1
 80006ee:	613b      	str	r3, [r7, #16]
 80006f0:	693b      	ldr	r3, [r7, #16]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d1eb      	bne.n	80006ce <crc_8+0x2a>
  for (j = len; j; j--, data++) {
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	3b01      	subs	r3, #1
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	3301      	adds	r3, #1
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d1d8      	bne.n	80006ba <crc_8+0x16>
    }
  }
  return (uint8_t)(crc >> 8);
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	0a1b      	lsrs	r3, r3, #8
 800070c:	b2db      	uxtb	r3, r3
}
 800070e:	4618      	mov	r0, r3
 8000710:	371c      	adds	r7, #28
 8000712:	46bd      	mov	sp, r7
 8000714:	bc80      	pop	{r7}
 8000716:	4770      	bx	lr

08000718 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800071c:	f000 fc36 	bl	8000f8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000720:	f000 f844 	bl	80007ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000724:	f000 f934 	bl	8000990 <MX_GPIO_Init>
  MX_CAN_Init();
 8000728:	f000 f886 	bl	8000838 <MX_CAN_Init>
  MX_USART1_UART_Init();
 800072c:	f000 f906 	bl	800093c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000730:	f000 f8b8 	bl	80008a4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  CAN_Config_filtering(CAN_FILTER_FIFO0);
 8000734:	2000      	movs	r0, #0
 8000736:	f7ff ff8b 	bl	8000650 <CAN_Config_filtering>
  if(HAL_CAN_Start(&hcan)!=HAL_OK)
 800073a:	4812      	ldr	r0, [pc, #72]	; (8000784 <main+0x6c>)
 800073c:	f000 fe1c 	bl	8001378 <HAL_CAN_Start>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <main+0x32>
      {
       Error_Handler();
 8000746:	f000 f9e5 	bl	8000b14 <Error_Handler>
      }
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800074a:	f002 fd29 	bl	80031a0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of mMainTask */
  mMainTaskHandle = osThreadNew(MainTask, NULL, &mMainTask_attributes);
 800074e:	4a0e      	ldr	r2, [pc, #56]	; (8000788 <main+0x70>)
 8000750:	2100      	movs	r1, #0
 8000752:	480e      	ldr	r0, [pc, #56]	; (800078c <main+0x74>)
 8000754:	f002 fd8a 	bl	800326c <osThreadNew>
 8000758:	4603      	mov	r3, r0
 800075a:	4a0d      	ldr	r2, [pc, #52]	; (8000790 <main+0x78>)
 800075c:	6013      	str	r3, [r2, #0]

  /* creation of mCAN_Recv */
  mCAN_RecvHandle = osThreadNew(CAN_Recv, NULL, &mCAN_Recv_attributes);
 800075e:	4a0d      	ldr	r2, [pc, #52]	; (8000794 <main+0x7c>)
 8000760:	2100      	movs	r1, #0
 8000762:	480d      	ldr	r0, [pc, #52]	; (8000798 <main+0x80>)
 8000764:	f002 fd82 	bl	800326c <osThreadNew>
 8000768:	4603      	mov	r3, r0
 800076a:	4a0c      	ldr	r2, [pc, #48]	; (800079c <main+0x84>)
 800076c:	6013      	str	r3, [r2, #0]

  /* creation of mCAN_Monitor */
  mCAN_MonitorHandle = osThreadNew(CAN_Monitor, NULL, &mCAN_Monitor_attributes);
 800076e:	4a0c      	ldr	r2, [pc, #48]	; (80007a0 <main+0x88>)
 8000770:	2100      	movs	r1, #0
 8000772:	480c      	ldr	r0, [pc, #48]	; (80007a4 <main+0x8c>)
 8000774:	f002 fd7a 	bl	800326c <osThreadNew>
 8000778:	4603      	mov	r3, r0
 800077a:	4a0b      	ldr	r2, [pc, #44]	; (80007a8 <main+0x90>)
 800077c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800077e:	f002 fd41 	bl	8003204 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000782:	e7fe      	b.n	8000782 <main+0x6a>
 8000784:	2000007c 	.word	0x2000007c
 8000788:	08006524 	.word	0x08006524
 800078c:	08000a29 	.word	0x08000a29
 8000790:	20000134 	.word	0x20000134
 8000794:	08006548 	.word	0x08006548
 8000798:	08000ac1 	.word	0x08000ac1
 800079c:	20000138 	.word	0x20000138
 80007a0:	0800656c 	.word	0x0800656c
 80007a4:	08000ad1 	.word	0x08000ad1
 80007a8:	2000013c 	.word	0x2000013c

080007ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b090      	sub	sp, #64	; 0x40
 80007b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b2:	f107 0318 	add.w	r3, r7, #24
 80007b6:	2228      	movs	r2, #40	; 0x28
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f005 fa92 	bl	8005ce4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007ce:	2301      	movs	r3, #1
 80007d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007d8:	2300      	movs	r3, #0
 80007da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007dc:	2301      	movs	r3, #1
 80007de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e0:	2302      	movs	r3, #2
 80007e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80007ea:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80007ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f0:	f107 0318 	add.w	r3, r7, #24
 80007f4:	4618      	mov	r0, r3
 80007f6:	f001 fbb7 	bl	8001f68 <HAL_RCC_OscConfig>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000800:	f000 f988 	bl	8000b14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000804:	230f      	movs	r3, #15
 8000806:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000808:	2302      	movs	r3, #2
 800080a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800080c:	2300      	movs	r3, #0
 800080e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000810:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000814:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000816:	2300      	movs	r3, #0
 8000818:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800081a:	1d3b      	adds	r3, r7, #4
 800081c:	2102      	movs	r1, #2
 800081e:	4618      	mov	r0, r3
 8000820:	f001 fe24 	bl	800246c <HAL_RCC_ClockConfig>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800082a:	f000 f973 	bl	8000b14 <Error_Handler>
  }
}
 800082e:	bf00      	nop
 8000830:	3740      	adds	r7, #64	; 0x40
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
	...

08000838 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800083c:	4b17      	ldr	r3, [pc, #92]	; (800089c <MX_CAN_Init+0x64>)
 800083e:	4a18      	ldr	r2, [pc, #96]	; (80008a0 <MX_CAN_Init+0x68>)
 8000840:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000842:	4b16      	ldr	r3, [pc, #88]	; (800089c <MX_CAN_Init+0x64>)
 8000844:	2204      	movs	r2, #4
 8000846:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000848:	4b14      	ldr	r3, [pc, #80]	; (800089c <MX_CAN_Init+0x64>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800084e:	4b13      	ldr	r3, [pc, #76]	; (800089c <MX_CAN_Init+0x64>)
 8000850:	2200      	movs	r2, #0
 8000852:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000854:	4b11      	ldr	r3, [pc, #68]	; (800089c <MX_CAN_Init+0x64>)
 8000856:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800085a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800085c:	4b0f      	ldr	r3, [pc, #60]	; (800089c <MX_CAN_Init+0x64>)
 800085e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000862:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000864:	4b0d      	ldr	r3, [pc, #52]	; (800089c <MX_CAN_Init+0x64>)
 8000866:	2200      	movs	r2, #0
 8000868:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800086a:	4b0c      	ldr	r3, [pc, #48]	; (800089c <MX_CAN_Init+0x64>)
 800086c:	2200      	movs	r2, #0
 800086e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000870:	4b0a      	ldr	r3, [pc, #40]	; (800089c <MX_CAN_Init+0x64>)
 8000872:	2200      	movs	r2, #0
 8000874:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000876:	4b09      	ldr	r3, [pc, #36]	; (800089c <MX_CAN_Init+0x64>)
 8000878:	2200      	movs	r2, #0
 800087a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800087c:	4b07      	ldr	r3, [pc, #28]	; (800089c <MX_CAN_Init+0x64>)
 800087e:	2200      	movs	r2, #0
 8000880:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <MX_CAN_Init+0x64>)
 8000884:	2200      	movs	r2, #0
 8000886:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000888:	4804      	ldr	r0, [pc, #16]	; (800089c <MX_CAN_Init+0x64>)
 800088a:	f000 fbb1 	bl	8000ff0 <HAL_CAN_Init>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000894:	f000 f93e 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}
 800089c:	2000007c 	.word	0x2000007c
 80008a0:	40006400 	.word	0x40006400

080008a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b086      	sub	sp, #24
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008aa:	f107 0308 	add.w	r3, r7, #8
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008b8:	463b      	mov	r3, r7
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008c0:	4b1c      	ldr	r3, [pc, #112]	; (8000934 <MX_TIM3_Init+0x90>)
 80008c2:	4a1d      	ldr	r2, [pc, #116]	; (8000938 <MX_TIM3_Init+0x94>)
 80008c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80008c6:	4b1b      	ldr	r3, [pc, #108]	; (8000934 <MX_TIM3_Init+0x90>)
 80008c8:	2247      	movs	r2, #71	; 0x47
 80008ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008cc:	4b19      	ldr	r3, [pc, #100]	; (8000934 <MX_TIM3_Init+0x90>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 209;
 80008d2:	4b18      	ldr	r3, [pc, #96]	; (8000934 <MX_TIM3_Init+0x90>)
 80008d4:	22d1      	movs	r2, #209	; 0xd1
 80008d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d8:	4b16      	ldr	r3, [pc, #88]	; (8000934 <MX_TIM3_Init+0x90>)
 80008da:	2200      	movs	r2, #0
 80008dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008de:	4b15      	ldr	r3, [pc, #84]	; (8000934 <MX_TIM3_Init+0x90>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008e4:	4813      	ldr	r0, [pc, #76]	; (8000934 <MX_TIM3_Init+0x90>)
 80008e6:	f001 ff7f 	bl	80027e8 <HAL_TIM_Base_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 80008f0:	f000 f910 	bl	8000b14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008fa:	f107 0308 	add.w	r3, r7, #8
 80008fe:	4619      	mov	r1, r3
 8000900:	480c      	ldr	r0, [pc, #48]	; (8000934 <MX_TIM3_Init+0x90>)
 8000902:	f002 f91b 	bl	8002b3c <HAL_TIM_ConfigClockSource>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 800090c:	f000 f902 	bl	8000b14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000910:	2300      	movs	r3, #0
 8000912:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000914:	2300      	movs	r3, #0
 8000916:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000918:	463b      	mov	r3, r7
 800091a:	4619      	mov	r1, r3
 800091c:	4805      	ldr	r0, [pc, #20]	; (8000934 <MX_TIM3_Init+0x90>)
 800091e:	f002 faf1 	bl	8002f04 <HAL_TIMEx_MasterConfigSynchronization>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000928:	f000 f8f4 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800092c:	bf00      	nop
 800092e:	3718      	adds	r7, #24
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	200000a4 	.word	0x200000a4
 8000938:	40000400 	.word	0x40000400

0800093c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000940:	4b11      	ldr	r3, [pc, #68]	; (8000988 <MX_USART1_UART_Init+0x4c>)
 8000942:	4a12      	ldr	r2, [pc, #72]	; (800098c <MX_USART1_UART_Init+0x50>)
 8000944:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000946:	4b10      	ldr	r3, [pc, #64]	; (8000988 <MX_USART1_UART_Init+0x4c>)
 8000948:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800094c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <MX_USART1_UART_Init+0x4c>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000954:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <MX_USART1_UART_Init+0x4c>)
 8000956:	2200      	movs	r2, #0
 8000958:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800095a:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <MX_USART1_UART_Init+0x4c>)
 800095c:	2200      	movs	r2, #0
 800095e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000960:	4b09      	ldr	r3, [pc, #36]	; (8000988 <MX_USART1_UART_Init+0x4c>)
 8000962:	220c      	movs	r2, #12
 8000964:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000966:	4b08      	ldr	r3, [pc, #32]	; (8000988 <MX_USART1_UART_Init+0x4c>)
 8000968:	2200      	movs	r2, #0
 800096a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <MX_USART1_UART_Init+0x4c>)
 800096e:	2200      	movs	r2, #0
 8000970:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000972:	4805      	ldr	r0, [pc, #20]	; (8000988 <MX_USART1_UART_Init+0x4c>)
 8000974:	f002 fb36 	bl	8002fe4 <HAL_UART_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800097e:	f000 f8c9 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	200000ec 	.word	0x200000ec
 800098c:	40013800 	.word	0x40013800

08000990 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b088      	sub	sp, #32
 8000994:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000996:	f107 0310 	add.w	r3, r7, #16
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a4:	4b1e      	ldr	r3, [pc, #120]	; (8000a20 <MX_GPIO_Init+0x90>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	4a1d      	ldr	r2, [pc, #116]	; (8000a20 <MX_GPIO_Init+0x90>)
 80009aa:	f043 0310 	orr.w	r3, r3, #16
 80009ae:	6193      	str	r3, [r2, #24]
 80009b0:	4b1b      	ldr	r3, [pc, #108]	; (8000a20 <MX_GPIO_Init+0x90>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	f003 0310 	and.w	r3, r3, #16
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009bc:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <MX_GPIO_Init+0x90>)
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	4a17      	ldr	r2, [pc, #92]	; (8000a20 <MX_GPIO_Init+0x90>)
 80009c2:	f043 0320 	orr.w	r3, r3, #32
 80009c6:	6193      	str	r3, [r2, #24]
 80009c8:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <MX_GPIO_Init+0x90>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	f003 0320 	and.w	r3, r3, #32
 80009d0:	60bb      	str	r3, [r7, #8]
 80009d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d4:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <MX_GPIO_Init+0x90>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	4a11      	ldr	r2, [pc, #68]	; (8000a20 <MX_GPIO_Init+0x90>)
 80009da:	f043 0304 	orr.w	r3, r3, #4
 80009de:	6193      	str	r3, [r2, #24]
 80009e0:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <MX_GPIO_Init+0x90>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	f003 0304 	and.w	r3, r3, #4
 80009e8:	607b      	str	r3, [r7, #4]
 80009ea:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80009ec:	2200      	movs	r2, #0
 80009ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009f2:	480c      	ldr	r0, [pc, #48]	; (8000a24 <MX_GPIO_Init+0x94>)
 80009f4:	f001 fa86 	bl	8001f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80009f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fe:	2301      	movs	r3, #1
 8000a00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a06:	2302      	movs	r3, #2
 8000a08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a0a:	f107 0310 	add.w	r3, r7, #16
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4804      	ldr	r0, [pc, #16]	; (8000a24 <MX_GPIO_Init+0x94>)
 8000a12:	f001 f8f3 	bl	8001bfc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a16:	bf00      	nop
 8000a18:	3720      	adds	r7, #32
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40021000 	.word	0x40021000
 8000a24:	40011000 	.word	0x40011000

08000a28 <MainTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_MainTask */
void MainTask(void *argument)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	f5ad 6dd9 	sub.w	sp, sp, #1736	; 0x6c8
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	f507 63d9 	add.w	r3, r7, #1736	; 0x6c8
 8000a34:	f2a3 63c4 	subw	r3, r3, #1732	; 0x6c4
 8000a38:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
   CANConfigIDTxtypedef pIDtype;
   pIDtype.MessageType=COMMAND_FRAME;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	f8a7 36bc 	strh.w	r3, [r7, #1724]	; 0x6bc
   pIDtype.SenderID=OBSTALCE8;
 8000a40:	230f      	movs	r3, #15
 8000a42:	f8a7 36be 	strh.w	r3, [r7, #1726]	; 0x6be
   CANBufferHandleStruct Buffer;
   CANBufferHandleStruct_Init(&Buffer);
 8000a46:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f7ff fb80 	bl	8000150 <CANBufferHandleStruct_Init>
   FlagFrameHandle Flag;
   FlagsFrameHandle_Init(&Flag);
 8000a50:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a54:	4618      	mov	r0, r3
 8000a56:	f7ff fbd4 	bl	8000202 <FlagsFrameHandle_Init>
   uint8_t sendData[100] = {0};
 8000a5a:	f507 63d9 	add.w	r3, r7, #1736	; 0x6c8
 8000a5e:	f5a3 63d8 	sub.w	r3, r3, #1728	; 0x6c0
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	3304      	adds	r3, #4
 8000a68:	2260      	movs	r2, #96	; 0x60
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f005 f939 	bl	8005ce4 <memset>
   uint8_t len = 0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	f887 36c3 	strb.w	r3, [r7, #1731]	; 0x6c3
   uint32_t cnt = 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	f8c7 36c4 	str.w	r3, [r7, #1732]	; 0x6c4


  /* Infinite loop */
  for(;;)
  {
    len = sprintf((char*)sendData, "From OBSTALCE8 to 2: %lu\r\n",cnt++);
 8000a7e:	f8d7 36c4 	ldr.w	r3, [r7, #1732]	; 0x6c4
 8000a82:	1c5a      	adds	r2, r3, #1
 8000a84:	f8c7 26c4 	str.w	r2, [r7, #1732]	; 0x6c4
 8000a88:	f107 0008 	add.w	r0, r7, #8
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	490b      	ldr	r1, [pc, #44]	; (8000abc <MainTask+0x94>)
 8000a90:	f005 f908 	bl	8005ca4 <siprintf>
 8000a94:	4603      	mov	r3, r0
 8000a96:	f887 36c3 	strb.w	r3, [r7, #1731]	; 0x6c3
     CAN_Send_Application(&Buffer, &pIDtype, sendData,len+1);
 8000a9a:	f897 36c3 	ldrb.w	r3, [r7, #1731]	; 0x6c3
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	f107 0208 	add.w	r2, r7, #8
 8000aa6:	f207 61bc 	addw	r1, r7, #1724	; 0x6bc
 8000aaa:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 8000aae:	f7ff fc0b 	bl	80002c8 <CAN_Send_Application>
   osDelay(1000);
 8000ab2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ab6:	f002 fc83 	bl	80033c0 <osDelay>
    len = sprintf((char*)sendData, "From OBSTALCE8 to 2: %lu\r\n",cnt++);
 8000aba:	e7e0      	b.n	8000a7e <MainTask+0x56>
 8000abc:	080064f0 	.word	0x080064f0

08000ac0 <CAN_Recv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CAN_Recv */
void CAN_Recv(void *argument)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
//      if(FlagRec==REC_PACKET_SUCCESS)
//      {
//        uint8_t len = sprintf(Print, "Node 2 Rcv: %s\r\n", mess);
//        HAL_UART_Transmit(&huart1,(uint8_t*)Print,len,HAL_MAX_DELAY);
//      }
    osDelay(1);
 8000ac8:	2001      	movs	r0, #1
 8000aca:	f002 fc79 	bl	80033c0 <osDelay>
 8000ace:	e7fb      	b.n	8000ac8 <CAN_Recv+0x8>

08000ad0 <CAN_Monitor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CAN_Monitor */
void CAN_Monitor(void *argument)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CAN_Monitor */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000ad8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000adc:	4803      	ldr	r0, [pc, #12]	; (8000aec <CAN_Monitor+0x1c>)
 8000ade:	f001 fa29 	bl	8001f34 <HAL_GPIO_TogglePin>
    osDelay(500);
 8000ae2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ae6:	f002 fc6b 	bl	80033c0 <osDelay>
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000aea:	e7f5      	b.n	8000ad8 <CAN_Monitor+0x8>
 8000aec:	40011000 	.word	0x40011000

08000af0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a04      	ldr	r2, [pc, #16]	; (8000b10 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d101      	bne.n	8000b06 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b02:	f000 fa59 	bl	8000fb8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40000800 	.word	0x40000800

08000b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b18:	b672      	cpsid	i
}
 8000b1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <Error_Handler+0x8>
	...

08000b20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b26:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <HAL_MspInit+0x68>)
 8000b28:	699b      	ldr	r3, [r3, #24]
 8000b2a:	4a17      	ldr	r2, [pc, #92]	; (8000b88 <HAL_MspInit+0x68>)
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	6193      	str	r3, [r2, #24]
 8000b32:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <HAL_MspInit+0x68>)
 8000b34:	699b      	ldr	r3, [r3, #24]
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	60bb      	str	r3, [r7, #8]
 8000b3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3e:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <HAL_MspInit+0x68>)
 8000b40:	69db      	ldr	r3, [r3, #28]
 8000b42:	4a11      	ldr	r2, [pc, #68]	; (8000b88 <HAL_MspInit+0x68>)
 8000b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b48:	61d3      	str	r3, [r2, #28]
 8000b4a:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <HAL_MspInit+0x68>)
 8000b4c:	69db      	ldr	r3, [r3, #28]
 8000b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b56:	2200      	movs	r2, #0
 8000b58:	210f      	movs	r1, #15
 8000b5a:	f06f 0001 	mvn.w	r0, #1
 8000b5e:	f001 f822 	bl	8001ba6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b62:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <HAL_MspInit+0x6c>)
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	4a04      	ldr	r2, [pc, #16]	; (8000b8c <HAL_MspInit+0x6c>)
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	40010000 	.word	0x40010000

08000b90 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b088      	sub	sp, #32
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b98:	f107 0310 	add.w	r3, r7, #16
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4a2c      	ldr	r2, [pc, #176]	; (8000c5c <HAL_CAN_MspInit+0xcc>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d151      	bne.n	8000c54 <HAL_CAN_MspInit+0xc4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000bb0:	4b2b      	ldr	r3, [pc, #172]	; (8000c60 <HAL_CAN_MspInit+0xd0>)
 8000bb2:	69db      	ldr	r3, [r3, #28]
 8000bb4:	4a2a      	ldr	r2, [pc, #168]	; (8000c60 <HAL_CAN_MspInit+0xd0>)
 8000bb6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bba:	61d3      	str	r3, [r2, #28]
 8000bbc:	4b28      	ldr	r3, [pc, #160]	; (8000c60 <HAL_CAN_MspInit+0xd0>)
 8000bbe:	69db      	ldr	r3, [r3, #28]
 8000bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc8:	4b25      	ldr	r3, [pc, #148]	; (8000c60 <HAL_CAN_MspInit+0xd0>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	4a24      	ldr	r2, [pc, #144]	; (8000c60 <HAL_CAN_MspInit+0xd0>)
 8000bce:	f043 0304 	orr.w	r3, r3, #4
 8000bd2:	6193      	str	r3, [r2, #24]
 8000bd4:	4b22      	ldr	r3, [pc, #136]	; (8000c60 <HAL_CAN_MspInit+0xd0>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	f003 0304 	and.w	r3, r3, #4
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000be0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000be4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be6:	2300      	movs	r3, #0
 8000be8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bee:	f107 0310 	add.w	r3, r7, #16
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	481b      	ldr	r0, [pc, #108]	; (8000c64 <HAL_CAN_MspInit+0xd4>)
 8000bf6:	f001 f801 	bl	8001bfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000bfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bfe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c00:	2302      	movs	r3, #2
 8000c02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c04:	2303      	movs	r3, #3
 8000c06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c08:	f107 0310 	add.w	r3, r7, #16
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4815      	ldr	r0, [pc, #84]	; (8000c64 <HAL_CAN_MspInit+0xd4>)
 8000c10:	f000 fff4 	bl	8001bfc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 5, 0);
 8000c14:	2200      	movs	r2, #0
 8000c16:	2105      	movs	r1, #5
 8000c18:	2013      	movs	r0, #19
 8000c1a:	f000 ffc4 	bl	8001ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8000c1e:	2013      	movs	r0, #19
 8000c20:	f000 ffdd 	bl	8001bde <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8000c24:	2200      	movs	r2, #0
 8000c26:	2105      	movs	r1, #5
 8000c28:	2014      	movs	r0, #20
 8000c2a:	f000 ffbc 	bl	8001ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000c2e:	2014      	movs	r0, #20
 8000c30:	f000 ffd5 	bl	8001bde <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8000c34:	2200      	movs	r2, #0
 8000c36:	2105      	movs	r1, #5
 8000c38:	2015      	movs	r0, #21
 8000c3a:	f000 ffb4 	bl	8001ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000c3e:	2015      	movs	r0, #21
 8000c40:	f000 ffcd 	bl	8001bde <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 8000c44:	2200      	movs	r2, #0
 8000c46:	2105      	movs	r1, #5
 8000c48:	2016      	movs	r0, #22
 8000c4a:	f000 ffac 	bl	8001ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000c4e:	2016      	movs	r0, #22
 8000c50:	f000 ffc5 	bl	8001bde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000c54:	bf00      	nop
 8000c56:	3720      	adds	r7, #32
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40006400 	.word	0x40006400
 8000c60:	40021000 	.word	0x40021000
 8000c64:	40010800 	.word	0x40010800

08000c68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a09      	ldr	r2, [pc, #36]	; (8000c9c <HAL_TIM_Base_MspInit+0x34>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d10b      	bne.n	8000c92 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c7a:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <HAL_TIM_Base_MspInit+0x38>)
 8000c7c:	69db      	ldr	r3, [r3, #28]
 8000c7e:	4a08      	ldr	r2, [pc, #32]	; (8000ca0 <HAL_TIM_Base_MspInit+0x38>)
 8000c80:	f043 0302 	orr.w	r3, r3, #2
 8000c84:	61d3      	str	r3, [r2, #28]
 8000c86:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <HAL_TIM_Base_MspInit+0x38>)
 8000c88:	69db      	ldr	r3, [r3, #28]
 8000c8a:	f003 0302 	and.w	r3, r3, #2
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c92:	bf00      	nop
 8000c94:	3714      	adds	r7, #20
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bc80      	pop	{r7}
 8000c9a:	4770      	bx	lr
 8000c9c:	40000400 	.word	0x40000400
 8000ca0:	40021000 	.word	0x40021000

08000ca4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b088      	sub	sp, #32
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cac:	f107 0310 	add.w	r3, r7, #16
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a1c      	ldr	r2, [pc, #112]	; (8000d30 <HAL_UART_MspInit+0x8c>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d131      	bne.n	8000d28 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cc4:	4b1b      	ldr	r3, [pc, #108]	; (8000d34 <HAL_UART_MspInit+0x90>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	4a1a      	ldr	r2, [pc, #104]	; (8000d34 <HAL_UART_MspInit+0x90>)
 8000cca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cce:	6193      	str	r3, [r2, #24]
 8000cd0:	4b18      	ldr	r3, [pc, #96]	; (8000d34 <HAL_UART_MspInit+0x90>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cdc:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <HAL_UART_MspInit+0x90>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	4a14      	ldr	r2, [pc, #80]	; (8000d34 <HAL_UART_MspInit+0x90>)
 8000ce2:	f043 0304 	orr.w	r3, r3, #4
 8000ce6:	6193      	str	r3, [r2, #24]
 8000ce8:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <HAL_UART_MspInit+0x90>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	f003 0304 	and.w	r3, r3, #4
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000cf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cf8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d02:	f107 0310 	add.w	r3, r7, #16
 8000d06:	4619      	mov	r1, r3
 8000d08:	480b      	ldr	r0, [pc, #44]	; (8000d38 <HAL_UART_MspInit+0x94>)
 8000d0a:	f000 ff77 	bl	8001bfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1c:	f107 0310 	add.w	r3, r7, #16
 8000d20:	4619      	mov	r1, r3
 8000d22:	4805      	ldr	r0, [pc, #20]	; (8000d38 <HAL_UART_MspInit+0x94>)
 8000d24:	f000 ff6a 	bl	8001bfc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d28:	bf00      	nop
 8000d2a:	3720      	adds	r7, #32
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40013800 	.word	0x40013800
 8000d34:	40021000 	.word	0x40021000
 8000d38:	40010800 	.word	0x40010800

08000d3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08e      	sub	sp, #56	; 0x38
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000d44:	2300      	movs	r3, #0
 8000d46:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000d52:	4b34      	ldr	r3, [pc, #208]	; (8000e24 <HAL_InitTick+0xe8>)
 8000d54:	69db      	ldr	r3, [r3, #28]
 8000d56:	4a33      	ldr	r2, [pc, #204]	; (8000e24 <HAL_InitTick+0xe8>)
 8000d58:	f043 0304 	orr.w	r3, r3, #4
 8000d5c:	61d3      	str	r3, [r2, #28]
 8000d5e:	4b31      	ldr	r3, [pc, #196]	; (8000e24 <HAL_InitTick+0xe8>)
 8000d60:	69db      	ldr	r3, [r3, #28]
 8000d62:	f003 0304 	and.w	r3, r3, #4
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d6a:	f107 0210 	add.w	r2, r7, #16
 8000d6e:	f107 0314 	add.w	r3, r7, #20
 8000d72:	4611      	mov	r1, r2
 8000d74:	4618      	mov	r0, r3
 8000d76:	f001 fce9 	bl	800274c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d7a:	6a3b      	ldr	r3, [r7, #32]
 8000d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d103      	bne.n	8000d8c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d84:	f001 fcba 	bl	80026fc <HAL_RCC_GetPCLK1Freq>
 8000d88:	6378      	str	r0, [r7, #52]	; 0x34
 8000d8a:	e004      	b.n	8000d96 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d8c:	f001 fcb6 	bl	80026fc <HAL_RCC_GetPCLK1Freq>
 8000d90:	4603      	mov	r3, r0
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d98:	4a23      	ldr	r2, [pc, #140]	; (8000e28 <HAL_InitTick+0xec>)
 8000d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d9e:	0c9b      	lsrs	r3, r3, #18
 8000da0:	3b01      	subs	r3, #1
 8000da2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000da4:	4b21      	ldr	r3, [pc, #132]	; (8000e2c <HAL_InitTick+0xf0>)
 8000da6:	4a22      	ldr	r2, [pc, #136]	; (8000e30 <HAL_InitTick+0xf4>)
 8000da8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000daa:	4b20      	ldr	r3, [pc, #128]	; (8000e2c <HAL_InitTick+0xf0>)
 8000dac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000db0:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000db2:	4a1e      	ldr	r2, [pc, #120]	; (8000e2c <HAL_InitTick+0xf0>)
 8000db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000db6:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000db8:	4b1c      	ldr	r3, [pc, #112]	; (8000e2c <HAL_InitTick+0xf0>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dbe:	4b1b      	ldr	r3, [pc, #108]	; (8000e2c <HAL_InitTick+0xf0>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc4:	4b19      	ldr	r3, [pc, #100]	; (8000e2c <HAL_InitTick+0xf0>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000dca:	4818      	ldr	r0, [pc, #96]	; (8000e2c <HAL_InitTick+0xf0>)
 8000dcc:	f001 fd0c 	bl	80027e8 <HAL_TIM_Base_Init>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000dd6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d11b      	bne.n	8000e16 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000dde:	4813      	ldr	r0, [pc, #76]	; (8000e2c <HAL_InitTick+0xf0>)
 8000de0:	f001 fd52 	bl	8002888 <HAL_TIM_Base_Start_IT>
 8000de4:	4603      	mov	r3, r0
 8000de6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000dea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d111      	bne.n	8000e16 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000df2:	201e      	movs	r0, #30
 8000df4:	f000 fef3 	bl	8001bde <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2b0f      	cmp	r3, #15
 8000dfc:	d808      	bhi.n	8000e10 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	6879      	ldr	r1, [r7, #4]
 8000e02:	201e      	movs	r0, #30
 8000e04:	f000 fecf 	bl	8001ba6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e08:	4a0a      	ldr	r2, [pc, #40]	; (8000e34 <HAL_InitTick+0xf8>)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6013      	str	r3, [r2, #0]
 8000e0e:	e002      	b.n	8000e16 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000e10:	2301      	movs	r3, #1
 8000e12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e16:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3738      	adds	r7, #56	; 0x38
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40021000 	.word	0x40021000
 8000e28:	431bde83 	.word	0x431bde83
 8000e2c:	20000140 	.word	0x20000140
 8000e30:	40000800 	.word	0x40000800
 8000e34:	20000004 	.word	0x20000004

08000e38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e3c:	e7fe      	b.n	8000e3c <NMI_Handler+0x4>

08000e3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e42:	e7fe      	b.n	8000e42 <HardFault_Handler+0x4>

08000e44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <MemManage_Handler+0x4>

08000e4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e4e:	e7fe      	b.n	8000e4e <BusFault_Handler+0x4>

08000e50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <UsageFault_Handler+0x4>

08000e56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bc80      	pop	{r7}
 8000e60:	4770      	bx	lr
	...

08000e64 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000e68:	4802      	ldr	r0, [pc, #8]	; (8000e74 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8000e6a:	f000 fbbb 	bl	80015e4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	2000007c 	.word	0x2000007c

08000e78 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000e7c:	4802      	ldr	r0, [pc, #8]	; (8000e88 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000e7e:	f000 fbb1 	bl	80015e4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	2000007c 	.word	0x2000007c

08000e8c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000e90:	4802      	ldr	r0, [pc, #8]	; (8000e9c <CAN1_RX1_IRQHandler+0x10>)
 8000e92:	f000 fba7 	bl	80015e4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	2000007c 	.word	0x2000007c

08000ea0 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000ea4:	4802      	ldr	r0, [pc, #8]	; (8000eb0 <CAN1_SCE_IRQHandler+0x10>)
 8000ea6:	f000 fb9d 	bl	80015e4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	2000007c 	.word	0x2000007c

08000eb4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000eb8:	4802      	ldr	r0, [pc, #8]	; (8000ec4 <TIM4_IRQHandler+0x10>)
 8000eba:	f001 fd37 	bl	800292c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000140 	.word	0x20000140

08000ec8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ed0:	4a14      	ldr	r2, [pc, #80]	; (8000f24 <_sbrk+0x5c>)
 8000ed2:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <_sbrk+0x60>)
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000edc:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <_sbrk+0x64>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d102      	bne.n	8000eea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ee4:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <_sbrk+0x64>)
 8000ee6:	4a12      	ldr	r2, [pc, #72]	; (8000f30 <_sbrk+0x68>)
 8000ee8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eea:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <_sbrk+0x64>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d207      	bcs.n	8000f08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ef8:	f004 ff0c 	bl	8005d14 <__errno>
 8000efc:	4603      	mov	r3, r0
 8000efe:	220c      	movs	r2, #12
 8000f00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f02:	f04f 33ff 	mov.w	r3, #4294967295
 8000f06:	e009      	b.n	8000f1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f08:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <_sbrk+0x64>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f0e:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <_sbrk+0x64>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4413      	add	r3, r2
 8000f16:	4a05      	ldr	r2, [pc, #20]	; (8000f2c <_sbrk+0x64>)
 8000f18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3718      	adds	r7, #24
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20005000 	.word	0x20005000
 8000f28:	00000400 	.word	0x00000400
 8000f2c:	20000188 	.word	0x20000188
 8000f30:	20001c20 	.word	0x20001c20

08000f34 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr

08000f40 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f40:	f7ff fff8 	bl	8000f34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f44:	480b      	ldr	r0, [pc, #44]	; (8000f74 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f46:	490c      	ldr	r1, [pc, #48]	; (8000f78 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f48:	4a0c      	ldr	r2, [pc, #48]	; (8000f7c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f4c:	e002      	b.n	8000f54 <LoopCopyDataInit>

08000f4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f52:	3304      	adds	r3, #4

08000f54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f58:	d3f9      	bcc.n	8000f4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f5a:	4a09      	ldr	r2, [pc, #36]	; (8000f80 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f5c:	4c09      	ldr	r4, [pc, #36]	; (8000f84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f60:	e001      	b.n	8000f66 <LoopFillZerobss>

08000f62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f64:	3204      	adds	r2, #4

08000f66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f68:	d3fb      	bcc.n	8000f62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f6a:	f004 fed9 	bl	8005d20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f6e:	f7ff fbd3 	bl	8000718 <main>
  bx lr
 8000f72:	4770      	bx	lr
  ldr r0, =_sdata
 8000f74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f78:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000f7c:	080065f8 	.word	0x080065f8
  ldr r2, =_sbss
 8000f80:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000f84:	20001c20 	.word	0x20001c20

08000f88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f88:	e7fe      	b.n	8000f88 <ADC1_2_IRQHandler>
	...

08000f8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f90:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <HAL_Init+0x28>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a07      	ldr	r2, [pc, #28]	; (8000fb4 <HAL_Init+0x28>)
 8000f96:	f043 0310 	orr.w	r3, r3, #16
 8000f9a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f9c:	2003      	movs	r0, #3
 8000f9e:	f000 fdf7 	bl	8001b90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fa2:	200f      	movs	r0, #15
 8000fa4:	f7ff feca 	bl	8000d3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fa8:	f7ff fdba 	bl	8000b20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40022000 	.word	0x40022000

08000fb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fbc:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <HAL_IncTick+0x1c>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <HAL_IncTick+0x20>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	4a03      	ldr	r2, [pc, #12]	; (8000fd8 <HAL_IncTick+0x20>)
 8000fca:	6013      	str	r3, [r2, #0]
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr
 8000fd4:	20000008 	.word	0x20000008
 8000fd8:	2000018c 	.word	0x2000018c

08000fdc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe0:	4b02      	ldr	r3, [pc, #8]	; (8000fec <HAL_GetTick+0x10>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr
 8000fec:	2000018c 	.word	0x2000018c

08000ff0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d101      	bne.n	8001002 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e0ed      	b.n	80011de <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b00      	cmp	r3, #0
 800100c:	d102      	bne.n	8001014 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f7ff fdbe 	bl	8000b90 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f042 0201 	orr.w	r2, r2, #1
 8001022:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001024:	f7ff ffda 	bl	8000fdc <HAL_GetTick>
 8001028:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800102a:	e012      	b.n	8001052 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800102c:	f7ff ffd6 	bl	8000fdc <HAL_GetTick>
 8001030:	4602      	mov	r2, r0
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	2b0a      	cmp	r3, #10
 8001038:	d90b      	bls.n	8001052 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2205      	movs	r2, #5
 800104a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e0c5      	b.n	80011de <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f003 0301 	and.w	r3, r3, #1
 800105c:	2b00      	cmp	r3, #0
 800105e:	d0e5      	beq.n	800102c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f022 0202 	bic.w	r2, r2, #2
 800106e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001070:	f7ff ffb4 	bl	8000fdc <HAL_GetTick>
 8001074:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001076:	e012      	b.n	800109e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001078:	f7ff ffb0 	bl	8000fdc <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	2b0a      	cmp	r3, #10
 8001084:	d90b      	bls.n	800109e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800108a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2205      	movs	r2, #5
 8001096:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e09f      	b.n	80011de <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f003 0302 	and.w	r3, r3, #2
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d1e5      	bne.n	8001078 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	7e1b      	ldrb	r3, [r3, #24]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d108      	bne.n	80010c6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	e007      	b.n	80010d6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	7e5b      	ldrb	r3, [r3, #25]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d108      	bne.n	80010f0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	e007      	b.n	8001100 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80010fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	7e9b      	ldrb	r3, [r3, #26]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d108      	bne.n	800111a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f042 0220 	orr.w	r2, r2, #32
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	e007      	b.n	800112a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f022 0220 	bic.w	r2, r2, #32
 8001128:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	7edb      	ldrb	r3, [r3, #27]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d108      	bne.n	8001144 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f022 0210 	bic.w	r2, r2, #16
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	e007      	b.n	8001154 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f042 0210 	orr.w	r2, r2, #16
 8001152:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	7f1b      	ldrb	r3, [r3, #28]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d108      	bne.n	800116e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f042 0208 	orr.w	r2, r2, #8
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	e007      	b.n	800117e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f022 0208 	bic.w	r2, r2, #8
 800117c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	7f5b      	ldrb	r3, [r3, #29]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d108      	bne.n	8001198 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f042 0204 	orr.w	r2, r2, #4
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	e007      	b.n	80011a8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f022 0204 	bic.w	r2, r2, #4
 80011a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	689a      	ldr	r2, [r3, #8]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	431a      	orrs	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	691b      	ldr	r3, [r3, #16]
 80011b6:	431a      	orrs	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	695b      	ldr	r3, [r3, #20]
 80011bc:	ea42 0103 	orr.w	r1, r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	1e5a      	subs	r2, r3, #1
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	430a      	orrs	r2, r1
 80011cc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2200      	movs	r2, #0
 80011d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2201      	movs	r2, #1
 80011d8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80011e6:	b480      	push	{r7}
 80011e8:	b087      	sub	sp, #28
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
 80011ee:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011fc:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80011fe:	7cfb      	ldrb	r3, [r7, #19]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d003      	beq.n	800120c <HAL_CAN_ConfigFilter+0x26>
 8001204:	7cfb      	ldrb	r3, [r7, #19]
 8001206:	2b02      	cmp	r3, #2
 8001208:	f040 80aa 	bne.w	8001360 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001212:	f043 0201 	orr.w	r2, r3, #1
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	695b      	ldr	r3, [r3, #20]
 8001220:	f003 031f 	and.w	r3, r3, #31
 8001224:	2201      	movs	r2, #1
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	43db      	mvns	r3, r3
 8001236:	401a      	ands	r2, r3
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d123      	bne.n	800128e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	43db      	mvns	r3, r3
 8001250:	401a      	ands	r2, r3
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001264:	683a      	ldr	r2, [r7, #0]
 8001266:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001268:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	3248      	adds	r2, #72	; 0x48
 800126e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001282:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001284:	6979      	ldr	r1, [r7, #20]
 8001286:	3348      	adds	r3, #72	; 0x48
 8001288:	00db      	lsls	r3, r3, #3
 800128a:	440b      	add	r3, r1
 800128c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	69db      	ldr	r3, [r3, #28]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d122      	bne.n	80012dc <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	431a      	orrs	r2, r3
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012b2:	683a      	ldr	r2, [r7, #0]
 80012b4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80012b6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	3248      	adds	r2, #72	; 0x48
 80012bc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012d0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012d2:	6979      	ldr	r1, [r7, #20]
 80012d4:	3348      	adds	r3, #72	; 0x48
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	440b      	add	r3, r1
 80012da:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d109      	bne.n	80012f8 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	43db      	mvns	r3, r3
 80012ee:	401a      	ands	r2, r3
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80012f6:	e007      	b.n	8001308 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	431a      	orrs	r2, r3
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	691b      	ldr	r3, [r3, #16]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d109      	bne.n	8001324 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	43db      	mvns	r3, r3
 800131a:	401a      	ands	r2, r3
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001322:	e007      	b.n	8001334 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	431a      	orrs	r2, r3
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	6a1b      	ldr	r3, [r3, #32]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d107      	bne.n	800134c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	431a      	orrs	r2, r3
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001352:	f023 0201 	bic.w	r2, r3, #1
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800135c:	2300      	movs	r3, #0
 800135e:	e006      	b.n	800136e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001364:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
  }
}
 800136e:	4618      	mov	r0, r3
 8001370:	371c      	adds	r7, #28
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr

08001378 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001386:	b2db      	uxtb	r3, r3
 8001388:	2b01      	cmp	r3, #1
 800138a:	d12e      	bne.n	80013ea <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2202      	movs	r2, #2
 8001390:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f022 0201 	bic.w	r2, r2, #1
 80013a2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80013a4:	f7ff fe1a 	bl	8000fdc <HAL_GetTick>
 80013a8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80013aa:	e012      	b.n	80013d2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013ac:	f7ff fe16 	bl	8000fdc <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b0a      	cmp	r3, #10
 80013b8:	d90b      	bls.n	80013d2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2205      	movs	r2, #5
 80013ca:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e012      	b.n	80013f8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1e5      	bne.n	80013ac <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80013e6:	2300      	movs	r3, #0
 80013e8:	e006      	b.n	80013f8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
  }
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3710      	adds	r7, #16
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001400:	b480      	push	{r7}
 8001402:	b089      	sub	sp, #36	; 0x24
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
 800140c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001414:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800141e:	7ffb      	ldrb	r3, [r7, #31]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d003      	beq.n	800142c <HAL_CAN_AddTxMessage+0x2c>
 8001424:	7ffb      	ldrb	r3, [r7, #31]
 8001426:	2b02      	cmp	r3, #2
 8001428:	f040 80ad 	bne.w	8001586 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d10a      	bne.n	800144c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800143c:	2b00      	cmp	r3, #0
 800143e:	d105      	bne.n	800144c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001446:	2b00      	cmp	r3, #0
 8001448:	f000 8095 	beq.w	8001576 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	0e1b      	lsrs	r3, r3, #24
 8001450:	f003 0303 	and.w	r3, r3, #3
 8001454:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001456:	2201      	movs	r2, #1
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	409a      	lsls	r2, r3
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d10d      	bne.n	8001484 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001472:	68f9      	ldr	r1, [r7, #12]
 8001474:	6809      	ldr	r1, [r1, #0]
 8001476:	431a      	orrs	r2, r3
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	3318      	adds	r3, #24
 800147c:	011b      	lsls	r3, r3, #4
 800147e:	440b      	add	r3, r1
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	e00f      	b.n	80014a4 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800148e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001494:	68f9      	ldr	r1, [r7, #12]
 8001496:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001498:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	3318      	adds	r3, #24
 800149e:	011b      	lsls	r3, r3, #4
 80014a0:	440b      	add	r3, r1
 80014a2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	6819      	ldr	r1, [r3, #0]
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	691a      	ldr	r2, [r3, #16]
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	3318      	adds	r3, #24
 80014b0:	011b      	lsls	r3, r3, #4
 80014b2:	440b      	add	r3, r1
 80014b4:	3304      	adds	r3, #4
 80014b6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	7d1b      	ldrb	r3, [r3, #20]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d111      	bne.n	80014e4 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	3318      	adds	r3, #24
 80014c8:	011b      	lsls	r3, r3, #4
 80014ca:	4413      	add	r3, r2
 80014cc:	3304      	adds	r3, #4
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	68fa      	ldr	r2, [r7, #12]
 80014d2:	6811      	ldr	r1, [r2, #0]
 80014d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	3318      	adds	r3, #24
 80014dc:	011b      	lsls	r3, r3, #4
 80014de:	440b      	add	r3, r1
 80014e0:	3304      	adds	r3, #4
 80014e2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3307      	adds	r3, #7
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	061a      	lsls	r2, r3, #24
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3306      	adds	r3, #6
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	041b      	lsls	r3, r3, #16
 80014f4:	431a      	orrs	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	3305      	adds	r3, #5
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	021b      	lsls	r3, r3, #8
 80014fe:	4313      	orrs	r3, r2
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	3204      	adds	r2, #4
 8001504:	7812      	ldrb	r2, [r2, #0]
 8001506:	4610      	mov	r0, r2
 8001508:	68fa      	ldr	r2, [r7, #12]
 800150a:	6811      	ldr	r1, [r2, #0]
 800150c:	ea43 0200 	orr.w	r2, r3, r0
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	011b      	lsls	r3, r3, #4
 8001514:	440b      	add	r3, r1
 8001516:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800151a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3303      	adds	r3, #3
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	061a      	lsls	r2, r3, #24
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3302      	adds	r3, #2
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	041b      	lsls	r3, r3, #16
 800152c:	431a      	orrs	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	3301      	adds	r3, #1
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	021b      	lsls	r3, r3, #8
 8001536:	4313      	orrs	r3, r2
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	7812      	ldrb	r2, [r2, #0]
 800153c:	4610      	mov	r0, r2
 800153e:	68fa      	ldr	r2, [r7, #12]
 8001540:	6811      	ldr	r1, [r2, #0]
 8001542:	ea43 0200 	orr.w	r2, r3, r0
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	011b      	lsls	r3, r3, #4
 800154a:	440b      	add	r3, r1
 800154c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001550:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	3318      	adds	r3, #24
 800155a:	011b      	lsls	r3, r3, #4
 800155c:	4413      	add	r3, r2
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	68fa      	ldr	r2, [r7, #12]
 8001562:	6811      	ldr	r1, [r2, #0]
 8001564:	f043 0201 	orr.w	r2, r3, #1
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	3318      	adds	r3, #24
 800156c:	011b      	lsls	r3, r3, #4
 800156e:	440b      	add	r3, r1
 8001570:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001572:	2300      	movs	r3, #0
 8001574:	e00e      	b.n	8001594 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e006      	b.n	8001594 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
  }
}
 8001594:	4618      	mov	r0, r3
 8001596:	3724      	adds	r7, #36	; 0x24
 8001598:	46bd      	mov	sp, r7
 800159a:	bc80      	pop	{r7}
 800159c:	4770      	bx	lr

0800159e <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 800159e:	b480      	push	{r7}
 80015a0:	b085      	sub	sp, #20
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
 80015a6:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 80015a8:	2300      	movs	r3, #0
 80015aa:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015b2:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80015b4:	7afb      	ldrb	r3, [r7, #11]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d002      	beq.n	80015c0 <HAL_CAN_IsTxMessagePending+0x22>
 80015ba:	7afb      	ldrb	r3, [r7, #11]
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d10b      	bne.n	80015d8 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	689a      	ldr	r2, [r3, #8]
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	069b      	lsls	r3, r3, #26
 80015ca:	401a      	ands	r2, r3
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	069b      	lsls	r3, r3, #26
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d001      	beq.n	80015d8 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 80015d4:	2301      	movs	r3, #1
 80015d6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 80015d8:	68fb      	ldr	r3, [r7, #12]
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr

080015e4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08a      	sub	sp, #40	; 0x28
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80015ec:	2300      	movs	r3, #0
 80015ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	695b      	ldr	r3, [r3, #20]
 80015f6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001620:	6a3b      	ldr	r3, [r7, #32]
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	2b00      	cmp	r3, #0
 8001628:	d07c      	beq.n	8001724 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	f003 0301 	and.w	r3, r3, #1
 8001630:	2b00      	cmp	r3, #0
 8001632:	d023      	beq.n	800167c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2201      	movs	r2, #1
 800163a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d003      	beq.n	800164e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f000 f983 	bl	8001952 <HAL_CAN_TxMailbox0CompleteCallback>
 800164c:	e016      	b.n	800167c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	f003 0304 	and.w	r3, r3, #4
 8001654:	2b00      	cmp	r3, #0
 8001656:	d004      	beq.n	8001662 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800165e:	627b      	str	r3, [r7, #36]	; 0x24
 8001660:	e00c      	b.n	800167c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	f003 0308 	and.w	r3, r3, #8
 8001668:	2b00      	cmp	r3, #0
 800166a:	d004      	beq.n	8001676 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800166c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001672:	627b      	str	r3, [r7, #36]	; 0x24
 8001674:	e002      	b.n	800167c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f000 f986 	bl	8001988 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001682:	2b00      	cmp	r3, #0
 8001684:	d024      	beq.n	80016d0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800168e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001696:	2b00      	cmp	r3, #0
 8001698:	d003      	beq.n	80016a2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f000 f962 	bl	8001964 <HAL_CAN_TxMailbox1CompleteCallback>
 80016a0:	e016      	b.n	80016d0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d004      	beq.n	80016b6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80016ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016b2:	627b      	str	r3, [r7, #36]	; 0x24
 80016b4:	e00c      	b.n	80016d0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d004      	beq.n	80016ca <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80016c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016c6:	627b      	str	r3, [r7, #36]	; 0x24
 80016c8:	e002      	b.n	80016d0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f000 f965 	bl	800199a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d024      	beq.n	8001724 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016e2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d003      	beq.n	80016f6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f000 f941 	bl	8001976 <HAL_CAN_TxMailbox2CompleteCallback>
 80016f4:	e016      	b.n	8001724 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d004      	beq.n	800170a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001702:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001706:	627b      	str	r3, [r7, #36]	; 0x24
 8001708:	e00c      	b.n	8001724 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d004      	beq.n	800171e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001716:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800171a:	627b      	str	r3, [r7, #36]	; 0x24
 800171c:	e002      	b.n	8001724 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f000 f944 	bl	80019ac <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001724:	6a3b      	ldr	r3, [r7, #32]
 8001726:	f003 0308 	and.w	r3, r3, #8
 800172a:	2b00      	cmp	r3, #0
 800172c:	d00c      	beq.n	8001748 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	f003 0310 	and.w	r3, r3, #16
 8001734:	2b00      	cmp	r3, #0
 8001736:	d007      	beq.n	8001748 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800173e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2210      	movs	r2, #16
 8001746:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001748:	6a3b      	ldr	r3, [r7, #32]
 800174a:	f003 0304 	and.w	r3, r3, #4
 800174e:	2b00      	cmp	r3, #0
 8001750:	d00b      	beq.n	800176a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	f003 0308 	and.w	r3, r3, #8
 8001758:	2b00      	cmp	r3, #0
 800175a:	d006      	beq.n	800176a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2208      	movs	r2, #8
 8001762:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f000 f933 	bl	80019d0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800176a:	6a3b      	ldr	r3, [r7, #32]
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d009      	beq.n	8001788 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	f003 0303 	and.w	r3, r3, #3
 800177e:	2b00      	cmp	r3, #0
 8001780:	d002      	beq.n	8001788 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f000 f91b 	bl	80019be <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001788:	6a3b      	ldr	r3, [r7, #32]
 800178a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800178e:	2b00      	cmp	r3, #0
 8001790:	d00c      	beq.n	80017ac <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	f003 0310 	and.w	r3, r3, #16
 8001798:	2b00      	cmp	r3, #0
 800179a:	d007      	beq.n	80017ac <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800179c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2210      	movs	r2, #16
 80017aa:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80017ac:	6a3b      	ldr	r3, [r7, #32]
 80017ae:	f003 0320 	and.w	r3, r3, #32
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d00b      	beq.n	80017ce <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	f003 0308 	and.w	r3, r3, #8
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d006      	beq.n	80017ce <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2208      	movs	r2, #8
 80017c6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f000 f913 	bl	80019f4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80017ce:	6a3b      	ldr	r3, [r7, #32]
 80017d0:	f003 0310 	and.w	r3, r3, #16
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d009      	beq.n	80017ec <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	f003 0303 	and.w	r3, r3, #3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d002      	beq.n	80017ec <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f000 f8fb 	bl	80019e2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80017ec:	6a3b      	ldr	r3, [r7, #32]
 80017ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d00b      	beq.n	800180e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	f003 0310 	and.w	r3, r3, #16
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d006      	beq.n	800180e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2210      	movs	r2, #16
 8001806:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f000 f8fc 	bl	8001a06 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800180e:	6a3b      	ldr	r3, [r7, #32]
 8001810:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d00b      	beq.n	8001830 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	f003 0308 	and.w	r3, r3, #8
 800181e:	2b00      	cmp	r3, #0
 8001820:	d006      	beq.n	8001830 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2208      	movs	r2, #8
 8001828:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f000 f8f4 	bl	8001a18 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001830:	6a3b      	ldr	r3, [r7, #32]
 8001832:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d07b      	beq.n	8001932 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	f003 0304 	and.w	r3, r3, #4
 8001840:	2b00      	cmp	r3, #0
 8001842:	d072      	beq.n	800192a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001844:	6a3b      	ldr	r3, [r7, #32]
 8001846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184a:	2b00      	cmp	r3, #0
 800184c:	d008      	beq.n	8001860 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001854:	2b00      	cmp	r3, #0
 8001856:	d003      	beq.n	8001860 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185a:	f043 0301 	orr.w	r3, r3, #1
 800185e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001860:	6a3b      	ldr	r3, [r7, #32]
 8001862:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001866:	2b00      	cmp	r3, #0
 8001868:	d008      	beq.n	800187c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001870:	2b00      	cmp	r3, #0
 8001872:	d003      	beq.n	800187c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001876:	f043 0302 	orr.w	r3, r3, #2
 800187a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800187c:	6a3b      	ldr	r3, [r7, #32]
 800187e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001882:	2b00      	cmp	r3, #0
 8001884:	d008      	beq.n	8001898 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800188c:	2b00      	cmp	r3, #0
 800188e:	d003      	beq.n	8001898 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001892:	f043 0304 	orr.w	r3, r3, #4
 8001896:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001898:	6a3b      	ldr	r3, [r7, #32]
 800189a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d043      	beq.n	800192a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d03e      	beq.n	800192a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80018b2:	2b60      	cmp	r3, #96	; 0x60
 80018b4:	d02b      	beq.n	800190e <HAL_CAN_IRQHandler+0x32a>
 80018b6:	2b60      	cmp	r3, #96	; 0x60
 80018b8:	d82e      	bhi.n	8001918 <HAL_CAN_IRQHandler+0x334>
 80018ba:	2b50      	cmp	r3, #80	; 0x50
 80018bc:	d022      	beq.n	8001904 <HAL_CAN_IRQHandler+0x320>
 80018be:	2b50      	cmp	r3, #80	; 0x50
 80018c0:	d82a      	bhi.n	8001918 <HAL_CAN_IRQHandler+0x334>
 80018c2:	2b40      	cmp	r3, #64	; 0x40
 80018c4:	d019      	beq.n	80018fa <HAL_CAN_IRQHandler+0x316>
 80018c6:	2b40      	cmp	r3, #64	; 0x40
 80018c8:	d826      	bhi.n	8001918 <HAL_CAN_IRQHandler+0x334>
 80018ca:	2b30      	cmp	r3, #48	; 0x30
 80018cc:	d010      	beq.n	80018f0 <HAL_CAN_IRQHandler+0x30c>
 80018ce:	2b30      	cmp	r3, #48	; 0x30
 80018d0:	d822      	bhi.n	8001918 <HAL_CAN_IRQHandler+0x334>
 80018d2:	2b10      	cmp	r3, #16
 80018d4:	d002      	beq.n	80018dc <HAL_CAN_IRQHandler+0x2f8>
 80018d6:	2b20      	cmp	r3, #32
 80018d8:	d005      	beq.n	80018e6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80018da:	e01d      	b.n	8001918 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80018dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018de:	f043 0308 	orr.w	r3, r3, #8
 80018e2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80018e4:	e019      	b.n	800191a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80018e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e8:	f043 0310 	orr.w	r3, r3, #16
 80018ec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80018ee:	e014      	b.n	800191a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80018f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f2:	f043 0320 	orr.w	r3, r3, #32
 80018f6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80018f8:	e00f      	b.n	800191a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001902:	e00a      	b.n	800191a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800190a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800190c:	e005      	b.n	800191a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001910:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001914:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001916:	e000      	b.n	800191a <HAL_CAN_IRQHandler+0x336>
            break;
 8001918:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	699a      	ldr	r2, [r3, #24]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001928:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2204      	movs	r2, #4
 8001930:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	2b00      	cmp	r3, #0
 8001936:	d008      	beq.n	800194a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800193c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193e:	431a      	orrs	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f000 f870 	bl	8001a2a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800194a:	bf00      	nop
 800194c:	3728      	adds	r7, #40	; 0x28
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001952:	b480      	push	{r7}
 8001954:	b083      	sub	sp, #12
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr

08001964 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr

08001976 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001976:	b480      	push	{r7}
 8001978:	b083      	sub	sp, #12
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr

08001988 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	bc80      	pop	{r7}
 8001998:	4770      	bx	lr

0800199a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800199a:	b480      	push	{r7}
 800199c:	b083      	sub	sp, #12
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr

080019ac <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bc80      	pop	{r7}
 80019bc:	4770      	bx	lr

080019be <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr

080019d0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	bc80      	pop	{r7}
 80019e0:	4770      	bx	lr

080019e2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b083      	sub	sp, #12
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80019ea:	bf00      	nop
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr

080019f4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bc80      	pop	{r7}
 8001a04:	4770      	bx	lr

08001a06 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b083      	sub	sp, #12
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bc80      	pop	{r7}
 8001a16:	4770      	bx	lr

08001a18 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bc80      	pop	{r7}
 8001a28:	4770      	bx	lr

08001a2a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	b083      	sub	sp, #12
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001a32:	bf00      	nop
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr

08001a3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a4c:	4b0c      	ldr	r3, [pc, #48]	; (8001a80 <__NVIC_SetPriorityGrouping+0x44>)
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a52:	68ba      	ldr	r2, [r7, #8]
 8001a54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a58:	4013      	ands	r3, r2
 8001a5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a6e:	4a04      	ldr	r2, [pc, #16]	; (8001a80 <__NVIC_SetPriorityGrouping+0x44>)
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	60d3      	str	r3, [r2, #12]
}
 8001a74:	bf00      	nop
 8001a76:	3714      	adds	r7, #20
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bc80      	pop	{r7}
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a88:	4b04      	ldr	r3, [pc, #16]	; (8001a9c <__NVIC_GetPriorityGrouping+0x18>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	0a1b      	lsrs	r3, r3, #8
 8001a8e:	f003 0307 	and.w	r3, r3, #7
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bc80      	pop	{r7}
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	db0b      	blt.n	8001aca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	f003 021f 	and.w	r2, r3, #31
 8001ab8:	4906      	ldr	r1, [pc, #24]	; (8001ad4 <__NVIC_EnableIRQ+0x34>)
 8001aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abe:	095b      	lsrs	r3, r3, #5
 8001ac0:	2001      	movs	r0, #1
 8001ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr
 8001ad4:	e000e100 	.word	0xe000e100

08001ad8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	6039      	str	r1, [r7, #0]
 8001ae2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	db0a      	blt.n	8001b02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	b2da      	uxtb	r2, r3
 8001af0:	490c      	ldr	r1, [pc, #48]	; (8001b24 <__NVIC_SetPriority+0x4c>)
 8001af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af6:	0112      	lsls	r2, r2, #4
 8001af8:	b2d2      	uxtb	r2, r2
 8001afa:	440b      	add	r3, r1
 8001afc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b00:	e00a      	b.n	8001b18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	b2da      	uxtb	r2, r3
 8001b06:	4908      	ldr	r1, [pc, #32]	; (8001b28 <__NVIC_SetPriority+0x50>)
 8001b08:	79fb      	ldrb	r3, [r7, #7]
 8001b0a:	f003 030f 	and.w	r3, r3, #15
 8001b0e:	3b04      	subs	r3, #4
 8001b10:	0112      	lsls	r2, r2, #4
 8001b12:	b2d2      	uxtb	r2, r2
 8001b14:	440b      	add	r3, r1
 8001b16:	761a      	strb	r2, [r3, #24]
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bc80      	pop	{r7}
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	e000e100 	.word	0xe000e100
 8001b28:	e000ed00 	.word	0xe000ed00

08001b2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b089      	sub	sp, #36	; 0x24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	f1c3 0307 	rsb	r3, r3, #7
 8001b46:	2b04      	cmp	r3, #4
 8001b48:	bf28      	it	cs
 8001b4a:	2304      	movcs	r3, #4
 8001b4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	3304      	adds	r3, #4
 8001b52:	2b06      	cmp	r3, #6
 8001b54:	d902      	bls.n	8001b5c <NVIC_EncodePriority+0x30>
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	3b03      	subs	r3, #3
 8001b5a:	e000      	b.n	8001b5e <NVIC_EncodePriority+0x32>
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b60:	f04f 32ff 	mov.w	r2, #4294967295
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43da      	mvns	r2, r3
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	401a      	ands	r2, r3
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b74:	f04f 31ff 	mov.w	r1, #4294967295
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7e:	43d9      	mvns	r1, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b84:	4313      	orrs	r3, r2
         );
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3724      	adds	r7, #36	; 0x24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr

08001b90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f7ff ff4f 	bl	8001a3c <__NVIC_SetPriorityGrouping>
}
 8001b9e:	bf00      	nop
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b086      	sub	sp, #24
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	4603      	mov	r3, r0
 8001bae:	60b9      	str	r1, [r7, #8]
 8001bb0:	607a      	str	r2, [r7, #4]
 8001bb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bb8:	f7ff ff64 	bl	8001a84 <__NVIC_GetPriorityGrouping>
 8001bbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	68b9      	ldr	r1, [r7, #8]
 8001bc2:	6978      	ldr	r0, [r7, #20]
 8001bc4:	f7ff ffb2 	bl	8001b2c <NVIC_EncodePriority>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bce:	4611      	mov	r1, r2
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff ff81 	bl	8001ad8 <__NVIC_SetPriority>
}
 8001bd6:	bf00      	nop
 8001bd8:	3718      	adds	r7, #24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b082      	sub	sp, #8
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	4603      	mov	r3, r0
 8001be6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff ff57 	bl	8001aa0 <__NVIC_EnableIRQ>
}
 8001bf2:	bf00      	nop
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
	...

08001bfc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b08b      	sub	sp, #44	; 0x2c
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c06:	2300      	movs	r3, #0
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c0e:	e169      	b.n	8001ee4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c10:	2201      	movs	r2, #1
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	69fa      	ldr	r2, [r7, #28]
 8001c20:	4013      	ands	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	f040 8158 	bne.w	8001ede <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	4a9a      	ldr	r2, [pc, #616]	; (8001e9c <HAL_GPIO_Init+0x2a0>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d05e      	beq.n	8001cf6 <HAL_GPIO_Init+0xfa>
 8001c38:	4a98      	ldr	r2, [pc, #608]	; (8001e9c <HAL_GPIO_Init+0x2a0>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d875      	bhi.n	8001d2a <HAL_GPIO_Init+0x12e>
 8001c3e:	4a98      	ldr	r2, [pc, #608]	; (8001ea0 <HAL_GPIO_Init+0x2a4>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d058      	beq.n	8001cf6 <HAL_GPIO_Init+0xfa>
 8001c44:	4a96      	ldr	r2, [pc, #600]	; (8001ea0 <HAL_GPIO_Init+0x2a4>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d86f      	bhi.n	8001d2a <HAL_GPIO_Init+0x12e>
 8001c4a:	4a96      	ldr	r2, [pc, #600]	; (8001ea4 <HAL_GPIO_Init+0x2a8>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d052      	beq.n	8001cf6 <HAL_GPIO_Init+0xfa>
 8001c50:	4a94      	ldr	r2, [pc, #592]	; (8001ea4 <HAL_GPIO_Init+0x2a8>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d869      	bhi.n	8001d2a <HAL_GPIO_Init+0x12e>
 8001c56:	4a94      	ldr	r2, [pc, #592]	; (8001ea8 <HAL_GPIO_Init+0x2ac>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d04c      	beq.n	8001cf6 <HAL_GPIO_Init+0xfa>
 8001c5c:	4a92      	ldr	r2, [pc, #584]	; (8001ea8 <HAL_GPIO_Init+0x2ac>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d863      	bhi.n	8001d2a <HAL_GPIO_Init+0x12e>
 8001c62:	4a92      	ldr	r2, [pc, #584]	; (8001eac <HAL_GPIO_Init+0x2b0>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d046      	beq.n	8001cf6 <HAL_GPIO_Init+0xfa>
 8001c68:	4a90      	ldr	r2, [pc, #576]	; (8001eac <HAL_GPIO_Init+0x2b0>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d85d      	bhi.n	8001d2a <HAL_GPIO_Init+0x12e>
 8001c6e:	2b12      	cmp	r3, #18
 8001c70:	d82a      	bhi.n	8001cc8 <HAL_GPIO_Init+0xcc>
 8001c72:	2b12      	cmp	r3, #18
 8001c74:	d859      	bhi.n	8001d2a <HAL_GPIO_Init+0x12e>
 8001c76:	a201      	add	r2, pc, #4	; (adr r2, 8001c7c <HAL_GPIO_Init+0x80>)
 8001c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c7c:	08001cf7 	.word	0x08001cf7
 8001c80:	08001cd1 	.word	0x08001cd1
 8001c84:	08001ce3 	.word	0x08001ce3
 8001c88:	08001d25 	.word	0x08001d25
 8001c8c:	08001d2b 	.word	0x08001d2b
 8001c90:	08001d2b 	.word	0x08001d2b
 8001c94:	08001d2b 	.word	0x08001d2b
 8001c98:	08001d2b 	.word	0x08001d2b
 8001c9c:	08001d2b 	.word	0x08001d2b
 8001ca0:	08001d2b 	.word	0x08001d2b
 8001ca4:	08001d2b 	.word	0x08001d2b
 8001ca8:	08001d2b 	.word	0x08001d2b
 8001cac:	08001d2b 	.word	0x08001d2b
 8001cb0:	08001d2b 	.word	0x08001d2b
 8001cb4:	08001d2b 	.word	0x08001d2b
 8001cb8:	08001d2b 	.word	0x08001d2b
 8001cbc:	08001d2b 	.word	0x08001d2b
 8001cc0:	08001cd9 	.word	0x08001cd9
 8001cc4:	08001ced 	.word	0x08001ced
 8001cc8:	4a79      	ldr	r2, [pc, #484]	; (8001eb0 <HAL_GPIO_Init+0x2b4>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d013      	beq.n	8001cf6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cce:	e02c      	b.n	8001d2a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	623b      	str	r3, [r7, #32]
          break;
 8001cd6:	e029      	b.n	8001d2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	3304      	adds	r3, #4
 8001cde:	623b      	str	r3, [r7, #32]
          break;
 8001ce0:	e024      	b.n	8001d2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	3308      	adds	r3, #8
 8001ce8:	623b      	str	r3, [r7, #32]
          break;
 8001cea:	e01f      	b.n	8001d2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	330c      	adds	r3, #12
 8001cf2:	623b      	str	r3, [r7, #32]
          break;
 8001cf4:	e01a      	b.n	8001d2c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d102      	bne.n	8001d04 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cfe:	2304      	movs	r3, #4
 8001d00:	623b      	str	r3, [r7, #32]
          break;
 8001d02:	e013      	b.n	8001d2c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d105      	bne.n	8001d18 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d0c:	2308      	movs	r3, #8
 8001d0e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	69fa      	ldr	r2, [r7, #28]
 8001d14:	611a      	str	r2, [r3, #16]
          break;
 8001d16:	e009      	b.n	8001d2c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d18:	2308      	movs	r3, #8
 8001d1a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	69fa      	ldr	r2, [r7, #28]
 8001d20:	615a      	str	r2, [r3, #20]
          break;
 8001d22:	e003      	b.n	8001d2c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d24:	2300      	movs	r3, #0
 8001d26:	623b      	str	r3, [r7, #32]
          break;
 8001d28:	e000      	b.n	8001d2c <HAL_GPIO_Init+0x130>
          break;
 8001d2a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	2bff      	cmp	r3, #255	; 0xff
 8001d30:	d801      	bhi.n	8001d36 <HAL_GPIO_Init+0x13a>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	e001      	b.n	8001d3a <HAL_GPIO_Init+0x13e>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	3304      	adds	r3, #4
 8001d3a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	2bff      	cmp	r3, #255	; 0xff
 8001d40:	d802      	bhi.n	8001d48 <HAL_GPIO_Init+0x14c>
 8001d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	e002      	b.n	8001d4e <HAL_GPIO_Init+0x152>
 8001d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4a:	3b08      	subs	r3, #8
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	210f      	movs	r1, #15
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	401a      	ands	r2, r3
 8001d60:	6a39      	ldr	r1, [r7, #32]
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	fa01 f303 	lsl.w	r3, r1, r3
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f000 80b1 	beq.w	8001ede <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d7c:	4b4d      	ldr	r3, [pc, #308]	; (8001eb4 <HAL_GPIO_Init+0x2b8>)
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	4a4c      	ldr	r2, [pc, #304]	; (8001eb4 <HAL_GPIO_Init+0x2b8>)
 8001d82:	f043 0301 	orr.w	r3, r3, #1
 8001d86:	6193      	str	r3, [r2, #24]
 8001d88:	4b4a      	ldr	r3, [pc, #296]	; (8001eb4 <HAL_GPIO_Init+0x2b8>)
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	60bb      	str	r3, [r7, #8]
 8001d92:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d94:	4a48      	ldr	r2, [pc, #288]	; (8001eb8 <HAL_GPIO_Init+0x2bc>)
 8001d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d98:	089b      	lsrs	r3, r3, #2
 8001d9a:	3302      	adds	r3, #2
 8001d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da4:	f003 0303 	and.w	r3, r3, #3
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	220f      	movs	r2, #15
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	43db      	mvns	r3, r3
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	4013      	ands	r3, r2
 8001db6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a40      	ldr	r2, [pc, #256]	; (8001ebc <HAL_GPIO_Init+0x2c0>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d013      	beq.n	8001de8 <HAL_GPIO_Init+0x1ec>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a3f      	ldr	r2, [pc, #252]	; (8001ec0 <HAL_GPIO_Init+0x2c4>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d00d      	beq.n	8001de4 <HAL_GPIO_Init+0x1e8>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a3e      	ldr	r2, [pc, #248]	; (8001ec4 <HAL_GPIO_Init+0x2c8>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d007      	beq.n	8001de0 <HAL_GPIO_Init+0x1e4>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a3d      	ldr	r2, [pc, #244]	; (8001ec8 <HAL_GPIO_Init+0x2cc>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d101      	bne.n	8001ddc <HAL_GPIO_Init+0x1e0>
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e006      	b.n	8001dea <HAL_GPIO_Init+0x1ee>
 8001ddc:	2304      	movs	r3, #4
 8001dde:	e004      	b.n	8001dea <HAL_GPIO_Init+0x1ee>
 8001de0:	2302      	movs	r3, #2
 8001de2:	e002      	b.n	8001dea <HAL_GPIO_Init+0x1ee>
 8001de4:	2301      	movs	r3, #1
 8001de6:	e000      	b.n	8001dea <HAL_GPIO_Init+0x1ee>
 8001de8:	2300      	movs	r3, #0
 8001dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dec:	f002 0203 	and.w	r2, r2, #3
 8001df0:	0092      	lsls	r2, r2, #2
 8001df2:	4093      	lsls	r3, r2
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001dfa:	492f      	ldr	r1, [pc, #188]	; (8001eb8 <HAL_GPIO_Init+0x2bc>)
 8001dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfe:	089b      	lsrs	r3, r3, #2
 8001e00:	3302      	adds	r3, #2
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d006      	beq.n	8001e22 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e14:	4b2d      	ldr	r3, [pc, #180]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	492c      	ldr	r1, [pc, #176]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	608b      	str	r3, [r1, #8]
 8001e20:	e006      	b.n	8001e30 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e22:	4b2a      	ldr	r3, [pc, #168]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e24:	689a      	ldr	r2, [r3, #8]
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	4928      	ldr	r1, [pc, #160]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d006      	beq.n	8001e4a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e3c:	4b23      	ldr	r3, [pc, #140]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e3e:	68da      	ldr	r2, [r3, #12]
 8001e40:	4922      	ldr	r1, [pc, #136]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	60cb      	str	r3, [r1, #12]
 8001e48:	e006      	b.n	8001e58 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e4a:	4b20      	ldr	r3, [pc, #128]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e4c:	68da      	ldr	r2, [r3, #12]
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	43db      	mvns	r3, r3
 8001e52:	491e      	ldr	r1, [pc, #120]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e54:	4013      	ands	r3, r2
 8001e56:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d006      	beq.n	8001e72 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e64:	4b19      	ldr	r3, [pc, #100]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e66:	685a      	ldr	r2, [r3, #4]
 8001e68:	4918      	ldr	r1, [pc, #96]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	604b      	str	r3, [r1, #4]
 8001e70:	e006      	b.n	8001e80 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e72:	4b16      	ldr	r3, [pc, #88]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e74:	685a      	ldr	r2, [r3, #4]
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	4914      	ldr	r1, [pc, #80]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d021      	beq.n	8001ed0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e8c:	4b0f      	ldr	r3, [pc, #60]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	490e      	ldr	r1, [pc, #56]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	600b      	str	r3, [r1, #0]
 8001e98:	e021      	b.n	8001ede <HAL_GPIO_Init+0x2e2>
 8001e9a:	bf00      	nop
 8001e9c:	10320000 	.word	0x10320000
 8001ea0:	10310000 	.word	0x10310000
 8001ea4:	10220000 	.word	0x10220000
 8001ea8:	10210000 	.word	0x10210000
 8001eac:	10120000 	.word	0x10120000
 8001eb0:	10110000 	.word	0x10110000
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	40010000 	.word	0x40010000
 8001ebc:	40010800 	.word	0x40010800
 8001ec0:	40010c00 	.word	0x40010c00
 8001ec4:	40011000 	.word	0x40011000
 8001ec8:	40011400 	.word	0x40011400
 8001ecc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <HAL_GPIO_Init+0x304>)
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	4909      	ldr	r1, [pc, #36]	; (8001f00 <HAL_GPIO_Init+0x304>)
 8001eda:	4013      	ands	r3, r2
 8001edc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eea:	fa22 f303 	lsr.w	r3, r2, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f47f ae8e 	bne.w	8001c10 <HAL_GPIO_Init+0x14>
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	bf00      	nop
 8001ef8:	372c      	adds	r7, #44	; 0x2c
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr
 8001f00:	40010400 	.word	0x40010400

08001f04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	807b      	strh	r3, [r7, #2]
 8001f10:	4613      	mov	r3, r2
 8001f12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f14:	787b      	ldrb	r3, [r7, #1]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f1a:	887a      	ldrh	r2, [r7, #2]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f20:	e003      	b.n	8001f2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f22:	887b      	ldrh	r3, [r7, #2]
 8001f24:	041a      	lsls	r2, r3, #16
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	611a      	str	r2, [r3, #16]
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bc80      	pop	{r7}
 8001f32:	4770      	bx	lr

08001f34 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f46:	887a      	ldrh	r2, [r7, #2]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	041a      	lsls	r2, r3, #16
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	43d9      	mvns	r1, r3
 8001f52:	887b      	ldrh	r3, [r7, #2]
 8001f54:	400b      	ands	r3, r1
 8001f56:	431a      	orrs	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	611a      	str	r2, [r3, #16]
}
 8001f5c:	bf00      	nop
 8001f5e:	3714      	adds	r7, #20
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bc80      	pop	{r7}
 8001f64:	4770      	bx	lr
	...

08001f68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e272      	b.n	8002460 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f000 8087 	beq.w	8002096 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f88:	4b92      	ldr	r3, [pc, #584]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 030c 	and.w	r3, r3, #12
 8001f90:	2b04      	cmp	r3, #4
 8001f92:	d00c      	beq.n	8001fae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f94:	4b8f      	ldr	r3, [pc, #572]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 030c 	and.w	r3, r3, #12
 8001f9c:	2b08      	cmp	r3, #8
 8001f9e:	d112      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x5e>
 8001fa0:	4b8c      	ldr	r3, [pc, #560]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fac:	d10b      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fae:	4b89      	ldr	r3, [pc, #548]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d06c      	beq.n	8002094 <HAL_RCC_OscConfig+0x12c>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d168      	bne.n	8002094 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e24c      	b.n	8002460 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fce:	d106      	bne.n	8001fde <HAL_RCC_OscConfig+0x76>
 8001fd0:	4b80      	ldr	r3, [pc, #512]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a7f      	ldr	r2, [pc, #508]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8001fd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fda:	6013      	str	r3, [r2, #0]
 8001fdc:	e02e      	b.n	800203c <HAL_RCC_OscConfig+0xd4>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d10c      	bne.n	8002000 <HAL_RCC_OscConfig+0x98>
 8001fe6:	4b7b      	ldr	r3, [pc, #492]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a7a      	ldr	r2, [pc, #488]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8001fec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ff0:	6013      	str	r3, [r2, #0]
 8001ff2:	4b78      	ldr	r3, [pc, #480]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a77      	ldr	r2, [pc, #476]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ffc:	6013      	str	r3, [r2, #0]
 8001ffe:	e01d      	b.n	800203c <HAL_RCC_OscConfig+0xd4>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002008:	d10c      	bne.n	8002024 <HAL_RCC_OscConfig+0xbc>
 800200a:	4b72      	ldr	r3, [pc, #456]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a71      	ldr	r2, [pc, #452]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8002010:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002014:	6013      	str	r3, [r2, #0]
 8002016:	4b6f      	ldr	r3, [pc, #444]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a6e      	ldr	r2, [pc, #440]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 800201c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002020:	6013      	str	r3, [r2, #0]
 8002022:	e00b      	b.n	800203c <HAL_RCC_OscConfig+0xd4>
 8002024:	4b6b      	ldr	r3, [pc, #428]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a6a      	ldr	r2, [pc, #424]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 800202a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800202e:	6013      	str	r3, [r2, #0]
 8002030:	4b68      	ldr	r3, [pc, #416]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a67      	ldr	r2, [pc, #412]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8002036:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800203a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d013      	beq.n	800206c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002044:	f7fe ffca 	bl	8000fdc <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800204c:	f7fe ffc6 	bl	8000fdc <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b64      	cmp	r3, #100	; 0x64
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e200      	b.n	8002460 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800205e:	4b5d      	ldr	r3, [pc, #372]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d0f0      	beq.n	800204c <HAL_RCC_OscConfig+0xe4>
 800206a:	e014      	b.n	8002096 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206c:	f7fe ffb6 	bl	8000fdc <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002074:	f7fe ffb2 	bl	8000fdc <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b64      	cmp	r3, #100	; 0x64
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e1ec      	b.n	8002460 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002086:	4b53      	ldr	r3, [pc, #332]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1f0      	bne.n	8002074 <HAL_RCC_OscConfig+0x10c>
 8002092:	e000      	b.n	8002096 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002094:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d063      	beq.n	800216a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020a2:	4b4c      	ldr	r3, [pc, #304]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f003 030c 	and.w	r3, r3, #12
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00b      	beq.n	80020c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020ae:	4b49      	ldr	r3, [pc, #292]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f003 030c 	and.w	r3, r3, #12
 80020b6:	2b08      	cmp	r3, #8
 80020b8:	d11c      	bne.n	80020f4 <HAL_RCC_OscConfig+0x18c>
 80020ba:	4b46      	ldr	r3, [pc, #280]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d116      	bne.n	80020f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020c6:	4b43      	ldr	r3, [pc, #268]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d005      	beq.n	80020de <HAL_RCC_OscConfig+0x176>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d001      	beq.n	80020de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e1c0      	b.n	8002460 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020de:	4b3d      	ldr	r3, [pc, #244]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	4939      	ldr	r1, [pc, #228]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020f2:	e03a      	b.n	800216a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d020      	beq.n	800213e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020fc:	4b36      	ldr	r3, [pc, #216]	; (80021d8 <HAL_RCC_OscConfig+0x270>)
 80020fe:	2201      	movs	r2, #1
 8002100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002102:	f7fe ff6b 	bl	8000fdc <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800210a:	f7fe ff67 	bl	8000fdc <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e1a1      	b.n	8002460 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800211c:	4b2d      	ldr	r3, [pc, #180]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0f0      	beq.n	800210a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002128:	4b2a      	ldr	r3, [pc, #168]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	695b      	ldr	r3, [r3, #20]
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	4927      	ldr	r1, [pc, #156]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8002138:	4313      	orrs	r3, r2
 800213a:	600b      	str	r3, [r1, #0]
 800213c:	e015      	b.n	800216a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800213e:	4b26      	ldr	r3, [pc, #152]	; (80021d8 <HAL_RCC_OscConfig+0x270>)
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002144:	f7fe ff4a 	bl	8000fdc <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800214c:	f7fe ff46 	bl	8000fdc <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e180      	b.n	8002460 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800215e:	4b1d      	ldr	r3, [pc, #116]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1f0      	bne.n	800214c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0308 	and.w	r3, r3, #8
 8002172:	2b00      	cmp	r3, #0
 8002174:	d03a      	beq.n	80021ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d019      	beq.n	80021b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800217e:	4b17      	ldr	r3, [pc, #92]	; (80021dc <HAL_RCC_OscConfig+0x274>)
 8002180:	2201      	movs	r2, #1
 8002182:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002184:	f7fe ff2a 	bl	8000fdc <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800218c:	f7fe ff26 	bl	8000fdc <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e160      	b.n	8002460 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800219e:	4b0d      	ldr	r3, [pc, #52]	; (80021d4 <HAL_RCC_OscConfig+0x26c>)
 80021a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0f0      	beq.n	800218c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021aa:	2001      	movs	r0, #1
 80021ac:	f000 fafe 	bl	80027ac <RCC_Delay>
 80021b0:	e01c      	b.n	80021ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021b2:	4b0a      	ldr	r3, [pc, #40]	; (80021dc <HAL_RCC_OscConfig+0x274>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b8:	f7fe ff10 	bl	8000fdc <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021be:	e00f      	b.n	80021e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021c0:	f7fe ff0c 	bl	8000fdc <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d908      	bls.n	80021e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e146      	b.n	8002460 <HAL_RCC_OscConfig+0x4f8>
 80021d2:	bf00      	nop
 80021d4:	40021000 	.word	0x40021000
 80021d8:	42420000 	.word	0x42420000
 80021dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021e0:	4b92      	ldr	r3, [pc, #584]	; (800242c <HAL_RCC_OscConfig+0x4c4>)
 80021e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1e9      	bne.n	80021c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0304 	and.w	r3, r3, #4
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 80a6 	beq.w	8002346 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021fa:	2300      	movs	r3, #0
 80021fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021fe:	4b8b      	ldr	r3, [pc, #556]	; (800242c <HAL_RCC_OscConfig+0x4c4>)
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d10d      	bne.n	8002226 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800220a:	4b88      	ldr	r3, [pc, #544]	; (800242c <HAL_RCC_OscConfig+0x4c4>)
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	4a87      	ldr	r2, [pc, #540]	; (800242c <HAL_RCC_OscConfig+0x4c4>)
 8002210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002214:	61d3      	str	r3, [r2, #28]
 8002216:	4b85      	ldr	r3, [pc, #532]	; (800242c <HAL_RCC_OscConfig+0x4c4>)
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221e:	60bb      	str	r3, [r7, #8]
 8002220:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002222:	2301      	movs	r3, #1
 8002224:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002226:	4b82      	ldr	r3, [pc, #520]	; (8002430 <HAL_RCC_OscConfig+0x4c8>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800222e:	2b00      	cmp	r3, #0
 8002230:	d118      	bne.n	8002264 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002232:	4b7f      	ldr	r3, [pc, #508]	; (8002430 <HAL_RCC_OscConfig+0x4c8>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a7e      	ldr	r2, [pc, #504]	; (8002430 <HAL_RCC_OscConfig+0x4c8>)
 8002238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800223c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800223e:	f7fe fecd 	bl	8000fdc <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002244:	e008      	b.n	8002258 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002246:	f7fe fec9 	bl	8000fdc <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b64      	cmp	r3, #100	; 0x64
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e103      	b.n	8002460 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002258:	4b75      	ldr	r3, [pc, #468]	; (8002430 <HAL_RCC_OscConfig+0x4c8>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0f0      	beq.n	8002246 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d106      	bne.n	800227a <HAL_RCC_OscConfig+0x312>
 800226c:	4b6f      	ldr	r3, [pc, #444]	; (800242c <HAL_RCC_OscConfig+0x4c4>)
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	4a6e      	ldr	r2, [pc, #440]	; (800242c <HAL_RCC_OscConfig+0x4c4>)
 8002272:	f043 0301 	orr.w	r3, r3, #1
 8002276:	6213      	str	r3, [r2, #32]
 8002278:	e02d      	b.n	80022d6 <HAL_RCC_OscConfig+0x36e>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d10c      	bne.n	800229c <HAL_RCC_OscConfig+0x334>
 8002282:	4b6a      	ldr	r3, [pc, #424]	; (800242c <HAL_RCC_OscConfig+0x4c4>)
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	4a69      	ldr	r2, [pc, #420]	; (800242c <HAL_RCC_OscConfig+0x4c4>)
 8002288:	f023 0301 	bic.w	r3, r3, #1
 800228c:	6213      	str	r3, [r2, #32]
 800228e:	4b67      	ldr	r3, [pc, #412]	; (800242c <HAL_RCC_OscConfig+0x4c4>)
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	4a66      	ldr	r2, [pc, #408]	; (800242c <HAL_RCC_OscConfig+0x4c4>)
 8002294:	f023 0304 	bic.w	r3, r3, #4
 8002298:	6213      	str	r3, [r2, #32]
 800229a:	e01c      	b.n	80022d6 <HAL_RCC_OscConfig+0x36e>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	2b05      	cmp	r3, #5
 80022a2:	d10c      	bne.n	80022be <HAL_RCC_OscConfig+0x356>
 80022a4:	4b61      	ldr	r3, [pc, #388]	; (800242c <HAL_RCC_OscConfig+0x4c4>)
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	4a60      	ldr	r2, [pc, #384]	; (800242c <HAL_RCC_OscConfig+0x4c4>)
 80022aa:	f043 0304 	orr.w	r3, r3, #4
 80022ae:	6213      	str	r3, [r2, #32]
 80022b0:	4b5e      	ldr	r3, [pc, #376]	; (800242c <HAL_RCC_OscConfig+0x4c4>)
 80022b2:	6a1b      	ldr	r3, [r3, #32]
 80022b4:	4a5d      	ldr	r2, [pc, #372]	; (800242c <HAL_RCC_OscConfig+0x4c4>)
 80022b6:	f043 0301 	orr.w	r3, r3, #1
 80022ba:	6213      	str	r3, [r2, #32]
 80022bc:	e00b      	b.n	80022d6 <HAL_RCC_OscConfig+0x36e>
 80022be:	4b5b      	ldr	r3, [pc, #364]	; (800242c <HAL_RCC_OscConfig+0x4c4>)
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	4a5a      	ldr	r2, [pc, #360]	; (800242c <HAL_RCC_OscConfig+0x4c4>)
 80022c4:	f023 0301 	bic.w	r3, r3, #1
 80022c8:	6213      	str	r3, [r2, #32]
 80022ca:	4b58      	ldr	r3, [pc, #352]	; (800242c <HAL_RCC_OscConfig+0x4c4>)
 80022cc:	6a1b      	ldr	r3, [r3, #32]
 80022ce:	4a57      	ldr	r2, [pc, #348]	; (800242c <HAL_RCC_OscConfig+0x4c4>)
 80022d0:	f023 0304 	bic.w	r3, r3, #4
 80022d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d015      	beq.n	800230a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022de:	f7fe fe7d 	bl	8000fdc <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e4:	e00a      	b.n	80022fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022e6:	f7fe fe79 	bl	8000fdc <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e0b1      	b.n	8002460 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022fc:	4b4b      	ldr	r3, [pc, #300]	; (800242c <HAL_RCC_OscConfig+0x4c4>)
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d0ee      	beq.n	80022e6 <HAL_RCC_OscConfig+0x37e>
 8002308:	e014      	b.n	8002334 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800230a:	f7fe fe67 	bl	8000fdc <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002310:	e00a      	b.n	8002328 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002312:	f7fe fe63 	bl	8000fdc <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002320:	4293      	cmp	r3, r2
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e09b      	b.n	8002460 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002328:	4b40      	ldr	r3, [pc, #256]	; (800242c <HAL_RCC_OscConfig+0x4c4>)
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1ee      	bne.n	8002312 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002334:	7dfb      	ldrb	r3, [r7, #23]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d105      	bne.n	8002346 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800233a:	4b3c      	ldr	r3, [pc, #240]	; (800242c <HAL_RCC_OscConfig+0x4c4>)
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	4a3b      	ldr	r2, [pc, #236]	; (800242c <HAL_RCC_OscConfig+0x4c4>)
 8002340:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002344:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	2b00      	cmp	r3, #0
 800234c:	f000 8087 	beq.w	800245e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002350:	4b36      	ldr	r3, [pc, #216]	; (800242c <HAL_RCC_OscConfig+0x4c4>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 030c 	and.w	r3, r3, #12
 8002358:	2b08      	cmp	r3, #8
 800235a:	d061      	beq.n	8002420 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	69db      	ldr	r3, [r3, #28]
 8002360:	2b02      	cmp	r3, #2
 8002362:	d146      	bne.n	80023f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002364:	4b33      	ldr	r3, [pc, #204]	; (8002434 <HAL_RCC_OscConfig+0x4cc>)
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236a:	f7fe fe37 	bl	8000fdc <HAL_GetTick>
 800236e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002370:	e008      	b.n	8002384 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002372:	f7fe fe33 	bl	8000fdc <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e06d      	b.n	8002460 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002384:	4b29      	ldr	r3, [pc, #164]	; (800242c <HAL_RCC_OscConfig+0x4c4>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1f0      	bne.n	8002372 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002398:	d108      	bne.n	80023ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800239a:	4b24      	ldr	r3, [pc, #144]	; (800242c <HAL_RCC_OscConfig+0x4c4>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	4921      	ldr	r1, [pc, #132]	; (800242c <HAL_RCC_OscConfig+0x4c4>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023ac:	4b1f      	ldr	r3, [pc, #124]	; (800242c <HAL_RCC_OscConfig+0x4c4>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a19      	ldr	r1, [r3, #32]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023bc:	430b      	orrs	r3, r1
 80023be:	491b      	ldr	r1, [pc, #108]	; (800242c <HAL_RCC_OscConfig+0x4c4>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023c4:	4b1b      	ldr	r3, [pc, #108]	; (8002434 <HAL_RCC_OscConfig+0x4cc>)
 80023c6:	2201      	movs	r2, #1
 80023c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ca:	f7fe fe07 	bl	8000fdc <HAL_GetTick>
 80023ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023d0:	e008      	b.n	80023e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d2:	f7fe fe03 	bl	8000fdc <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e03d      	b.n	8002460 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023e4:	4b11      	ldr	r3, [pc, #68]	; (800242c <HAL_RCC_OscConfig+0x4c4>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d0f0      	beq.n	80023d2 <HAL_RCC_OscConfig+0x46a>
 80023f0:	e035      	b.n	800245e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f2:	4b10      	ldr	r3, [pc, #64]	; (8002434 <HAL_RCC_OscConfig+0x4cc>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f8:	f7fe fdf0 	bl	8000fdc <HAL_GetTick>
 80023fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002400:	f7fe fdec 	bl	8000fdc <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e026      	b.n	8002460 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002412:	4b06      	ldr	r3, [pc, #24]	; (800242c <HAL_RCC_OscConfig+0x4c4>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1f0      	bne.n	8002400 <HAL_RCC_OscConfig+0x498>
 800241e:	e01e      	b.n	800245e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	69db      	ldr	r3, [r3, #28]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d107      	bne.n	8002438 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e019      	b.n	8002460 <HAL_RCC_OscConfig+0x4f8>
 800242c:	40021000 	.word	0x40021000
 8002430:	40007000 	.word	0x40007000
 8002434:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002438:	4b0b      	ldr	r3, [pc, #44]	; (8002468 <HAL_RCC_OscConfig+0x500>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	429a      	cmp	r2, r3
 800244a:	d106      	bne.n	800245a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002456:	429a      	cmp	r2, r3
 8002458:	d001      	beq.n	800245e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e000      	b.n	8002460 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	3718      	adds	r7, #24
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40021000 	.word	0x40021000

0800246c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d101      	bne.n	8002480 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e0d0      	b.n	8002622 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002480:	4b6a      	ldr	r3, [pc, #424]	; (800262c <HAL_RCC_ClockConfig+0x1c0>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	429a      	cmp	r2, r3
 800248c:	d910      	bls.n	80024b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800248e:	4b67      	ldr	r3, [pc, #412]	; (800262c <HAL_RCC_ClockConfig+0x1c0>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f023 0207 	bic.w	r2, r3, #7
 8002496:	4965      	ldr	r1, [pc, #404]	; (800262c <HAL_RCC_ClockConfig+0x1c0>)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	4313      	orrs	r3, r2
 800249c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800249e:	4b63      	ldr	r3, [pc, #396]	; (800262c <HAL_RCC_ClockConfig+0x1c0>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0307 	and.w	r3, r3, #7
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d001      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e0b8      	b.n	8002622 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d020      	beq.n	80024fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0304 	and.w	r3, r3, #4
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d005      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024c8:	4b59      	ldr	r3, [pc, #356]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	4a58      	ldr	r2, [pc, #352]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80024ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0308 	and.w	r3, r3, #8
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d005      	beq.n	80024ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024e0:	4b53      	ldr	r3, [pc, #332]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	4a52      	ldr	r2, [pc, #328]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80024e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80024ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024ec:	4b50      	ldr	r3, [pc, #320]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	494d      	ldr	r1, [pc, #308]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b00      	cmp	r3, #0
 8002508:	d040      	beq.n	800258c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d107      	bne.n	8002522 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002512:	4b47      	ldr	r3, [pc, #284]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d115      	bne.n	800254a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e07f      	b.n	8002622 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b02      	cmp	r3, #2
 8002528:	d107      	bne.n	800253a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800252a:	4b41      	ldr	r3, [pc, #260]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d109      	bne.n	800254a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e073      	b.n	8002622 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800253a:	4b3d      	ldr	r3, [pc, #244]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e06b      	b.n	8002622 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800254a:	4b39      	ldr	r3, [pc, #228]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f023 0203 	bic.w	r2, r3, #3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	4936      	ldr	r1, [pc, #216]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 8002558:	4313      	orrs	r3, r2
 800255a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800255c:	f7fe fd3e 	bl	8000fdc <HAL_GetTick>
 8002560:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002562:	e00a      	b.n	800257a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002564:	f7fe fd3a 	bl	8000fdc <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002572:	4293      	cmp	r3, r2
 8002574:	d901      	bls.n	800257a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e053      	b.n	8002622 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800257a:	4b2d      	ldr	r3, [pc, #180]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f003 020c 	and.w	r2, r3, #12
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	429a      	cmp	r2, r3
 800258a:	d1eb      	bne.n	8002564 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800258c:	4b27      	ldr	r3, [pc, #156]	; (800262c <HAL_RCC_ClockConfig+0x1c0>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	429a      	cmp	r2, r3
 8002598:	d210      	bcs.n	80025bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800259a:	4b24      	ldr	r3, [pc, #144]	; (800262c <HAL_RCC_ClockConfig+0x1c0>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f023 0207 	bic.w	r2, r3, #7
 80025a2:	4922      	ldr	r1, [pc, #136]	; (800262c <HAL_RCC_ClockConfig+0x1c0>)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025aa:	4b20      	ldr	r3, [pc, #128]	; (800262c <HAL_RCC_ClockConfig+0x1c0>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d001      	beq.n	80025bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e032      	b.n	8002622 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d008      	beq.n	80025da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025c8:	4b19      	ldr	r3, [pc, #100]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	4916      	ldr	r1, [pc, #88]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0308 	and.w	r3, r3, #8
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d009      	beq.n	80025fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025e6:	4b12      	ldr	r3, [pc, #72]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	490e      	ldr	r1, [pc, #56]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025fa:	f000 f821 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 80025fe:	4602      	mov	r2, r0
 8002600:	4b0b      	ldr	r3, [pc, #44]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	091b      	lsrs	r3, r3, #4
 8002606:	f003 030f 	and.w	r3, r3, #15
 800260a:	490a      	ldr	r1, [pc, #40]	; (8002634 <HAL_RCC_ClockConfig+0x1c8>)
 800260c:	5ccb      	ldrb	r3, [r1, r3]
 800260e:	fa22 f303 	lsr.w	r3, r2, r3
 8002612:	4a09      	ldr	r2, [pc, #36]	; (8002638 <HAL_RCC_ClockConfig+0x1cc>)
 8002614:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002616:	4b09      	ldr	r3, [pc, #36]	; (800263c <HAL_RCC_ClockConfig+0x1d0>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f7fe fb8e 	bl	8000d3c <HAL_InitTick>

  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40022000 	.word	0x40022000
 8002630:	40021000 	.word	0x40021000
 8002634:	08006590 	.word	0x08006590
 8002638:	20000000 	.word	0x20000000
 800263c:	20000004 	.word	0x20000004

08002640 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002640:	b480      	push	{r7}
 8002642:	b087      	sub	sp, #28
 8002644:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002646:	2300      	movs	r3, #0
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	2300      	movs	r3, #0
 800264c:	60bb      	str	r3, [r7, #8]
 800264e:	2300      	movs	r3, #0
 8002650:	617b      	str	r3, [r7, #20]
 8002652:	2300      	movs	r3, #0
 8002654:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002656:	2300      	movs	r3, #0
 8002658:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800265a:	4b1e      	ldr	r3, [pc, #120]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x94>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f003 030c 	and.w	r3, r3, #12
 8002666:	2b04      	cmp	r3, #4
 8002668:	d002      	beq.n	8002670 <HAL_RCC_GetSysClockFreq+0x30>
 800266a:	2b08      	cmp	r3, #8
 800266c:	d003      	beq.n	8002676 <HAL_RCC_GetSysClockFreq+0x36>
 800266e:	e027      	b.n	80026c0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002670:	4b19      	ldr	r3, [pc, #100]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002672:	613b      	str	r3, [r7, #16]
      break;
 8002674:	e027      	b.n	80026c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	0c9b      	lsrs	r3, r3, #18
 800267a:	f003 030f 	and.w	r3, r3, #15
 800267e:	4a17      	ldr	r2, [pc, #92]	; (80026dc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002680:	5cd3      	ldrb	r3, [r2, r3]
 8002682:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d010      	beq.n	80026b0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800268e:	4b11      	ldr	r3, [pc, #68]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	0c5b      	lsrs	r3, r3, #17
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	4a11      	ldr	r2, [pc, #68]	; (80026e0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800269a:	5cd3      	ldrb	r3, [r2, r3]
 800269c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a0d      	ldr	r2, [pc, #52]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80026a2:	fb03 f202 	mul.w	r2, r3, r2
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ac:	617b      	str	r3, [r7, #20]
 80026ae:	e004      	b.n	80026ba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a0c      	ldr	r2, [pc, #48]	; (80026e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80026b4:	fb02 f303 	mul.w	r3, r2, r3
 80026b8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	613b      	str	r3, [r7, #16]
      break;
 80026be:	e002      	b.n	80026c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026c0:	4b05      	ldr	r3, [pc, #20]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80026c2:	613b      	str	r3, [r7, #16]
      break;
 80026c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026c6:	693b      	ldr	r3, [r7, #16]
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	371c      	adds	r7, #28
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bc80      	pop	{r7}
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	40021000 	.word	0x40021000
 80026d8:	007a1200 	.word	0x007a1200
 80026dc:	080065a8 	.word	0x080065a8
 80026e0:	080065b8 	.word	0x080065b8
 80026e4:	003d0900 	.word	0x003d0900

080026e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026ec:	4b02      	ldr	r3, [pc, #8]	; (80026f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80026ee:	681b      	ldr	r3, [r3, #0]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr
 80026f8:	20000000 	.word	0x20000000

080026fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002700:	f7ff fff2 	bl	80026e8 <HAL_RCC_GetHCLKFreq>
 8002704:	4602      	mov	r2, r0
 8002706:	4b05      	ldr	r3, [pc, #20]	; (800271c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	0a1b      	lsrs	r3, r3, #8
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	4903      	ldr	r1, [pc, #12]	; (8002720 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002712:	5ccb      	ldrb	r3, [r1, r3]
 8002714:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002718:	4618      	mov	r0, r3
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40021000 	.word	0x40021000
 8002720:	080065a0 	.word	0x080065a0

08002724 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002728:	f7ff ffde 	bl	80026e8 <HAL_RCC_GetHCLKFreq>
 800272c:	4602      	mov	r2, r0
 800272e:	4b05      	ldr	r3, [pc, #20]	; (8002744 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	0adb      	lsrs	r3, r3, #11
 8002734:	f003 0307 	and.w	r3, r3, #7
 8002738:	4903      	ldr	r1, [pc, #12]	; (8002748 <HAL_RCC_GetPCLK2Freq+0x24>)
 800273a:	5ccb      	ldrb	r3, [r1, r3]
 800273c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002740:	4618      	mov	r0, r3
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40021000 	.word	0x40021000
 8002748:	080065a0 	.word	0x080065a0

0800274c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	220f      	movs	r2, #15
 800275a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800275c:	4b11      	ldr	r3, [pc, #68]	; (80027a4 <HAL_RCC_GetClockConfig+0x58>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f003 0203 	and.w	r2, r3, #3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002768:	4b0e      	ldr	r3, [pc, #56]	; (80027a4 <HAL_RCC_GetClockConfig+0x58>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002774:	4b0b      	ldr	r3, [pc, #44]	; (80027a4 <HAL_RCC_GetClockConfig+0x58>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002780:	4b08      	ldr	r3, [pc, #32]	; (80027a4 <HAL_RCC_GetClockConfig+0x58>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	08db      	lsrs	r3, r3, #3
 8002786:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800278e:	4b06      	ldr	r3, [pc, #24]	; (80027a8 <HAL_RCC_GetClockConfig+0x5c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0207 	and.w	r2, r3, #7
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr
 80027a4:	40021000 	.word	0x40021000
 80027a8:	40022000 	.word	0x40022000

080027ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027b4:	4b0a      	ldr	r3, [pc, #40]	; (80027e0 <RCC_Delay+0x34>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a0a      	ldr	r2, [pc, #40]	; (80027e4 <RCC_Delay+0x38>)
 80027ba:	fba2 2303 	umull	r2, r3, r2, r3
 80027be:	0a5b      	lsrs	r3, r3, #9
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	fb02 f303 	mul.w	r3, r2, r3
 80027c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027c8:	bf00      	nop
  }
  while (Delay --);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	1e5a      	subs	r2, r3, #1
 80027ce:	60fa      	str	r2, [r7, #12]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1f9      	bne.n	80027c8 <RCC_Delay+0x1c>
}
 80027d4:	bf00      	nop
 80027d6:	bf00      	nop
 80027d8:	3714      	adds	r7, #20
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr
 80027e0:	20000000 	.word	0x20000000
 80027e4:	10624dd3 	.word	0x10624dd3

080027e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e041      	b.n	800287e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d106      	bne.n	8002814 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f7fe fa2a 	bl	8000c68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2202      	movs	r2, #2
 8002818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3304      	adds	r3, #4
 8002824:	4619      	mov	r1, r3
 8002826:	4610      	mov	r0, r2
 8002828:	f000 fa74 	bl	8002d14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
	...

08002888 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2b01      	cmp	r3, #1
 800289a:	d001      	beq.n	80028a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e03a      	b.n	8002916 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2202      	movs	r2, #2
 80028a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68da      	ldr	r2, [r3, #12]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f042 0201 	orr.w	r2, r2, #1
 80028b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a18      	ldr	r2, [pc, #96]	; (8002920 <HAL_TIM_Base_Start_IT+0x98>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d00e      	beq.n	80028e0 <HAL_TIM_Base_Start_IT+0x58>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ca:	d009      	beq.n	80028e0 <HAL_TIM_Base_Start_IT+0x58>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a14      	ldr	r2, [pc, #80]	; (8002924 <HAL_TIM_Base_Start_IT+0x9c>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d004      	beq.n	80028e0 <HAL_TIM_Base_Start_IT+0x58>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a13      	ldr	r2, [pc, #76]	; (8002928 <HAL_TIM_Base_Start_IT+0xa0>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d111      	bne.n	8002904 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 0307 	and.w	r3, r3, #7
 80028ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2b06      	cmp	r3, #6
 80028f0:	d010      	beq.n	8002914 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f042 0201 	orr.w	r2, r2, #1
 8002900:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002902:	e007      	b.n	8002914 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f042 0201 	orr.w	r2, r2, #1
 8002912:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3714      	adds	r7, #20
 800291a:	46bd      	mov	sp, r7
 800291c:	bc80      	pop	{r7}
 800291e:	4770      	bx	lr
 8002920:	40012c00 	.word	0x40012c00
 8002924:	40000400 	.word	0x40000400
 8002928:	40000800 	.word	0x40000800

0800292c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b02      	cmp	r3, #2
 8002940:	d122      	bne.n	8002988 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b02      	cmp	r3, #2
 800294e:	d11b      	bne.n	8002988 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f06f 0202 	mvn.w	r2, #2
 8002958:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2201      	movs	r2, #1
 800295e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	f003 0303 	and.w	r3, r3, #3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d003      	beq.n	8002976 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 f9b4 	bl	8002cdc <HAL_TIM_IC_CaptureCallback>
 8002974:	e005      	b.n	8002982 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 f9a7 	bl	8002cca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 f9b6 	bl	8002cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	f003 0304 	and.w	r3, r3, #4
 8002992:	2b04      	cmp	r3, #4
 8002994:	d122      	bne.n	80029dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	f003 0304 	and.w	r3, r3, #4
 80029a0:	2b04      	cmp	r3, #4
 80029a2:	d11b      	bne.n	80029dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f06f 0204 	mvn.w	r2, #4
 80029ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2202      	movs	r2, #2
 80029b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 f98a 	bl	8002cdc <HAL_TIM_IC_CaptureCallback>
 80029c8:	e005      	b.n	80029d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f97d 	bl	8002cca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f000 f98c 	bl	8002cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	f003 0308 	and.w	r3, r3, #8
 80029e6:	2b08      	cmp	r3, #8
 80029e8:	d122      	bne.n	8002a30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	f003 0308 	and.w	r3, r3, #8
 80029f4:	2b08      	cmp	r3, #8
 80029f6:	d11b      	bne.n	8002a30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f06f 0208 	mvn.w	r2, #8
 8002a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2204      	movs	r2, #4
 8002a06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	f003 0303 	and.w	r3, r3, #3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d003      	beq.n	8002a1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 f960 	bl	8002cdc <HAL_TIM_IC_CaptureCallback>
 8002a1c:	e005      	b.n	8002a2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 f953 	bl	8002cca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 f962 	bl	8002cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	f003 0310 	and.w	r3, r3, #16
 8002a3a:	2b10      	cmp	r3, #16
 8002a3c:	d122      	bne.n	8002a84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	f003 0310 	and.w	r3, r3, #16
 8002a48:	2b10      	cmp	r3, #16
 8002a4a:	d11b      	bne.n	8002a84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f06f 0210 	mvn.w	r2, #16
 8002a54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2208      	movs	r2, #8
 8002a5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	69db      	ldr	r3, [r3, #28]
 8002a62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 f936 	bl	8002cdc <HAL_TIM_IC_CaptureCallback>
 8002a70:	e005      	b.n	8002a7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 f929 	bl	8002cca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 f938 	bl	8002cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d10e      	bne.n	8002ab0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d107      	bne.n	8002ab0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f06f 0201 	mvn.w	r2, #1
 8002aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7fe f820 	bl	8000af0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aba:	2b80      	cmp	r3, #128	; 0x80
 8002abc:	d10e      	bne.n	8002adc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ac8:	2b80      	cmp	r3, #128	; 0x80
 8002aca:	d107      	bne.n	8002adc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 fa7b 	bl	8002fd2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae6:	2b40      	cmp	r3, #64	; 0x40
 8002ae8:	d10e      	bne.n	8002b08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af4:	2b40      	cmp	r3, #64	; 0x40
 8002af6:	d107      	bne.n	8002b08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f8fc 	bl	8002d00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	f003 0320 	and.w	r3, r3, #32
 8002b12:	2b20      	cmp	r3, #32
 8002b14:	d10e      	bne.n	8002b34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	f003 0320 	and.w	r3, r3, #32
 8002b20:	2b20      	cmp	r3, #32
 8002b22:	d107      	bne.n	8002b34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f06f 0220 	mvn.w	r2, #32
 8002b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 fa46 	bl	8002fc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b34:	bf00      	nop
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b46:	2300      	movs	r3, #0
 8002b48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d101      	bne.n	8002b58 <HAL_TIM_ConfigClockSource+0x1c>
 8002b54:	2302      	movs	r3, #2
 8002b56:	e0b4      	b.n	8002cc2 <HAL_TIM_ConfigClockSource+0x186>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2202      	movs	r2, #2
 8002b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68ba      	ldr	r2, [r7, #8]
 8002b86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b90:	d03e      	beq.n	8002c10 <HAL_TIM_ConfigClockSource+0xd4>
 8002b92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b96:	f200 8087 	bhi.w	8002ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8002b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b9e:	f000 8086 	beq.w	8002cae <HAL_TIM_ConfigClockSource+0x172>
 8002ba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ba6:	d87f      	bhi.n	8002ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ba8:	2b70      	cmp	r3, #112	; 0x70
 8002baa:	d01a      	beq.n	8002be2 <HAL_TIM_ConfigClockSource+0xa6>
 8002bac:	2b70      	cmp	r3, #112	; 0x70
 8002bae:	d87b      	bhi.n	8002ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8002bb0:	2b60      	cmp	r3, #96	; 0x60
 8002bb2:	d050      	beq.n	8002c56 <HAL_TIM_ConfigClockSource+0x11a>
 8002bb4:	2b60      	cmp	r3, #96	; 0x60
 8002bb6:	d877      	bhi.n	8002ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8002bb8:	2b50      	cmp	r3, #80	; 0x50
 8002bba:	d03c      	beq.n	8002c36 <HAL_TIM_ConfigClockSource+0xfa>
 8002bbc:	2b50      	cmp	r3, #80	; 0x50
 8002bbe:	d873      	bhi.n	8002ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8002bc0:	2b40      	cmp	r3, #64	; 0x40
 8002bc2:	d058      	beq.n	8002c76 <HAL_TIM_ConfigClockSource+0x13a>
 8002bc4:	2b40      	cmp	r3, #64	; 0x40
 8002bc6:	d86f      	bhi.n	8002ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8002bc8:	2b30      	cmp	r3, #48	; 0x30
 8002bca:	d064      	beq.n	8002c96 <HAL_TIM_ConfigClockSource+0x15a>
 8002bcc:	2b30      	cmp	r3, #48	; 0x30
 8002bce:	d86b      	bhi.n	8002ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8002bd0:	2b20      	cmp	r3, #32
 8002bd2:	d060      	beq.n	8002c96 <HAL_TIM_ConfigClockSource+0x15a>
 8002bd4:	2b20      	cmp	r3, #32
 8002bd6:	d867      	bhi.n	8002ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d05c      	beq.n	8002c96 <HAL_TIM_ConfigClockSource+0x15a>
 8002bdc:	2b10      	cmp	r3, #16
 8002bde:	d05a      	beq.n	8002c96 <HAL_TIM_ConfigClockSource+0x15a>
 8002be0:	e062      	b.n	8002ca8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002bf2:	f000 f968 	bl	8002ec6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68ba      	ldr	r2, [r7, #8]
 8002c0c:	609a      	str	r2, [r3, #8]
      break;
 8002c0e:	e04f      	b.n	8002cb0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c20:	f000 f951 	bl	8002ec6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689a      	ldr	r2, [r3, #8]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c32:	609a      	str	r2, [r3, #8]
      break;
 8002c34:	e03c      	b.n	8002cb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c42:	461a      	mov	r2, r3
 8002c44:	f000 f8c8 	bl	8002dd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2150      	movs	r1, #80	; 0x50
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f000 f91f 	bl	8002e92 <TIM_ITRx_SetConfig>
      break;
 8002c54:	e02c      	b.n	8002cb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c62:	461a      	mov	r2, r3
 8002c64:	f000 f8e6 	bl	8002e34 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2160      	movs	r1, #96	; 0x60
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 f90f 	bl	8002e92 <TIM_ITRx_SetConfig>
      break;
 8002c74:	e01c      	b.n	8002cb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c82:	461a      	mov	r2, r3
 8002c84:	f000 f8a8 	bl	8002dd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2140      	movs	r1, #64	; 0x40
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f000 f8ff 	bl	8002e92 <TIM_ITRx_SetConfig>
      break;
 8002c94:	e00c      	b.n	8002cb0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	4610      	mov	r0, r2
 8002ca2:	f000 f8f6 	bl	8002e92 <TIM_ITRx_SetConfig>
      break;
 8002ca6:	e003      	b.n	8002cb0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	73fb      	strb	r3, [r7, #15]
      break;
 8002cac:	e000      	b.n	8002cb0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002cae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b083      	sub	sp, #12
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cd2:	bf00      	nop
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bc80      	pop	{r7}
 8002cda:	4770      	bx	lr

08002cdc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bc80      	pop	{r7}
 8002cec:	4770      	bx	lr

08002cee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b083      	sub	sp, #12
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cf6:	bf00      	nop
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bc80      	pop	{r7}
 8002cfe:	4770      	bx	lr

08002d00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bc80      	pop	{r7}
 8002d10:	4770      	bx	lr
	...

08002d14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a29      	ldr	r2, [pc, #164]	; (8002dcc <TIM_Base_SetConfig+0xb8>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d00b      	beq.n	8002d44 <TIM_Base_SetConfig+0x30>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d32:	d007      	beq.n	8002d44 <TIM_Base_SetConfig+0x30>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a26      	ldr	r2, [pc, #152]	; (8002dd0 <TIM_Base_SetConfig+0xbc>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d003      	beq.n	8002d44 <TIM_Base_SetConfig+0x30>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a25      	ldr	r2, [pc, #148]	; (8002dd4 <TIM_Base_SetConfig+0xc0>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d108      	bne.n	8002d56 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a1c      	ldr	r2, [pc, #112]	; (8002dcc <TIM_Base_SetConfig+0xb8>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d00b      	beq.n	8002d76 <TIM_Base_SetConfig+0x62>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d64:	d007      	beq.n	8002d76 <TIM_Base_SetConfig+0x62>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a19      	ldr	r2, [pc, #100]	; (8002dd0 <TIM_Base_SetConfig+0xbc>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d003      	beq.n	8002d76 <TIM_Base_SetConfig+0x62>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a18      	ldr	r2, [pc, #96]	; (8002dd4 <TIM_Base_SetConfig+0xc0>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d108      	bne.n	8002d88 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a07      	ldr	r2, [pc, #28]	; (8002dcc <TIM_Base_SetConfig+0xb8>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d103      	bne.n	8002dbc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	691a      	ldr	r2, [r3, #16]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	615a      	str	r2, [r3, #20]
}
 8002dc2:	bf00      	nop
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr
 8002dcc:	40012c00 	.word	0x40012c00
 8002dd0:	40000400 	.word	0x40000400
 8002dd4:	40000800 	.word	0x40000800

08002dd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b087      	sub	sp, #28
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	f023 0201 	bic.w	r2, r3, #1
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	011b      	lsls	r3, r3, #4
 8002e08:	693a      	ldr	r2, [r7, #16]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	f023 030a 	bic.w	r3, r3, #10
 8002e14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	621a      	str	r2, [r3, #32]
}
 8002e2a:	bf00      	nop
 8002e2c:	371c      	adds	r7, #28
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bc80      	pop	{r7}
 8002e32:	4770      	bx	lr

08002e34 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b087      	sub	sp, #28
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	f023 0210 	bic.w	r2, r3, #16
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	031b      	lsls	r3, r3, #12
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e70:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	011b      	lsls	r3, r3, #4
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	621a      	str	r2, [r3, #32]
}
 8002e88:	bf00      	nop
 8002e8a:	371c      	adds	r7, #28
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bc80      	pop	{r7}
 8002e90:	4770      	bx	lr

08002e92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e92:	b480      	push	{r7}
 8002e94:	b085      	sub	sp, #20
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
 8002e9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ea8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	f043 0307 	orr.w	r3, r3, #7
 8002eb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	609a      	str	r2, [r3, #8]
}
 8002ebc:	bf00      	nop
 8002ebe:	3714      	adds	r7, #20
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bc80      	pop	{r7}
 8002ec4:	4770      	bx	lr

08002ec6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b087      	sub	sp, #28
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	60f8      	str	r0, [r7, #12]
 8002ece:	60b9      	str	r1, [r7, #8]
 8002ed0:	607a      	str	r2, [r7, #4]
 8002ed2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ee0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	021a      	lsls	r2, r3, #8
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	431a      	orrs	r2, r3
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	609a      	str	r2, [r3, #8]
}
 8002efa:	bf00      	nop
 8002efc:	371c      	adds	r7, #28
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bc80      	pop	{r7}
 8002f02:	4770      	bx	lr

08002f04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d101      	bne.n	8002f1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f18:	2302      	movs	r3, #2
 8002f1a:	e046      	b.n	8002faa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2202      	movs	r2, #2
 8002f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a16      	ldr	r2, [pc, #88]	; (8002fb4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d00e      	beq.n	8002f7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f68:	d009      	beq.n	8002f7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a12      	ldr	r2, [pc, #72]	; (8002fb8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d004      	beq.n	8002f7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a10      	ldr	r2, [pc, #64]	; (8002fbc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d10c      	bne.n	8002f98 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	68ba      	ldr	r2, [r7, #8]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68ba      	ldr	r2, [r7, #8]
 8002f96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3714      	adds	r7, #20
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bc80      	pop	{r7}
 8002fb2:	4770      	bx	lr
 8002fb4:	40012c00 	.word	0x40012c00
 8002fb8:	40000400 	.word	0x40000400
 8002fbc:	40000800 	.word	0x40000800

08002fc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bc80      	pop	{r7}
 8002fd0:	4770      	bx	lr

08002fd2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr

08002fe4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e042      	b.n	800307c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d106      	bne.n	8003010 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f7fd fe4a 	bl	8000ca4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2224      	movs	r2, #36	; 0x24
 8003014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68da      	ldr	r2, [r3, #12]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003026:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 f82b 	bl	8003084 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	691a      	ldr	r2, [r3, #16]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800303c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	695a      	ldr	r2, [r3, #20]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800304c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68da      	ldr	r2, [r3, #12]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800305c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2220      	movs	r2, #32
 8003068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2220      	movs	r2, #32
 8003070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800307a:	2300      	movs	r3, #0
}
 800307c:	4618      	mov	r0, r3
 800307e:	3708      	adds	r7, #8
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68da      	ldr	r2, [r3, #12]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	430a      	orrs	r2, r1
 80030a0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	689a      	ldr	r2, [r3, #8]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	431a      	orrs	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	695b      	ldr	r3, [r3, #20]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80030be:	f023 030c 	bic.w	r3, r3, #12
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	6812      	ldr	r2, [r2, #0]
 80030c6:	68b9      	ldr	r1, [r7, #8]
 80030c8:	430b      	orrs	r3, r1
 80030ca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	699a      	ldr	r2, [r3, #24]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	430a      	orrs	r2, r1
 80030e0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a2c      	ldr	r2, [pc, #176]	; (8003198 <UART_SetConfig+0x114>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d103      	bne.n	80030f4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80030ec:	f7ff fb1a 	bl	8002724 <HAL_RCC_GetPCLK2Freq>
 80030f0:	60f8      	str	r0, [r7, #12]
 80030f2:	e002      	b.n	80030fa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80030f4:	f7ff fb02 	bl	80026fc <HAL_RCC_GetPCLK1Freq>
 80030f8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	4613      	mov	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4413      	add	r3, r2
 8003102:	009a      	lsls	r2, r3, #2
 8003104:	441a      	add	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003110:	4a22      	ldr	r2, [pc, #136]	; (800319c <UART_SetConfig+0x118>)
 8003112:	fba2 2303 	umull	r2, r3, r2, r3
 8003116:	095b      	lsrs	r3, r3, #5
 8003118:	0119      	lsls	r1, r3, #4
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	4613      	mov	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	4413      	add	r3, r2
 8003122:	009a      	lsls	r2, r3, #2
 8003124:	441a      	add	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003130:	4b1a      	ldr	r3, [pc, #104]	; (800319c <UART_SetConfig+0x118>)
 8003132:	fba3 0302 	umull	r0, r3, r3, r2
 8003136:	095b      	lsrs	r3, r3, #5
 8003138:	2064      	movs	r0, #100	; 0x64
 800313a:	fb00 f303 	mul.w	r3, r0, r3
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	011b      	lsls	r3, r3, #4
 8003142:	3332      	adds	r3, #50	; 0x32
 8003144:	4a15      	ldr	r2, [pc, #84]	; (800319c <UART_SetConfig+0x118>)
 8003146:	fba2 2303 	umull	r2, r3, r2, r3
 800314a:	095b      	lsrs	r3, r3, #5
 800314c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003150:	4419      	add	r1, r3
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	4613      	mov	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4413      	add	r3, r2
 800315a:	009a      	lsls	r2, r3, #2
 800315c:	441a      	add	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	fbb2 f2f3 	udiv	r2, r2, r3
 8003168:	4b0c      	ldr	r3, [pc, #48]	; (800319c <UART_SetConfig+0x118>)
 800316a:	fba3 0302 	umull	r0, r3, r3, r2
 800316e:	095b      	lsrs	r3, r3, #5
 8003170:	2064      	movs	r0, #100	; 0x64
 8003172:	fb00 f303 	mul.w	r3, r0, r3
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	011b      	lsls	r3, r3, #4
 800317a:	3332      	adds	r3, #50	; 0x32
 800317c:	4a07      	ldr	r2, [pc, #28]	; (800319c <UART_SetConfig+0x118>)
 800317e:	fba2 2303 	umull	r2, r3, r2, r3
 8003182:	095b      	lsrs	r3, r3, #5
 8003184:	f003 020f 	and.w	r2, r3, #15
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	440a      	add	r2, r1
 800318e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003190:	bf00      	nop
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	40013800 	.word	0x40013800
 800319c:	51eb851f 	.word	0x51eb851f

080031a0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031a6:	f3ef 8305 	mrs	r3, IPSR
 80031aa:	60bb      	str	r3, [r7, #8]
  return(result);
 80031ac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10f      	bne.n	80031d2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031b2:	f3ef 8310 	mrs	r3, PRIMASK
 80031b6:	607b      	str	r3, [r7, #4]
  return(result);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d109      	bne.n	80031d2 <osKernelInitialize+0x32>
 80031be:	4b10      	ldr	r3, [pc, #64]	; (8003200 <osKernelInitialize+0x60>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d109      	bne.n	80031da <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80031c6:	f3ef 8311 	mrs	r3, BASEPRI
 80031ca:	603b      	str	r3, [r7, #0]
  return(result);
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80031d2:	f06f 0305 	mvn.w	r3, #5
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	e00c      	b.n	80031f4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80031da:	4b09      	ldr	r3, [pc, #36]	; (8003200 <osKernelInitialize+0x60>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d105      	bne.n	80031ee <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80031e2:	4b07      	ldr	r3, [pc, #28]	; (8003200 <osKernelInitialize+0x60>)
 80031e4:	2201      	movs	r2, #1
 80031e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80031e8:	2300      	movs	r3, #0
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	e002      	b.n	80031f4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80031ee:	f04f 33ff 	mov.w	r3, #4294967295
 80031f2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80031f4:	68fb      	ldr	r3, [r7, #12]
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3714      	adds	r7, #20
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bc80      	pop	{r7}
 80031fe:	4770      	bx	lr
 8003200:	20000190 	.word	0x20000190

08003204 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800320a:	f3ef 8305 	mrs	r3, IPSR
 800320e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003210:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10f      	bne.n	8003236 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003216:	f3ef 8310 	mrs	r3, PRIMASK
 800321a:	607b      	str	r3, [r7, #4]
  return(result);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d109      	bne.n	8003236 <osKernelStart+0x32>
 8003222:	4b11      	ldr	r3, [pc, #68]	; (8003268 <osKernelStart+0x64>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2b02      	cmp	r3, #2
 8003228:	d109      	bne.n	800323e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800322a:	f3ef 8311 	mrs	r3, BASEPRI
 800322e:	603b      	str	r3, [r7, #0]
  return(result);
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d003      	beq.n	800323e <osKernelStart+0x3a>
    stat = osErrorISR;
 8003236:	f06f 0305 	mvn.w	r3, #5
 800323a:	60fb      	str	r3, [r7, #12]
 800323c:	e00e      	b.n	800325c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800323e:	4b0a      	ldr	r3, [pc, #40]	; (8003268 <osKernelStart+0x64>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2b01      	cmp	r3, #1
 8003244:	d107      	bne.n	8003256 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003246:	4b08      	ldr	r3, [pc, #32]	; (8003268 <osKernelStart+0x64>)
 8003248:	2202      	movs	r2, #2
 800324a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800324c:	f001 f878 	bl	8004340 <vTaskStartScheduler>
      stat = osOK;
 8003250:	2300      	movs	r3, #0
 8003252:	60fb      	str	r3, [r7, #12]
 8003254:	e002      	b.n	800325c <osKernelStart+0x58>
    } else {
      stat = osError;
 8003256:	f04f 33ff 	mov.w	r3, #4294967295
 800325a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800325c:	68fb      	ldr	r3, [r7, #12]
}
 800325e:	4618      	mov	r0, r3
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	20000190 	.word	0x20000190

0800326c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800326c:	b580      	push	{r7, lr}
 800326e:	b092      	sub	sp, #72	; 0x48
 8003270:	af04      	add	r7, sp, #16
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003278:	2300      	movs	r3, #0
 800327a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800327c:	f3ef 8305 	mrs	r3, IPSR
 8003280:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003284:	2b00      	cmp	r3, #0
 8003286:	f040 8094 	bne.w	80033b2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800328a:	f3ef 8310 	mrs	r3, PRIMASK
 800328e:	623b      	str	r3, [r7, #32]
  return(result);
 8003290:	6a3b      	ldr	r3, [r7, #32]
 8003292:	2b00      	cmp	r3, #0
 8003294:	f040 808d 	bne.w	80033b2 <osThreadNew+0x146>
 8003298:	4b48      	ldr	r3, [pc, #288]	; (80033bc <osThreadNew+0x150>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2b02      	cmp	r3, #2
 800329e:	d106      	bne.n	80032ae <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80032a0:	f3ef 8311 	mrs	r3, BASEPRI
 80032a4:	61fb      	str	r3, [r7, #28]
  return(result);
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f040 8082 	bne.w	80033b2 <osThreadNew+0x146>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d07e      	beq.n	80033b2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80032b4:	2380      	movs	r3, #128	; 0x80
 80032b6:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80032b8:	2318      	movs	r3, #24
 80032ba:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80032bc:	2300      	movs	r3, #0
 80032be:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80032c0:	f107 031b 	add.w	r3, r7, #27
 80032c4:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80032c6:	f04f 33ff 	mov.w	r3, #4294967295
 80032ca:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d045      	beq.n	800335e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d002      	beq.n	80032e0 <osThreadNew+0x74>
        name = attr->name;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d002      	beq.n	80032ee <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80032ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d008      	beq.n	8003306 <osThreadNew+0x9a>
 80032f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f6:	2b38      	cmp	r3, #56	; 0x38
 80032f8:	d805      	bhi.n	8003306 <osThreadNew+0x9a>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <osThreadNew+0x9e>
        return (NULL);
 8003306:	2300      	movs	r3, #0
 8003308:	e054      	b.n	80033b4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d003      	beq.n	800331a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	089b      	lsrs	r3, r3, #2
 8003318:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00e      	beq.n	8003340 <osThreadNew+0xd4>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	2b5b      	cmp	r3, #91	; 0x5b
 8003328:	d90a      	bls.n	8003340 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800332e:	2b00      	cmp	r3, #0
 8003330:	d006      	beq.n	8003340 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d002      	beq.n	8003340 <osThreadNew+0xd4>
        mem = 1;
 800333a:	2301      	movs	r3, #1
 800333c:	62bb      	str	r3, [r7, #40]	; 0x28
 800333e:	e010      	b.n	8003362 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d10c      	bne.n	8003362 <osThreadNew+0xf6>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d108      	bne.n	8003362 <osThreadNew+0xf6>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d104      	bne.n	8003362 <osThreadNew+0xf6>
          mem = 0;
 8003358:	2300      	movs	r3, #0
 800335a:	62bb      	str	r3, [r7, #40]	; 0x28
 800335c:	e001      	b.n	8003362 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800335e:	2300      	movs	r3, #0
 8003360:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8003362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003364:	2b01      	cmp	r3, #1
 8003366:	d110      	bne.n	800338a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003370:	9202      	str	r2, [sp, #8]
 8003372:	9301      	str	r3, [sp, #4]
 8003374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003376:	9300      	str	r3, [sp, #0]
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800337c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f000 fe12 	bl	8003fa8 <xTaskCreateStatic>
 8003384:	4603      	mov	r3, r0
 8003386:	617b      	str	r3, [r7, #20]
 8003388:	e013      	b.n	80033b2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800338a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800338c:	2b00      	cmp	r3, #0
 800338e:	d110      	bne.n	80033b2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003392:	b29a      	uxth	r2, r3
 8003394:	f107 0314 	add.w	r3, r7, #20
 8003398:	9301      	str	r3, [sp, #4]
 800339a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800339c:	9300      	str	r3, [sp, #0]
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80033a2:	68f8      	ldr	r0, [r7, #12]
 80033a4:	f000 fe5c 	bl	8004060 <xTaskCreate>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d001      	beq.n	80033b2 <osThreadNew+0x146>
          hTask = NULL;
 80033ae:	2300      	movs	r3, #0
 80033b0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80033b2:	697b      	ldr	r3, [r7, #20]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3738      	adds	r7, #56	; 0x38
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	20000190 	.word	0x20000190

080033c0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033c8:	f3ef 8305 	mrs	r3, IPSR
 80033cc:	613b      	str	r3, [r7, #16]
  return(result);
 80033ce:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d10f      	bne.n	80033f4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033d4:	f3ef 8310 	mrs	r3, PRIMASK
 80033d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d109      	bne.n	80033f4 <osDelay+0x34>
 80033e0:	4b0d      	ldr	r3, [pc, #52]	; (8003418 <osDelay+0x58>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d109      	bne.n	80033fc <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80033e8:	f3ef 8311 	mrs	r3, BASEPRI
 80033ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d003      	beq.n	80033fc <osDelay+0x3c>
    stat = osErrorISR;
 80033f4:	f06f 0305 	mvn.w	r3, #5
 80033f8:	617b      	str	r3, [r7, #20]
 80033fa:	e007      	b.n	800340c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80033fc:	2300      	movs	r3, #0
 80033fe:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d002      	beq.n	800340c <osDelay+0x4c>
      vTaskDelay(ticks);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 ff66 	bl	80042d8 <vTaskDelay>
    }
  }

  return (stat);
 800340c:	697b      	ldr	r3, [r7, #20]
}
 800340e:	4618      	mov	r0, r3
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	20000190 	.word	0x20000190

0800341c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	4a06      	ldr	r2, [pc, #24]	; (8003444 <vApplicationGetIdleTaskMemory+0x28>)
 800342c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	4a05      	ldr	r2, [pc, #20]	; (8003448 <vApplicationGetIdleTaskMemory+0x2c>)
 8003432:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2280      	movs	r2, #128	; 0x80
 8003438:	601a      	str	r2, [r3, #0]
}
 800343a:	bf00      	nop
 800343c:	3714      	adds	r7, #20
 800343e:	46bd      	mov	sp, r7
 8003440:	bc80      	pop	{r7}
 8003442:	4770      	bx	lr
 8003444:	20000194 	.word	0x20000194
 8003448:	200001f0 	.word	0x200001f0

0800344c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800344c:	b480      	push	{r7}
 800344e:	b085      	sub	sp, #20
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	4a07      	ldr	r2, [pc, #28]	; (8003478 <vApplicationGetTimerTaskMemory+0x2c>)
 800345c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	4a06      	ldr	r2, [pc, #24]	; (800347c <vApplicationGetTimerTaskMemory+0x30>)
 8003462:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f44f 7280 	mov.w	r2, #256	; 0x100
 800346a:	601a      	str	r2, [r3, #0]
}
 800346c:	bf00      	nop
 800346e:	3714      	adds	r7, #20
 8003470:	46bd      	mov	sp, r7
 8003472:	bc80      	pop	{r7}
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	200003f0 	.word	0x200003f0
 800347c:	2000044c 	.word	0x2000044c

08003480 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f103 0208 	add.w	r2, r3, #8
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f04f 32ff 	mov.w	r2, #4294967295
 8003498:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f103 0208 	add.w	r2, r3, #8
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f103 0208 	add.w	r2, r3, #8
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bc80      	pop	{r7}
 80034bc:	4770      	bx	lr

080034be <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80034be:	b480      	push	{r7}
 80034c0:	b083      	sub	sp, #12
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bc80      	pop	{r7}
 80034d4:	4770      	bx	lr

080034d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80034d6:	b480      	push	{r7}
 80034d8:	b085      	sub	sp, #20
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
 80034de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	689a      	ldr	r2, [r3, #8]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	1c5a      	adds	r2, r3, #1
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	601a      	str	r2, [r3, #0]
}
 8003512:	bf00      	nop
 8003514:	3714      	adds	r7, #20
 8003516:	46bd      	mov	sp, r7
 8003518:	bc80      	pop	{r7}
 800351a:	4770      	bx	lr

0800351c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003532:	d103      	bne.n	800353c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	60fb      	str	r3, [r7, #12]
 800353a:	e00c      	b.n	8003556 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	3308      	adds	r3, #8
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	e002      	b.n	800354a <vListInsert+0x2e>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	60fb      	str	r3, [r7, #12]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68ba      	ldr	r2, [r7, #8]
 8003552:	429a      	cmp	r2, r3
 8003554:	d2f6      	bcs.n	8003544 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	685a      	ldr	r2, [r3, #4]
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	683a      	ldr	r2, [r7, #0]
 8003564:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	683a      	ldr	r2, [r7, #0]
 8003570:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	1c5a      	adds	r2, r3, #1
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	601a      	str	r2, [r3, #0]
}
 8003582:	bf00      	nop
 8003584:	3714      	adds	r7, #20
 8003586:	46bd      	mov	sp, r7
 8003588:	bc80      	pop	{r7}
 800358a:	4770      	bx	lr

0800358c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	6892      	ldr	r2, [r2, #8]
 80035a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	6852      	ldr	r2, [r2, #4]
 80035ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d103      	bne.n	80035c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689a      	ldr	r2, [r3, #8]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	1e5a      	subs	r2, r3, #1
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3714      	adds	r7, #20
 80035d8:	46bd      	mov	sp, r7
 80035da:	bc80      	pop	{r7}
 80035dc:	4770      	bx	lr
	...

080035e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d10a      	bne.n	800360a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80035f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f8:	f383 8811 	msr	BASEPRI, r3
 80035fc:	f3bf 8f6f 	isb	sy
 8003600:	f3bf 8f4f 	dsb	sy
 8003604:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003606:	bf00      	nop
 8003608:	e7fe      	b.n	8003608 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800360a:	f001 ffc7 	bl	800559c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003616:	68f9      	ldr	r1, [r7, #12]
 8003618:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800361a:	fb01 f303 	mul.w	r3, r1, r3
 800361e:	441a      	add	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800363a:	3b01      	subs	r3, #1
 800363c:	68f9      	ldr	r1, [r7, #12]
 800363e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003640:	fb01 f303 	mul.w	r3, r1, r3
 8003644:	441a      	add	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	22ff      	movs	r2, #255	; 0xff
 800364e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	22ff      	movs	r2, #255	; 0xff
 8003656:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d114      	bne.n	800368a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d01a      	beq.n	800369e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	3310      	adds	r3, #16
 800366c:	4618      	mov	r0, r3
 800366e:	f001 f8f1 	bl	8004854 <xTaskRemoveFromEventList>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d012      	beq.n	800369e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003678:	4b0c      	ldr	r3, [pc, #48]	; (80036ac <xQueueGenericReset+0xcc>)
 800367a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	f3bf 8f4f 	dsb	sy
 8003684:	f3bf 8f6f 	isb	sy
 8003688:	e009      	b.n	800369e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	3310      	adds	r3, #16
 800368e:	4618      	mov	r0, r3
 8003690:	f7ff fef6 	bl	8003480 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	3324      	adds	r3, #36	; 0x24
 8003698:	4618      	mov	r0, r3
 800369a:	f7ff fef1 	bl	8003480 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800369e:	f001 ffad 	bl	80055fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80036a2:	2301      	movs	r3, #1
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	e000ed04 	.word	0xe000ed04

080036b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b08e      	sub	sp, #56	; 0x38
 80036b4:	af02      	add	r7, sp, #8
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
 80036bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d10a      	bne.n	80036da <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80036c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c8:	f383 8811 	msr	BASEPRI, r3
 80036cc:	f3bf 8f6f 	isb	sy
 80036d0:	f3bf 8f4f 	dsb	sy
 80036d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80036d6:	bf00      	nop
 80036d8:	e7fe      	b.n	80036d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10a      	bne.n	80036f6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80036e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e4:	f383 8811 	msr	BASEPRI, r3
 80036e8:	f3bf 8f6f 	isb	sy
 80036ec:	f3bf 8f4f 	dsb	sy
 80036f0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80036f2:	bf00      	nop
 80036f4:	e7fe      	b.n	80036f4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d002      	beq.n	8003702 <xQueueGenericCreateStatic+0x52>
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <xQueueGenericCreateStatic+0x56>
 8003702:	2301      	movs	r3, #1
 8003704:	e000      	b.n	8003708 <xQueueGenericCreateStatic+0x58>
 8003706:	2300      	movs	r3, #0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d10a      	bne.n	8003722 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800370c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003710:	f383 8811 	msr	BASEPRI, r3
 8003714:	f3bf 8f6f 	isb	sy
 8003718:	f3bf 8f4f 	dsb	sy
 800371c:	623b      	str	r3, [r7, #32]
}
 800371e:	bf00      	nop
 8003720:	e7fe      	b.n	8003720 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d102      	bne.n	800372e <xQueueGenericCreateStatic+0x7e>
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <xQueueGenericCreateStatic+0x82>
 800372e:	2301      	movs	r3, #1
 8003730:	e000      	b.n	8003734 <xQueueGenericCreateStatic+0x84>
 8003732:	2300      	movs	r3, #0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10a      	bne.n	800374e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800373c:	f383 8811 	msr	BASEPRI, r3
 8003740:	f3bf 8f6f 	isb	sy
 8003744:	f3bf 8f4f 	dsb	sy
 8003748:	61fb      	str	r3, [r7, #28]
}
 800374a:	bf00      	nop
 800374c:	e7fe      	b.n	800374c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800374e:	2350      	movs	r3, #80	; 0x50
 8003750:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	2b50      	cmp	r3, #80	; 0x50
 8003756:	d00a      	beq.n	800376e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800375c:	f383 8811 	msr	BASEPRI, r3
 8003760:	f3bf 8f6f 	isb	sy
 8003764:	f3bf 8f4f 	dsb	sy
 8003768:	61bb      	str	r3, [r7, #24]
}
 800376a:	bf00      	nop
 800376c:	e7fe      	b.n	800376c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00d      	beq.n	8003794 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800377a:	2201      	movs	r2, #1
 800377c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003780:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	4613      	mov	r3, r2
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	68b9      	ldr	r1, [r7, #8]
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f000 f805 	bl	800379e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003796:	4618      	mov	r0, r3
 8003798:	3730      	adds	r7, #48	; 0x30
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b084      	sub	sp, #16
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	60f8      	str	r0, [r7, #12]
 80037a6:	60b9      	str	r1, [r7, #8]
 80037a8:	607a      	str	r2, [r7, #4]
 80037aa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d103      	bne.n	80037ba <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	601a      	str	r2, [r3, #0]
 80037b8:	e002      	b.n	80037c0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	68ba      	ldr	r2, [r7, #8]
 80037ca:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80037cc:	2101      	movs	r1, #1
 80037ce:	69b8      	ldr	r0, [r7, #24]
 80037d0:	f7ff ff06 	bl	80035e0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	78fa      	ldrb	r2, [r7, #3]
 80037d8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80037dc:	bf00      	nop
 80037de:	3710      	adds	r7, #16
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b08e      	sub	sp, #56	; 0x38
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
 80037f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80037f2:	2300      	movs	r3, #0
 80037f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80037fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d10a      	bne.n	8003816 <xQueueGenericSend+0x32>
	__asm volatile
 8003800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003804:	f383 8811 	msr	BASEPRI, r3
 8003808:	f3bf 8f6f 	isb	sy
 800380c:	f3bf 8f4f 	dsb	sy
 8003810:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003812:	bf00      	nop
 8003814:	e7fe      	b.n	8003814 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d103      	bne.n	8003824 <xQueueGenericSend+0x40>
 800381c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003820:	2b00      	cmp	r3, #0
 8003822:	d101      	bne.n	8003828 <xQueueGenericSend+0x44>
 8003824:	2301      	movs	r3, #1
 8003826:	e000      	b.n	800382a <xQueueGenericSend+0x46>
 8003828:	2300      	movs	r3, #0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d10a      	bne.n	8003844 <xQueueGenericSend+0x60>
	__asm volatile
 800382e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003832:	f383 8811 	msr	BASEPRI, r3
 8003836:	f3bf 8f6f 	isb	sy
 800383a:	f3bf 8f4f 	dsb	sy
 800383e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003840:	bf00      	nop
 8003842:	e7fe      	b.n	8003842 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	2b02      	cmp	r3, #2
 8003848:	d103      	bne.n	8003852 <xQueueGenericSend+0x6e>
 800384a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800384c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800384e:	2b01      	cmp	r3, #1
 8003850:	d101      	bne.n	8003856 <xQueueGenericSend+0x72>
 8003852:	2301      	movs	r3, #1
 8003854:	e000      	b.n	8003858 <xQueueGenericSend+0x74>
 8003856:	2300      	movs	r3, #0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d10a      	bne.n	8003872 <xQueueGenericSend+0x8e>
	__asm volatile
 800385c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003860:	f383 8811 	msr	BASEPRI, r3
 8003864:	f3bf 8f6f 	isb	sy
 8003868:	f3bf 8f4f 	dsb	sy
 800386c:	623b      	str	r3, [r7, #32]
}
 800386e:	bf00      	nop
 8003870:	e7fe      	b.n	8003870 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003872:	f001 f9b1 	bl	8004bd8 <xTaskGetSchedulerState>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d102      	bne.n	8003882 <xQueueGenericSend+0x9e>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <xQueueGenericSend+0xa2>
 8003882:	2301      	movs	r3, #1
 8003884:	e000      	b.n	8003888 <xQueueGenericSend+0xa4>
 8003886:	2300      	movs	r3, #0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d10a      	bne.n	80038a2 <xQueueGenericSend+0xbe>
	__asm volatile
 800388c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003890:	f383 8811 	msr	BASEPRI, r3
 8003894:	f3bf 8f6f 	isb	sy
 8003898:	f3bf 8f4f 	dsb	sy
 800389c:	61fb      	str	r3, [r7, #28]
}
 800389e:	bf00      	nop
 80038a0:	e7fe      	b.n	80038a0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80038a2:	f001 fe7b 	bl	800559c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80038a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d302      	bcc.n	80038b8 <xQueueGenericSend+0xd4>
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d129      	bne.n	800390c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	68b9      	ldr	r1, [r7, #8]
 80038bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038be:	f000 fa07 	bl	8003cd0 <prvCopyDataToQueue>
 80038c2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d010      	beq.n	80038ee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ce:	3324      	adds	r3, #36	; 0x24
 80038d0:	4618      	mov	r0, r3
 80038d2:	f000 ffbf 	bl	8004854 <xTaskRemoveFromEventList>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d013      	beq.n	8003904 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80038dc:	4b3f      	ldr	r3, [pc, #252]	; (80039dc <xQueueGenericSend+0x1f8>)
 80038de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	f3bf 8f4f 	dsb	sy
 80038e8:	f3bf 8f6f 	isb	sy
 80038ec:	e00a      	b.n	8003904 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80038ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d007      	beq.n	8003904 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80038f4:	4b39      	ldr	r3, [pc, #228]	; (80039dc <xQueueGenericSend+0x1f8>)
 80038f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038fa:	601a      	str	r2, [r3, #0]
 80038fc:	f3bf 8f4f 	dsb	sy
 8003900:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003904:	f001 fe7a 	bl	80055fc <vPortExitCritical>
				return pdPASS;
 8003908:	2301      	movs	r3, #1
 800390a:	e063      	b.n	80039d4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d103      	bne.n	800391a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003912:	f001 fe73 	bl	80055fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003916:	2300      	movs	r3, #0
 8003918:	e05c      	b.n	80039d4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800391a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800391c:	2b00      	cmp	r3, #0
 800391e:	d106      	bne.n	800392e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003920:	f107 0314 	add.w	r3, r7, #20
 8003924:	4618      	mov	r0, r3
 8003926:	f000 fff9 	bl	800491c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800392a:	2301      	movs	r3, #1
 800392c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800392e:	f001 fe65 	bl	80055fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003932:	f000 fd6b 	bl	800440c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003936:	f001 fe31 	bl	800559c <vPortEnterCritical>
 800393a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800393c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003940:	b25b      	sxtb	r3, r3
 8003942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003946:	d103      	bne.n	8003950 <xQueueGenericSend+0x16c>
 8003948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394a:	2200      	movs	r2, #0
 800394c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003952:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003956:	b25b      	sxtb	r3, r3
 8003958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800395c:	d103      	bne.n	8003966 <xQueueGenericSend+0x182>
 800395e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003960:	2200      	movs	r2, #0
 8003962:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003966:	f001 fe49 	bl	80055fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800396a:	1d3a      	adds	r2, r7, #4
 800396c:	f107 0314 	add.w	r3, r7, #20
 8003970:	4611      	mov	r1, r2
 8003972:	4618      	mov	r0, r3
 8003974:	f000 ffe8 	bl	8004948 <xTaskCheckForTimeOut>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d124      	bne.n	80039c8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800397e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003980:	f000 fa9e 	bl	8003ec0 <prvIsQueueFull>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d018      	beq.n	80039bc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800398a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800398c:	3310      	adds	r3, #16
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	4611      	mov	r1, r2
 8003992:	4618      	mov	r0, r3
 8003994:	f000 ff0e 	bl	80047b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003998:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800399a:	f000 fa29 	bl	8003df0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800399e:	f000 fd43 	bl	8004428 <xTaskResumeAll>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f47f af7c 	bne.w	80038a2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80039aa:	4b0c      	ldr	r3, [pc, #48]	; (80039dc <xQueueGenericSend+0x1f8>)
 80039ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039b0:	601a      	str	r2, [r3, #0]
 80039b2:	f3bf 8f4f 	dsb	sy
 80039b6:	f3bf 8f6f 	isb	sy
 80039ba:	e772      	b.n	80038a2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80039bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039be:	f000 fa17 	bl	8003df0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80039c2:	f000 fd31 	bl	8004428 <xTaskResumeAll>
 80039c6:	e76c      	b.n	80038a2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80039c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039ca:	f000 fa11 	bl	8003df0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80039ce:	f000 fd2b 	bl	8004428 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80039d2:	2300      	movs	r3, #0
		}
	}
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3738      	adds	r7, #56	; 0x38
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	e000ed04 	.word	0xe000ed04

080039e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b08e      	sub	sp, #56	; 0x38
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
 80039ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80039f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d10a      	bne.n	8003a0e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80039f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039fc:	f383 8811 	msr	BASEPRI, r3
 8003a00:	f3bf 8f6f 	isb	sy
 8003a04:	f3bf 8f4f 	dsb	sy
 8003a08:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003a0a:	bf00      	nop
 8003a0c:	e7fe      	b.n	8003a0c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d103      	bne.n	8003a1c <xQueueGenericSendFromISR+0x3c>
 8003a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d101      	bne.n	8003a20 <xQueueGenericSendFromISR+0x40>
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e000      	b.n	8003a22 <xQueueGenericSendFromISR+0x42>
 8003a20:	2300      	movs	r3, #0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d10a      	bne.n	8003a3c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a2a:	f383 8811 	msr	BASEPRI, r3
 8003a2e:	f3bf 8f6f 	isb	sy
 8003a32:	f3bf 8f4f 	dsb	sy
 8003a36:	623b      	str	r3, [r7, #32]
}
 8003a38:	bf00      	nop
 8003a3a:	e7fe      	b.n	8003a3a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d103      	bne.n	8003a4a <xQueueGenericSendFromISR+0x6a>
 8003a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d101      	bne.n	8003a4e <xQueueGenericSendFromISR+0x6e>
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e000      	b.n	8003a50 <xQueueGenericSendFromISR+0x70>
 8003a4e:	2300      	movs	r3, #0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d10a      	bne.n	8003a6a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a58:	f383 8811 	msr	BASEPRI, r3
 8003a5c:	f3bf 8f6f 	isb	sy
 8003a60:	f3bf 8f4f 	dsb	sy
 8003a64:	61fb      	str	r3, [r7, #28]
}
 8003a66:	bf00      	nop
 8003a68:	e7fe      	b.n	8003a68 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003a6a:	f001 fe59 	bl	8005720 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003a6e:	f3ef 8211 	mrs	r2, BASEPRI
 8003a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a76:	f383 8811 	msr	BASEPRI, r3
 8003a7a:	f3bf 8f6f 	isb	sy
 8003a7e:	f3bf 8f4f 	dsb	sy
 8003a82:	61ba      	str	r2, [r7, #24]
 8003a84:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003a86:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003a88:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d302      	bcc.n	8003a9c <xQueueGenericSendFromISR+0xbc>
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d12c      	bne.n	8003af6 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003aa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003aa6:	683a      	ldr	r2, [r7, #0]
 8003aa8:	68b9      	ldr	r1, [r7, #8]
 8003aaa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003aac:	f000 f910 	bl	8003cd0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003ab0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab8:	d112      	bne.n	8003ae0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d016      	beq.n	8003af0 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac4:	3324      	adds	r3, #36	; 0x24
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f000 fec4 	bl	8004854 <xTaskRemoveFromEventList>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00e      	beq.n	8003af0 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00b      	beq.n	8003af0 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	601a      	str	r2, [r3, #0]
 8003ade:	e007      	b.n	8003af0 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003ae0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	b25a      	sxtb	r2, r3
 8003aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003af0:	2301      	movs	r3, #1
 8003af2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003af4:	e001      	b.n	8003afa <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003af6:	2300      	movs	r3, #0
 8003af8:	637b      	str	r3, [r7, #52]	; 0x34
 8003afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003afc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003b04:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3738      	adds	r7, #56	; 0x38
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b08c      	sub	sp, #48	; 0x30
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10a      	bne.n	8003b40 <xQueueReceive+0x30>
	__asm volatile
 8003b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b2e:	f383 8811 	msr	BASEPRI, r3
 8003b32:	f3bf 8f6f 	isb	sy
 8003b36:	f3bf 8f4f 	dsb	sy
 8003b3a:	623b      	str	r3, [r7, #32]
}
 8003b3c:	bf00      	nop
 8003b3e:	e7fe      	b.n	8003b3e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d103      	bne.n	8003b4e <xQueueReceive+0x3e>
 8003b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <xQueueReceive+0x42>
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e000      	b.n	8003b54 <xQueueReceive+0x44>
 8003b52:	2300      	movs	r3, #0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d10a      	bne.n	8003b6e <xQueueReceive+0x5e>
	__asm volatile
 8003b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b5c:	f383 8811 	msr	BASEPRI, r3
 8003b60:	f3bf 8f6f 	isb	sy
 8003b64:	f3bf 8f4f 	dsb	sy
 8003b68:	61fb      	str	r3, [r7, #28]
}
 8003b6a:	bf00      	nop
 8003b6c:	e7fe      	b.n	8003b6c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b6e:	f001 f833 	bl	8004bd8 <xTaskGetSchedulerState>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d102      	bne.n	8003b7e <xQueueReceive+0x6e>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <xQueueReceive+0x72>
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e000      	b.n	8003b84 <xQueueReceive+0x74>
 8003b82:	2300      	movs	r3, #0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d10a      	bne.n	8003b9e <xQueueReceive+0x8e>
	__asm volatile
 8003b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b8c:	f383 8811 	msr	BASEPRI, r3
 8003b90:	f3bf 8f6f 	isb	sy
 8003b94:	f3bf 8f4f 	dsb	sy
 8003b98:	61bb      	str	r3, [r7, #24]
}
 8003b9a:	bf00      	nop
 8003b9c:	e7fe      	b.n	8003b9c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b9e:	f001 fcfd 	bl	800559c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d01f      	beq.n	8003bee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003bae:	68b9      	ldr	r1, [r7, #8]
 8003bb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bb2:	f000 f8f7 	bl	8003da4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb8:	1e5a      	subs	r2, r3, #1
 8003bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bbc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00f      	beq.n	8003be6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc8:	3310      	adds	r3, #16
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f000 fe42 	bl	8004854 <xTaskRemoveFromEventList>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d007      	beq.n	8003be6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003bd6:	4b3d      	ldr	r3, [pc, #244]	; (8003ccc <xQueueReceive+0x1bc>)
 8003bd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bdc:	601a      	str	r2, [r3, #0]
 8003bde:	f3bf 8f4f 	dsb	sy
 8003be2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003be6:	f001 fd09 	bl	80055fc <vPortExitCritical>
				return pdPASS;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e069      	b.n	8003cc2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d103      	bne.n	8003bfc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003bf4:	f001 fd02 	bl	80055fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	e062      	b.n	8003cc2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d106      	bne.n	8003c10 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c02:	f107 0310 	add.w	r3, r7, #16
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 fe88 	bl	800491c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c10:	f001 fcf4 	bl	80055fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c14:	f000 fbfa 	bl	800440c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c18:	f001 fcc0 	bl	800559c <vPortEnterCritical>
 8003c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c22:	b25b      	sxtb	r3, r3
 8003c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c28:	d103      	bne.n	8003c32 <xQueueReceive+0x122>
 8003c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c38:	b25b      	sxtb	r3, r3
 8003c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c3e:	d103      	bne.n	8003c48 <xQueueReceive+0x138>
 8003c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c48:	f001 fcd8 	bl	80055fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c4c:	1d3a      	adds	r2, r7, #4
 8003c4e:	f107 0310 	add.w	r3, r7, #16
 8003c52:	4611      	mov	r1, r2
 8003c54:	4618      	mov	r0, r3
 8003c56:	f000 fe77 	bl	8004948 <xTaskCheckForTimeOut>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d123      	bne.n	8003ca8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c62:	f000 f917 	bl	8003e94 <prvIsQueueEmpty>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d017      	beq.n	8003c9c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c6e:	3324      	adds	r3, #36	; 0x24
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	4611      	mov	r1, r2
 8003c74:	4618      	mov	r0, r3
 8003c76:	f000 fd9d 	bl	80047b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003c7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c7c:	f000 f8b8 	bl	8003df0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003c80:	f000 fbd2 	bl	8004428 <xTaskResumeAll>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d189      	bne.n	8003b9e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003c8a:	4b10      	ldr	r3, [pc, #64]	; (8003ccc <xQueueReceive+0x1bc>)
 8003c8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c90:	601a      	str	r2, [r3, #0]
 8003c92:	f3bf 8f4f 	dsb	sy
 8003c96:	f3bf 8f6f 	isb	sy
 8003c9a:	e780      	b.n	8003b9e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003c9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c9e:	f000 f8a7 	bl	8003df0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ca2:	f000 fbc1 	bl	8004428 <xTaskResumeAll>
 8003ca6:	e77a      	b.n	8003b9e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003ca8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003caa:	f000 f8a1 	bl	8003df0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003cae:	f000 fbbb 	bl	8004428 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003cb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cb4:	f000 f8ee 	bl	8003e94 <prvIsQueueEmpty>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	f43f af6f 	beq.w	8003b9e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003cc0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3730      	adds	r7, #48	; 0x30
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	e000ed04 	.word	0xe000ed04

08003cd0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d10d      	bne.n	8003d0a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d14d      	bne.n	8003d92 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 ff8a 	bl	8004c14 <xTaskPriorityDisinherit>
 8003d00:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	605a      	str	r2, [r3, #4]
 8003d08:	e043      	b.n	8003d92 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d119      	bne.n	8003d44 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6898      	ldr	r0, [r3, #8]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d18:	461a      	mov	r2, r3
 8003d1a:	68b9      	ldr	r1, [r7, #8]
 8003d1c:	f002 f826 	bl	8005d6c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	689a      	ldr	r2, [r3, #8]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d28:	441a      	add	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	689a      	ldr	r2, [r3, #8]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d32b      	bcc.n	8003d92 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	609a      	str	r2, [r3, #8]
 8003d42:	e026      	b.n	8003d92 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	68d8      	ldr	r0, [r3, #12]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	68b9      	ldr	r1, [r7, #8]
 8003d50:	f002 f80c 	bl	8005d6c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	68da      	ldr	r2, [r3, #12]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5c:	425b      	negs	r3, r3
 8003d5e:	441a      	add	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	68da      	ldr	r2, [r3, #12]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d207      	bcs.n	8003d80 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d78:	425b      	negs	r3, r3
 8003d7a:	441a      	add	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d105      	bne.n	8003d92 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d002      	beq.n	8003d92 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	1c5a      	adds	r2, r3, #1
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003d9a:	697b      	ldr	r3, [r7, #20]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3718      	adds	r7, #24
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d018      	beq.n	8003de8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	68da      	ldr	r2, [r3, #12]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbe:	441a      	add	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	68da      	ldr	r2, [r3, #12]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d303      	bcc.n	8003dd8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	68d9      	ldr	r1, [r3, #12]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de0:	461a      	mov	r2, r3
 8003de2:	6838      	ldr	r0, [r7, #0]
 8003de4:	f001 ffc2 	bl	8005d6c <memcpy>
	}
}
 8003de8:	bf00      	nop
 8003dea:	3708      	adds	r7, #8
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003df8:	f001 fbd0 	bl	800559c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e02:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e04:	e011      	b.n	8003e2a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d012      	beq.n	8003e34 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	3324      	adds	r3, #36	; 0x24
 8003e12:	4618      	mov	r0, r3
 8003e14:	f000 fd1e 	bl	8004854 <xTaskRemoveFromEventList>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003e1e:	f000 fdf5 	bl	8004a0c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003e22:	7bfb      	ldrb	r3, [r7, #15]
 8003e24:	3b01      	subs	r3, #1
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	dce9      	bgt.n	8003e06 <prvUnlockQueue+0x16>
 8003e32:	e000      	b.n	8003e36 <prvUnlockQueue+0x46>
					break;
 8003e34:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	22ff      	movs	r2, #255	; 0xff
 8003e3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003e3e:	f001 fbdd 	bl	80055fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003e42:	f001 fbab 	bl	800559c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e4c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e4e:	e011      	b.n	8003e74 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d012      	beq.n	8003e7e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	3310      	adds	r3, #16
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f000 fcf9 	bl	8004854 <xTaskRemoveFromEventList>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d001      	beq.n	8003e6c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003e68:	f000 fdd0 	bl	8004a0c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003e6c:	7bbb      	ldrb	r3, [r7, #14]
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	dce9      	bgt.n	8003e50 <prvUnlockQueue+0x60>
 8003e7c:	e000      	b.n	8003e80 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003e7e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	22ff      	movs	r2, #255	; 0xff
 8003e84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003e88:	f001 fbb8 	bl	80055fc <vPortExitCritical>
}
 8003e8c:	bf00      	nop
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003e9c:	f001 fb7e 	bl	800559c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d102      	bne.n	8003eae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	60fb      	str	r3, [r7, #12]
 8003eac:	e001      	b.n	8003eb2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003eb2:	f001 fba3 	bl	80055fc <vPortExitCritical>

	return xReturn;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ec8:	f001 fb68 	bl	800559c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d102      	bne.n	8003ede <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	60fb      	str	r3, [r7, #12]
 8003edc:	e001      	b.n	8003ee2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003ee2:	f001 fb8b 	bl	80055fc <vPortExitCritical>

	return xReturn;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003efa:	2300      	movs	r3, #0
 8003efc:	60fb      	str	r3, [r7, #12]
 8003efe:	e014      	b.n	8003f2a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003f00:	4a0e      	ldr	r2, [pc, #56]	; (8003f3c <vQueueAddToRegistry+0x4c>)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d10b      	bne.n	8003f24 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003f0c:	490b      	ldr	r1, [pc, #44]	; (8003f3c <vQueueAddToRegistry+0x4c>)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	683a      	ldr	r2, [r7, #0]
 8003f12:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003f16:	4a09      	ldr	r2, [pc, #36]	; (8003f3c <vQueueAddToRegistry+0x4c>)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	00db      	lsls	r3, r3, #3
 8003f1c:	4413      	add	r3, r2
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003f22:	e006      	b.n	8003f32 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	3301      	adds	r3, #1
 8003f28:	60fb      	str	r3, [r7, #12]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2b07      	cmp	r3, #7
 8003f2e:	d9e7      	bls.n	8003f00 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003f30:	bf00      	nop
 8003f32:	bf00      	nop
 8003f34:	3714      	adds	r7, #20
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bc80      	pop	{r7}
 8003f3a:	4770      	bx	lr
 8003f3c:	2000084c 	.word	0x2000084c

08003f40 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b086      	sub	sp, #24
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003f50:	f001 fb24 	bl	800559c <vPortEnterCritical>
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f5a:	b25b      	sxtb	r3, r3
 8003f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f60:	d103      	bne.n	8003f6a <vQueueWaitForMessageRestricted+0x2a>
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f70:	b25b      	sxtb	r3, r3
 8003f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f76:	d103      	bne.n	8003f80 <vQueueWaitForMessageRestricted+0x40>
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f80:	f001 fb3c 	bl	80055fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d106      	bne.n	8003f9a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	3324      	adds	r3, #36	; 0x24
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	68b9      	ldr	r1, [r7, #8]
 8003f94:	4618      	mov	r0, r3
 8003f96:	f000 fc31 	bl	80047fc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003f9a:	6978      	ldr	r0, [r7, #20]
 8003f9c:	f7ff ff28 	bl	8003df0 <prvUnlockQueue>
	}
 8003fa0:	bf00      	nop
 8003fa2:	3718      	adds	r7, #24
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b08e      	sub	sp, #56	; 0x38
 8003fac:	af04      	add	r7, sp, #16
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
 8003fb4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d10a      	bne.n	8003fd2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc0:	f383 8811 	msr	BASEPRI, r3
 8003fc4:	f3bf 8f6f 	isb	sy
 8003fc8:	f3bf 8f4f 	dsb	sy
 8003fcc:	623b      	str	r3, [r7, #32]
}
 8003fce:	bf00      	nop
 8003fd0:	e7fe      	b.n	8003fd0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d10a      	bne.n	8003fee <xTaskCreateStatic+0x46>
	__asm volatile
 8003fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fdc:	f383 8811 	msr	BASEPRI, r3
 8003fe0:	f3bf 8f6f 	isb	sy
 8003fe4:	f3bf 8f4f 	dsb	sy
 8003fe8:	61fb      	str	r3, [r7, #28]
}
 8003fea:	bf00      	nop
 8003fec:	e7fe      	b.n	8003fec <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003fee:	235c      	movs	r3, #92	; 0x5c
 8003ff0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	2b5c      	cmp	r3, #92	; 0x5c
 8003ff6:	d00a      	beq.n	800400e <xTaskCreateStatic+0x66>
	__asm volatile
 8003ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ffc:	f383 8811 	msr	BASEPRI, r3
 8004000:	f3bf 8f6f 	isb	sy
 8004004:	f3bf 8f4f 	dsb	sy
 8004008:	61bb      	str	r3, [r7, #24]
}
 800400a:	bf00      	nop
 800400c:	e7fe      	b.n	800400c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800400e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004010:	2b00      	cmp	r3, #0
 8004012:	d01e      	beq.n	8004052 <xTaskCreateStatic+0xaa>
 8004014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004016:	2b00      	cmp	r3, #0
 8004018:	d01b      	beq.n	8004052 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800401a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800401c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800401e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004020:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004022:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004026:	2202      	movs	r2, #2
 8004028:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800402c:	2300      	movs	r3, #0
 800402e:	9303      	str	r3, [sp, #12]
 8004030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004032:	9302      	str	r3, [sp, #8]
 8004034:	f107 0314 	add.w	r3, r7, #20
 8004038:	9301      	str	r3, [sp, #4]
 800403a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800403c:	9300      	str	r3, [sp, #0]
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	68b9      	ldr	r1, [r7, #8]
 8004044:	68f8      	ldr	r0, [r7, #12]
 8004046:	f000 f850 	bl	80040ea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800404a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800404c:	f000 f8d4 	bl	80041f8 <prvAddNewTaskToReadyList>
 8004050:	e001      	b.n	8004056 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8004052:	2300      	movs	r3, #0
 8004054:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004056:	697b      	ldr	r3, [r7, #20]
	}
 8004058:	4618      	mov	r0, r3
 800405a:	3728      	adds	r7, #40	; 0x28
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004060:	b580      	push	{r7, lr}
 8004062:	b08c      	sub	sp, #48	; 0x30
 8004064:	af04      	add	r7, sp, #16
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	603b      	str	r3, [r7, #0]
 800406c:	4613      	mov	r3, r2
 800406e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004070:	88fb      	ldrh	r3, [r7, #6]
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	4618      	mov	r0, r3
 8004076:	f001 fb91 	bl	800579c <pvPortMalloc>
 800407a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00e      	beq.n	80040a0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004082:	205c      	movs	r0, #92	; 0x5c
 8004084:	f001 fb8a 	bl	800579c <pvPortMalloc>
 8004088:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d003      	beq.n	8004098 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	631a      	str	r2, [r3, #48]	; 0x30
 8004096:	e005      	b.n	80040a4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004098:	6978      	ldr	r0, [r7, #20]
 800409a:	f001 fc43 	bl	8005924 <vPortFree>
 800409e:	e001      	b.n	80040a4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80040a0:	2300      	movs	r3, #0
 80040a2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d017      	beq.n	80040da <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80040b2:	88fa      	ldrh	r2, [r7, #6]
 80040b4:	2300      	movs	r3, #0
 80040b6:	9303      	str	r3, [sp, #12]
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	9302      	str	r3, [sp, #8]
 80040bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040be:	9301      	str	r3, [sp, #4]
 80040c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c2:	9300      	str	r3, [sp, #0]
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	68b9      	ldr	r1, [r7, #8]
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	f000 f80e 	bl	80040ea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80040ce:	69f8      	ldr	r0, [r7, #28]
 80040d0:	f000 f892 	bl	80041f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80040d4:	2301      	movs	r3, #1
 80040d6:	61bb      	str	r3, [r7, #24]
 80040d8:	e002      	b.n	80040e0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80040da:	f04f 33ff 	mov.w	r3, #4294967295
 80040de:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80040e0:	69bb      	ldr	r3, [r7, #24]
	}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3720      	adds	r7, #32
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b088      	sub	sp, #32
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	60f8      	str	r0, [r7, #12]
 80040f2:	60b9      	str	r1, [r7, #8]
 80040f4:	607a      	str	r2, [r7, #4]
 80040f6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80040f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040fa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	461a      	mov	r2, r3
 8004102:	21a5      	movs	r1, #165	; 0xa5
 8004104:	f001 fdee 	bl	8005ce4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004112:	3b01      	subs	r3, #1
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	4413      	add	r3, r2
 8004118:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	f023 0307 	bic.w	r3, r3, #7
 8004120:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	f003 0307 	and.w	r3, r3, #7
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00a      	beq.n	8004142 <prvInitialiseNewTask+0x58>
	__asm volatile
 800412c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004130:	f383 8811 	msr	BASEPRI, r3
 8004134:	f3bf 8f6f 	isb	sy
 8004138:	f3bf 8f4f 	dsb	sy
 800413c:	617b      	str	r3, [r7, #20]
}
 800413e:	bf00      	nop
 8004140:	e7fe      	b.n	8004140 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004142:	2300      	movs	r3, #0
 8004144:	61fb      	str	r3, [r7, #28]
 8004146:	e012      	b.n	800416e <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004148:	68ba      	ldr	r2, [r7, #8]
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	4413      	add	r3, r2
 800414e:	7819      	ldrb	r1, [r3, #0]
 8004150:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	4413      	add	r3, r2
 8004156:	3334      	adds	r3, #52	; 0x34
 8004158:	460a      	mov	r2, r1
 800415a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800415c:	68ba      	ldr	r2, [r7, #8]
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	4413      	add	r3, r2
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d006      	beq.n	8004176 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	3301      	adds	r3, #1
 800416c:	61fb      	str	r3, [r7, #28]
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	2b0f      	cmp	r3, #15
 8004172:	d9e9      	bls.n	8004148 <prvInitialiseNewTask+0x5e>
 8004174:	e000      	b.n	8004178 <prvInitialiseNewTask+0x8e>
		{
			break;
 8004176:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004182:	2b37      	cmp	r3, #55	; 0x37
 8004184:	d901      	bls.n	800418a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004186:	2337      	movs	r3, #55	; 0x37
 8004188:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800418a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800418e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004192:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004194:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004198:	2200      	movs	r2, #0
 800419a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800419c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419e:	3304      	adds	r3, #4
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7ff f98c 	bl	80034be <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80041a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a8:	3318      	adds	r3, #24
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7ff f987 	bl	80034be <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80041b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041b4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80041bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041be:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80041c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041c4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80041c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c8:	2200      	movs	r2, #0
 80041ca:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80041cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	68f9      	ldr	r1, [r7, #12]
 80041d8:	69b8      	ldr	r0, [r7, #24]
 80041da:	f001 f8ef 	bl	80053bc <pxPortInitialiseStack>
 80041de:	4602      	mov	r2, r0
 80041e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80041e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d002      	beq.n	80041f0 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80041ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041ee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041f0:	bf00      	nop
 80041f2:	3720      	adds	r7, #32
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004200:	f001 f9cc 	bl	800559c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004204:	4b2d      	ldr	r3, [pc, #180]	; (80042bc <prvAddNewTaskToReadyList+0xc4>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	3301      	adds	r3, #1
 800420a:	4a2c      	ldr	r2, [pc, #176]	; (80042bc <prvAddNewTaskToReadyList+0xc4>)
 800420c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800420e:	4b2c      	ldr	r3, [pc, #176]	; (80042c0 <prvAddNewTaskToReadyList+0xc8>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d109      	bne.n	800422a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004216:	4a2a      	ldr	r2, [pc, #168]	; (80042c0 <prvAddNewTaskToReadyList+0xc8>)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800421c:	4b27      	ldr	r3, [pc, #156]	; (80042bc <prvAddNewTaskToReadyList+0xc4>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d110      	bne.n	8004246 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004224:	f000 fc16 	bl	8004a54 <prvInitialiseTaskLists>
 8004228:	e00d      	b.n	8004246 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800422a:	4b26      	ldr	r3, [pc, #152]	; (80042c4 <prvAddNewTaskToReadyList+0xcc>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d109      	bne.n	8004246 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004232:	4b23      	ldr	r3, [pc, #140]	; (80042c0 <prvAddNewTaskToReadyList+0xc8>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800423c:	429a      	cmp	r2, r3
 800423e:	d802      	bhi.n	8004246 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004240:	4a1f      	ldr	r2, [pc, #124]	; (80042c0 <prvAddNewTaskToReadyList+0xc8>)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004246:	4b20      	ldr	r3, [pc, #128]	; (80042c8 <prvAddNewTaskToReadyList+0xd0>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	3301      	adds	r3, #1
 800424c:	4a1e      	ldr	r2, [pc, #120]	; (80042c8 <prvAddNewTaskToReadyList+0xd0>)
 800424e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004250:	4b1d      	ldr	r3, [pc, #116]	; (80042c8 <prvAddNewTaskToReadyList+0xd0>)
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800425c:	4b1b      	ldr	r3, [pc, #108]	; (80042cc <prvAddNewTaskToReadyList+0xd4>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	429a      	cmp	r2, r3
 8004262:	d903      	bls.n	800426c <prvAddNewTaskToReadyList+0x74>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004268:	4a18      	ldr	r2, [pc, #96]	; (80042cc <prvAddNewTaskToReadyList+0xd4>)
 800426a:	6013      	str	r3, [r2, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004270:	4613      	mov	r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	4413      	add	r3, r2
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	4a15      	ldr	r2, [pc, #84]	; (80042d0 <prvAddNewTaskToReadyList+0xd8>)
 800427a:	441a      	add	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	3304      	adds	r3, #4
 8004280:	4619      	mov	r1, r3
 8004282:	4610      	mov	r0, r2
 8004284:	f7ff f927 	bl	80034d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004288:	f001 f9b8 	bl	80055fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800428c:	4b0d      	ldr	r3, [pc, #52]	; (80042c4 <prvAddNewTaskToReadyList+0xcc>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00e      	beq.n	80042b2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004294:	4b0a      	ldr	r3, [pc, #40]	; (80042c0 <prvAddNewTaskToReadyList+0xc8>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429e:	429a      	cmp	r2, r3
 80042a0:	d207      	bcs.n	80042b2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80042a2:	4b0c      	ldr	r3, [pc, #48]	; (80042d4 <prvAddNewTaskToReadyList+0xdc>)
 80042a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042a8:	601a      	str	r2, [r3, #0]
 80042aa:	f3bf 8f4f 	dsb	sy
 80042ae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042b2:	bf00      	nop
 80042b4:	3708      	adds	r7, #8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	20000d60 	.word	0x20000d60
 80042c0:	2000088c 	.word	0x2000088c
 80042c4:	20000d6c 	.word	0x20000d6c
 80042c8:	20000d7c 	.word	0x20000d7c
 80042cc:	20000d68 	.word	0x20000d68
 80042d0:	20000890 	.word	0x20000890
 80042d4:	e000ed04 	.word	0xe000ed04

080042d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80042e0:	2300      	movs	r3, #0
 80042e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d017      	beq.n	800431a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80042ea:	4b13      	ldr	r3, [pc, #76]	; (8004338 <vTaskDelay+0x60>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00a      	beq.n	8004308 <vTaskDelay+0x30>
	__asm volatile
 80042f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f6:	f383 8811 	msr	BASEPRI, r3
 80042fa:	f3bf 8f6f 	isb	sy
 80042fe:	f3bf 8f4f 	dsb	sy
 8004302:	60bb      	str	r3, [r7, #8]
}
 8004304:	bf00      	nop
 8004306:	e7fe      	b.n	8004306 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004308:	f000 f880 	bl	800440c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800430c:	2100      	movs	r1, #0
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 fcee 	bl	8004cf0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004314:	f000 f888 	bl	8004428 <xTaskResumeAll>
 8004318:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d107      	bne.n	8004330 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004320:	4b06      	ldr	r3, [pc, #24]	; (800433c <vTaskDelay+0x64>)
 8004322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	f3bf 8f4f 	dsb	sy
 800432c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004330:	bf00      	nop
 8004332:	3710      	adds	r7, #16
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	20000d88 	.word	0x20000d88
 800433c:	e000ed04 	.word	0xe000ed04

08004340 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b08a      	sub	sp, #40	; 0x28
 8004344:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004346:	2300      	movs	r3, #0
 8004348:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800434a:	2300      	movs	r3, #0
 800434c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800434e:	463a      	mov	r2, r7
 8004350:	1d39      	adds	r1, r7, #4
 8004352:	f107 0308 	add.w	r3, r7, #8
 8004356:	4618      	mov	r0, r3
 8004358:	f7ff f860 	bl	800341c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800435c:	6839      	ldr	r1, [r7, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68ba      	ldr	r2, [r7, #8]
 8004362:	9202      	str	r2, [sp, #8]
 8004364:	9301      	str	r3, [sp, #4]
 8004366:	2300      	movs	r3, #0
 8004368:	9300      	str	r3, [sp, #0]
 800436a:	2300      	movs	r3, #0
 800436c:	460a      	mov	r2, r1
 800436e:	4921      	ldr	r1, [pc, #132]	; (80043f4 <vTaskStartScheduler+0xb4>)
 8004370:	4821      	ldr	r0, [pc, #132]	; (80043f8 <vTaskStartScheduler+0xb8>)
 8004372:	f7ff fe19 	bl	8003fa8 <xTaskCreateStatic>
 8004376:	4603      	mov	r3, r0
 8004378:	4a20      	ldr	r2, [pc, #128]	; (80043fc <vTaskStartScheduler+0xbc>)
 800437a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800437c:	4b1f      	ldr	r3, [pc, #124]	; (80043fc <vTaskStartScheduler+0xbc>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d002      	beq.n	800438a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004384:	2301      	movs	r3, #1
 8004386:	617b      	str	r3, [r7, #20]
 8004388:	e001      	b.n	800438e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800438a:	2300      	movs	r3, #0
 800438c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d102      	bne.n	800439a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004394:	f000 fd00 	bl	8004d98 <xTimerCreateTimerTask>
 8004398:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d116      	bne.n	80043ce <vTaskStartScheduler+0x8e>
	__asm volatile
 80043a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a4:	f383 8811 	msr	BASEPRI, r3
 80043a8:	f3bf 8f6f 	isb	sy
 80043ac:	f3bf 8f4f 	dsb	sy
 80043b0:	613b      	str	r3, [r7, #16]
}
 80043b2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80043b4:	4b12      	ldr	r3, [pc, #72]	; (8004400 <vTaskStartScheduler+0xc0>)
 80043b6:	f04f 32ff 	mov.w	r2, #4294967295
 80043ba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80043bc:	4b11      	ldr	r3, [pc, #68]	; (8004404 <vTaskStartScheduler+0xc4>)
 80043be:	2201      	movs	r2, #1
 80043c0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80043c2:	4b11      	ldr	r3, [pc, #68]	; (8004408 <vTaskStartScheduler+0xc8>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80043c8:	f001 f876 	bl	80054b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80043cc:	e00e      	b.n	80043ec <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d4:	d10a      	bne.n	80043ec <vTaskStartScheduler+0xac>
	__asm volatile
 80043d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043da:	f383 8811 	msr	BASEPRI, r3
 80043de:	f3bf 8f6f 	isb	sy
 80043e2:	f3bf 8f4f 	dsb	sy
 80043e6:	60fb      	str	r3, [r7, #12]
}
 80043e8:	bf00      	nop
 80043ea:	e7fe      	b.n	80043ea <vTaskStartScheduler+0xaa>
}
 80043ec:	bf00      	nop
 80043ee:	3718      	adds	r7, #24
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	0800650c 	.word	0x0800650c
 80043f8:	08004a25 	.word	0x08004a25
 80043fc:	20000d84 	.word	0x20000d84
 8004400:	20000d80 	.word	0x20000d80
 8004404:	20000d6c 	.word	0x20000d6c
 8004408:	20000d64 	.word	0x20000d64

0800440c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800440c:	b480      	push	{r7}
 800440e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004410:	4b04      	ldr	r3, [pc, #16]	; (8004424 <vTaskSuspendAll+0x18>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	3301      	adds	r3, #1
 8004416:	4a03      	ldr	r2, [pc, #12]	; (8004424 <vTaskSuspendAll+0x18>)
 8004418:	6013      	str	r3, [r2, #0]
}
 800441a:	bf00      	nop
 800441c:	46bd      	mov	sp, r7
 800441e:	bc80      	pop	{r7}
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	20000d88 	.word	0x20000d88

08004428 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800442e:	2300      	movs	r3, #0
 8004430:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004432:	2300      	movs	r3, #0
 8004434:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004436:	4b42      	ldr	r3, [pc, #264]	; (8004540 <xTaskResumeAll+0x118>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10a      	bne.n	8004454 <xTaskResumeAll+0x2c>
	__asm volatile
 800443e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004442:	f383 8811 	msr	BASEPRI, r3
 8004446:	f3bf 8f6f 	isb	sy
 800444a:	f3bf 8f4f 	dsb	sy
 800444e:	603b      	str	r3, [r7, #0]
}
 8004450:	bf00      	nop
 8004452:	e7fe      	b.n	8004452 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004454:	f001 f8a2 	bl	800559c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004458:	4b39      	ldr	r3, [pc, #228]	; (8004540 <xTaskResumeAll+0x118>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	3b01      	subs	r3, #1
 800445e:	4a38      	ldr	r2, [pc, #224]	; (8004540 <xTaskResumeAll+0x118>)
 8004460:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004462:	4b37      	ldr	r3, [pc, #220]	; (8004540 <xTaskResumeAll+0x118>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d162      	bne.n	8004530 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800446a:	4b36      	ldr	r3, [pc, #216]	; (8004544 <xTaskResumeAll+0x11c>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d05e      	beq.n	8004530 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004472:	e02f      	b.n	80044d4 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004474:	4b34      	ldr	r3, [pc, #208]	; (8004548 <xTaskResumeAll+0x120>)
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	3318      	adds	r3, #24
 8004480:	4618      	mov	r0, r3
 8004482:	f7ff f883 	bl	800358c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	3304      	adds	r3, #4
 800448a:	4618      	mov	r0, r3
 800448c:	f7ff f87e 	bl	800358c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004494:	4b2d      	ldr	r3, [pc, #180]	; (800454c <xTaskResumeAll+0x124>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	429a      	cmp	r2, r3
 800449a:	d903      	bls.n	80044a4 <xTaskResumeAll+0x7c>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a0:	4a2a      	ldr	r2, [pc, #168]	; (800454c <xTaskResumeAll+0x124>)
 80044a2:	6013      	str	r3, [r2, #0]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a8:	4613      	mov	r3, r2
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	4413      	add	r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	4a27      	ldr	r2, [pc, #156]	; (8004550 <xTaskResumeAll+0x128>)
 80044b2:	441a      	add	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	3304      	adds	r3, #4
 80044b8:	4619      	mov	r1, r3
 80044ba:	4610      	mov	r0, r2
 80044bc:	f7ff f80b 	bl	80034d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044c4:	4b23      	ldr	r3, [pc, #140]	; (8004554 <xTaskResumeAll+0x12c>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d302      	bcc.n	80044d4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80044ce:	4b22      	ldr	r3, [pc, #136]	; (8004558 <xTaskResumeAll+0x130>)
 80044d0:	2201      	movs	r2, #1
 80044d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80044d4:	4b1c      	ldr	r3, [pc, #112]	; (8004548 <xTaskResumeAll+0x120>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1cb      	bne.n	8004474 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80044e2:	f000 fb55 	bl	8004b90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80044e6:	4b1d      	ldr	r3, [pc, #116]	; (800455c <xTaskResumeAll+0x134>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d010      	beq.n	8004514 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80044f2:	f000 f845 	bl	8004580 <xTaskIncrementTick>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d002      	beq.n	8004502 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80044fc:	4b16      	ldr	r3, [pc, #88]	; (8004558 <xTaskResumeAll+0x130>)
 80044fe:	2201      	movs	r2, #1
 8004500:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	3b01      	subs	r3, #1
 8004506:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1f1      	bne.n	80044f2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800450e:	4b13      	ldr	r3, [pc, #76]	; (800455c <xTaskResumeAll+0x134>)
 8004510:	2200      	movs	r2, #0
 8004512:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004514:	4b10      	ldr	r3, [pc, #64]	; (8004558 <xTaskResumeAll+0x130>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d009      	beq.n	8004530 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800451c:	2301      	movs	r3, #1
 800451e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004520:	4b0f      	ldr	r3, [pc, #60]	; (8004560 <xTaskResumeAll+0x138>)
 8004522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004526:	601a      	str	r2, [r3, #0]
 8004528:	f3bf 8f4f 	dsb	sy
 800452c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004530:	f001 f864 	bl	80055fc <vPortExitCritical>

	return xAlreadyYielded;
 8004534:	68bb      	ldr	r3, [r7, #8]
}
 8004536:	4618      	mov	r0, r3
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	20000d88 	.word	0x20000d88
 8004544:	20000d60 	.word	0x20000d60
 8004548:	20000d20 	.word	0x20000d20
 800454c:	20000d68 	.word	0x20000d68
 8004550:	20000890 	.word	0x20000890
 8004554:	2000088c 	.word	0x2000088c
 8004558:	20000d74 	.word	0x20000d74
 800455c:	20000d70 	.word	0x20000d70
 8004560:	e000ed04 	.word	0xe000ed04

08004564 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800456a:	4b04      	ldr	r3, [pc, #16]	; (800457c <xTaskGetTickCount+0x18>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004570:	687b      	ldr	r3, [r7, #4]
}
 8004572:	4618      	mov	r0, r3
 8004574:	370c      	adds	r7, #12
 8004576:	46bd      	mov	sp, r7
 8004578:	bc80      	pop	{r7}
 800457a:	4770      	bx	lr
 800457c:	20000d64 	.word	0x20000d64

08004580 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b086      	sub	sp, #24
 8004584:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004586:	2300      	movs	r3, #0
 8004588:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800458a:	4b51      	ldr	r3, [pc, #324]	; (80046d0 <xTaskIncrementTick+0x150>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	f040 808e 	bne.w	80046b0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004594:	4b4f      	ldr	r3, [pc, #316]	; (80046d4 <xTaskIncrementTick+0x154>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	3301      	adds	r3, #1
 800459a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800459c:	4a4d      	ldr	r2, [pc, #308]	; (80046d4 <xTaskIncrementTick+0x154>)
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d120      	bne.n	80045ea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80045a8:	4b4b      	ldr	r3, [pc, #300]	; (80046d8 <xTaskIncrementTick+0x158>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00a      	beq.n	80045c8 <xTaskIncrementTick+0x48>
	__asm volatile
 80045b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b6:	f383 8811 	msr	BASEPRI, r3
 80045ba:	f3bf 8f6f 	isb	sy
 80045be:	f3bf 8f4f 	dsb	sy
 80045c2:	603b      	str	r3, [r7, #0]
}
 80045c4:	bf00      	nop
 80045c6:	e7fe      	b.n	80045c6 <xTaskIncrementTick+0x46>
 80045c8:	4b43      	ldr	r3, [pc, #268]	; (80046d8 <xTaskIncrementTick+0x158>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	60fb      	str	r3, [r7, #12]
 80045ce:	4b43      	ldr	r3, [pc, #268]	; (80046dc <xTaskIncrementTick+0x15c>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a41      	ldr	r2, [pc, #260]	; (80046d8 <xTaskIncrementTick+0x158>)
 80045d4:	6013      	str	r3, [r2, #0]
 80045d6:	4a41      	ldr	r2, [pc, #260]	; (80046dc <xTaskIncrementTick+0x15c>)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6013      	str	r3, [r2, #0]
 80045dc:	4b40      	ldr	r3, [pc, #256]	; (80046e0 <xTaskIncrementTick+0x160>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	3301      	adds	r3, #1
 80045e2:	4a3f      	ldr	r2, [pc, #252]	; (80046e0 <xTaskIncrementTick+0x160>)
 80045e4:	6013      	str	r3, [r2, #0]
 80045e6:	f000 fad3 	bl	8004b90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80045ea:	4b3e      	ldr	r3, [pc, #248]	; (80046e4 <xTaskIncrementTick+0x164>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d34e      	bcc.n	8004692 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045f4:	4b38      	ldr	r3, [pc, #224]	; (80046d8 <xTaskIncrementTick+0x158>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <xTaskIncrementTick+0x82>
 80045fe:	2301      	movs	r3, #1
 8004600:	e000      	b.n	8004604 <xTaskIncrementTick+0x84>
 8004602:	2300      	movs	r3, #0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d004      	beq.n	8004612 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004608:	4b36      	ldr	r3, [pc, #216]	; (80046e4 <xTaskIncrementTick+0x164>)
 800460a:	f04f 32ff 	mov.w	r2, #4294967295
 800460e:	601a      	str	r2, [r3, #0]
					break;
 8004610:	e03f      	b.n	8004692 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004612:	4b31      	ldr	r3, [pc, #196]	; (80046d8 <xTaskIncrementTick+0x158>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	429a      	cmp	r2, r3
 8004628:	d203      	bcs.n	8004632 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800462a:	4a2e      	ldr	r2, [pc, #184]	; (80046e4 <xTaskIncrementTick+0x164>)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6013      	str	r3, [r2, #0]
						break;
 8004630:	e02f      	b.n	8004692 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	3304      	adds	r3, #4
 8004636:	4618      	mov	r0, r3
 8004638:	f7fe ffa8 	bl	800358c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004640:	2b00      	cmp	r3, #0
 8004642:	d004      	beq.n	800464e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	3318      	adds	r3, #24
 8004648:	4618      	mov	r0, r3
 800464a:	f7fe ff9f 	bl	800358c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004652:	4b25      	ldr	r3, [pc, #148]	; (80046e8 <xTaskIncrementTick+0x168>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	429a      	cmp	r2, r3
 8004658:	d903      	bls.n	8004662 <xTaskIncrementTick+0xe2>
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465e:	4a22      	ldr	r2, [pc, #136]	; (80046e8 <xTaskIncrementTick+0x168>)
 8004660:	6013      	str	r3, [r2, #0]
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004666:	4613      	mov	r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	4413      	add	r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	4a1f      	ldr	r2, [pc, #124]	; (80046ec <xTaskIncrementTick+0x16c>)
 8004670:	441a      	add	r2, r3
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	3304      	adds	r3, #4
 8004676:	4619      	mov	r1, r3
 8004678:	4610      	mov	r0, r2
 800467a:	f7fe ff2c 	bl	80034d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004682:	4b1b      	ldr	r3, [pc, #108]	; (80046f0 <xTaskIncrementTick+0x170>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004688:	429a      	cmp	r2, r3
 800468a:	d3b3      	bcc.n	80045f4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800468c:	2301      	movs	r3, #1
 800468e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004690:	e7b0      	b.n	80045f4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004692:	4b17      	ldr	r3, [pc, #92]	; (80046f0 <xTaskIncrementTick+0x170>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004698:	4914      	ldr	r1, [pc, #80]	; (80046ec <xTaskIncrementTick+0x16c>)
 800469a:	4613      	mov	r3, r2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	4413      	add	r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	440b      	add	r3, r1
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d907      	bls.n	80046ba <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80046aa:	2301      	movs	r3, #1
 80046ac:	617b      	str	r3, [r7, #20]
 80046ae:	e004      	b.n	80046ba <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80046b0:	4b10      	ldr	r3, [pc, #64]	; (80046f4 <xTaskIncrementTick+0x174>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	3301      	adds	r3, #1
 80046b6:	4a0f      	ldr	r2, [pc, #60]	; (80046f4 <xTaskIncrementTick+0x174>)
 80046b8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80046ba:	4b0f      	ldr	r3, [pc, #60]	; (80046f8 <xTaskIncrementTick+0x178>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d001      	beq.n	80046c6 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80046c2:	2301      	movs	r3, #1
 80046c4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80046c6:	697b      	ldr	r3, [r7, #20]
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3718      	adds	r7, #24
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	20000d88 	.word	0x20000d88
 80046d4:	20000d64 	.word	0x20000d64
 80046d8:	20000d18 	.word	0x20000d18
 80046dc:	20000d1c 	.word	0x20000d1c
 80046e0:	20000d78 	.word	0x20000d78
 80046e4:	20000d80 	.word	0x20000d80
 80046e8:	20000d68 	.word	0x20000d68
 80046ec:	20000890 	.word	0x20000890
 80046f0:	2000088c 	.word	0x2000088c
 80046f4:	20000d70 	.word	0x20000d70
 80046f8:	20000d74 	.word	0x20000d74

080046fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80046fc:	b480      	push	{r7}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004702:	4b27      	ldr	r3, [pc, #156]	; (80047a0 <vTaskSwitchContext+0xa4>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d003      	beq.n	8004712 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800470a:	4b26      	ldr	r3, [pc, #152]	; (80047a4 <vTaskSwitchContext+0xa8>)
 800470c:	2201      	movs	r2, #1
 800470e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004710:	e041      	b.n	8004796 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004712:	4b24      	ldr	r3, [pc, #144]	; (80047a4 <vTaskSwitchContext+0xa8>)
 8004714:	2200      	movs	r2, #0
 8004716:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004718:	4b23      	ldr	r3, [pc, #140]	; (80047a8 <vTaskSwitchContext+0xac>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	60fb      	str	r3, [r7, #12]
 800471e:	e010      	b.n	8004742 <vTaskSwitchContext+0x46>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10a      	bne.n	800473c <vTaskSwitchContext+0x40>
	__asm volatile
 8004726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800472a:	f383 8811 	msr	BASEPRI, r3
 800472e:	f3bf 8f6f 	isb	sy
 8004732:	f3bf 8f4f 	dsb	sy
 8004736:	607b      	str	r3, [r7, #4]
}
 8004738:	bf00      	nop
 800473a:	e7fe      	b.n	800473a <vTaskSwitchContext+0x3e>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	3b01      	subs	r3, #1
 8004740:	60fb      	str	r3, [r7, #12]
 8004742:	491a      	ldr	r1, [pc, #104]	; (80047ac <vTaskSwitchContext+0xb0>)
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	4613      	mov	r3, r2
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	4413      	add	r3, r2
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	440b      	add	r3, r1
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d0e4      	beq.n	8004720 <vTaskSwitchContext+0x24>
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	4613      	mov	r3, r2
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	4413      	add	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4a12      	ldr	r2, [pc, #72]	; (80047ac <vTaskSwitchContext+0xb0>)
 8004762:	4413      	add	r3, r2
 8004764:	60bb      	str	r3, [r7, #8]
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	685a      	ldr	r2, [r3, #4]
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	605a      	str	r2, [r3, #4]
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	685a      	ldr	r2, [r3, #4]
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	3308      	adds	r3, #8
 8004778:	429a      	cmp	r2, r3
 800477a:	d104      	bne.n	8004786 <vTaskSwitchContext+0x8a>
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	685a      	ldr	r2, [r3, #4]
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	605a      	str	r2, [r3, #4]
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	4a08      	ldr	r2, [pc, #32]	; (80047b0 <vTaskSwitchContext+0xb4>)
 800478e:	6013      	str	r3, [r2, #0]
 8004790:	4a05      	ldr	r2, [pc, #20]	; (80047a8 <vTaskSwitchContext+0xac>)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6013      	str	r3, [r2, #0]
}
 8004796:	bf00      	nop
 8004798:	3714      	adds	r7, #20
 800479a:	46bd      	mov	sp, r7
 800479c:	bc80      	pop	{r7}
 800479e:	4770      	bx	lr
 80047a0:	20000d88 	.word	0x20000d88
 80047a4:	20000d74 	.word	0x20000d74
 80047a8:	20000d68 	.word	0x20000d68
 80047ac:	20000890 	.word	0x20000890
 80047b0:	2000088c 	.word	0x2000088c

080047b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d10a      	bne.n	80047da <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80047c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c8:	f383 8811 	msr	BASEPRI, r3
 80047cc:	f3bf 8f6f 	isb	sy
 80047d0:	f3bf 8f4f 	dsb	sy
 80047d4:	60fb      	str	r3, [r7, #12]
}
 80047d6:	bf00      	nop
 80047d8:	e7fe      	b.n	80047d8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80047da:	4b07      	ldr	r3, [pc, #28]	; (80047f8 <vTaskPlaceOnEventList+0x44>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	3318      	adds	r3, #24
 80047e0:	4619      	mov	r1, r3
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f7fe fe9a 	bl	800351c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80047e8:	2101      	movs	r1, #1
 80047ea:	6838      	ldr	r0, [r7, #0]
 80047ec:	f000 fa80 	bl	8004cf0 <prvAddCurrentTaskToDelayedList>
}
 80047f0:	bf00      	nop
 80047f2:	3710      	adds	r7, #16
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	2000088c 	.word	0x2000088c

080047fc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b086      	sub	sp, #24
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10a      	bne.n	8004824 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800480e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004812:	f383 8811 	msr	BASEPRI, r3
 8004816:	f3bf 8f6f 	isb	sy
 800481a:	f3bf 8f4f 	dsb	sy
 800481e:	617b      	str	r3, [r7, #20]
}
 8004820:	bf00      	nop
 8004822:	e7fe      	b.n	8004822 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004824:	4b0a      	ldr	r3, [pc, #40]	; (8004850 <vTaskPlaceOnEventListRestricted+0x54>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	3318      	adds	r3, #24
 800482a:	4619      	mov	r1, r3
 800482c:	68f8      	ldr	r0, [r7, #12]
 800482e:	f7fe fe52 	bl	80034d6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d002      	beq.n	800483e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004838:	f04f 33ff 	mov.w	r3, #4294967295
 800483c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800483e:	6879      	ldr	r1, [r7, #4]
 8004840:	68b8      	ldr	r0, [r7, #8]
 8004842:	f000 fa55 	bl	8004cf0 <prvAddCurrentTaskToDelayedList>
	}
 8004846:	bf00      	nop
 8004848:	3718      	adds	r7, #24
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	2000088c 	.word	0x2000088c

08004854 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10a      	bne.n	8004880 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800486a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800486e:	f383 8811 	msr	BASEPRI, r3
 8004872:	f3bf 8f6f 	isb	sy
 8004876:	f3bf 8f4f 	dsb	sy
 800487a:	60fb      	str	r3, [r7, #12]
}
 800487c:	bf00      	nop
 800487e:	e7fe      	b.n	800487e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	3318      	adds	r3, #24
 8004884:	4618      	mov	r0, r3
 8004886:	f7fe fe81 	bl	800358c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800488a:	4b1e      	ldr	r3, [pc, #120]	; (8004904 <xTaskRemoveFromEventList+0xb0>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d11d      	bne.n	80048ce <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	3304      	adds	r3, #4
 8004896:	4618      	mov	r0, r3
 8004898:	f7fe fe78 	bl	800358c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048a0:	4b19      	ldr	r3, [pc, #100]	; (8004908 <xTaskRemoveFromEventList+0xb4>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d903      	bls.n	80048b0 <xTaskRemoveFromEventList+0x5c>
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ac:	4a16      	ldr	r2, [pc, #88]	; (8004908 <xTaskRemoveFromEventList+0xb4>)
 80048ae:	6013      	str	r3, [r2, #0]
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048b4:	4613      	mov	r3, r2
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	4413      	add	r3, r2
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	4a13      	ldr	r2, [pc, #76]	; (800490c <xTaskRemoveFromEventList+0xb8>)
 80048be:	441a      	add	r2, r3
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	3304      	adds	r3, #4
 80048c4:	4619      	mov	r1, r3
 80048c6:	4610      	mov	r0, r2
 80048c8:	f7fe fe05 	bl	80034d6 <vListInsertEnd>
 80048cc:	e005      	b.n	80048da <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	3318      	adds	r3, #24
 80048d2:	4619      	mov	r1, r3
 80048d4:	480e      	ldr	r0, [pc, #56]	; (8004910 <xTaskRemoveFromEventList+0xbc>)
 80048d6:	f7fe fdfe 	bl	80034d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048de:	4b0d      	ldr	r3, [pc, #52]	; (8004914 <xTaskRemoveFromEventList+0xc0>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d905      	bls.n	80048f4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80048e8:	2301      	movs	r3, #1
 80048ea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80048ec:	4b0a      	ldr	r3, [pc, #40]	; (8004918 <xTaskRemoveFromEventList+0xc4>)
 80048ee:	2201      	movs	r2, #1
 80048f0:	601a      	str	r2, [r3, #0]
 80048f2:	e001      	b.n	80048f8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80048f4:	2300      	movs	r3, #0
 80048f6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80048f8:	697b      	ldr	r3, [r7, #20]
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3718      	adds	r7, #24
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	20000d88 	.word	0x20000d88
 8004908:	20000d68 	.word	0x20000d68
 800490c:	20000890 	.word	0x20000890
 8004910:	20000d20 	.word	0x20000d20
 8004914:	2000088c 	.word	0x2000088c
 8004918:	20000d74 	.word	0x20000d74

0800491c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004924:	4b06      	ldr	r3, [pc, #24]	; (8004940 <vTaskInternalSetTimeOutState+0x24>)
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800492c:	4b05      	ldr	r3, [pc, #20]	; (8004944 <vTaskInternalSetTimeOutState+0x28>)
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	605a      	str	r2, [r3, #4]
}
 8004934:	bf00      	nop
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	bc80      	pop	{r7}
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	20000d78 	.word	0x20000d78
 8004944:	20000d64 	.word	0x20000d64

08004948 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b088      	sub	sp, #32
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d10a      	bne.n	800496e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800495c:	f383 8811 	msr	BASEPRI, r3
 8004960:	f3bf 8f6f 	isb	sy
 8004964:	f3bf 8f4f 	dsb	sy
 8004968:	613b      	str	r3, [r7, #16]
}
 800496a:	bf00      	nop
 800496c:	e7fe      	b.n	800496c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d10a      	bne.n	800498a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004978:	f383 8811 	msr	BASEPRI, r3
 800497c:	f3bf 8f6f 	isb	sy
 8004980:	f3bf 8f4f 	dsb	sy
 8004984:	60fb      	str	r3, [r7, #12]
}
 8004986:	bf00      	nop
 8004988:	e7fe      	b.n	8004988 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800498a:	f000 fe07 	bl	800559c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800498e:	4b1d      	ldr	r3, [pc, #116]	; (8004a04 <xTaskCheckForTimeOut+0xbc>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	69ba      	ldr	r2, [r7, #24]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a6:	d102      	bne.n	80049ae <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80049a8:	2300      	movs	r3, #0
 80049aa:	61fb      	str	r3, [r7, #28]
 80049ac:	e023      	b.n	80049f6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	4b15      	ldr	r3, [pc, #84]	; (8004a08 <xTaskCheckForTimeOut+0xc0>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d007      	beq.n	80049ca <xTaskCheckForTimeOut+0x82>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	69ba      	ldr	r2, [r7, #24]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d302      	bcc.n	80049ca <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80049c4:	2301      	movs	r3, #1
 80049c6:	61fb      	str	r3, [r7, #28]
 80049c8:	e015      	b.n	80049f6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d20b      	bcs.n	80049ec <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	1ad2      	subs	r2, r2, r3
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f7ff ff9b 	bl	800491c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80049e6:	2300      	movs	r3, #0
 80049e8:	61fb      	str	r3, [r7, #28]
 80049ea:	e004      	b.n	80049f6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	2200      	movs	r2, #0
 80049f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80049f2:	2301      	movs	r3, #1
 80049f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80049f6:	f000 fe01 	bl	80055fc <vPortExitCritical>

	return xReturn;
 80049fa:	69fb      	ldr	r3, [r7, #28]
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3720      	adds	r7, #32
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	20000d64 	.word	0x20000d64
 8004a08:	20000d78 	.word	0x20000d78

08004a0c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004a10:	4b03      	ldr	r3, [pc, #12]	; (8004a20 <vTaskMissedYield+0x14>)
 8004a12:	2201      	movs	r2, #1
 8004a14:	601a      	str	r2, [r3, #0]
}
 8004a16:	bf00      	nop
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bc80      	pop	{r7}
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	20000d74 	.word	0x20000d74

08004a24 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004a2c:	f000 f852 	bl	8004ad4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004a30:	4b06      	ldr	r3, [pc, #24]	; (8004a4c <prvIdleTask+0x28>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d9f9      	bls.n	8004a2c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004a38:	4b05      	ldr	r3, [pc, #20]	; (8004a50 <prvIdleTask+0x2c>)
 8004a3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a3e:	601a      	str	r2, [r3, #0]
 8004a40:	f3bf 8f4f 	dsb	sy
 8004a44:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004a48:	e7f0      	b.n	8004a2c <prvIdleTask+0x8>
 8004a4a:	bf00      	nop
 8004a4c:	20000890 	.word	0x20000890
 8004a50:	e000ed04 	.word	0xe000ed04

08004a54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	607b      	str	r3, [r7, #4]
 8004a5e:	e00c      	b.n	8004a7a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	4613      	mov	r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	4413      	add	r3, r2
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	4a12      	ldr	r2, [pc, #72]	; (8004ab4 <prvInitialiseTaskLists+0x60>)
 8004a6c:	4413      	add	r3, r2
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f7fe fd06 	bl	8003480 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	3301      	adds	r3, #1
 8004a78:	607b      	str	r3, [r7, #4]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2b37      	cmp	r3, #55	; 0x37
 8004a7e:	d9ef      	bls.n	8004a60 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004a80:	480d      	ldr	r0, [pc, #52]	; (8004ab8 <prvInitialiseTaskLists+0x64>)
 8004a82:	f7fe fcfd 	bl	8003480 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004a86:	480d      	ldr	r0, [pc, #52]	; (8004abc <prvInitialiseTaskLists+0x68>)
 8004a88:	f7fe fcfa 	bl	8003480 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004a8c:	480c      	ldr	r0, [pc, #48]	; (8004ac0 <prvInitialiseTaskLists+0x6c>)
 8004a8e:	f7fe fcf7 	bl	8003480 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004a92:	480c      	ldr	r0, [pc, #48]	; (8004ac4 <prvInitialiseTaskLists+0x70>)
 8004a94:	f7fe fcf4 	bl	8003480 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004a98:	480b      	ldr	r0, [pc, #44]	; (8004ac8 <prvInitialiseTaskLists+0x74>)
 8004a9a:	f7fe fcf1 	bl	8003480 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004a9e:	4b0b      	ldr	r3, [pc, #44]	; (8004acc <prvInitialiseTaskLists+0x78>)
 8004aa0:	4a05      	ldr	r2, [pc, #20]	; (8004ab8 <prvInitialiseTaskLists+0x64>)
 8004aa2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004aa4:	4b0a      	ldr	r3, [pc, #40]	; (8004ad0 <prvInitialiseTaskLists+0x7c>)
 8004aa6:	4a05      	ldr	r2, [pc, #20]	; (8004abc <prvInitialiseTaskLists+0x68>)
 8004aa8:	601a      	str	r2, [r3, #0]
}
 8004aaa:	bf00      	nop
 8004aac:	3708      	adds	r7, #8
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	20000890 	.word	0x20000890
 8004ab8:	20000cf0 	.word	0x20000cf0
 8004abc:	20000d04 	.word	0x20000d04
 8004ac0:	20000d20 	.word	0x20000d20
 8004ac4:	20000d34 	.word	0x20000d34
 8004ac8:	20000d4c 	.word	0x20000d4c
 8004acc:	20000d18 	.word	0x20000d18
 8004ad0:	20000d1c 	.word	0x20000d1c

08004ad4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ada:	e019      	b.n	8004b10 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004adc:	f000 fd5e 	bl	800559c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004ae0:	4b10      	ldr	r3, [pc, #64]	; (8004b24 <prvCheckTasksWaitingTermination+0x50>)
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	3304      	adds	r3, #4
 8004aec:	4618      	mov	r0, r3
 8004aee:	f7fe fd4d 	bl	800358c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004af2:	4b0d      	ldr	r3, [pc, #52]	; (8004b28 <prvCheckTasksWaitingTermination+0x54>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	3b01      	subs	r3, #1
 8004af8:	4a0b      	ldr	r2, [pc, #44]	; (8004b28 <prvCheckTasksWaitingTermination+0x54>)
 8004afa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004afc:	4b0b      	ldr	r3, [pc, #44]	; (8004b2c <prvCheckTasksWaitingTermination+0x58>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	3b01      	subs	r3, #1
 8004b02:	4a0a      	ldr	r2, [pc, #40]	; (8004b2c <prvCheckTasksWaitingTermination+0x58>)
 8004b04:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004b06:	f000 fd79 	bl	80055fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 f810 	bl	8004b30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b10:	4b06      	ldr	r3, [pc, #24]	; (8004b2c <prvCheckTasksWaitingTermination+0x58>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1e1      	bne.n	8004adc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004b18:	bf00      	nop
 8004b1a:	bf00      	nop
 8004b1c:	3708      	adds	r7, #8
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	20000d34 	.word	0x20000d34
 8004b28:	20000d60 	.word	0x20000d60
 8004b2c:	20000d48 	.word	0x20000d48

08004b30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d108      	bne.n	8004b54 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b46:	4618      	mov	r0, r3
 8004b48:	f000 feec 	bl	8005924 <vPortFree>
				vPortFree( pxTCB );
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 fee9 	bl	8005924 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004b52:	e018      	b.n	8004b86 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d103      	bne.n	8004b66 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 fee0 	bl	8005924 <vPortFree>
	}
 8004b64:	e00f      	b.n	8004b86 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d00a      	beq.n	8004b86 <prvDeleteTCB+0x56>
	__asm volatile
 8004b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b74:	f383 8811 	msr	BASEPRI, r3
 8004b78:	f3bf 8f6f 	isb	sy
 8004b7c:	f3bf 8f4f 	dsb	sy
 8004b80:	60fb      	str	r3, [r7, #12]
}
 8004b82:	bf00      	nop
 8004b84:	e7fe      	b.n	8004b84 <prvDeleteTCB+0x54>
	}
 8004b86:	bf00      	nop
 8004b88:	3710      	adds	r7, #16
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
	...

08004b90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b96:	4b0e      	ldr	r3, [pc, #56]	; (8004bd0 <prvResetNextTaskUnblockTime+0x40>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d101      	bne.n	8004ba4 <prvResetNextTaskUnblockTime+0x14>
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e000      	b.n	8004ba6 <prvResetNextTaskUnblockTime+0x16>
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d004      	beq.n	8004bb4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004baa:	4b0a      	ldr	r3, [pc, #40]	; (8004bd4 <prvResetNextTaskUnblockTime+0x44>)
 8004bac:	f04f 32ff 	mov.w	r2, #4294967295
 8004bb0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004bb2:	e008      	b.n	8004bc6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004bb4:	4b06      	ldr	r3, [pc, #24]	; (8004bd0 <prvResetNextTaskUnblockTime+0x40>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	4a04      	ldr	r2, [pc, #16]	; (8004bd4 <prvResetNextTaskUnblockTime+0x44>)
 8004bc4:	6013      	str	r3, [r2, #0]
}
 8004bc6:	bf00      	nop
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bc80      	pop	{r7}
 8004bce:	4770      	bx	lr
 8004bd0:	20000d18 	.word	0x20000d18
 8004bd4:	20000d80 	.word	0x20000d80

08004bd8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004bde:	4b0b      	ldr	r3, [pc, #44]	; (8004c0c <xTaskGetSchedulerState+0x34>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d102      	bne.n	8004bec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004be6:	2301      	movs	r3, #1
 8004be8:	607b      	str	r3, [r7, #4]
 8004bea:	e008      	b.n	8004bfe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bec:	4b08      	ldr	r3, [pc, #32]	; (8004c10 <xTaskGetSchedulerState+0x38>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d102      	bne.n	8004bfa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004bf4:	2302      	movs	r3, #2
 8004bf6:	607b      	str	r3, [r7, #4]
 8004bf8:	e001      	b.n	8004bfe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004bfe:	687b      	ldr	r3, [r7, #4]
	}
 8004c00:	4618      	mov	r0, r3
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bc80      	pop	{r7}
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	20000d6c 	.word	0x20000d6c
 8004c10:	20000d88 	.word	0x20000d88

08004c14 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004c20:	2300      	movs	r3, #0
 8004c22:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d056      	beq.n	8004cd8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004c2a:	4b2e      	ldr	r3, [pc, #184]	; (8004ce4 <xTaskPriorityDisinherit+0xd0>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	693a      	ldr	r2, [r7, #16]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d00a      	beq.n	8004c4a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c38:	f383 8811 	msr	BASEPRI, r3
 8004c3c:	f3bf 8f6f 	isb	sy
 8004c40:	f3bf 8f4f 	dsb	sy
 8004c44:	60fb      	str	r3, [r7, #12]
}
 8004c46:	bf00      	nop
 8004c48:	e7fe      	b.n	8004c48 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d10a      	bne.n	8004c68 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c56:	f383 8811 	msr	BASEPRI, r3
 8004c5a:	f3bf 8f6f 	isb	sy
 8004c5e:	f3bf 8f4f 	dsb	sy
 8004c62:	60bb      	str	r3, [r7, #8]
}
 8004c64:	bf00      	nop
 8004c66:	e7fe      	b.n	8004c66 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c6c:	1e5a      	subs	r2, r3, #1
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d02c      	beq.n	8004cd8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d128      	bne.n	8004cd8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	3304      	adds	r3, #4
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7fe fc7e 	bl	800358c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ca8:	4b0f      	ldr	r3, [pc, #60]	; (8004ce8 <xTaskPriorityDisinherit+0xd4>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d903      	bls.n	8004cb8 <xTaskPriorityDisinherit+0xa4>
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb4:	4a0c      	ldr	r2, [pc, #48]	; (8004ce8 <xTaskPriorityDisinherit+0xd4>)
 8004cb6:	6013      	str	r3, [r2, #0]
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	4413      	add	r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	4a09      	ldr	r2, [pc, #36]	; (8004cec <xTaskPriorityDisinherit+0xd8>)
 8004cc6:	441a      	add	r2, r3
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	3304      	adds	r3, #4
 8004ccc:	4619      	mov	r1, r3
 8004cce:	4610      	mov	r0, r2
 8004cd0:	f7fe fc01 	bl	80034d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004cd8:	697b      	ldr	r3, [r7, #20]
	}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3718      	adds	r7, #24
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	2000088c 	.word	0x2000088c
 8004ce8:	20000d68 	.word	0x20000d68
 8004cec:	20000890 	.word	0x20000890

08004cf0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004cfa:	4b21      	ldr	r3, [pc, #132]	; (8004d80 <prvAddCurrentTaskToDelayedList+0x90>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d00:	4b20      	ldr	r3, [pc, #128]	; (8004d84 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	3304      	adds	r3, #4
 8004d06:	4618      	mov	r0, r3
 8004d08:	f7fe fc40 	bl	800358c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d12:	d10a      	bne.n	8004d2a <prvAddCurrentTaskToDelayedList+0x3a>
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d007      	beq.n	8004d2a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d1a:	4b1a      	ldr	r3, [pc, #104]	; (8004d84 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	3304      	adds	r3, #4
 8004d20:	4619      	mov	r1, r3
 8004d22:	4819      	ldr	r0, [pc, #100]	; (8004d88 <prvAddCurrentTaskToDelayedList+0x98>)
 8004d24:	f7fe fbd7 	bl	80034d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004d28:	e026      	b.n	8004d78 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4413      	add	r3, r2
 8004d30:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004d32:	4b14      	ldr	r3, [pc, #80]	; (8004d84 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68ba      	ldr	r2, [r7, #8]
 8004d38:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004d3a:	68ba      	ldr	r2, [r7, #8]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d209      	bcs.n	8004d56 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d42:	4b12      	ldr	r3, [pc, #72]	; (8004d8c <prvAddCurrentTaskToDelayedList+0x9c>)
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	4b0f      	ldr	r3, [pc, #60]	; (8004d84 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	3304      	adds	r3, #4
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	4610      	mov	r0, r2
 8004d50:	f7fe fbe4 	bl	800351c <vListInsert>
}
 8004d54:	e010      	b.n	8004d78 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d56:	4b0e      	ldr	r3, [pc, #56]	; (8004d90 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	4b0a      	ldr	r3, [pc, #40]	; (8004d84 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	3304      	adds	r3, #4
 8004d60:	4619      	mov	r1, r3
 8004d62:	4610      	mov	r0, r2
 8004d64:	f7fe fbda 	bl	800351c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004d68:	4b0a      	ldr	r3, [pc, #40]	; (8004d94 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68ba      	ldr	r2, [r7, #8]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d202      	bcs.n	8004d78 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004d72:	4a08      	ldr	r2, [pc, #32]	; (8004d94 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	6013      	str	r3, [r2, #0]
}
 8004d78:	bf00      	nop
 8004d7a:	3710      	adds	r7, #16
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	20000d64 	.word	0x20000d64
 8004d84:	2000088c 	.word	0x2000088c
 8004d88:	20000d4c 	.word	0x20000d4c
 8004d8c:	20000d1c 	.word	0x20000d1c
 8004d90:	20000d18 	.word	0x20000d18
 8004d94:	20000d80 	.word	0x20000d80

08004d98 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b08a      	sub	sp, #40	; 0x28
 8004d9c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004da2:	f000 facb 	bl	800533c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004da6:	4b1c      	ldr	r3, [pc, #112]	; (8004e18 <xTimerCreateTimerTask+0x80>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d021      	beq.n	8004df2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004dae:	2300      	movs	r3, #0
 8004db0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004db2:	2300      	movs	r3, #0
 8004db4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004db6:	1d3a      	adds	r2, r7, #4
 8004db8:	f107 0108 	add.w	r1, r7, #8
 8004dbc:	f107 030c 	add.w	r3, r7, #12
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f7fe fb43 	bl	800344c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004dc6:	6879      	ldr	r1, [r7, #4]
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	9202      	str	r2, [sp, #8]
 8004dce:	9301      	str	r3, [sp, #4]
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	9300      	str	r3, [sp, #0]
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	460a      	mov	r2, r1
 8004dd8:	4910      	ldr	r1, [pc, #64]	; (8004e1c <xTimerCreateTimerTask+0x84>)
 8004dda:	4811      	ldr	r0, [pc, #68]	; (8004e20 <xTimerCreateTimerTask+0x88>)
 8004ddc:	f7ff f8e4 	bl	8003fa8 <xTaskCreateStatic>
 8004de0:	4603      	mov	r3, r0
 8004de2:	4a10      	ldr	r2, [pc, #64]	; (8004e24 <xTimerCreateTimerTask+0x8c>)
 8004de4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004de6:	4b0f      	ldr	r3, [pc, #60]	; (8004e24 <xTimerCreateTimerTask+0x8c>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d001      	beq.n	8004df2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004dee:	2301      	movs	r3, #1
 8004df0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d10a      	bne.n	8004e0e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dfc:	f383 8811 	msr	BASEPRI, r3
 8004e00:	f3bf 8f6f 	isb	sy
 8004e04:	f3bf 8f4f 	dsb	sy
 8004e08:	613b      	str	r3, [r7, #16]
}
 8004e0a:	bf00      	nop
 8004e0c:	e7fe      	b.n	8004e0c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004e0e:	697b      	ldr	r3, [r7, #20]
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3718      	adds	r7, #24
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	20000dbc 	.word	0x20000dbc
 8004e1c:	08006514 	.word	0x08006514
 8004e20:	08004f45 	.word	0x08004f45
 8004e24:	20000dc0 	.word	0x20000dc0

08004e28 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b08a      	sub	sp, #40	; 0x28
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	607a      	str	r2, [r7, #4]
 8004e34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004e36:	2300      	movs	r3, #0
 8004e38:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d10a      	bne.n	8004e56 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e44:	f383 8811 	msr	BASEPRI, r3
 8004e48:	f3bf 8f6f 	isb	sy
 8004e4c:	f3bf 8f4f 	dsb	sy
 8004e50:	623b      	str	r3, [r7, #32]
}
 8004e52:	bf00      	nop
 8004e54:	e7fe      	b.n	8004e54 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004e56:	4b1a      	ldr	r3, [pc, #104]	; (8004ec0 <xTimerGenericCommand+0x98>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d02a      	beq.n	8004eb4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	2b05      	cmp	r3, #5
 8004e6e:	dc18      	bgt.n	8004ea2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004e70:	f7ff feb2 	bl	8004bd8 <xTaskGetSchedulerState>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d109      	bne.n	8004e8e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004e7a:	4b11      	ldr	r3, [pc, #68]	; (8004ec0 <xTimerGenericCommand+0x98>)
 8004e7c:	6818      	ldr	r0, [r3, #0]
 8004e7e:	f107 0110 	add.w	r1, r7, #16
 8004e82:	2300      	movs	r3, #0
 8004e84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e86:	f7fe fcad 	bl	80037e4 <xQueueGenericSend>
 8004e8a:	6278      	str	r0, [r7, #36]	; 0x24
 8004e8c:	e012      	b.n	8004eb4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004e8e:	4b0c      	ldr	r3, [pc, #48]	; (8004ec0 <xTimerGenericCommand+0x98>)
 8004e90:	6818      	ldr	r0, [r3, #0]
 8004e92:	f107 0110 	add.w	r1, r7, #16
 8004e96:	2300      	movs	r3, #0
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f7fe fca3 	bl	80037e4 <xQueueGenericSend>
 8004e9e:	6278      	str	r0, [r7, #36]	; 0x24
 8004ea0:	e008      	b.n	8004eb4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004ea2:	4b07      	ldr	r3, [pc, #28]	; (8004ec0 <xTimerGenericCommand+0x98>)
 8004ea4:	6818      	ldr	r0, [r3, #0]
 8004ea6:	f107 0110 	add.w	r1, r7, #16
 8004eaa:	2300      	movs	r3, #0
 8004eac:	683a      	ldr	r2, [r7, #0]
 8004eae:	f7fe fd97 	bl	80039e0 <xQueueGenericSendFromISR>
 8004eb2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3728      	adds	r7, #40	; 0x28
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	20000dbc 	.word	0x20000dbc

08004ec4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b088      	sub	sp, #32
 8004ec8:	af02      	add	r7, sp, #8
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ece:	4b1c      	ldr	r3, [pc, #112]	; (8004f40 <prvProcessExpiredTimer+0x7c>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	3304      	adds	r3, #4
 8004edc:	4618      	mov	r0, r3
 8004ede:	f7fe fb55 	bl	800358c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	69db      	ldr	r3, [r3, #28]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d122      	bne.n	8004f30 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	699a      	ldr	r2, [r3, #24]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	18d1      	adds	r1, r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	683a      	ldr	r2, [r7, #0]
 8004ef6:	6978      	ldr	r0, [r7, #20]
 8004ef8:	f000 f8c8 	bl	800508c <prvInsertTimerInActiveList>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d016      	beq.n	8004f30 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004f02:	2300      	movs	r3, #0
 8004f04:	9300      	str	r3, [sp, #0]
 8004f06:	2300      	movs	r3, #0
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	6978      	ldr	r0, [r7, #20]
 8004f0e:	f7ff ff8b 	bl	8004e28 <xTimerGenericCommand>
 8004f12:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10a      	bne.n	8004f30 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8004f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f1e:	f383 8811 	msr	BASEPRI, r3
 8004f22:	f3bf 8f6f 	isb	sy
 8004f26:	f3bf 8f4f 	dsb	sy
 8004f2a:	60fb      	str	r3, [r7, #12]
}
 8004f2c:	bf00      	nop
 8004f2e:	e7fe      	b.n	8004f2e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f34:	6978      	ldr	r0, [r7, #20]
 8004f36:	4798      	blx	r3
}
 8004f38:	bf00      	nop
 8004f3a:	3718      	adds	r7, #24
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	20000db4 	.word	0x20000db4

08004f44 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004f4c:	f107 0308 	add.w	r3, r7, #8
 8004f50:	4618      	mov	r0, r3
 8004f52:	f000 f857 	bl	8005004 <prvGetNextExpireTime>
 8004f56:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	68f8      	ldr	r0, [r7, #12]
 8004f5e:	f000 f803 	bl	8004f68 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004f62:	f000 f8d5 	bl	8005110 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004f66:	e7f1      	b.n	8004f4c <prvTimerTask+0x8>

08004f68 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004f72:	f7ff fa4b 	bl	800440c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f76:	f107 0308 	add.w	r3, r7, #8
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f000 f866 	bl	800504c <prvSampleTimeNow>
 8004f80:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d130      	bne.n	8004fea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d10a      	bne.n	8004fa4 <prvProcessTimerOrBlockTask+0x3c>
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d806      	bhi.n	8004fa4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004f96:	f7ff fa47 	bl	8004428 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004f9a:	68f9      	ldr	r1, [r7, #12]
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f7ff ff91 	bl	8004ec4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004fa2:	e024      	b.n	8004fee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d008      	beq.n	8004fbc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004faa:	4b13      	ldr	r3, [pc, #76]	; (8004ff8 <prvProcessTimerOrBlockTask+0x90>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	bf0c      	ite	eq
 8004fb4:	2301      	moveq	r3, #1
 8004fb6:	2300      	movne	r3, #0
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004fbc:	4b0f      	ldr	r3, [pc, #60]	; (8004ffc <prvProcessTimerOrBlockTask+0x94>)
 8004fbe:	6818      	ldr	r0, [r3, #0]
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	683a      	ldr	r2, [r7, #0]
 8004fc8:	4619      	mov	r1, r3
 8004fca:	f7fe ffb9 	bl	8003f40 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004fce:	f7ff fa2b 	bl	8004428 <xTaskResumeAll>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d10a      	bne.n	8004fee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004fd8:	4b09      	ldr	r3, [pc, #36]	; (8005000 <prvProcessTimerOrBlockTask+0x98>)
 8004fda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fde:	601a      	str	r2, [r3, #0]
 8004fe0:	f3bf 8f4f 	dsb	sy
 8004fe4:	f3bf 8f6f 	isb	sy
}
 8004fe8:	e001      	b.n	8004fee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004fea:	f7ff fa1d 	bl	8004428 <xTaskResumeAll>
}
 8004fee:	bf00      	nop
 8004ff0:	3710      	adds	r7, #16
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	20000db8 	.word	0x20000db8
 8004ffc:	20000dbc 	.word	0x20000dbc
 8005000:	e000ed04 	.word	0xe000ed04

08005004 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800500c:	4b0e      	ldr	r3, [pc, #56]	; (8005048 <prvGetNextExpireTime+0x44>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2b00      	cmp	r3, #0
 8005014:	bf0c      	ite	eq
 8005016:	2301      	moveq	r3, #1
 8005018:	2300      	movne	r3, #0
 800501a:	b2db      	uxtb	r3, r3
 800501c:	461a      	mov	r2, r3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d105      	bne.n	8005036 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800502a:	4b07      	ldr	r3, [pc, #28]	; (8005048 <prvGetNextExpireTime+0x44>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	60fb      	str	r3, [r7, #12]
 8005034:	e001      	b.n	800503a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005036:	2300      	movs	r3, #0
 8005038:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800503a:	68fb      	ldr	r3, [r7, #12]
}
 800503c:	4618      	mov	r0, r3
 800503e:	3714      	adds	r7, #20
 8005040:	46bd      	mov	sp, r7
 8005042:	bc80      	pop	{r7}
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	20000db4 	.word	0x20000db4

0800504c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005054:	f7ff fa86 	bl	8004564 <xTaskGetTickCount>
 8005058:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800505a:	4b0b      	ldr	r3, [pc, #44]	; (8005088 <prvSampleTimeNow+0x3c>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	429a      	cmp	r2, r3
 8005062:	d205      	bcs.n	8005070 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005064:	f000 f908 	bl	8005278 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	601a      	str	r2, [r3, #0]
 800506e:	e002      	b.n	8005076 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005076:	4a04      	ldr	r2, [pc, #16]	; (8005088 <prvSampleTimeNow+0x3c>)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800507c:	68fb      	ldr	r3, [r7, #12]
}
 800507e:	4618      	mov	r0, r3
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	20000dc4 	.word	0x20000dc4

0800508c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b086      	sub	sp, #24
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
 8005098:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800509a:	2300      	movs	r3, #0
 800509c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	68ba      	ldr	r2, [r7, #8]
 80050a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80050aa:	68ba      	ldr	r2, [r7, #8]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d812      	bhi.n	80050d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	1ad2      	subs	r2, r2, r3
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	699b      	ldr	r3, [r3, #24]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d302      	bcc.n	80050c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80050c0:	2301      	movs	r3, #1
 80050c2:	617b      	str	r3, [r7, #20]
 80050c4:	e01b      	b.n	80050fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80050c6:	4b10      	ldr	r3, [pc, #64]	; (8005108 <prvInsertTimerInActiveList+0x7c>)
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	3304      	adds	r3, #4
 80050ce:	4619      	mov	r1, r3
 80050d0:	4610      	mov	r0, r2
 80050d2:	f7fe fa23 	bl	800351c <vListInsert>
 80050d6:	e012      	b.n	80050fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d206      	bcs.n	80050ee <prvInsertTimerInActiveList+0x62>
 80050e0:	68ba      	ldr	r2, [r7, #8]
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d302      	bcc.n	80050ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80050e8:	2301      	movs	r3, #1
 80050ea:	617b      	str	r3, [r7, #20]
 80050ec:	e007      	b.n	80050fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80050ee:	4b07      	ldr	r3, [pc, #28]	; (800510c <prvInsertTimerInActiveList+0x80>)
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	3304      	adds	r3, #4
 80050f6:	4619      	mov	r1, r3
 80050f8:	4610      	mov	r0, r2
 80050fa:	f7fe fa0f 	bl	800351c <vListInsert>
		}
	}

	return xProcessTimerNow;
 80050fe:	697b      	ldr	r3, [r7, #20]
}
 8005100:	4618      	mov	r0, r3
 8005102:	3718      	adds	r7, #24
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	20000db8 	.word	0x20000db8
 800510c:	20000db4 	.word	0x20000db4

08005110 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b08e      	sub	sp, #56	; 0x38
 8005114:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005116:	e09d      	b.n	8005254 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2b00      	cmp	r3, #0
 800511c:	da18      	bge.n	8005150 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800511e:	1d3b      	adds	r3, r7, #4
 8005120:	3304      	adds	r3, #4
 8005122:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005126:	2b00      	cmp	r3, #0
 8005128:	d10a      	bne.n	8005140 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800512a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800512e:	f383 8811 	msr	BASEPRI, r3
 8005132:	f3bf 8f6f 	isb	sy
 8005136:	f3bf 8f4f 	dsb	sy
 800513a:	61fb      	str	r3, [r7, #28]
}
 800513c:	bf00      	nop
 800513e:	e7fe      	b.n	800513e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005146:	6850      	ldr	r0, [r2, #4]
 8005148:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800514a:	6892      	ldr	r2, [r2, #8]
 800514c:	4611      	mov	r1, r2
 800514e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2b00      	cmp	r3, #0
 8005154:	db7e      	blt.n	8005254 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800515a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d004      	beq.n	800516c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005164:	3304      	adds	r3, #4
 8005166:	4618      	mov	r0, r3
 8005168:	f7fe fa10 	bl	800358c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800516c:	463b      	mov	r3, r7
 800516e:	4618      	mov	r0, r3
 8005170:	f7ff ff6c 	bl	800504c <prvSampleTimeNow>
 8005174:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2b09      	cmp	r3, #9
 800517a:	d86a      	bhi.n	8005252 <prvProcessReceivedCommands+0x142>
 800517c:	a201      	add	r2, pc, #4	; (adr r2, 8005184 <prvProcessReceivedCommands+0x74>)
 800517e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005182:	bf00      	nop
 8005184:	080051ad 	.word	0x080051ad
 8005188:	080051ad 	.word	0x080051ad
 800518c:	080051ad 	.word	0x080051ad
 8005190:	08005255 	.word	0x08005255
 8005194:	08005209 	.word	0x08005209
 8005198:	08005241 	.word	0x08005241
 800519c:	080051ad 	.word	0x080051ad
 80051a0:	080051ad 	.word	0x080051ad
 80051a4:	08005255 	.word	0x08005255
 80051a8:	08005209 	.word	0x08005209
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80051ac:	68ba      	ldr	r2, [r7, #8]
 80051ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	18d1      	adds	r1, r2, r3
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051ba:	f7ff ff67 	bl	800508c <prvInsertTimerInActiveList>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d047      	beq.n	8005254 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80051c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051ca:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80051cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ce:	69db      	ldr	r3, [r3, #28]
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d13f      	bne.n	8005254 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80051d4:	68ba      	ldr	r2, [r7, #8]
 80051d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	441a      	add	r2, r3
 80051dc:	2300      	movs	r3, #0
 80051de:	9300      	str	r3, [sp, #0]
 80051e0:	2300      	movs	r3, #0
 80051e2:	2100      	movs	r1, #0
 80051e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051e6:	f7ff fe1f 	bl	8004e28 <xTimerGenericCommand>
 80051ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80051ec:	6a3b      	ldr	r3, [r7, #32]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d130      	bne.n	8005254 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80051f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f6:	f383 8811 	msr	BASEPRI, r3
 80051fa:	f3bf 8f6f 	isb	sy
 80051fe:	f3bf 8f4f 	dsb	sy
 8005202:	61bb      	str	r3, [r7, #24]
}
 8005204:	bf00      	nop
 8005206:	e7fe      	b.n	8005206 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800520e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10a      	bne.n	800522c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8005216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521a:	f383 8811 	msr	BASEPRI, r3
 800521e:	f3bf 8f6f 	isb	sy
 8005222:	f3bf 8f4f 	dsb	sy
 8005226:	617b      	str	r3, [r7, #20]
}
 8005228:	bf00      	nop
 800522a:	e7fe      	b.n	800522a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800522c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522e:	699a      	ldr	r2, [r3, #24]
 8005230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005232:	18d1      	adds	r1, r2, r3
 8005234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005238:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800523a:	f7ff ff27 	bl	800508c <prvInsertTimerInActiveList>
					break;
 800523e:	e009      	b.n	8005254 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005242:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005246:	2b00      	cmp	r3, #0
 8005248:	d104      	bne.n	8005254 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800524a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800524c:	f000 fb6a 	bl	8005924 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005250:	e000      	b.n	8005254 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8005252:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005254:	4b07      	ldr	r3, [pc, #28]	; (8005274 <prvProcessReceivedCommands+0x164>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	1d39      	adds	r1, r7, #4
 800525a:	2200      	movs	r2, #0
 800525c:	4618      	mov	r0, r3
 800525e:	f7fe fc57 	bl	8003b10 <xQueueReceive>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	f47f af57 	bne.w	8005118 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800526a:	bf00      	nop
 800526c:	bf00      	nop
 800526e:	3730      	adds	r7, #48	; 0x30
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	20000dbc 	.word	0x20000dbc

08005278 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b088      	sub	sp, #32
 800527c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800527e:	e045      	b.n	800530c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005280:	4b2c      	ldr	r3, [pc, #176]	; (8005334 <prvSwitchTimerLists+0xbc>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800528a:	4b2a      	ldr	r3, [pc, #168]	; (8005334 <prvSwitchTimerLists+0xbc>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	3304      	adds	r3, #4
 8005298:	4618      	mov	r0, r3
 800529a:	f7fe f977 	bl	800358c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	69db      	ldr	r3, [r3, #28]
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d12e      	bne.n	800530c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	4413      	add	r3, r2
 80052b6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80052b8:	68ba      	ldr	r2, [r7, #8]
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d90e      	bls.n	80052de <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	68ba      	ldr	r2, [r7, #8]
 80052c4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80052cc:	4b19      	ldr	r3, [pc, #100]	; (8005334 <prvSwitchTimerLists+0xbc>)
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	3304      	adds	r3, #4
 80052d4:	4619      	mov	r1, r3
 80052d6:	4610      	mov	r0, r2
 80052d8:	f7fe f920 	bl	800351c <vListInsert>
 80052dc:	e016      	b.n	800530c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80052de:	2300      	movs	r3, #0
 80052e0:	9300      	str	r3, [sp, #0]
 80052e2:	2300      	movs	r3, #0
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	2100      	movs	r1, #0
 80052e8:	68f8      	ldr	r0, [r7, #12]
 80052ea:	f7ff fd9d 	bl	8004e28 <xTimerGenericCommand>
 80052ee:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d10a      	bne.n	800530c <prvSwitchTimerLists+0x94>
	__asm volatile
 80052f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fa:	f383 8811 	msr	BASEPRI, r3
 80052fe:	f3bf 8f6f 	isb	sy
 8005302:	f3bf 8f4f 	dsb	sy
 8005306:	603b      	str	r3, [r7, #0]
}
 8005308:	bf00      	nop
 800530a:	e7fe      	b.n	800530a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800530c:	4b09      	ldr	r3, [pc, #36]	; (8005334 <prvSwitchTimerLists+0xbc>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1b4      	bne.n	8005280 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005316:	4b07      	ldr	r3, [pc, #28]	; (8005334 <prvSwitchTimerLists+0xbc>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800531c:	4b06      	ldr	r3, [pc, #24]	; (8005338 <prvSwitchTimerLists+0xc0>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a04      	ldr	r2, [pc, #16]	; (8005334 <prvSwitchTimerLists+0xbc>)
 8005322:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005324:	4a04      	ldr	r2, [pc, #16]	; (8005338 <prvSwitchTimerLists+0xc0>)
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	6013      	str	r3, [r2, #0]
}
 800532a:	bf00      	nop
 800532c:	3718      	adds	r7, #24
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	20000db4 	.word	0x20000db4
 8005338:	20000db8 	.word	0x20000db8

0800533c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b082      	sub	sp, #8
 8005340:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005342:	f000 f92b 	bl	800559c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005346:	4b15      	ldr	r3, [pc, #84]	; (800539c <prvCheckForValidListAndQueue+0x60>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d120      	bne.n	8005390 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800534e:	4814      	ldr	r0, [pc, #80]	; (80053a0 <prvCheckForValidListAndQueue+0x64>)
 8005350:	f7fe f896 	bl	8003480 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005354:	4813      	ldr	r0, [pc, #76]	; (80053a4 <prvCheckForValidListAndQueue+0x68>)
 8005356:	f7fe f893 	bl	8003480 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800535a:	4b13      	ldr	r3, [pc, #76]	; (80053a8 <prvCheckForValidListAndQueue+0x6c>)
 800535c:	4a10      	ldr	r2, [pc, #64]	; (80053a0 <prvCheckForValidListAndQueue+0x64>)
 800535e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005360:	4b12      	ldr	r3, [pc, #72]	; (80053ac <prvCheckForValidListAndQueue+0x70>)
 8005362:	4a10      	ldr	r2, [pc, #64]	; (80053a4 <prvCheckForValidListAndQueue+0x68>)
 8005364:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005366:	2300      	movs	r3, #0
 8005368:	9300      	str	r3, [sp, #0]
 800536a:	4b11      	ldr	r3, [pc, #68]	; (80053b0 <prvCheckForValidListAndQueue+0x74>)
 800536c:	4a11      	ldr	r2, [pc, #68]	; (80053b4 <prvCheckForValidListAndQueue+0x78>)
 800536e:	2110      	movs	r1, #16
 8005370:	200a      	movs	r0, #10
 8005372:	f7fe f99d 	bl	80036b0 <xQueueGenericCreateStatic>
 8005376:	4603      	mov	r3, r0
 8005378:	4a08      	ldr	r2, [pc, #32]	; (800539c <prvCheckForValidListAndQueue+0x60>)
 800537a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800537c:	4b07      	ldr	r3, [pc, #28]	; (800539c <prvCheckForValidListAndQueue+0x60>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d005      	beq.n	8005390 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005384:	4b05      	ldr	r3, [pc, #20]	; (800539c <prvCheckForValidListAndQueue+0x60>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	490b      	ldr	r1, [pc, #44]	; (80053b8 <prvCheckForValidListAndQueue+0x7c>)
 800538a:	4618      	mov	r0, r3
 800538c:	f7fe fdb0 	bl	8003ef0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005390:	f000 f934 	bl	80055fc <vPortExitCritical>
}
 8005394:	bf00      	nop
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	20000dbc 	.word	0x20000dbc
 80053a0:	20000d8c 	.word	0x20000d8c
 80053a4:	20000da0 	.word	0x20000da0
 80053a8:	20000db4 	.word	0x20000db4
 80053ac:	20000db8 	.word	0x20000db8
 80053b0:	20000e68 	.word	0x20000e68
 80053b4:	20000dc8 	.word	0x20000dc8
 80053b8:	0800651c 	.word	0x0800651c

080053bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	3b04      	subs	r3, #4
 80053cc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80053d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	3b04      	subs	r3, #4
 80053da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	f023 0201 	bic.w	r2, r3, #1
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	3b04      	subs	r3, #4
 80053ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80053ec:	4a08      	ldr	r2, [pc, #32]	; (8005410 <pxPortInitialiseStack+0x54>)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	3b14      	subs	r3, #20
 80053f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	3b20      	subs	r3, #32
 8005402:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005404:	68fb      	ldr	r3, [r7, #12]
}
 8005406:	4618      	mov	r0, r3
 8005408:	3714      	adds	r7, #20
 800540a:	46bd      	mov	sp, r7
 800540c:	bc80      	pop	{r7}
 800540e:	4770      	bx	lr
 8005410:	08005415 	.word	0x08005415

08005414 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005414:	b480      	push	{r7}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800541a:	2300      	movs	r3, #0
 800541c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800541e:	4b12      	ldr	r3, [pc, #72]	; (8005468 <prvTaskExitError+0x54>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005426:	d00a      	beq.n	800543e <prvTaskExitError+0x2a>
	__asm volatile
 8005428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800542c:	f383 8811 	msr	BASEPRI, r3
 8005430:	f3bf 8f6f 	isb	sy
 8005434:	f3bf 8f4f 	dsb	sy
 8005438:	60fb      	str	r3, [r7, #12]
}
 800543a:	bf00      	nop
 800543c:	e7fe      	b.n	800543c <prvTaskExitError+0x28>
	__asm volatile
 800543e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005442:	f383 8811 	msr	BASEPRI, r3
 8005446:	f3bf 8f6f 	isb	sy
 800544a:	f3bf 8f4f 	dsb	sy
 800544e:	60bb      	str	r3, [r7, #8]
}
 8005450:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005452:	bf00      	nop
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d0fc      	beq.n	8005454 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800545a:	bf00      	nop
 800545c:	bf00      	nop
 800545e:	3714      	adds	r7, #20
 8005460:	46bd      	mov	sp, r7
 8005462:	bc80      	pop	{r7}
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	2000000c 	.word	0x2000000c
 800546c:	00000000 	.word	0x00000000

08005470 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005470:	4b07      	ldr	r3, [pc, #28]	; (8005490 <pxCurrentTCBConst2>)
 8005472:	6819      	ldr	r1, [r3, #0]
 8005474:	6808      	ldr	r0, [r1, #0]
 8005476:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800547a:	f380 8809 	msr	PSP, r0
 800547e:	f3bf 8f6f 	isb	sy
 8005482:	f04f 0000 	mov.w	r0, #0
 8005486:	f380 8811 	msr	BASEPRI, r0
 800548a:	f04e 0e0d 	orr.w	lr, lr, #13
 800548e:	4770      	bx	lr

08005490 <pxCurrentTCBConst2>:
 8005490:	2000088c 	.word	0x2000088c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005494:	bf00      	nop
 8005496:	bf00      	nop

08005498 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005498:	4806      	ldr	r0, [pc, #24]	; (80054b4 <prvPortStartFirstTask+0x1c>)
 800549a:	6800      	ldr	r0, [r0, #0]
 800549c:	6800      	ldr	r0, [r0, #0]
 800549e:	f380 8808 	msr	MSP, r0
 80054a2:	b662      	cpsie	i
 80054a4:	b661      	cpsie	f
 80054a6:	f3bf 8f4f 	dsb	sy
 80054aa:	f3bf 8f6f 	isb	sy
 80054ae:	df00      	svc	0
 80054b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80054b2:	bf00      	nop
 80054b4:	e000ed08 	.word	0xe000ed08

080054b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80054be:	4b32      	ldr	r3, [pc, #200]	; (8005588 <xPortStartScheduler+0xd0>)
 80054c0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	22ff      	movs	r2, #255	; 0xff
 80054ce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80054d8:	78fb      	ldrb	r3, [r7, #3]
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80054e0:	b2da      	uxtb	r2, r3
 80054e2:	4b2a      	ldr	r3, [pc, #168]	; (800558c <xPortStartScheduler+0xd4>)
 80054e4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80054e6:	4b2a      	ldr	r3, [pc, #168]	; (8005590 <xPortStartScheduler+0xd8>)
 80054e8:	2207      	movs	r2, #7
 80054ea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80054ec:	e009      	b.n	8005502 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80054ee:	4b28      	ldr	r3, [pc, #160]	; (8005590 <xPortStartScheduler+0xd8>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	3b01      	subs	r3, #1
 80054f4:	4a26      	ldr	r2, [pc, #152]	; (8005590 <xPortStartScheduler+0xd8>)
 80054f6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80054f8:	78fb      	ldrb	r3, [r7, #3]
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	005b      	lsls	r3, r3, #1
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005502:	78fb      	ldrb	r3, [r7, #3]
 8005504:	b2db      	uxtb	r3, r3
 8005506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800550a:	2b80      	cmp	r3, #128	; 0x80
 800550c:	d0ef      	beq.n	80054ee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800550e:	4b20      	ldr	r3, [pc, #128]	; (8005590 <xPortStartScheduler+0xd8>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f1c3 0307 	rsb	r3, r3, #7
 8005516:	2b04      	cmp	r3, #4
 8005518:	d00a      	beq.n	8005530 <xPortStartScheduler+0x78>
	__asm volatile
 800551a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800551e:	f383 8811 	msr	BASEPRI, r3
 8005522:	f3bf 8f6f 	isb	sy
 8005526:	f3bf 8f4f 	dsb	sy
 800552a:	60bb      	str	r3, [r7, #8]
}
 800552c:	bf00      	nop
 800552e:	e7fe      	b.n	800552e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005530:	4b17      	ldr	r3, [pc, #92]	; (8005590 <xPortStartScheduler+0xd8>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	021b      	lsls	r3, r3, #8
 8005536:	4a16      	ldr	r2, [pc, #88]	; (8005590 <xPortStartScheduler+0xd8>)
 8005538:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800553a:	4b15      	ldr	r3, [pc, #84]	; (8005590 <xPortStartScheduler+0xd8>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005542:	4a13      	ldr	r2, [pc, #76]	; (8005590 <xPortStartScheduler+0xd8>)
 8005544:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	b2da      	uxtb	r2, r3
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800554e:	4b11      	ldr	r3, [pc, #68]	; (8005594 <xPortStartScheduler+0xdc>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a10      	ldr	r2, [pc, #64]	; (8005594 <xPortStartScheduler+0xdc>)
 8005554:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005558:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800555a:	4b0e      	ldr	r3, [pc, #56]	; (8005594 <xPortStartScheduler+0xdc>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a0d      	ldr	r2, [pc, #52]	; (8005594 <xPortStartScheduler+0xdc>)
 8005560:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005564:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005566:	f000 f8b9 	bl	80056dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800556a:	4b0b      	ldr	r3, [pc, #44]	; (8005598 <xPortStartScheduler+0xe0>)
 800556c:	2200      	movs	r2, #0
 800556e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005570:	f7ff ff92 	bl	8005498 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005574:	f7ff f8c2 	bl	80046fc <vTaskSwitchContext>
	prvTaskExitError();
 8005578:	f7ff ff4c 	bl	8005414 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3710      	adds	r7, #16
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	e000e400 	.word	0xe000e400
 800558c:	20000eb8 	.word	0x20000eb8
 8005590:	20000ebc 	.word	0x20000ebc
 8005594:	e000ed20 	.word	0xe000ed20
 8005598:	2000000c 	.word	0x2000000c

0800559c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
	__asm volatile
 80055a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a6:	f383 8811 	msr	BASEPRI, r3
 80055aa:	f3bf 8f6f 	isb	sy
 80055ae:	f3bf 8f4f 	dsb	sy
 80055b2:	607b      	str	r3, [r7, #4]
}
 80055b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80055b6:	4b0f      	ldr	r3, [pc, #60]	; (80055f4 <vPortEnterCritical+0x58>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	3301      	adds	r3, #1
 80055bc:	4a0d      	ldr	r2, [pc, #52]	; (80055f4 <vPortEnterCritical+0x58>)
 80055be:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80055c0:	4b0c      	ldr	r3, [pc, #48]	; (80055f4 <vPortEnterCritical+0x58>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d10f      	bne.n	80055e8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80055c8:	4b0b      	ldr	r3, [pc, #44]	; (80055f8 <vPortEnterCritical+0x5c>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00a      	beq.n	80055e8 <vPortEnterCritical+0x4c>
	__asm volatile
 80055d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d6:	f383 8811 	msr	BASEPRI, r3
 80055da:	f3bf 8f6f 	isb	sy
 80055de:	f3bf 8f4f 	dsb	sy
 80055e2:	603b      	str	r3, [r7, #0]
}
 80055e4:	bf00      	nop
 80055e6:	e7fe      	b.n	80055e6 <vPortEnterCritical+0x4a>
	}
}
 80055e8:	bf00      	nop
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bc80      	pop	{r7}
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
 80055f4:	2000000c 	.word	0x2000000c
 80055f8:	e000ed04 	.word	0xe000ed04

080055fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005602:	4b11      	ldr	r3, [pc, #68]	; (8005648 <vPortExitCritical+0x4c>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d10a      	bne.n	8005620 <vPortExitCritical+0x24>
	__asm volatile
 800560a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560e:	f383 8811 	msr	BASEPRI, r3
 8005612:	f3bf 8f6f 	isb	sy
 8005616:	f3bf 8f4f 	dsb	sy
 800561a:	607b      	str	r3, [r7, #4]
}
 800561c:	bf00      	nop
 800561e:	e7fe      	b.n	800561e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005620:	4b09      	ldr	r3, [pc, #36]	; (8005648 <vPortExitCritical+0x4c>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	3b01      	subs	r3, #1
 8005626:	4a08      	ldr	r2, [pc, #32]	; (8005648 <vPortExitCritical+0x4c>)
 8005628:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800562a:	4b07      	ldr	r3, [pc, #28]	; (8005648 <vPortExitCritical+0x4c>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d105      	bne.n	800563e <vPortExitCritical+0x42>
 8005632:	2300      	movs	r3, #0
 8005634:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	f383 8811 	msr	BASEPRI, r3
}
 800563c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800563e:	bf00      	nop
 8005640:	370c      	adds	r7, #12
 8005642:	46bd      	mov	sp, r7
 8005644:	bc80      	pop	{r7}
 8005646:	4770      	bx	lr
 8005648:	2000000c 	.word	0x2000000c
 800564c:	00000000 	.word	0x00000000

08005650 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005650:	f3ef 8009 	mrs	r0, PSP
 8005654:	f3bf 8f6f 	isb	sy
 8005658:	4b0d      	ldr	r3, [pc, #52]	; (8005690 <pxCurrentTCBConst>)
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005660:	6010      	str	r0, [r2, #0]
 8005662:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005666:	f04f 0050 	mov.w	r0, #80	; 0x50
 800566a:	f380 8811 	msr	BASEPRI, r0
 800566e:	f7ff f845 	bl	80046fc <vTaskSwitchContext>
 8005672:	f04f 0000 	mov.w	r0, #0
 8005676:	f380 8811 	msr	BASEPRI, r0
 800567a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800567e:	6819      	ldr	r1, [r3, #0]
 8005680:	6808      	ldr	r0, [r1, #0]
 8005682:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005686:	f380 8809 	msr	PSP, r0
 800568a:	f3bf 8f6f 	isb	sy
 800568e:	4770      	bx	lr

08005690 <pxCurrentTCBConst>:
 8005690:	2000088c 	.word	0x2000088c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005694:	bf00      	nop
 8005696:	bf00      	nop

08005698 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
	__asm volatile
 800569e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a2:	f383 8811 	msr	BASEPRI, r3
 80056a6:	f3bf 8f6f 	isb	sy
 80056aa:	f3bf 8f4f 	dsb	sy
 80056ae:	607b      	str	r3, [r7, #4]
}
 80056b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80056b2:	f7fe ff65 	bl	8004580 <xTaskIncrementTick>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d003      	beq.n	80056c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80056bc:	4b06      	ldr	r3, [pc, #24]	; (80056d8 <SysTick_Handler+0x40>)
 80056be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056c2:	601a      	str	r2, [r3, #0]
 80056c4:	2300      	movs	r3, #0
 80056c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	f383 8811 	msr	BASEPRI, r3
}
 80056ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80056d0:	bf00      	nop
 80056d2:	3708      	adds	r7, #8
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	e000ed04 	.word	0xe000ed04

080056dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80056dc:	b480      	push	{r7}
 80056de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80056e0:	4b0a      	ldr	r3, [pc, #40]	; (800570c <vPortSetupTimerInterrupt+0x30>)
 80056e2:	2200      	movs	r2, #0
 80056e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80056e6:	4b0a      	ldr	r3, [pc, #40]	; (8005710 <vPortSetupTimerInterrupt+0x34>)
 80056e8:	2200      	movs	r2, #0
 80056ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80056ec:	4b09      	ldr	r3, [pc, #36]	; (8005714 <vPortSetupTimerInterrupt+0x38>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a09      	ldr	r2, [pc, #36]	; (8005718 <vPortSetupTimerInterrupt+0x3c>)
 80056f2:	fba2 2303 	umull	r2, r3, r2, r3
 80056f6:	099b      	lsrs	r3, r3, #6
 80056f8:	4a08      	ldr	r2, [pc, #32]	; (800571c <vPortSetupTimerInterrupt+0x40>)
 80056fa:	3b01      	subs	r3, #1
 80056fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80056fe:	4b03      	ldr	r3, [pc, #12]	; (800570c <vPortSetupTimerInterrupt+0x30>)
 8005700:	2207      	movs	r2, #7
 8005702:	601a      	str	r2, [r3, #0]
}
 8005704:	bf00      	nop
 8005706:	46bd      	mov	sp, r7
 8005708:	bc80      	pop	{r7}
 800570a:	4770      	bx	lr
 800570c:	e000e010 	.word	0xe000e010
 8005710:	e000e018 	.word	0xe000e018
 8005714:	20000000 	.word	0x20000000
 8005718:	10624dd3 	.word	0x10624dd3
 800571c:	e000e014 	.word	0xe000e014

08005720 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005720:	b480      	push	{r7}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005726:	f3ef 8305 	mrs	r3, IPSR
 800572a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2b0f      	cmp	r3, #15
 8005730:	d914      	bls.n	800575c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005732:	4a16      	ldr	r2, [pc, #88]	; (800578c <vPortValidateInterruptPriority+0x6c>)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	4413      	add	r3, r2
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800573c:	4b14      	ldr	r3, [pc, #80]	; (8005790 <vPortValidateInterruptPriority+0x70>)
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	7afa      	ldrb	r2, [r7, #11]
 8005742:	429a      	cmp	r2, r3
 8005744:	d20a      	bcs.n	800575c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574a:	f383 8811 	msr	BASEPRI, r3
 800574e:	f3bf 8f6f 	isb	sy
 8005752:	f3bf 8f4f 	dsb	sy
 8005756:	607b      	str	r3, [r7, #4]
}
 8005758:	bf00      	nop
 800575a:	e7fe      	b.n	800575a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800575c:	4b0d      	ldr	r3, [pc, #52]	; (8005794 <vPortValidateInterruptPriority+0x74>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005764:	4b0c      	ldr	r3, [pc, #48]	; (8005798 <vPortValidateInterruptPriority+0x78>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	429a      	cmp	r2, r3
 800576a:	d90a      	bls.n	8005782 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800576c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005770:	f383 8811 	msr	BASEPRI, r3
 8005774:	f3bf 8f6f 	isb	sy
 8005778:	f3bf 8f4f 	dsb	sy
 800577c:	603b      	str	r3, [r7, #0]
}
 800577e:	bf00      	nop
 8005780:	e7fe      	b.n	8005780 <vPortValidateInterruptPriority+0x60>
	}
 8005782:	bf00      	nop
 8005784:	3714      	adds	r7, #20
 8005786:	46bd      	mov	sp, r7
 8005788:	bc80      	pop	{r7}
 800578a:	4770      	bx	lr
 800578c:	e000e3f0 	.word	0xe000e3f0
 8005790:	20000eb8 	.word	0x20000eb8
 8005794:	e000ed0c 	.word	0xe000ed0c
 8005798:	20000ebc 	.word	0x20000ebc

0800579c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b08a      	sub	sp, #40	; 0x28
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80057a4:	2300      	movs	r3, #0
 80057a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80057a8:	f7fe fe30 	bl	800440c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80057ac:	4b58      	ldr	r3, [pc, #352]	; (8005910 <pvPortMalloc+0x174>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d101      	bne.n	80057b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80057b4:	f000 f910 	bl	80059d8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80057b8:	4b56      	ldr	r3, [pc, #344]	; (8005914 <pvPortMalloc+0x178>)
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4013      	ands	r3, r2
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	f040 808e 	bne.w	80058e2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d01d      	beq.n	8005808 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80057cc:	2208      	movs	r2, #8
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4413      	add	r3, r2
 80057d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f003 0307 	and.w	r3, r3, #7
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d014      	beq.n	8005808 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f023 0307 	bic.w	r3, r3, #7
 80057e4:	3308      	adds	r3, #8
 80057e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f003 0307 	and.w	r3, r3, #7
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00a      	beq.n	8005808 <pvPortMalloc+0x6c>
	__asm volatile
 80057f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f6:	f383 8811 	msr	BASEPRI, r3
 80057fa:	f3bf 8f6f 	isb	sy
 80057fe:	f3bf 8f4f 	dsb	sy
 8005802:	617b      	str	r3, [r7, #20]
}
 8005804:	bf00      	nop
 8005806:	e7fe      	b.n	8005806 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d069      	beq.n	80058e2 <pvPortMalloc+0x146>
 800580e:	4b42      	ldr	r3, [pc, #264]	; (8005918 <pvPortMalloc+0x17c>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	429a      	cmp	r2, r3
 8005816:	d864      	bhi.n	80058e2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005818:	4b40      	ldr	r3, [pc, #256]	; (800591c <pvPortMalloc+0x180>)
 800581a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800581c:	4b3f      	ldr	r3, [pc, #252]	; (800591c <pvPortMalloc+0x180>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005822:	e004      	b.n	800582e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005826:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800582e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	429a      	cmp	r2, r3
 8005836:	d903      	bls.n	8005840 <pvPortMalloc+0xa4>
 8005838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d1f1      	bne.n	8005824 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005840:	4b33      	ldr	r3, [pc, #204]	; (8005910 <pvPortMalloc+0x174>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005846:	429a      	cmp	r2, r3
 8005848:	d04b      	beq.n	80058e2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800584a:	6a3b      	ldr	r3, [r7, #32]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2208      	movs	r2, #8
 8005850:	4413      	add	r3, r2
 8005852:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	6a3b      	ldr	r3, [r7, #32]
 800585a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800585c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585e:	685a      	ldr	r2, [r3, #4]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	1ad2      	subs	r2, r2, r3
 8005864:	2308      	movs	r3, #8
 8005866:	005b      	lsls	r3, r3, #1
 8005868:	429a      	cmp	r2, r3
 800586a:	d91f      	bls.n	80058ac <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800586c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4413      	add	r3, r2
 8005872:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	f003 0307 	and.w	r3, r3, #7
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00a      	beq.n	8005894 <pvPortMalloc+0xf8>
	__asm volatile
 800587e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005882:	f383 8811 	msr	BASEPRI, r3
 8005886:	f3bf 8f6f 	isb	sy
 800588a:	f3bf 8f4f 	dsb	sy
 800588e:	613b      	str	r3, [r7, #16]
}
 8005890:	bf00      	nop
 8005892:	e7fe      	b.n	8005892 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005896:	685a      	ldr	r2, [r3, #4]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	1ad2      	subs	r2, r2, r3
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80058a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80058a6:	69b8      	ldr	r0, [r7, #24]
 80058a8:	f000 f8f8 	bl	8005a9c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80058ac:	4b1a      	ldr	r3, [pc, #104]	; (8005918 <pvPortMalloc+0x17c>)
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	4a18      	ldr	r2, [pc, #96]	; (8005918 <pvPortMalloc+0x17c>)
 80058b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80058ba:	4b17      	ldr	r3, [pc, #92]	; (8005918 <pvPortMalloc+0x17c>)
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	4b18      	ldr	r3, [pc, #96]	; (8005920 <pvPortMalloc+0x184>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d203      	bcs.n	80058ce <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80058c6:	4b14      	ldr	r3, [pc, #80]	; (8005918 <pvPortMalloc+0x17c>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a15      	ldr	r2, [pc, #84]	; (8005920 <pvPortMalloc+0x184>)
 80058cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80058ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d0:	685a      	ldr	r2, [r3, #4]
 80058d2:	4b10      	ldr	r3, [pc, #64]	; (8005914 <pvPortMalloc+0x178>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	431a      	orrs	r2, r3
 80058d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80058dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058de:	2200      	movs	r2, #0
 80058e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80058e2:	f7fe fda1 	bl	8004428 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	f003 0307 	and.w	r3, r3, #7
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00a      	beq.n	8005906 <pvPortMalloc+0x16a>
	__asm volatile
 80058f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f4:	f383 8811 	msr	BASEPRI, r3
 80058f8:	f3bf 8f6f 	isb	sy
 80058fc:	f3bf 8f4f 	dsb	sy
 8005900:	60fb      	str	r3, [r7, #12]
}
 8005902:	bf00      	nop
 8005904:	e7fe      	b.n	8005904 <pvPortMalloc+0x168>
	return pvReturn;
 8005906:	69fb      	ldr	r3, [r7, #28]
}
 8005908:	4618      	mov	r0, r3
 800590a:	3728      	adds	r7, #40	; 0x28
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}
 8005910:	20001ac8 	.word	0x20001ac8
 8005914:	20001ad4 	.word	0x20001ad4
 8005918:	20001acc 	.word	0x20001acc
 800591c:	20001ac0 	.word	0x20001ac0
 8005920:	20001ad0 	.word	0x20001ad0

08005924 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b086      	sub	sp, #24
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d048      	beq.n	80059c8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005936:	2308      	movs	r3, #8
 8005938:	425b      	negs	r3, r3
 800593a:	697a      	ldr	r2, [r7, #20]
 800593c:	4413      	add	r3, r2
 800593e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	685a      	ldr	r2, [r3, #4]
 8005948:	4b21      	ldr	r3, [pc, #132]	; (80059d0 <vPortFree+0xac>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4013      	ands	r3, r2
 800594e:	2b00      	cmp	r3, #0
 8005950:	d10a      	bne.n	8005968 <vPortFree+0x44>
	__asm volatile
 8005952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005956:	f383 8811 	msr	BASEPRI, r3
 800595a:	f3bf 8f6f 	isb	sy
 800595e:	f3bf 8f4f 	dsb	sy
 8005962:	60fb      	str	r3, [r7, #12]
}
 8005964:	bf00      	nop
 8005966:	e7fe      	b.n	8005966 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00a      	beq.n	8005986 <vPortFree+0x62>
	__asm volatile
 8005970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005974:	f383 8811 	msr	BASEPRI, r3
 8005978:	f3bf 8f6f 	isb	sy
 800597c:	f3bf 8f4f 	dsb	sy
 8005980:	60bb      	str	r3, [r7, #8]
}
 8005982:	bf00      	nop
 8005984:	e7fe      	b.n	8005984 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	685a      	ldr	r2, [r3, #4]
 800598a:	4b11      	ldr	r3, [pc, #68]	; (80059d0 <vPortFree+0xac>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4013      	ands	r3, r2
 8005990:	2b00      	cmp	r3, #0
 8005992:	d019      	beq.n	80059c8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d115      	bne.n	80059c8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	685a      	ldr	r2, [r3, #4]
 80059a0:	4b0b      	ldr	r3, [pc, #44]	; (80059d0 <vPortFree+0xac>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	43db      	mvns	r3, r3
 80059a6:	401a      	ands	r2, r3
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80059ac:	f7fe fd2e 	bl	800440c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	685a      	ldr	r2, [r3, #4]
 80059b4:	4b07      	ldr	r3, [pc, #28]	; (80059d4 <vPortFree+0xb0>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4413      	add	r3, r2
 80059ba:	4a06      	ldr	r2, [pc, #24]	; (80059d4 <vPortFree+0xb0>)
 80059bc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80059be:	6938      	ldr	r0, [r7, #16]
 80059c0:	f000 f86c 	bl	8005a9c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80059c4:	f7fe fd30 	bl	8004428 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80059c8:	bf00      	nop
 80059ca:	3718      	adds	r7, #24
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	20001ad4 	.word	0x20001ad4
 80059d4:	20001acc 	.word	0x20001acc

080059d8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80059d8:	b480      	push	{r7}
 80059da:	b085      	sub	sp, #20
 80059dc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80059de:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80059e2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80059e4:	4b27      	ldr	r3, [pc, #156]	; (8005a84 <prvHeapInit+0xac>)
 80059e6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f003 0307 	and.w	r3, r3, #7
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d00c      	beq.n	8005a0c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	3307      	adds	r3, #7
 80059f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f023 0307 	bic.w	r3, r3, #7
 80059fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005a00:	68ba      	ldr	r2, [r7, #8]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	4a1f      	ldr	r2, [pc, #124]	; (8005a84 <prvHeapInit+0xac>)
 8005a08:	4413      	add	r3, r2
 8005a0a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005a10:	4a1d      	ldr	r2, [pc, #116]	; (8005a88 <prvHeapInit+0xb0>)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005a16:	4b1c      	ldr	r3, [pc, #112]	; (8005a88 <prvHeapInit+0xb0>)
 8005a18:	2200      	movs	r2, #0
 8005a1a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	68ba      	ldr	r2, [r7, #8]
 8005a20:	4413      	add	r3, r2
 8005a22:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005a24:	2208      	movs	r2, #8
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	1a9b      	subs	r3, r3, r2
 8005a2a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f023 0307 	bic.w	r3, r3, #7
 8005a32:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	4a15      	ldr	r2, [pc, #84]	; (8005a8c <prvHeapInit+0xb4>)
 8005a38:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005a3a:	4b14      	ldr	r3, [pc, #80]	; (8005a8c <prvHeapInit+0xb4>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005a42:	4b12      	ldr	r3, [pc, #72]	; (8005a8c <prvHeapInit+0xb4>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2200      	movs	r2, #0
 8005a48:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	1ad2      	subs	r2, r2, r3
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005a58:	4b0c      	ldr	r3, [pc, #48]	; (8005a8c <prvHeapInit+0xb4>)
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	4a0a      	ldr	r2, [pc, #40]	; (8005a90 <prvHeapInit+0xb8>)
 8005a66:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	4a09      	ldr	r2, [pc, #36]	; (8005a94 <prvHeapInit+0xbc>)
 8005a6e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005a70:	4b09      	ldr	r3, [pc, #36]	; (8005a98 <prvHeapInit+0xc0>)
 8005a72:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005a76:	601a      	str	r2, [r3, #0]
}
 8005a78:	bf00      	nop
 8005a7a:	3714      	adds	r7, #20
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bc80      	pop	{r7}
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	20000ec0 	.word	0x20000ec0
 8005a88:	20001ac0 	.word	0x20001ac0
 8005a8c:	20001ac8 	.word	0x20001ac8
 8005a90:	20001ad0 	.word	0x20001ad0
 8005a94:	20001acc 	.word	0x20001acc
 8005a98:	20001ad4 	.word	0x20001ad4

08005a9c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b085      	sub	sp, #20
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005aa4:	4b27      	ldr	r3, [pc, #156]	; (8005b44 <prvInsertBlockIntoFreeList+0xa8>)
 8005aa6:	60fb      	str	r3, [r7, #12]
 8005aa8:	e002      	b.n	8005ab0 <prvInsertBlockIntoFreeList+0x14>
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	60fb      	str	r3, [r7, #12]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d8f7      	bhi.n	8005aaa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	68ba      	ldr	r2, [r7, #8]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d108      	bne.n	8005ade <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	685a      	ldr	r2, [r3, #4]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	441a      	add	r2, r3
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	68ba      	ldr	r2, [r7, #8]
 8005ae8:	441a      	add	r2, r3
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d118      	bne.n	8005b24 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	4b14      	ldr	r3, [pc, #80]	; (8005b48 <prvInsertBlockIntoFreeList+0xac>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d00d      	beq.n	8005b1a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685a      	ldr	r2, [r3, #4]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	441a      	add	r2, r3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	601a      	str	r2, [r3, #0]
 8005b18:	e008      	b.n	8005b2c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005b1a:	4b0b      	ldr	r3, [pc, #44]	; (8005b48 <prvInsertBlockIntoFreeList+0xac>)
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	601a      	str	r2, [r3, #0]
 8005b22:	e003      	b.n	8005b2c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d002      	beq.n	8005b3a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b3a:	bf00      	nop
 8005b3c:	3714      	adds	r7, #20
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bc80      	pop	{r7}
 8005b42:	4770      	bx	lr
 8005b44:	20001ac0 	.word	0x20001ac0
 8005b48:	20001ac8 	.word	0x20001ac8

08005b4c <sbrk_aligned>:
 8005b4c:	b570      	push	{r4, r5, r6, lr}
 8005b4e:	4e0e      	ldr	r6, [pc, #56]	; (8005b88 <sbrk_aligned+0x3c>)
 8005b50:	460c      	mov	r4, r1
 8005b52:	6831      	ldr	r1, [r6, #0]
 8005b54:	4605      	mov	r5, r0
 8005b56:	b911      	cbnz	r1, 8005b5e <sbrk_aligned+0x12>
 8005b58:	f000 f8cc 	bl	8005cf4 <_sbrk_r>
 8005b5c:	6030      	str	r0, [r6, #0]
 8005b5e:	4621      	mov	r1, r4
 8005b60:	4628      	mov	r0, r5
 8005b62:	f000 f8c7 	bl	8005cf4 <_sbrk_r>
 8005b66:	1c43      	adds	r3, r0, #1
 8005b68:	d00a      	beq.n	8005b80 <sbrk_aligned+0x34>
 8005b6a:	1cc4      	adds	r4, r0, #3
 8005b6c:	f024 0403 	bic.w	r4, r4, #3
 8005b70:	42a0      	cmp	r0, r4
 8005b72:	d007      	beq.n	8005b84 <sbrk_aligned+0x38>
 8005b74:	1a21      	subs	r1, r4, r0
 8005b76:	4628      	mov	r0, r5
 8005b78:	f000 f8bc 	bl	8005cf4 <_sbrk_r>
 8005b7c:	3001      	adds	r0, #1
 8005b7e:	d101      	bne.n	8005b84 <sbrk_aligned+0x38>
 8005b80:	f04f 34ff 	mov.w	r4, #4294967295
 8005b84:	4620      	mov	r0, r4
 8005b86:	bd70      	pop	{r4, r5, r6, pc}
 8005b88:	20001adc 	.word	0x20001adc

08005b8c <_malloc_r>:
 8005b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b90:	1ccd      	adds	r5, r1, #3
 8005b92:	f025 0503 	bic.w	r5, r5, #3
 8005b96:	3508      	adds	r5, #8
 8005b98:	2d0c      	cmp	r5, #12
 8005b9a:	bf38      	it	cc
 8005b9c:	250c      	movcc	r5, #12
 8005b9e:	2d00      	cmp	r5, #0
 8005ba0:	4607      	mov	r7, r0
 8005ba2:	db01      	blt.n	8005ba8 <_malloc_r+0x1c>
 8005ba4:	42a9      	cmp	r1, r5
 8005ba6:	d905      	bls.n	8005bb4 <_malloc_r+0x28>
 8005ba8:	230c      	movs	r3, #12
 8005baa:	2600      	movs	r6, #0
 8005bac:	603b      	str	r3, [r7, #0]
 8005bae:	4630      	mov	r0, r6
 8005bb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bb4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005c88 <_malloc_r+0xfc>
 8005bb8:	f000 f868 	bl	8005c8c <__malloc_lock>
 8005bbc:	f8d8 3000 	ldr.w	r3, [r8]
 8005bc0:	461c      	mov	r4, r3
 8005bc2:	bb5c      	cbnz	r4, 8005c1c <_malloc_r+0x90>
 8005bc4:	4629      	mov	r1, r5
 8005bc6:	4638      	mov	r0, r7
 8005bc8:	f7ff ffc0 	bl	8005b4c <sbrk_aligned>
 8005bcc:	1c43      	adds	r3, r0, #1
 8005bce:	4604      	mov	r4, r0
 8005bd0:	d155      	bne.n	8005c7e <_malloc_r+0xf2>
 8005bd2:	f8d8 4000 	ldr.w	r4, [r8]
 8005bd6:	4626      	mov	r6, r4
 8005bd8:	2e00      	cmp	r6, #0
 8005bda:	d145      	bne.n	8005c68 <_malloc_r+0xdc>
 8005bdc:	2c00      	cmp	r4, #0
 8005bde:	d048      	beq.n	8005c72 <_malloc_r+0xe6>
 8005be0:	6823      	ldr	r3, [r4, #0]
 8005be2:	4631      	mov	r1, r6
 8005be4:	4638      	mov	r0, r7
 8005be6:	eb04 0903 	add.w	r9, r4, r3
 8005bea:	f000 f883 	bl	8005cf4 <_sbrk_r>
 8005bee:	4581      	cmp	r9, r0
 8005bf0:	d13f      	bne.n	8005c72 <_malloc_r+0xe6>
 8005bf2:	6821      	ldr	r1, [r4, #0]
 8005bf4:	4638      	mov	r0, r7
 8005bf6:	1a6d      	subs	r5, r5, r1
 8005bf8:	4629      	mov	r1, r5
 8005bfa:	f7ff ffa7 	bl	8005b4c <sbrk_aligned>
 8005bfe:	3001      	adds	r0, #1
 8005c00:	d037      	beq.n	8005c72 <_malloc_r+0xe6>
 8005c02:	6823      	ldr	r3, [r4, #0]
 8005c04:	442b      	add	r3, r5
 8005c06:	6023      	str	r3, [r4, #0]
 8005c08:	f8d8 3000 	ldr.w	r3, [r8]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d038      	beq.n	8005c82 <_malloc_r+0xf6>
 8005c10:	685a      	ldr	r2, [r3, #4]
 8005c12:	42a2      	cmp	r2, r4
 8005c14:	d12b      	bne.n	8005c6e <_malloc_r+0xe2>
 8005c16:	2200      	movs	r2, #0
 8005c18:	605a      	str	r2, [r3, #4]
 8005c1a:	e00f      	b.n	8005c3c <_malloc_r+0xb0>
 8005c1c:	6822      	ldr	r2, [r4, #0]
 8005c1e:	1b52      	subs	r2, r2, r5
 8005c20:	d41f      	bmi.n	8005c62 <_malloc_r+0xd6>
 8005c22:	2a0b      	cmp	r2, #11
 8005c24:	d917      	bls.n	8005c56 <_malloc_r+0xca>
 8005c26:	1961      	adds	r1, r4, r5
 8005c28:	42a3      	cmp	r3, r4
 8005c2a:	6025      	str	r5, [r4, #0]
 8005c2c:	bf18      	it	ne
 8005c2e:	6059      	strne	r1, [r3, #4]
 8005c30:	6863      	ldr	r3, [r4, #4]
 8005c32:	bf08      	it	eq
 8005c34:	f8c8 1000 	streq.w	r1, [r8]
 8005c38:	5162      	str	r2, [r4, r5]
 8005c3a:	604b      	str	r3, [r1, #4]
 8005c3c:	4638      	mov	r0, r7
 8005c3e:	f104 060b 	add.w	r6, r4, #11
 8005c42:	f000 f829 	bl	8005c98 <__malloc_unlock>
 8005c46:	f026 0607 	bic.w	r6, r6, #7
 8005c4a:	1d23      	adds	r3, r4, #4
 8005c4c:	1af2      	subs	r2, r6, r3
 8005c4e:	d0ae      	beq.n	8005bae <_malloc_r+0x22>
 8005c50:	1b9b      	subs	r3, r3, r6
 8005c52:	50a3      	str	r3, [r4, r2]
 8005c54:	e7ab      	b.n	8005bae <_malloc_r+0x22>
 8005c56:	42a3      	cmp	r3, r4
 8005c58:	6862      	ldr	r2, [r4, #4]
 8005c5a:	d1dd      	bne.n	8005c18 <_malloc_r+0x8c>
 8005c5c:	f8c8 2000 	str.w	r2, [r8]
 8005c60:	e7ec      	b.n	8005c3c <_malloc_r+0xb0>
 8005c62:	4623      	mov	r3, r4
 8005c64:	6864      	ldr	r4, [r4, #4]
 8005c66:	e7ac      	b.n	8005bc2 <_malloc_r+0x36>
 8005c68:	4634      	mov	r4, r6
 8005c6a:	6876      	ldr	r6, [r6, #4]
 8005c6c:	e7b4      	b.n	8005bd8 <_malloc_r+0x4c>
 8005c6e:	4613      	mov	r3, r2
 8005c70:	e7cc      	b.n	8005c0c <_malloc_r+0x80>
 8005c72:	230c      	movs	r3, #12
 8005c74:	4638      	mov	r0, r7
 8005c76:	603b      	str	r3, [r7, #0]
 8005c78:	f000 f80e 	bl	8005c98 <__malloc_unlock>
 8005c7c:	e797      	b.n	8005bae <_malloc_r+0x22>
 8005c7e:	6025      	str	r5, [r4, #0]
 8005c80:	e7dc      	b.n	8005c3c <_malloc_r+0xb0>
 8005c82:	605b      	str	r3, [r3, #4]
 8005c84:	deff      	udf	#255	; 0xff
 8005c86:	bf00      	nop
 8005c88:	20001ad8 	.word	0x20001ad8

08005c8c <__malloc_lock>:
 8005c8c:	4801      	ldr	r0, [pc, #4]	; (8005c94 <__malloc_lock+0x8>)
 8005c8e:	f000 b86b 	b.w	8005d68 <__retarget_lock_acquire_recursive>
 8005c92:	bf00      	nop
 8005c94:	20001c1c 	.word	0x20001c1c

08005c98 <__malloc_unlock>:
 8005c98:	4801      	ldr	r0, [pc, #4]	; (8005ca0 <__malloc_unlock+0x8>)
 8005c9a:	f000 b866 	b.w	8005d6a <__retarget_lock_release_recursive>
 8005c9e:	bf00      	nop
 8005ca0:	20001c1c 	.word	0x20001c1c

08005ca4 <siprintf>:
 8005ca4:	b40e      	push	{r1, r2, r3}
 8005ca6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005caa:	b500      	push	{lr}
 8005cac:	b09c      	sub	sp, #112	; 0x70
 8005cae:	ab1d      	add	r3, sp, #116	; 0x74
 8005cb0:	9002      	str	r0, [sp, #8]
 8005cb2:	9006      	str	r0, [sp, #24]
 8005cb4:	9107      	str	r1, [sp, #28]
 8005cb6:	9104      	str	r1, [sp, #16]
 8005cb8:	4808      	ldr	r0, [pc, #32]	; (8005cdc <siprintf+0x38>)
 8005cba:	4909      	ldr	r1, [pc, #36]	; (8005ce0 <siprintf+0x3c>)
 8005cbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cc0:	9105      	str	r1, [sp, #20]
 8005cc2:	6800      	ldr	r0, [r0, #0]
 8005cc4:	a902      	add	r1, sp, #8
 8005cc6:	9301      	str	r3, [sp, #4]
 8005cc8:	f000 f900 	bl	8005ecc <_svfiprintf_r>
 8005ccc:	2200      	movs	r2, #0
 8005cce:	9b02      	ldr	r3, [sp, #8]
 8005cd0:	701a      	strb	r2, [r3, #0]
 8005cd2:	b01c      	add	sp, #112	; 0x70
 8005cd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005cd8:	b003      	add	sp, #12
 8005cda:	4770      	bx	lr
 8005cdc:	2000005c 	.word	0x2000005c
 8005ce0:	ffff0208 	.word	0xffff0208

08005ce4 <memset>:
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	4402      	add	r2, r0
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d100      	bne.n	8005cee <memset+0xa>
 8005cec:	4770      	bx	lr
 8005cee:	f803 1b01 	strb.w	r1, [r3], #1
 8005cf2:	e7f9      	b.n	8005ce8 <memset+0x4>

08005cf4 <_sbrk_r>:
 8005cf4:	b538      	push	{r3, r4, r5, lr}
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	4d05      	ldr	r5, [pc, #20]	; (8005d10 <_sbrk_r+0x1c>)
 8005cfa:	4604      	mov	r4, r0
 8005cfc:	4608      	mov	r0, r1
 8005cfe:	602b      	str	r3, [r5, #0]
 8005d00:	f7fb f8e2 	bl	8000ec8 <_sbrk>
 8005d04:	1c43      	adds	r3, r0, #1
 8005d06:	d102      	bne.n	8005d0e <_sbrk_r+0x1a>
 8005d08:	682b      	ldr	r3, [r5, #0]
 8005d0a:	b103      	cbz	r3, 8005d0e <_sbrk_r+0x1a>
 8005d0c:	6023      	str	r3, [r4, #0]
 8005d0e:	bd38      	pop	{r3, r4, r5, pc}
 8005d10:	20001c18 	.word	0x20001c18

08005d14 <__errno>:
 8005d14:	4b01      	ldr	r3, [pc, #4]	; (8005d1c <__errno+0x8>)
 8005d16:	6818      	ldr	r0, [r3, #0]
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	2000005c 	.word	0x2000005c

08005d20 <__libc_init_array>:
 8005d20:	b570      	push	{r4, r5, r6, lr}
 8005d22:	2600      	movs	r6, #0
 8005d24:	4d0c      	ldr	r5, [pc, #48]	; (8005d58 <__libc_init_array+0x38>)
 8005d26:	4c0d      	ldr	r4, [pc, #52]	; (8005d5c <__libc_init_array+0x3c>)
 8005d28:	1b64      	subs	r4, r4, r5
 8005d2a:	10a4      	asrs	r4, r4, #2
 8005d2c:	42a6      	cmp	r6, r4
 8005d2e:	d109      	bne.n	8005d44 <__libc_init_array+0x24>
 8005d30:	f000 fbbe 	bl	80064b0 <_init>
 8005d34:	2600      	movs	r6, #0
 8005d36:	4d0a      	ldr	r5, [pc, #40]	; (8005d60 <__libc_init_array+0x40>)
 8005d38:	4c0a      	ldr	r4, [pc, #40]	; (8005d64 <__libc_init_array+0x44>)
 8005d3a:	1b64      	subs	r4, r4, r5
 8005d3c:	10a4      	asrs	r4, r4, #2
 8005d3e:	42a6      	cmp	r6, r4
 8005d40:	d105      	bne.n	8005d4e <__libc_init_array+0x2e>
 8005d42:	bd70      	pop	{r4, r5, r6, pc}
 8005d44:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d48:	4798      	blx	r3
 8005d4a:	3601      	adds	r6, #1
 8005d4c:	e7ee      	b.n	8005d2c <__libc_init_array+0xc>
 8005d4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d52:	4798      	blx	r3
 8005d54:	3601      	adds	r6, #1
 8005d56:	e7f2      	b.n	8005d3e <__libc_init_array+0x1e>
 8005d58:	080065f0 	.word	0x080065f0
 8005d5c:	080065f0 	.word	0x080065f0
 8005d60:	080065f0 	.word	0x080065f0
 8005d64:	080065f4 	.word	0x080065f4

08005d68 <__retarget_lock_acquire_recursive>:
 8005d68:	4770      	bx	lr

08005d6a <__retarget_lock_release_recursive>:
 8005d6a:	4770      	bx	lr

08005d6c <memcpy>:
 8005d6c:	440a      	add	r2, r1
 8005d6e:	4291      	cmp	r1, r2
 8005d70:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d74:	d100      	bne.n	8005d78 <memcpy+0xc>
 8005d76:	4770      	bx	lr
 8005d78:	b510      	push	{r4, lr}
 8005d7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d7e:	4291      	cmp	r1, r2
 8005d80:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d84:	d1f9      	bne.n	8005d7a <memcpy+0xe>
 8005d86:	bd10      	pop	{r4, pc}

08005d88 <_free_r>:
 8005d88:	b538      	push	{r3, r4, r5, lr}
 8005d8a:	4605      	mov	r5, r0
 8005d8c:	2900      	cmp	r1, #0
 8005d8e:	d040      	beq.n	8005e12 <_free_r+0x8a>
 8005d90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d94:	1f0c      	subs	r4, r1, #4
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	bfb8      	it	lt
 8005d9a:	18e4      	addlt	r4, r4, r3
 8005d9c:	f7ff ff76 	bl	8005c8c <__malloc_lock>
 8005da0:	4a1c      	ldr	r2, [pc, #112]	; (8005e14 <_free_r+0x8c>)
 8005da2:	6813      	ldr	r3, [r2, #0]
 8005da4:	b933      	cbnz	r3, 8005db4 <_free_r+0x2c>
 8005da6:	6063      	str	r3, [r4, #4]
 8005da8:	6014      	str	r4, [r2, #0]
 8005daa:	4628      	mov	r0, r5
 8005dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005db0:	f7ff bf72 	b.w	8005c98 <__malloc_unlock>
 8005db4:	42a3      	cmp	r3, r4
 8005db6:	d908      	bls.n	8005dca <_free_r+0x42>
 8005db8:	6820      	ldr	r0, [r4, #0]
 8005dba:	1821      	adds	r1, r4, r0
 8005dbc:	428b      	cmp	r3, r1
 8005dbe:	bf01      	itttt	eq
 8005dc0:	6819      	ldreq	r1, [r3, #0]
 8005dc2:	685b      	ldreq	r3, [r3, #4]
 8005dc4:	1809      	addeq	r1, r1, r0
 8005dc6:	6021      	streq	r1, [r4, #0]
 8005dc8:	e7ed      	b.n	8005da6 <_free_r+0x1e>
 8005dca:	461a      	mov	r2, r3
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	b10b      	cbz	r3, 8005dd4 <_free_r+0x4c>
 8005dd0:	42a3      	cmp	r3, r4
 8005dd2:	d9fa      	bls.n	8005dca <_free_r+0x42>
 8005dd4:	6811      	ldr	r1, [r2, #0]
 8005dd6:	1850      	adds	r0, r2, r1
 8005dd8:	42a0      	cmp	r0, r4
 8005dda:	d10b      	bne.n	8005df4 <_free_r+0x6c>
 8005ddc:	6820      	ldr	r0, [r4, #0]
 8005dde:	4401      	add	r1, r0
 8005de0:	1850      	adds	r0, r2, r1
 8005de2:	4283      	cmp	r3, r0
 8005de4:	6011      	str	r1, [r2, #0]
 8005de6:	d1e0      	bne.n	8005daa <_free_r+0x22>
 8005de8:	6818      	ldr	r0, [r3, #0]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	4408      	add	r0, r1
 8005dee:	6010      	str	r0, [r2, #0]
 8005df0:	6053      	str	r3, [r2, #4]
 8005df2:	e7da      	b.n	8005daa <_free_r+0x22>
 8005df4:	d902      	bls.n	8005dfc <_free_r+0x74>
 8005df6:	230c      	movs	r3, #12
 8005df8:	602b      	str	r3, [r5, #0]
 8005dfa:	e7d6      	b.n	8005daa <_free_r+0x22>
 8005dfc:	6820      	ldr	r0, [r4, #0]
 8005dfe:	1821      	adds	r1, r4, r0
 8005e00:	428b      	cmp	r3, r1
 8005e02:	bf01      	itttt	eq
 8005e04:	6819      	ldreq	r1, [r3, #0]
 8005e06:	685b      	ldreq	r3, [r3, #4]
 8005e08:	1809      	addeq	r1, r1, r0
 8005e0a:	6021      	streq	r1, [r4, #0]
 8005e0c:	6063      	str	r3, [r4, #4]
 8005e0e:	6054      	str	r4, [r2, #4]
 8005e10:	e7cb      	b.n	8005daa <_free_r+0x22>
 8005e12:	bd38      	pop	{r3, r4, r5, pc}
 8005e14:	20001ad8 	.word	0x20001ad8

08005e18 <__ssputs_r>:
 8005e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e1c:	461f      	mov	r7, r3
 8005e1e:	688e      	ldr	r6, [r1, #8]
 8005e20:	4682      	mov	sl, r0
 8005e22:	42be      	cmp	r6, r7
 8005e24:	460c      	mov	r4, r1
 8005e26:	4690      	mov	r8, r2
 8005e28:	680b      	ldr	r3, [r1, #0]
 8005e2a:	d82c      	bhi.n	8005e86 <__ssputs_r+0x6e>
 8005e2c:	898a      	ldrh	r2, [r1, #12]
 8005e2e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005e32:	d026      	beq.n	8005e82 <__ssputs_r+0x6a>
 8005e34:	6965      	ldr	r5, [r4, #20]
 8005e36:	6909      	ldr	r1, [r1, #16]
 8005e38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e3c:	eba3 0901 	sub.w	r9, r3, r1
 8005e40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005e44:	1c7b      	adds	r3, r7, #1
 8005e46:	444b      	add	r3, r9
 8005e48:	106d      	asrs	r5, r5, #1
 8005e4a:	429d      	cmp	r5, r3
 8005e4c:	bf38      	it	cc
 8005e4e:	461d      	movcc	r5, r3
 8005e50:	0553      	lsls	r3, r2, #21
 8005e52:	d527      	bpl.n	8005ea4 <__ssputs_r+0x8c>
 8005e54:	4629      	mov	r1, r5
 8005e56:	f7ff fe99 	bl	8005b8c <_malloc_r>
 8005e5a:	4606      	mov	r6, r0
 8005e5c:	b360      	cbz	r0, 8005eb8 <__ssputs_r+0xa0>
 8005e5e:	464a      	mov	r2, r9
 8005e60:	6921      	ldr	r1, [r4, #16]
 8005e62:	f7ff ff83 	bl	8005d6c <memcpy>
 8005e66:	89a3      	ldrh	r3, [r4, #12]
 8005e68:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e70:	81a3      	strh	r3, [r4, #12]
 8005e72:	6126      	str	r6, [r4, #16]
 8005e74:	444e      	add	r6, r9
 8005e76:	6026      	str	r6, [r4, #0]
 8005e78:	463e      	mov	r6, r7
 8005e7a:	6165      	str	r5, [r4, #20]
 8005e7c:	eba5 0509 	sub.w	r5, r5, r9
 8005e80:	60a5      	str	r5, [r4, #8]
 8005e82:	42be      	cmp	r6, r7
 8005e84:	d900      	bls.n	8005e88 <__ssputs_r+0x70>
 8005e86:	463e      	mov	r6, r7
 8005e88:	4632      	mov	r2, r6
 8005e8a:	4641      	mov	r1, r8
 8005e8c:	6820      	ldr	r0, [r4, #0]
 8005e8e:	f000 faaf 	bl	80063f0 <memmove>
 8005e92:	2000      	movs	r0, #0
 8005e94:	68a3      	ldr	r3, [r4, #8]
 8005e96:	1b9b      	subs	r3, r3, r6
 8005e98:	60a3      	str	r3, [r4, #8]
 8005e9a:	6823      	ldr	r3, [r4, #0]
 8005e9c:	4433      	add	r3, r6
 8005e9e:	6023      	str	r3, [r4, #0]
 8005ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ea4:	462a      	mov	r2, r5
 8005ea6:	f000 facb 	bl	8006440 <_realloc_r>
 8005eaa:	4606      	mov	r6, r0
 8005eac:	2800      	cmp	r0, #0
 8005eae:	d1e0      	bne.n	8005e72 <__ssputs_r+0x5a>
 8005eb0:	4650      	mov	r0, sl
 8005eb2:	6921      	ldr	r1, [r4, #16]
 8005eb4:	f7ff ff68 	bl	8005d88 <_free_r>
 8005eb8:	230c      	movs	r3, #12
 8005eba:	f8ca 3000 	str.w	r3, [sl]
 8005ebe:	89a3      	ldrh	r3, [r4, #12]
 8005ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ec8:	81a3      	strh	r3, [r4, #12]
 8005eca:	e7e9      	b.n	8005ea0 <__ssputs_r+0x88>

08005ecc <_svfiprintf_r>:
 8005ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ed0:	4698      	mov	r8, r3
 8005ed2:	898b      	ldrh	r3, [r1, #12]
 8005ed4:	4607      	mov	r7, r0
 8005ed6:	061b      	lsls	r3, r3, #24
 8005ed8:	460d      	mov	r5, r1
 8005eda:	4614      	mov	r4, r2
 8005edc:	b09d      	sub	sp, #116	; 0x74
 8005ede:	d50e      	bpl.n	8005efe <_svfiprintf_r+0x32>
 8005ee0:	690b      	ldr	r3, [r1, #16]
 8005ee2:	b963      	cbnz	r3, 8005efe <_svfiprintf_r+0x32>
 8005ee4:	2140      	movs	r1, #64	; 0x40
 8005ee6:	f7ff fe51 	bl	8005b8c <_malloc_r>
 8005eea:	6028      	str	r0, [r5, #0]
 8005eec:	6128      	str	r0, [r5, #16]
 8005eee:	b920      	cbnz	r0, 8005efa <_svfiprintf_r+0x2e>
 8005ef0:	230c      	movs	r3, #12
 8005ef2:	603b      	str	r3, [r7, #0]
 8005ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ef8:	e0d0      	b.n	800609c <_svfiprintf_r+0x1d0>
 8005efa:	2340      	movs	r3, #64	; 0x40
 8005efc:	616b      	str	r3, [r5, #20]
 8005efe:	2300      	movs	r3, #0
 8005f00:	9309      	str	r3, [sp, #36]	; 0x24
 8005f02:	2320      	movs	r3, #32
 8005f04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f08:	2330      	movs	r3, #48	; 0x30
 8005f0a:	f04f 0901 	mov.w	r9, #1
 8005f0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f12:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80060b4 <_svfiprintf_r+0x1e8>
 8005f16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f1a:	4623      	mov	r3, r4
 8005f1c:	469a      	mov	sl, r3
 8005f1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f22:	b10a      	cbz	r2, 8005f28 <_svfiprintf_r+0x5c>
 8005f24:	2a25      	cmp	r2, #37	; 0x25
 8005f26:	d1f9      	bne.n	8005f1c <_svfiprintf_r+0x50>
 8005f28:	ebba 0b04 	subs.w	fp, sl, r4
 8005f2c:	d00b      	beq.n	8005f46 <_svfiprintf_r+0x7a>
 8005f2e:	465b      	mov	r3, fp
 8005f30:	4622      	mov	r2, r4
 8005f32:	4629      	mov	r1, r5
 8005f34:	4638      	mov	r0, r7
 8005f36:	f7ff ff6f 	bl	8005e18 <__ssputs_r>
 8005f3a:	3001      	adds	r0, #1
 8005f3c:	f000 80a9 	beq.w	8006092 <_svfiprintf_r+0x1c6>
 8005f40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f42:	445a      	add	r2, fp
 8005f44:	9209      	str	r2, [sp, #36]	; 0x24
 8005f46:	f89a 3000 	ldrb.w	r3, [sl]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	f000 80a1 	beq.w	8006092 <_svfiprintf_r+0x1c6>
 8005f50:	2300      	movs	r3, #0
 8005f52:	f04f 32ff 	mov.w	r2, #4294967295
 8005f56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f5a:	f10a 0a01 	add.w	sl, sl, #1
 8005f5e:	9304      	str	r3, [sp, #16]
 8005f60:	9307      	str	r3, [sp, #28]
 8005f62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f66:	931a      	str	r3, [sp, #104]	; 0x68
 8005f68:	4654      	mov	r4, sl
 8005f6a:	2205      	movs	r2, #5
 8005f6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f70:	4850      	ldr	r0, [pc, #320]	; (80060b4 <_svfiprintf_r+0x1e8>)
 8005f72:	f000 fa57 	bl	8006424 <memchr>
 8005f76:	9a04      	ldr	r2, [sp, #16]
 8005f78:	b9d8      	cbnz	r0, 8005fb2 <_svfiprintf_r+0xe6>
 8005f7a:	06d0      	lsls	r0, r2, #27
 8005f7c:	bf44      	itt	mi
 8005f7e:	2320      	movmi	r3, #32
 8005f80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f84:	0711      	lsls	r1, r2, #28
 8005f86:	bf44      	itt	mi
 8005f88:	232b      	movmi	r3, #43	; 0x2b
 8005f8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f8e:	f89a 3000 	ldrb.w	r3, [sl]
 8005f92:	2b2a      	cmp	r3, #42	; 0x2a
 8005f94:	d015      	beq.n	8005fc2 <_svfiprintf_r+0xf6>
 8005f96:	4654      	mov	r4, sl
 8005f98:	2000      	movs	r0, #0
 8005f9a:	f04f 0c0a 	mov.w	ip, #10
 8005f9e:	9a07      	ldr	r2, [sp, #28]
 8005fa0:	4621      	mov	r1, r4
 8005fa2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005fa6:	3b30      	subs	r3, #48	; 0x30
 8005fa8:	2b09      	cmp	r3, #9
 8005faa:	d94d      	bls.n	8006048 <_svfiprintf_r+0x17c>
 8005fac:	b1b0      	cbz	r0, 8005fdc <_svfiprintf_r+0x110>
 8005fae:	9207      	str	r2, [sp, #28]
 8005fb0:	e014      	b.n	8005fdc <_svfiprintf_r+0x110>
 8005fb2:	eba0 0308 	sub.w	r3, r0, r8
 8005fb6:	fa09 f303 	lsl.w	r3, r9, r3
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	46a2      	mov	sl, r4
 8005fbe:	9304      	str	r3, [sp, #16]
 8005fc0:	e7d2      	b.n	8005f68 <_svfiprintf_r+0x9c>
 8005fc2:	9b03      	ldr	r3, [sp, #12]
 8005fc4:	1d19      	adds	r1, r3, #4
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	9103      	str	r1, [sp, #12]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	bfbb      	ittet	lt
 8005fce:	425b      	neglt	r3, r3
 8005fd0:	f042 0202 	orrlt.w	r2, r2, #2
 8005fd4:	9307      	strge	r3, [sp, #28]
 8005fd6:	9307      	strlt	r3, [sp, #28]
 8005fd8:	bfb8      	it	lt
 8005fda:	9204      	strlt	r2, [sp, #16]
 8005fdc:	7823      	ldrb	r3, [r4, #0]
 8005fde:	2b2e      	cmp	r3, #46	; 0x2e
 8005fe0:	d10c      	bne.n	8005ffc <_svfiprintf_r+0x130>
 8005fe2:	7863      	ldrb	r3, [r4, #1]
 8005fe4:	2b2a      	cmp	r3, #42	; 0x2a
 8005fe6:	d134      	bne.n	8006052 <_svfiprintf_r+0x186>
 8005fe8:	9b03      	ldr	r3, [sp, #12]
 8005fea:	3402      	adds	r4, #2
 8005fec:	1d1a      	adds	r2, r3, #4
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	9203      	str	r2, [sp, #12]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	bfb8      	it	lt
 8005ff6:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ffa:	9305      	str	r3, [sp, #20]
 8005ffc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80060b8 <_svfiprintf_r+0x1ec>
 8006000:	2203      	movs	r2, #3
 8006002:	4650      	mov	r0, sl
 8006004:	7821      	ldrb	r1, [r4, #0]
 8006006:	f000 fa0d 	bl	8006424 <memchr>
 800600a:	b138      	cbz	r0, 800601c <_svfiprintf_r+0x150>
 800600c:	2240      	movs	r2, #64	; 0x40
 800600e:	9b04      	ldr	r3, [sp, #16]
 8006010:	eba0 000a 	sub.w	r0, r0, sl
 8006014:	4082      	lsls	r2, r0
 8006016:	4313      	orrs	r3, r2
 8006018:	3401      	adds	r4, #1
 800601a:	9304      	str	r3, [sp, #16]
 800601c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006020:	2206      	movs	r2, #6
 8006022:	4826      	ldr	r0, [pc, #152]	; (80060bc <_svfiprintf_r+0x1f0>)
 8006024:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006028:	f000 f9fc 	bl	8006424 <memchr>
 800602c:	2800      	cmp	r0, #0
 800602e:	d038      	beq.n	80060a2 <_svfiprintf_r+0x1d6>
 8006030:	4b23      	ldr	r3, [pc, #140]	; (80060c0 <_svfiprintf_r+0x1f4>)
 8006032:	bb1b      	cbnz	r3, 800607c <_svfiprintf_r+0x1b0>
 8006034:	9b03      	ldr	r3, [sp, #12]
 8006036:	3307      	adds	r3, #7
 8006038:	f023 0307 	bic.w	r3, r3, #7
 800603c:	3308      	adds	r3, #8
 800603e:	9303      	str	r3, [sp, #12]
 8006040:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006042:	4433      	add	r3, r6
 8006044:	9309      	str	r3, [sp, #36]	; 0x24
 8006046:	e768      	b.n	8005f1a <_svfiprintf_r+0x4e>
 8006048:	460c      	mov	r4, r1
 800604a:	2001      	movs	r0, #1
 800604c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006050:	e7a6      	b.n	8005fa0 <_svfiprintf_r+0xd4>
 8006052:	2300      	movs	r3, #0
 8006054:	f04f 0c0a 	mov.w	ip, #10
 8006058:	4619      	mov	r1, r3
 800605a:	3401      	adds	r4, #1
 800605c:	9305      	str	r3, [sp, #20]
 800605e:	4620      	mov	r0, r4
 8006060:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006064:	3a30      	subs	r2, #48	; 0x30
 8006066:	2a09      	cmp	r2, #9
 8006068:	d903      	bls.n	8006072 <_svfiprintf_r+0x1a6>
 800606a:	2b00      	cmp	r3, #0
 800606c:	d0c6      	beq.n	8005ffc <_svfiprintf_r+0x130>
 800606e:	9105      	str	r1, [sp, #20]
 8006070:	e7c4      	b.n	8005ffc <_svfiprintf_r+0x130>
 8006072:	4604      	mov	r4, r0
 8006074:	2301      	movs	r3, #1
 8006076:	fb0c 2101 	mla	r1, ip, r1, r2
 800607a:	e7f0      	b.n	800605e <_svfiprintf_r+0x192>
 800607c:	ab03      	add	r3, sp, #12
 800607e:	9300      	str	r3, [sp, #0]
 8006080:	462a      	mov	r2, r5
 8006082:	4638      	mov	r0, r7
 8006084:	4b0f      	ldr	r3, [pc, #60]	; (80060c4 <_svfiprintf_r+0x1f8>)
 8006086:	a904      	add	r1, sp, #16
 8006088:	f3af 8000 	nop.w
 800608c:	1c42      	adds	r2, r0, #1
 800608e:	4606      	mov	r6, r0
 8006090:	d1d6      	bne.n	8006040 <_svfiprintf_r+0x174>
 8006092:	89ab      	ldrh	r3, [r5, #12]
 8006094:	065b      	lsls	r3, r3, #25
 8006096:	f53f af2d 	bmi.w	8005ef4 <_svfiprintf_r+0x28>
 800609a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800609c:	b01d      	add	sp, #116	; 0x74
 800609e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060a2:	ab03      	add	r3, sp, #12
 80060a4:	9300      	str	r3, [sp, #0]
 80060a6:	462a      	mov	r2, r5
 80060a8:	4638      	mov	r0, r7
 80060aa:	4b06      	ldr	r3, [pc, #24]	; (80060c4 <_svfiprintf_r+0x1f8>)
 80060ac:	a904      	add	r1, sp, #16
 80060ae:	f000 f87d 	bl	80061ac <_printf_i>
 80060b2:	e7eb      	b.n	800608c <_svfiprintf_r+0x1c0>
 80060b4:	080065ba 	.word	0x080065ba
 80060b8:	080065c0 	.word	0x080065c0
 80060bc:	080065c4 	.word	0x080065c4
 80060c0:	00000000 	.word	0x00000000
 80060c4:	08005e19 	.word	0x08005e19

080060c8 <_printf_common>:
 80060c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060cc:	4616      	mov	r6, r2
 80060ce:	4699      	mov	r9, r3
 80060d0:	688a      	ldr	r2, [r1, #8]
 80060d2:	690b      	ldr	r3, [r1, #16]
 80060d4:	4607      	mov	r7, r0
 80060d6:	4293      	cmp	r3, r2
 80060d8:	bfb8      	it	lt
 80060da:	4613      	movlt	r3, r2
 80060dc:	6033      	str	r3, [r6, #0]
 80060de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060e2:	460c      	mov	r4, r1
 80060e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060e8:	b10a      	cbz	r2, 80060ee <_printf_common+0x26>
 80060ea:	3301      	adds	r3, #1
 80060ec:	6033      	str	r3, [r6, #0]
 80060ee:	6823      	ldr	r3, [r4, #0]
 80060f0:	0699      	lsls	r1, r3, #26
 80060f2:	bf42      	ittt	mi
 80060f4:	6833      	ldrmi	r3, [r6, #0]
 80060f6:	3302      	addmi	r3, #2
 80060f8:	6033      	strmi	r3, [r6, #0]
 80060fa:	6825      	ldr	r5, [r4, #0]
 80060fc:	f015 0506 	ands.w	r5, r5, #6
 8006100:	d106      	bne.n	8006110 <_printf_common+0x48>
 8006102:	f104 0a19 	add.w	sl, r4, #25
 8006106:	68e3      	ldr	r3, [r4, #12]
 8006108:	6832      	ldr	r2, [r6, #0]
 800610a:	1a9b      	subs	r3, r3, r2
 800610c:	42ab      	cmp	r3, r5
 800610e:	dc2b      	bgt.n	8006168 <_printf_common+0xa0>
 8006110:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006114:	1e13      	subs	r3, r2, #0
 8006116:	6822      	ldr	r2, [r4, #0]
 8006118:	bf18      	it	ne
 800611a:	2301      	movne	r3, #1
 800611c:	0692      	lsls	r2, r2, #26
 800611e:	d430      	bmi.n	8006182 <_printf_common+0xba>
 8006120:	4649      	mov	r1, r9
 8006122:	4638      	mov	r0, r7
 8006124:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006128:	47c0      	blx	r8
 800612a:	3001      	adds	r0, #1
 800612c:	d023      	beq.n	8006176 <_printf_common+0xae>
 800612e:	6823      	ldr	r3, [r4, #0]
 8006130:	6922      	ldr	r2, [r4, #16]
 8006132:	f003 0306 	and.w	r3, r3, #6
 8006136:	2b04      	cmp	r3, #4
 8006138:	bf14      	ite	ne
 800613a:	2500      	movne	r5, #0
 800613c:	6833      	ldreq	r3, [r6, #0]
 800613e:	f04f 0600 	mov.w	r6, #0
 8006142:	bf08      	it	eq
 8006144:	68e5      	ldreq	r5, [r4, #12]
 8006146:	f104 041a 	add.w	r4, r4, #26
 800614a:	bf08      	it	eq
 800614c:	1aed      	subeq	r5, r5, r3
 800614e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006152:	bf08      	it	eq
 8006154:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006158:	4293      	cmp	r3, r2
 800615a:	bfc4      	itt	gt
 800615c:	1a9b      	subgt	r3, r3, r2
 800615e:	18ed      	addgt	r5, r5, r3
 8006160:	42b5      	cmp	r5, r6
 8006162:	d11a      	bne.n	800619a <_printf_common+0xd2>
 8006164:	2000      	movs	r0, #0
 8006166:	e008      	b.n	800617a <_printf_common+0xb2>
 8006168:	2301      	movs	r3, #1
 800616a:	4652      	mov	r2, sl
 800616c:	4649      	mov	r1, r9
 800616e:	4638      	mov	r0, r7
 8006170:	47c0      	blx	r8
 8006172:	3001      	adds	r0, #1
 8006174:	d103      	bne.n	800617e <_printf_common+0xb6>
 8006176:	f04f 30ff 	mov.w	r0, #4294967295
 800617a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800617e:	3501      	adds	r5, #1
 8006180:	e7c1      	b.n	8006106 <_printf_common+0x3e>
 8006182:	2030      	movs	r0, #48	; 0x30
 8006184:	18e1      	adds	r1, r4, r3
 8006186:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800618a:	1c5a      	adds	r2, r3, #1
 800618c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006190:	4422      	add	r2, r4
 8006192:	3302      	adds	r3, #2
 8006194:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006198:	e7c2      	b.n	8006120 <_printf_common+0x58>
 800619a:	2301      	movs	r3, #1
 800619c:	4622      	mov	r2, r4
 800619e:	4649      	mov	r1, r9
 80061a0:	4638      	mov	r0, r7
 80061a2:	47c0      	blx	r8
 80061a4:	3001      	adds	r0, #1
 80061a6:	d0e6      	beq.n	8006176 <_printf_common+0xae>
 80061a8:	3601      	adds	r6, #1
 80061aa:	e7d9      	b.n	8006160 <_printf_common+0x98>

080061ac <_printf_i>:
 80061ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061b0:	7e0f      	ldrb	r7, [r1, #24]
 80061b2:	4691      	mov	r9, r2
 80061b4:	2f78      	cmp	r7, #120	; 0x78
 80061b6:	4680      	mov	r8, r0
 80061b8:	460c      	mov	r4, r1
 80061ba:	469a      	mov	sl, r3
 80061bc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80061be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80061c2:	d807      	bhi.n	80061d4 <_printf_i+0x28>
 80061c4:	2f62      	cmp	r7, #98	; 0x62
 80061c6:	d80a      	bhi.n	80061de <_printf_i+0x32>
 80061c8:	2f00      	cmp	r7, #0
 80061ca:	f000 80d5 	beq.w	8006378 <_printf_i+0x1cc>
 80061ce:	2f58      	cmp	r7, #88	; 0x58
 80061d0:	f000 80c1 	beq.w	8006356 <_printf_i+0x1aa>
 80061d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80061dc:	e03a      	b.n	8006254 <_printf_i+0xa8>
 80061de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80061e2:	2b15      	cmp	r3, #21
 80061e4:	d8f6      	bhi.n	80061d4 <_printf_i+0x28>
 80061e6:	a101      	add	r1, pc, #4	; (adr r1, 80061ec <_printf_i+0x40>)
 80061e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061ec:	08006245 	.word	0x08006245
 80061f0:	08006259 	.word	0x08006259
 80061f4:	080061d5 	.word	0x080061d5
 80061f8:	080061d5 	.word	0x080061d5
 80061fc:	080061d5 	.word	0x080061d5
 8006200:	080061d5 	.word	0x080061d5
 8006204:	08006259 	.word	0x08006259
 8006208:	080061d5 	.word	0x080061d5
 800620c:	080061d5 	.word	0x080061d5
 8006210:	080061d5 	.word	0x080061d5
 8006214:	080061d5 	.word	0x080061d5
 8006218:	0800635f 	.word	0x0800635f
 800621c:	08006285 	.word	0x08006285
 8006220:	08006319 	.word	0x08006319
 8006224:	080061d5 	.word	0x080061d5
 8006228:	080061d5 	.word	0x080061d5
 800622c:	08006381 	.word	0x08006381
 8006230:	080061d5 	.word	0x080061d5
 8006234:	08006285 	.word	0x08006285
 8006238:	080061d5 	.word	0x080061d5
 800623c:	080061d5 	.word	0x080061d5
 8006240:	08006321 	.word	0x08006321
 8006244:	682b      	ldr	r3, [r5, #0]
 8006246:	1d1a      	adds	r2, r3, #4
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	602a      	str	r2, [r5, #0]
 800624c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006250:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006254:	2301      	movs	r3, #1
 8006256:	e0a0      	b.n	800639a <_printf_i+0x1ee>
 8006258:	6820      	ldr	r0, [r4, #0]
 800625a:	682b      	ldr	r3, [r5, #0]
 800625c:	0607      	lsls	r7, r0, #24
 800625e:	f103 0104 	add.w	r1, r3, #4
 8006262:	6029      	str	r1, [r5, #0]
 8006264:	d501      	bpl.n	800626a <_printf_i+0xbe>
 8006266:	681e      	ldr	r6, [r3, #0]
 8006268:	e003      	b.n	8006272 <_printf_i+0xc6>
 800626a:	0646      	lsls	r6, r0, #25
 800626c:	d5fb      	bpl.n	8006266 <_printf_i+0xba>
 800626e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006272:	2e00      	cmp	r6, #0
 8006274:	da03      	bge.n	800627e <_printf_i+0xd2>
 8006276:	232d      	movs	r3, #45	; 0x2d
 8006278:	4276      	negs	r6, r6
 800627a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800627e:	230a      	movs	r3, #10
 8006280:	4859      	ldr	r0, [pc, #356]	; (80063e8 <_printf_i+0x23c>)
 8006282:	e012      	b.n	80062aa <_printf_i+0xfe>
 8006284:	682b      	ldr	r3, [r5, #0]
 8006286:	6820      	ldr	r0, [r4, #0]
 8006288:	1d19      	adds	r1, r3, #4
 800628a:	6029      	str	r1, [r5, #0]
 800628c:	0605      	lsls	r5, r0, #24
 800628e:	d501      	bpl.n	8006294 <_printf_i+0xe8>
 8006290:	681e      	ldr	r6, [r3, #0]
 8006292:	e002      	b.n	800629a <_printf_i+0xee>
 8006294:	0641      	lsls	r1, r0, #25
 8006296:	d5fb      	bpl.n	8006290 <_printf_i+0xe4>
 8006298:	881e      	ldrh	r6, [r3, #0]
 800629a:	2f6f      	cmp	r7, #111	; 0x6f
 800629c:	bf0c      	ite	eq
 800629e:	2308      	moveq	r3, #8
 80062a0:	230a      	movne	r3, #10
 80062a2:	4851      	ldr	r0, [pc, #324]	; (80063e8 <_printf_i+0x23c>)
 80062a4:	2100      	movs	r1, #0
 80062a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80062aa:	6865      	ldr	r5, [r4, #4]
 80062ac:	2d00      	cmp	r5, #0
 80062ae:	bfa8      	it	ge
 80062b0:	6821      	ldrge	r1, [r4, #0]
 80062b2:	60a5      	str	r5, [r4, #8]
 80062b4:	bfa4      	itt	ge
 80062b6:	f021 0104 	bicge.w	r1, r1, #4
 80062ba:	6021      	strge	r1, [r4, #0]
 80062bc:	b90e      	cbnz	r6, 80062c2 <_printf_i+0x116>
 80062be:	2d00      	cmp	r5, #0
 80062c0:	d04b      	beq.n	800635a <_printf_i+0x1ae>
 80062c2:	4615      	mov	r5, r2
 80062c4:	fbb6 f1f3 	udiv	r1, r6, r3
 80062c8:	fb03 6711 	mls	r7, r3, r1, r6
 80062cc:	5dc7      	ldrb	r7, [r0, r7]
 80062ce:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80062d2:	4637      	mov	r7, r6
 80062d4:	42bb      	cmp	r3, r7
 80062d6:	460e      	mov	r6, r1
 80062d8:	d9f4      	bls.n	80062c4 <_printf_i+0x118>
 80062da:	2b08      	cmp	r3, #8
 80062dc:	d10b      	bne.n	80062f6 <_printf_i+0x14a>
 80062de:	6823      	ldr	r3, [r4, #0]
 80062e0:	07de      	lsls	r6, r3, #31
 80062e2:	d508      	bpl.n	80062f6 <_printf_i+0x14a>
 80062e4:	6923      	ldr	r3, [r4, #16]
 80062e6:	6861      	ldr	r1, [r4, #4]
 80062e8:	4299      	cmp	r1, r3
 80062ea:	bfde      	ittt	le
 80062ec:	2330      	movle	r3, #48	; 0x30
 80062ee:	f805 3c01 	strble.w	r3, [r5, #-1]
 80062f2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80062f6:	1b52      	subs	r2, r2, r5
 80062f8:	6122      	str	r2, [r4, #16]
 80062fa:	464b      	mov	r3, r9
 80062fc:	4621      	mov	r1, r4
 80062fe:	4640      	mov	r0, r8
 8006300:	f8cd a000 	str.w	sl, [sp]
 8006304:	aa03      	add	r2, sp, #12
 8006306:	f7ff fedf 	bl	80060c8 <_printf_common>
 800630a:	3001      	adds	r0, #1
 800630c:	d14a      	bne.n	80063a4 <_printf_i+0x1f8>
 800630e:	f04f 30ff 	mov.w	r0, #4294967295
 8006312:	b004      	add	sp, #16
 8006314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006318:	6823      	ldr	r3, [r4, #0]
 800631a:	f043 0320 	orr.w	r3, r3, #32
 800631e:	6023      	str	r3, [r4, #0]
 8006320:	2778      	movs	r7, #120	; 0x78
 8006322:	4832      	ldr	r0, [pc, #200]	; (80063ec <_printf_i+0x240>)
 8006324:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006328:	6823      	ldr	r3, [r4, #0]
 800632a:	6829      	ldr	r1, [r5, #0]
 800632c:	061f      	lsls	r7, r3, #24
 800632e:	f851 6b04 	ldr.w	r6, [r1], #4
 8006332:	d402      	bmi.n	800633a <_printf_i+0x18e>
 8006334:	065f      	lsls	r7, r3, #25
 8006336:	bf48      	it	mi
 8006338:	b2b6      	uxthmi	r6, r6
 800633a:	07df      	lsls	r7, r3, #31
 800633c:	bf48      	it	mi
 800633e:	f043 0320 	orrmi.w	r3, r3, #32
 8006342:	6029      	str	r1, [r5, #0]
 8006344:	bf48      	it	mi
 8006346:	6023      	strmi	r3, [r4, #0]
 8006348:	b91e      	cbnz	r6, 8006352 <_printf_i+0x1a6>
 800634a:	6823      	ldr	r3, [r4, #0]
 800634c:	f023 0320 	bic.w	r3, r3, #32
 8006350:	6023      	str	r3, [r4, #0]
 8006352:	2310      	movs	r3, #16
 8006354:	e7a6      	b.n	80062a4 <_printf_i+0xf8>
 8006356:	4824      	ldr	r0, [pc, #144]	; (80063e8 <_printf_i+0x23c>)
 8006358:	e7e4      	b.n	8006324 <_printf_i+0x178>
 800635a:	4615      	mov	r5, r2
 800635c:	e7bd      	b.n	80062da <_printf_i+0x12e>
 800635e:	682b      	ldr	r3, [r5, #0]
 8006360:	6826      	ldr	r6, [r4, #0]
 8006362:	1d18      	adds	r0, r3, #4
 8006364:	6961      	ldr	r1, [r4, #20]
 8006366:	6028      	str	r0, [r5, #0]
 8006368:	0635      	lsls	r5, r6, #24
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	d501      	bpl.n	8006372 <_printf_i+0x1c6>
 800636e:	6019      	str	r1, [r3, #0]
 8006370:	e002      	b.n	8006378 <_printf_i+0x1cc>
 8006372:	0670      	lsls	r0, r6, #25
 8006374:	d5fb      	bpl.n	800636e <_printf_i+0x1c2>
 8006376:	8019      	strh	r1, [r3, #0]
 8006378:	2300      	movs	r3, #0
 800637a:	4615      	mov	r5, r2
 800637c:	6123      	str	r3, [r4, #16]
 800637e:	e7bc      	b.n	80062fa <_printf_i+0x14e>
 8006380:	682b      	ldr	r3, [r5, #0]
 8006382:	2100      	movs	r1, #0
 8006384:	1d1a      	adds	r2, r3, #4
 8006386:	602a      	str	r2, [r5, #0]
 8006388:	681d      	ldr	r5, [r3, #0]
 800638a:	6862      	ldr	r2, [r4, #4]
 800638c:	4628      	mov	r0, r5
 800638e:	f000 f849 	bl	8006424 <memchr>
 8006392:	b108      	cbz	r0, 8006398 <_printf_i+0x1ec>
 8006394:	1b40      	subs	r0, r0, r5
 8006396:	6060      	str	r0, [r4, #4]
 8006398:	6863      	ldr	r3, [r4, #4]
 800639a:	6123      	str	r3, [r4, #16]
 800639c:	2300      	movs	r3, #0
 800639e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063a2:	e7aa      	b.n	80062fa <_printf_i+0x14e>
 80063a4:	462a      	mov	r2, r5
 80063a6:	4649      	mov	r1, r9
 80063a8:	4640      	mov	r0, r8
 80063aa:	6923      	ldr	r3, [r4, #16]
 80063ac:	47d0      	blx	sl
 80063ae:	3001      	adds	r0, #1
 80063b0:	d0ad      	beq.n	800630e <_printf_i+0x162>
 80063b2:	6823      	ldr	r3, [r4, #0]
 80063b4:	079b      	lsls	r3, r3, #30
 80063b6:	d413      	bmi.n	80063e0 <_printf_i+0x234>
 80063b8:	68e0      	ldr	r0, [r4, #12]
 80063ba:	9b03      	ldr	r3, [sp, #12]
 80063bc:	4298      	cmp	r0, r3
 80063be:	bfb8      	it	lt
 80063c0:	4618      	movlt	r0, r3
 80063c2:	e7a6      	b.n	8006312 <_printf_i+0x166>
 80063c4:	2301      	movs	r3, #1
 80063c6:	4632      	mov	r2, r6
 80063c8:	4649      	mov	r1, r9
 80063ca:	4640      	mov	r0, r8
 80063cc:	47d0      	blx	sl
 80063ce:	3001      	adds	r0, #1
 80063d0:	d09d      	beq.n	800630e <_printf_i+0x162>
 80063d2:	3501      	adds	r5, #1
 80063d4:	68e3      	ldr	r3, [r4, #12]
 80063d6:	9903      	ldr	r1, [sp, #12]
 80063d8:	1a5b      	subs	r3, r3, r1
 80063da:	42ab      	cmp	r3, r5
 80063dc:	dcf2      	bgt.n	80063c4 <_printf_i+0x218>
 80063de:	e7eb      	b.n	80063b8 <_printf_i+0x20c>
 80063e0:	2500      	movs	r5, #0
 80063e2:	f104 0619 	add.w	r6, r4, #25
 80063e6:	e7f5      	b.n	80063d4 <_printf_i+0x228>
 80063e8:	080065cb 	.word	0x080065cb
 80063ec:	080065dc 	.word	0x080065dc

080063f0 <memmove>:
 80063f0:	4288      	cmp	r0, r1
 80063f2:	b510      	push	{r4, lr}
 80063f4:	eb01 0402 	add.w	r4, r1, r2
 80063f8:	d902      	bls.n	8006400 <memmove+0x10>
 80063fa:	4284      	cmp	r4, r0
 80063fc:	4623      	mov	r3, r4
 80063fe:	d807      	bhi.n	8006410 <memmove+0x20>
 8006400:	1e43      	subs	r3, r0, #1
 8006402:	42a1      	cmp	r1, r4
 8006404:	d008      	beq.n	8006418 <memmove+0x28>
 8006406:	f811 2b01 	ldrb.w	r2, [r1], #1
 800640a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800640e:	e7f8      	b.n	8006402 <memmove+0x12>
 8006410:	4601      	mov	r1, r0
 8006412:	4402      	add	r2, r0
 8006414:	428a      	cmp	r2, r1
 8006416:	d100      	bne.n	800641a <memmove+0x2a>
 8006418:	bd10      	pop	{r4, pc}
 800641a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800641e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006422:	e7f7      	b.n	8006414 <memmove+0x24>

08006424 <memchr>:
 8006424:	4603      	mov	r3, r0
 8006426:	b510      	push	{r4, lr}
 8006428:	b2c9      	uxtb	r1, r1
 800642a:	4402      	add	r2, r0
 800642c:	4293      	cmp	r3, r2
 800642e:	4618      	mov	r0, r3
 8006430:	d101      	bne.n	8006436 <memchr+0x12>
 8006432:	2000      	movs	r0, #0
 8006434:	e003      	b.n	800643e <memchr+0x1a>
 8006436:	7804      	ldrb	r4, [r0, #0]
 8006438:	3301      	adds	r3, #1
 800643a:	428c      	cmp	r4, r1
 800643c:	d1f6      	bne.n	800642c <memchr+0x8>
 800643e:	bd10      	pop	{r4, pc}

08006440 <_realloc_r>:
 8006440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006444:	4680      	mov	r8, r0
 8006446:	4614      	mov	r4, r2
 8006448:	460e      	mov	r6, r1
 800644a:	b921      	cbnz	r1, 8006456 <_realloc_r+0x16>
 800644c:	4611      	mov	r1, r2
 800644e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006452:	f7ff bb9b 	b.w	8005b8c <_malloc_r>
 8006456:	b92a      	cbnz	r2, 8006464 <_realloc_r+0x24>
 8006458:	f7ff fc96 	bl	8005d88 <_free_r>
 800645c:	4625      	mov	r5, r4
 800645e:	4628      	mov	r0, r5
 8006460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006464:	f000 f81b 	bl	800649e <_malloc_usable_size_r>
 8006468:	4284      	cmp	r4, r0
 800646a:	4607      	mov	r7, r0
 800646c:	d802      	bhi.n	8006474 <_realloc_r+0x34>
 800646e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006472:	d812      	bhi.n	800649a <_realloc_r+0x5a>
 8006474:	4621      	mov	r1, r4
 8006476:	4640      	mov	r0, r8
 8006478:	f7ff fb88 	bl	8005b8c <_malloc_r>
 800647c:	4605      	mov	r5, r0
 800647e:	2800      	cmp	r0, #0
 8006480:	d0ed      	beq.n	800645e <_realloc_r+0x1e>
 8006482:	42bc      	cmp	r4, r7
 8006484:	4622      	mov	r2, r4
 8006486:	4631      	mov	r1, r6
 8006488:	bf28      	it	cs
 800648a:	463a      	movcs	r2, r7
 800648c:	f7ff fc6e 	bl	8005d6c <memcpy>
 8006490:	4631      	mov	r1, r6
 8006492:	4640      	mov	r0, r8
 8006494:	f7ff fc78 	bl	8005d88 <_free_r>
 8006498:	e7e1      	b.n	800645e <_realloc_r+0x1e>
 800649a:	4635      	mov	r5, r6
 800649c:	e7df      	b.n	800645e <_realloc_r+0x1e>

0800649e <_malloc_usable_size_r>:
 800649e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064a2:	1f18      	subs	r0, r3, #4
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	bfbc      	itt	lt
 80064a8:	580b      	ldrlt	r3, [r1, r0]
 80064aa:	18c0      	addlt	r0, r0, r3
 80064ac:	4770      	bx	lr
	...

080064b0 <_init>:
 80064b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064b2:	bf00      	nop
 80064b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064b6:	bc08      	pop	{r3}
 80064b8:	469e      	mov	lr, r3
 80064ba:	4770      	bx	lr

080064bc <_fini>:
 80064bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064be:	bf00      	nop
 80064c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064c2:	bc08      	pop	{r3}
 80064c4:	469e      	mov	lr, r3
 80064c6:	4770      	bx	lr
