
CAN_Goft.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020bc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080021c8  080021c8  000121c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021f4  080021f4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080021f4  080021f4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080021f4  080021f4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021f4  080021f4  000121f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080021f8  080021f8  000121f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080021fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  2000000c  08002208  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08002208  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009686  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a98  00000000  00000000  000296fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000828  00000000  00000000  0002b198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000634  00000000  00000000  0002b9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000174e2  00000000  00000000  0002bff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a32c  00000000  00000000  000434d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084b8f  00000000  00000000  0004d802  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002020  00000000  00000000  000d2394  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000d43b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080021b0 	.word	0x080021b0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080021b0 	.word	0x080021b0

0800014c <CANBufferHandleStruct_Init>:
 *      Author: win 10
 */
#include <CAN_OSI.h>
#include <string.h>
#include "CAN_Flag.h"
void CANBufferHandleStruct_Init(CANBufferHandleStruct *Buffer) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b096      	sub	sp, #88	; 0x58
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	NodeBufferHandle defaultNodeHandle = {0};
 8000154:	f107 030c 	add.w	r3, r7, #12
 8000158:	2247      	movs	r2, #71	; 0x47
 800015a:	2100      	movs	r1, #0
 800015c:	4618      	mov	r0, r3
 800015e:	f001 ffed 	bl	800213c <memset>
	Buffer->Buffer_Index = 0;
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2200      	movs	r2, #0
 8000166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	Buffer->SenderID = 0;
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	2200      	movs	r2, #0
 800016e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	Buffer->RecvID = 0;
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	2200      	movs	r2, #0
 8000176:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	Buffer->FrameType_Index = SET_UP_FRAME;
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	2200      	movs	r2, #0
 800017e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	Buffer->PacketDataLength = 0;
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	2200      	movs	r2, #0
 8000186:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	Buffer->CRCValue = 0;
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2200      	movs	r2, #0
 800018e:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	Buffer->NumberOfFrame=0;
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	2200      	movs	r2, #0
 8000196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	memset(Buffer->NetworkBuffer, 0, sizeof(Buffer->NetworkBuffer));
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	2240      	movs	r2, #64	; 0x40
 800019e:	2100      	movs	r1, #0
 80001a0:	4618      	mov	r0, r3
 80001a2:	f001 ffcb 	bl	800213c <memset>
	memset(Buffer->Buffer, 0x55, sizeof(Buffer->Buffer));
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	3348      	adds	r3, #72	; 0x48
 80001aa:	2240      	movs	r2, #64	; 0x40
 80001ac:	2155      	movs	r1, #85	; 0x55
 80001ae:	4618      	mov	r0, r3
 80001b0:	f001 ffc4 	bl	800213c <memset>
	memset(Buffer->StoreData, 0, sizeof(Buffer->StoreData));
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	3388      	adds	r3, #136	; 0x88
 80001b8:	2240      	movs	r2, #64	; 0x40
 80001ba:	2100      	movs	r1, #0
 80001bc:	4618      	mov	r0, r3
 80001be:	f001 ffbd 	bl	800213c <memset>
	for (int i = 0; i < 16; i++) {
 80001c2:	2300      	movs	r3, #0
 80001c4:	657b      	str	r3, [r7, #84]	; 0x54
 80001c6:	e012      	b.n	80001ee <CANBufferHandleStruct_Init+0xa2>
		Buffer->NodeHandle[i] = defaultNodeHandle;
 80001c8:	6879      	ldr	r1, [r7, #4]
 80001ca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80001cc:	4613      	mov	r3, r2
 80001ce:	00db      	lsls	r3, r3, #3
 80001d0:	4413      	add	r3, r2
 80001d2:	00db      	lsls	r3, r3, #3
 80001d4:	1a9b      	subs	r3, r3, r2
 80001d6:	440b      	add	r3, r1
 80001d8:	33c8      	adds	r3, #200	; 0xc8
 80001da:	3302      	adds	r3, #2
 80001dc:	f107 010c 	add.w	r1, r7, #12
 80001e0:	2247      	movs	r2, #71	; 0x47
 80001e2:	4618      	mov	r0, r3
 80001e4:	f001 ffd6 	bl	8002194 <memcpy>
	for (int i = 0; i < 16; i++) {
 80001e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80001ea:	3301      	adds	r3, #1
 80001ec:	657b      	str	r3, [r7, #84]	; 0x54
 80001ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80001f0:	2b0f      	cmp	r3, #15
 80001f2:	dde9      	ble.n	80001c8 <CANBufferHandleStruct_Init+0x7c>
	}
}
 80001f4:	bf00      	nop
 80001f6:	bf00      	nop
 80001f8:	3758      	adds	r7, #88	; 0x58
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bd80      	pop	{r7, pc}

080001fe <FlagsFrameHandle_Init>:
void FlagsFrameHandle_Init(FlagFrameHandle *FlagInit) {
 80001fe:	b4b0      	push	{r4, r5, r7}
 8000200:	b089      	sub	sp, #36	; 0x24
 8000202:	af00      	add	r7, sp, #0
 8000204:	6078      	str	r0, [r7, #4]
	FlagIdHandle DefaultFlagID= {0};
 8000206:	f107 0308 	add.w	r3, r7, #8
 800020a:	2200      	movs	r2, #0
 800020c:	601a      	str	r2, [r3, #0]
 800020e:	605a      	str	r2, [r3, #4]
 8000210:	609a      	str	r2, [r3, #8]
 8000212:	60da      	str	r2, [r3, #12]
 8000214:	741a      	strb	r2, [r3, #16]
	FlagInit->FrameBits.Flag_Frame_0 = 0;
 8000216:	687a      	ldr	r2, [r7, #4]
 8000218:	f892 3112 	ldrb.w	r3, [r2, #274]	; 0x112
 800021c:	f36f 0300 	bfc	r3, #0, #1
 8000220:	f882 3112 	strb.w	r3, [r2, #274]	; 0x112
	FlagInit->FrameBits.Flag_Frame_1 = 0;
 8000224:	687a      	ldr	r2, [r7, #4]
 8000226:	f892 3112 	ldrb.w	r3, [r2, #274]	; 0x112
 800022a:	f36f 0341 	bfc	r3, #1, #1
 800022e:	f882 3112 	strb.w	r3, [r2, #274]	; 0x112
	FlagInit->FrameBits.Flag_Frame_2 = 0;
 8000232:	687a      	ldr	r2, [r7, #4]
 8000234:	f892 3112 	ldrb.w	r3, [r2, #274]	; 0x112
 8000238:	f36f 0382 	bfc	r3, #2, #1
 800023c:	f882 3112 	strb.w	r3, [r2, #274]	; 0x112
	FlagInit->FrameBits.Flag_Frame_3 = 0;
 8000240:	687a      	ldr	r2, [r7, #4]
 8000242:	f892 3112 	ldrb.w	r3, [r2, #274]	; 0x112
 8000246:	f36f 03c3 	bfc	r3, #3, #1
 800024a:	f882 3112 	strb.w	r3, [r2, #274]	; 0x112
	FlagInit->FrameBits.Flag_Frame_4 = 0;
 800024e:	687a      	ldr	r2, [r7, #4]
 8000250:	f892 3112 	ldrb.w	r3, [r2, #274]	; 0x112
 8000254:	f36f 1304 	bfc	r3, #4, #1
 8000258:	f882 3112 	strb.w	r3, [r2, #274]	; 0x112
	FlagInit->FrameBits.Flag_Frame_5 = 0;
 800025c:	687a      	ldr	r2, [r7, #4]
 800025e:	f892 3112 	ldrb.w	r3, [r2, #274]	; 0x112
 8000262:	f36f 1345 	bfc	r3, #5, #1
 8000266:	f882 3112 	strb.w	r3, [r2, #274]	; 0x112
	FlagInit->FrameBits.Flag_Frame_6 = 0;
 800026a:	687a      	ldr	r2, [r7, #4]
 800026c:	f892 3112 	ldrb.w	r3, [r2, #274]	; 0x112
 8000270:	f36f 1386 	bfc	r3, #6, #1
 8000274:	f882 3112 	strb.w	r3, [r2, #274]	; 0x112
	FlagInit->FrameBits.Flag_Frame_7 = 0;
 8000278:	687a      	ldr	r2, [r7, #4]
 800027a:	f892 3112 	ldrb.w	r3, [r2, #274]	; 0x112
 800027e:	f36f 13c7 	bfc	r3, #7, #1
 8000282:	f882 3112 	strb.w	r3, [r2, #274]	; 0x112
	for(int i=0; i<16;i++)
 8000286:	2300      	movs	r3, #0
 8000288:	61fb      	str	r3, [r7, #28]
 800028a:	e012      	b.n	80002b2 <FlagsFrameHandle_Init+0xb4>
	{
		FlagInit->FlagID[i]=DefaultFlagID;
 800028c:	6879      	ldr	r1, [r7, #4]
 800028e:	69fa      	ldr	r2, [r7, #28]
 8000290:	4613      	mov	r3, r2
 8000292:	011b      	lsls	r3, r3, #4
 8000294:	4413      	add	r3, r2
 8000296:	440b      	add	r3, r1
 8000298:	461d      	mov	r5, r3
 800029a:	f107 0408 	add.w	r4, r7, #8
 800029e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80002a0:	6028      	str	r0, [r5, #0]
 80002a2:	6069      	str	r1, [r5, #4]
 80002a4:	60aa      	str	r2, [r5, #8]
 80002a6:	60eb      	str	r3, [r5, #12]
 80002a8:	7823      	ldrb	r3, [r4, #0]
 80002aa:	742b      	strb	r3, [r5, #16]
	for(int i=0; i<16;i++)
 80002ac:	69fb      	ldr	r3, [r7, #28]
 80002ae:	3301      	adds	r3, #1
 80002b0:	61fb      	str	r3, [r7, #28]
 80002b2:	69fb      	ldr	r3, [r7, #28]
 80002b4:	2b0f      	cmp	r3, #15
 80002b6:	dde9      	ble.n	800028c <FlagsFrameHandle_Init+0x8e>
	}
}
 80002b8:	bf00      	nop
 80002ba:	bf00      	nop
 80002bc:	3724      	adds	r7, #36	; 0x24
 80002be:	46bd      	mov	sp, r7
 80002c0:	bcb0      	pop	{r4, r5, r7}
 80002c2:	4770      	bx	lr

080002c4 <CAN_Send_Application>:
				FlagHandle->FlagID[ID].FlagFrameFull[FrameType];
	}
}

uint8_t CAN_Send_Application(CANBufferHandleStruct *AppBuffer,
		CANConfigIDTxtypedef *pStID, uint8_t *Data, uint8_t DataLength) {
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b084      	sub	sp, #16
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	60f8      	str	r0, [r7, #12]
 80002cc:	60b9      	str	r1, [r7, #8]
 80002ce:	607a      	str	r2, [r7, #4]
 80002d0:	70fb      	strb	r3, [r7, #3]
	return CAN_Send_Network_Packet(AppBuffer, Data, DataLength, pStID);
 80002d2:	78fa      	ldrb	r2, [r7, #3]
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	6879      	ldr	r1, [r7, #4]
 80002d8:	68f8      	ldr	r0, [r7, #12]
 80002da:	f000 f805 	bl	80002e8 <CAN_Send_Network_Packet>
 80002de:	4603      	mov	r3, r0
}
 80002e0:	4618      	mov	r0, r3
 80002e2:	3710      	adds	r7, #16
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}

080002e8 <CAN_Send_Network_Packet>:

uint8_t CAN_Send_Network_Packet(CANBufferHandleStruct *TxBuffer, uint8_t *Data,
		uint8_t DataLength, CANConfigIDTxtypedef *pStID) {
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b084      	sub	sp, #16
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	60f8      	str	r0, [r7, #12]
 80002f0:	60b9      	str	r1, [r7, #8]
 80002f2:	603b      	str	r3, [r7, #0]
 80002f4:	4613      	mov	r3, r2
 80002f6:	71fb      	strb	r3, [r7, #7]
	TxBuffer->PacketDataLength = DataLength + 2;
 80002f8:	79fb      	ldrb	r3, [r7, #7]
 80002fa:	3302      	adds	r3, #2
 80002fc:	b2db      	uxtb	r3, r3
 80002fe:	b25a      	sxtb	r2, r3
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	TxBuffer->CRCValue = crc_8(Data, DataLength);
 8000306:	79fb      	ldrb	r3, [r7, #7]
 8000308:	4619      	mov	r1, r3
 800030a:	68b8      	ldr	r0, [r7, #8]
 800030c:	f000 f96e 	bl	80005ec <crc_8>
 8000310:	4603      	mov	r3, r0
 8000312:	461a      	mov	r2, r3
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	TxBuffer->Buffer_Index = DataLength;
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	79fa      	ldrb	r2, [r7, #7]
 800031e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	if (TxBuffer->PacketDataLength % 8 == 0) {
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 8000328:	b2db      	uxtb	r3, r3
 800032a:	f003 0307 	and.w	r3, r3, #7
 800032e:	b2db      	uxtb	r3, r3
 8000330:	2b00      	cmp	r3, #0
 8000332:	d10c      	bne.n	800034e <CAN_Send_Network_Packet+0x66>
		TxBuffer->NumberOfFrame = (TxBuffer->PacketDataLength / 8);
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 800033a:	2b00      	cmp	r3, #0
 800033c:	da00      	bge.n	8000340 <CAN_Send_Network_Packet+0x58>
 800033e:	3307      	adds	r3, #7
 8000340:	10db      	asrs	r3, r3, #3
 8000342:	b25b      	sxtb	r3, r3
 8000344:	b2da      	uxtb	r2, r3
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800034c:	e00d      	b.n	800036a <CAN_Send_Network_Packet+0x82>
	} else {
		TxBuffer->NumberOfFrame = (TxBuffer->PacketDataLength / 8) + 1;
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 8000354:	2b00      	cmp	r3, #0
 8000356:	da00      	bge.n	800035a <CAN_Send_Network_Packet+0x72>
 8000358:	3307      	adds	r3, #7
 800035a:	10db      	asrs	r3, r3, #3
 800035c:	b25b      	sxtb	r3, r3
 800035e:	b2db      	uxtb	r3, r3
 8000360:	3301      	adds	r3, #1
 8000362:	b2da      	uxtb	r2, r3
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	}
	memcpy(TxBuffer->NetworkBuffer, Data, DataLength);
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	79fa      	ldrb	r2, [r7, #7]
 800036e:	68b9      	ldr	r1, [r7, #8]
 8000370:	4618      	mov	r0, r3
 8000372:	f001 ff0f 	bl	8002194 <memcpy>
	TxBuffer->NetworkBuffer[TxBuffer->Buffer_Index] =
			TxBuffer->PacketDataLength;
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	f993 10c8 	ldrsb.w	r1, [r3, #200]	; 0xc8
	TxBuffer->NetworkBuffer[TxBuffer->Buffer_Index] =
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000382:	461a      	mov	r2, r3
			TxBuffer->PacketDataLength;
 8000384:	b2c9      	uxtb	r1, r1
	TxBuffer->NetworkBuffer[TxBuffer->Buffer_Index] =
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	5499      	strb	r1, [r3, r2]
	TxBuffer->NetworkBuffer[TxBuffer->Buffer_Index + 1] = TxBuffer->CRCValue;
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000390:	3301      	adds	r3, #1
 8000392:	68fa      	ldr	r2, [r7, #12]
 8000394:	f892 10c9 	ldrb.w	r1, [r2, #201]	; 0xc9
 8000398:	68fa      	ldr	r2, [r7, #12]
 800039a:	54d1      	strb	r1, [r2, r3]
	TxBuffer->Buffer_Index = 0;
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	2200      	movs	r2, #0
 80003a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	return CAN_Send_DataLink_Separate(TxBuffer, Data, pStID);
 80003a4:	683a      	ldr	r2, [r7, #0]
 80003a6:	68b9      	ldr	r1, [r7, #8]
 80003a8:	68f8      	ldr	r0, [r7, #12]
 80003aa:	f000 f805 	bl	80003b8 <CAN_Send_DataLink_Separate>
 80003ae:	4603      	mov	r3, r0
}
 80003b0:	4618      	mov	r0, r3
 80003b2:	3710      	adds	r7, #16
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}

080003b8 <CAN_Send_DataLink_Separate>:
uint8_t CAN_Send_DataLink_Separate(CANBufferHandleStruct *TxBuffer,
		uint8_t *Data, CANConfigIDTxtypedef *pStID) {
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b088      	sub	sp, #32
 80003bc:	af00      	add	r7, sp, #0
 80003be:	60f8      	str	r0, [r7, #12]
 80003c0:	60b9      	str	r1, [r7, #8]
 80003c2:	607a      	str	r2, [r7, #4]
	uint8_t PacketLength = TxBuffer->PacketDataLength;
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 80003ca:	77fb      	strb	r3, [r7, #31]
	uint8_t NumberOfFrame = TxBuffer->NumberOfFrame;
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80003d2:	75fb      	strb	r3, [r7, #23]
	TxBuffer->Buffer[NumberOfFrame - 1][6] = PacketLength;
 80003d4:	7dfb      	ldrb	r3, [r7, #23]
 80003d6:	3b01      	subs	r3, #1
 80003d8:	68fa      	ldr	r2, [r7, #12]
 80003da:	00db      	lsls	r3, r3, #3
 80003dc:	4413      	add	r3, r2
 80003de:	7ffa      	ldrb	r2, [r7, #31]
 80003e0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	TxBuffer->Buffer[NumberOfFrame - 1][7] = TxBuffer->CRCValue;
 80003e4:	7dfb      	ldrb	r3, [r7, #23]
 80003e6:	3b01      	subs	r3, #1
 80003e8:	68fa      	ldr	r2, [r7, #12]
 80003ea:	f892 10c9 	ldrb.w	r1, [r2, #201]	; 0xc9
 80003ee:	68fa      	ldr	r2, [r7, #12]
 80003f0:	00db      	lsls	r3, r3, #3
 80003f2:	4413      	add	r3, r2
 80003f4:	460a      	mov	r2, r1
 80003f6:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	for (int i = 0; i < NumberOfFrame; i++) {
 80003fa:	2300      	movs	r3, #0
 80003fc:	61bb      	str	r3, [r7, #24]
 80003fe:	e033      	b.n	8000468 <CAN_Send_DataLink_Separate+0xb0>
		for (TxBuffer->Buffer_Index = 0; TxBuffer->Buffer_Index < 8;
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	2200      	movs	r2, #0
 8000404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8000408:	e021      	b.n	800044e <CAN_Send_DataLink_Separate+0x96>
				TxBuffer->Buffer_Index++) {
			TxBuffer->Buffer[i][TxBuffer->Buffer_Index] =
					TxBuffer->NetworkBuffer[i * 8 + TxBuffer->Buffer_Index];
 800040a:	69bb      	ldr	r3, [r7, #24]
 800040c:	00db      	lsls	r3, r3, #3
 800040e:	68fa      	ldr	r2, [r7, #12]
 8000410:	f892 2041 	ldrb.w	r2, [r2, #65]	; 0x41
 8000414:	4413      	add	r3, r2
			TxBuffer->Buffer[i][TxBuffer->Buffer_Index] =
 8000416:	68fa      	ldr	r2, [r7, #12]
 8000418:	f892 2041 	ldrb.w	r2, [r2, #65]	; 0x41
 800041c:	4610      	mov	r0, r2
					TxBuffer->NetworkBuffer[i * 8 + TxBuffer->Buffer_Index];
 800041e:	68fa      	ldr	r2, [r7, #12]
 8000420:	5cd1      	ldrb	r1, [r2, r3]
			TxBuffer->Buffer[i][TxBuffer->Buffer_Index] =
 8000422:	68fa      	ldr	r2, [r7, #12]
 8000424:	69bb      	ldr	r3, [r7, #24]
 8000426:	00db      	lsls	r3, r3, #3
 8000428:	4413      	add	r3, r2
 800042a:	4403      	add	r3, r0
 800042c:	3348      	adds	r3, #72	; 0x48
 800042e:	460a      	mov	r2, r1
 8000430:	701a      	strb	r2, [r3, #0]
			PacketLength--;
 8000432:	7ffb      	ldrb	r3, [r7, #31]
 8000434:	3b01      	subs	r3, #1
 8000436:	77fb      	strb	r3, [r7, #31]
			if (PacketLength == 2) {
 8000438:	7ffb      	ldrb	r3, [r7, #31]
 800043a:	2b02      	cmp	r3, #2
 800043c:	d00d      	beq.n	800045a <CAN_Send_DataLink_Separate+0xa2>
				TxBuffer->Buffer_Index++) {
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000444:	3301      	adds	r3, #1
 8000446:	b2da      	uxtb	r2, r3
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		for (TxBuffer->Buffer_Index = 0; TxBuffer->Buffer_Index < 8;
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000454:	2b07      	cmp	r3, #7
 8000456:	d9d8      	bls.n	800040a <CAN_Send_DataLink_Separate+0x52>
 8000458:	e000      	b.n	800045c <CAN_Send_DataLink_Separate+0xa4>
				break;
 800045a:	bf00      	nop
			}
		}
		if (PacketLength == 2) {
 800045c:	7ffb      	ldrb	r3, [r7, #31]
 800045e:	2b02      	cmp	r3, #2
 8000460:	d007      	beq.n	8000472 <CAN_Send_DataLink_Separate+0xba>
	for (int i = 0; i < NumberOfFrame; i++) {
 8000462:	69bb      	ldr	r3, [r7, #24]
 8000464:	3301      	adds	r3, #1
 8000466:	61bb      	str	r3, [r7, #24]
 8000468:	7dfb      	ldrb	r3, [r7, #23]
 800046a:	69ba      	ldr	r2, [r7, #24]
 800046c:	429a      	cmp	r2, r3
 800046e:	dbc7      	blt.n	8000400 <CAN_Send_DataLink_Separate+0x48>
 8000470:	e000      	b.n	8000474 <CAN_Send_DataLink_Separate+0xbc>
			break;
 8000472:	bf00      	nop
		}
	}
	TxBuffer->Buffer_Index = 0;
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	2200      	movs	r2, #0
 8000478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	return CAN_Send_Physical_Send(TxBuffer, Data, pStID);
 800047c:	687a      	ldr	r2, [r7, #4]
 800047e:	68b9      	ldr	r1, [r7, #8]
 8000480:	68f8      	ldr	r0, [r7, #12]
 8000482:	f000 f805 	bl	8000490 <CAN_Send_Physical_Send>
 8000486:	4603      	mov	r3, r0
}
 8000488:	4618      	mov	r0, r3
 800048a:	3720      	adds	r7, #32
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}

08000490 <CAN_Send_Physical_Send>:
uint8_t CAN_Send_Physical_Send(CANBufferHandleStruct *TxBuffer, uint8_t *Data,
		CANConfigIDTxtypedef *pIDtype) {
 8000490:	b580      	push	{r7, lr}
 8000492:	b08e      	sub	sp, #56	; 0x38
 8000494:	af00      	add	r7, sp, #0
 8000496:	60f8      	str	r0, [r7, #12]
 8000498:	60b9      	str	r1, [r7, #8]
 800049a:	607a      	str	r2, [r7, #4]
	uint32_t Txmailbox;
	CAN_TxHeaderTypeDef Txheader;
	uint8_t Message_ID = pIDtype->MessageType;
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	881b      	ldrh	r3, [r3, #0]
 80004a0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint8_t Sender_ID = pIDtype->SenderID;
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	885b      	ldrh	r3, [r3, #2]
 80004a8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	uint8_t FrameType = TxBuffer->FrameType_Index;
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80004b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t NumberOfFrame = TxBuffer->NumberOfFrame;
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80004bc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	uint16_t StdId = 0x00;
 80004c0:	2300      	movs	r3, #0
 80004c2:	86bb      	strh	r3, [r7, #52]	; 0x34

	StdId |= Message_ID;
 80004c4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80004c8:	b29a      	uxth	r2, r3
 80004ca:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80004cc:	4313      	orrs	r3, r2
 80004ce:	86bb      	strh	r3, [r7, #52]	; 0x34
	StdId = (StdId << 4) | Sender_ID;
 80004d0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80004d2:	011b      	lsls	r3, r3, #4
 80004d4:	b21a      	sxth	r2, r3
 80004d6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80004da:	b21b      	sxth	r3, r3
 80004dc:	4313      	orrs	r3, r2
 80004de:	b21b      	sxth	r3, r3
 80004e0:	86bb      	strh	r3, [r7, #52]	; 0x34
	TxBuffer->SenderID=StdId;
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80004e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	StdId = (StdId << 3) | TxBuffer->FrameType_Index;
 80004ea:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80004ec:	00db      	lsls	r3, r3, #3
 80004ee:	b21a      	sxth	r2, r3
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80004f6:	b21b      	sxth	r3, r3
 80004f8:	4313      	orrs	r3, r2
 80004fa:	b21b      	sxth	r3, r3
 80004fc:	86bb      	strh	r3, [r7, #52]	; 0x34
	Txheader.DLC = 8;
 80004fe:	2308      	movs	r3, #8
 8000500:	627b      	str	r3, [r7, #36]	; 0x24
	Txheader.RTR = CAN_RTR_DATA;
 8000502:	2300      	movs	r3, #0
 8000504:	623b      	str	r3, [r7, #32]
	Txheader.IDE = CAN_ID_STD;
 8000506:	2300      	movs	r3, #0
 8000508:	61fb      	str	r3, [r7, #28]


	for (int8_t i = NumberOfFrame - 1; i >= 0; i--) {
 800050a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800050e:	3b01      	subs	r3, #1
 8000510:	b2db      	uxtb	r3, r3
 8000512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8000516:	e034      	b.n	8000582 <CAN_Send_Physical_Send+0xf2>
		Txheader.StdId = StdId;
 8000518:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800051a:	617b      	str	r3, [r7, #20]
		if (HAL_CAN_AddTxMessage(&hcan, &Txheader, TxBuffer->Buffer[i],
 800051c:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000520:	3309      	adds	r3, #9
 8000522:	00db      	lsls	r3, r3, #3
 8000524:	68fa      	ldr	r2, [r7, #12]
 8000526:	441a      	add	r2, r3
 8000528:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800052c:	f107 0114 	add.w	r1, r7, #20
 8000530:	4818      	ldr	r0, [pc, #96]	; (8000594 <CAN_Send_Physical_Send+0x104>)
 8000532:	f000 fda3 	bl	800107c <HAL_CAN_AddTxMessage>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <CAN_Send_Physical_Send+0xb0>
				&Txmailbox) != HAL_OK) {
			Error_Handler();
 800053c:	f000 fa10 	bl	8000960 <Error_Handler>
		}
		while (HAL_CAN_IsTxMessagePending(&hcan, Txmailbox))
 8000540:	bf00      	nop
 8000542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000544:	4619      	mov	r1, r3
 8000546:	4813      	ldr	r0, [pc, #76]	; (8000594 <CAN_Send_Physical_Send+0x104>)
 8000548:	f000 fe67 	bl	800121a <HAL_CAN_IsTxMessagePending>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d1f7      	bne.n	8000542 <CAN_Send_Physical_Send+0xb2>
			;

		StdId = StdId >> 3;
 8000552:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000554:	08db      	lsrs	r3, r3, #3
 8000556:	86bb      	strh	r3, [r7, #52]	; 0x34
		FrameType++;
 8000558:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800055c:	3301      	adds	r3, #1
 800055e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		StdId = (StdId << 3) | FrameType;
 8000562:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000564:	00db      	lsls	r3, r3, #3
 8000566:	b21a      	sxth	r2, r3
 8000568:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800056c:	b21b      	sxth	r3, r3
 800056e:	4313      	orrs	r3, r2
 8000570:	b21b      	sxth	r3, r3
 8000572:	86bb      	strh	r3, [r7, #52]	; 0x34
	for (int8_t i = NumberOfFrame - 1; i >= 0; i--) {
 8000574:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000578:	b2db      	uxtb	r3, r3
 800057a:	3b01      	subs	r3, #1
 800057c:	b2db      	uxtb	r3, r3
 800057e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8000582:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000586:	2b00      	cmp	r3, #0
 8000588:	dac6      	bge.n	8000518 <CAN_Send_Physical_Send+0x88>

	}
	return HAL_OK;
 800058a:	2300      	movs	r3, #0
}
 800058c:	4618      	mov	r0, r3
 800058e:	3738      	adds	r7, #56	; 0x38
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000028 	.word	0x20000028

08000598 <CAN_Config_filtering>:
		*FlagNotification =REC_SUCCESS;
	}
	return HAL_OK;
}

uint32_t CAN_Config_filtering(uint8_t FIFO) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b08c      	sub	sp, #48	; 0x30
 800059c:	af00      	add	r7, sp, #0
 800059e:	4603      	mov	r3, r0
 80005a0:	71fb      	strb	r3, [r7, #7]
	CAN_FilterTypeDef Can_filter_init;
	Can_filter_init.FilterActivation = ENABLE;
 80005a2:	2301      	movs	r3, #1
 80005a4:	62bb      	str	r3, [r7, #40]	; 0x28
	Can_filter_init.FilterBank = 0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	61fb      	str	r3, [r7, #28]
	Can_filter_init.FilterFIFOAssignment = FIFO;
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	61bb      	str	r3, [r7, #24]
	Can_filter_init.FilterIdHigh = 0x0000;
 80005ae:	2300      	movs	r3, #0
 80005b0:	60bb      	str	r3, [r7, #8]
	Can_filter_init.FilterIdLow = 0x0000;
 80005b2:	2300      	movs	r3, #0
 80005b4:	60fb      	str	r3, [r7, #12]
	Can_filter_init.FilterMaskIdHigh = 0x0000;
 80005b6:	2300      	movs	r3, #0
 80005b8:	613b      	str	r3, [r7, #16]
	Can_filter_init.FilterMaskIdLow = 0x0000;
 80005ba:	2300      	movs	r3, #0
 80005bc:	617b      	str	r3, [r7, #20]
	Can_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 80005be:	2300      	movs	r3, #0
 80005c0:	623b      	str	r3, [r7, #32]
	Can_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 80005c2:	2301      	movs	r3, #1
 80005c4:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_CAN_ConfigFilter(&hcan, &Can_filter_init) != HAL_OK) {
 80005c6:	f107 0308 	add.w	r3, r7, #8
 80005ca:	4619      	mov	r1, r3
 80005cc:	4806      	ldr	r0, [pc, #24]	; (80005e8 <CAN_Config_filtering+0x50>)
 80005ce:	f000 fc48 	bl	8000e62 <HAL_CAN_ConfigFilter>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <CAN_Config_filtering+0x44>
		Error_Handler();
 80005d8:	f000 f9c2 	bl	8000960 <Error_Handler>
	}
	return HAL_OK;
 80005dc:	2300      	movs	r3, #0
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3730      	adds	r7, #48	; 0x30
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	20000028 	.word	0x20000028

080005ec <crc_8>:

#include "CRC.h"
#include "stdint.h"
unsigned char table[256] = {0};

uint8_t crc_8(uint8_t* data, uint8_t len) {
 80005ec:	b480      	push	{r7}
 80005ee:	b087      	sub	sp, #28
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	460b      	mov	r3, r1
 80005f6:	70fb      	strb	r3, [r7, #3]
  unsigned crc = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]
  int i, j;
  for (j = len; j; j--, data++) {
 80005fc:	78fb      	ldrb	r3, [r7, #3]
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	e023      	b.n	800064a <crc_8+0x5e>
    crc ^= (*data << 8);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	021b      	lsls	r3, r3, #8
 8000608:	461a      	mov	r2, r3
 800060a:	697b      	ldr	r3, [r7, #20]
 800060c:	4053      	eors	r3, r2
 800060e:	617b      	str	r3, [r7, #20]
    for(i = 8; i; i--) {
 8000610:	2308      	movs	r3, #8
 8000612:	613b      	str	r3, [r7, #16]
 8000614:	e010      	b.n	8000638 <crc_8+0x4c>
      if (crc & 0x8000)
 8000616:	697b      	ldr	r3, [r7, #20]
 8000618:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800061c:	2b00      	cmp	r3, #0
 800061e:	d005      	beq.n	800062c <crc_8+0x40>
        crc ^= (0x1070 << 3);
 8000620:	697b      	ldr	r3, [r7, #20]
 8000622:	f483 4303 	eor.w	r3, r3, #33536	; 0x8300
 8000626:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 800062a:	617b      	str	r3, [r7, #20]
      crc <<= 1;
 800062c:	697b      	ldr	r3, [r7, #20]
 800062e:	005b      	lsls	r3, r3, #1
 8000630:	617b      	str	r3, [r7, #20]
    for(i = 8; i; i--) {
 8000632:	693b      	ldr	r3, [r7, #16]
 8000634:	3b01      	subs	r3, #1
 8000636:	613b      	str	r3, [r7, #16]
 8000638:	693b      	ldr	r3, [r7, #16]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d1eb      	bne.n	8000616 <crc_8+0x2a>
  for (j = len; j; j--, data++) {
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	3b01      	subs	r3, #1
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	3301      	adds	r3, #1
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d1d8      	bne.n	8000602 <crc_8+0x16>
    }
  }
  return (uint8_t)(crc >> 8);
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	0a1b      	lsrs	r3, r3, #8
 8000654:	b2db      	uxtb	r3, r3
}
 8000656:	4618      	mov	r0, r3
 8000658:	371c      	adds	r7, #28
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr

08000660 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	f5ad 6df9 	sub.w	sp, sp, #1992	; 0x7c8
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000668:	f000 fa9e 	bl	8000ba8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800066c:	f000 f886 	bl	800077c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000670:	f000 f92a 	bl	80008c8 <MX_GPIO_Init>
  MX_CAN_Init();
 8000674:	f000 f8c8 	bl	8000808 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000678:	f000 f8fc 	bl	8000874 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  CAN_Config_filtering(CAN_FILTER_FIFO0);
 800067c:	2000      	movs	r0, #0
 800067e:	f7ff ff8b 	bl	8000598 <CAN_Config_filtering>
  CAN_Config_filtering(CAN_FILTER_FIFO1);
 8000682:	2001      	movs	r0, #1
 8000684:	f7ff ff88 	bl	8000598 <CAN_Config_filtering>
  if(HAL_CAN_Start(&hcan)!=HAL_OK)
 8000688:	483b      	ldr	r0, [pc, #236]	; (8000778 <main+0x118>)
 800068a:	f000 fcb3 	bl	8000ff4 <HAL_CAN_Start>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <main+0x38>
     {
     	Error_Handler();
 8000694:	f000 f964 	bl	8000960 <Error_Handler>
     }
  uint32_t Txmailbox;
  CANConfigIDTxtypedef pIDtype;
  pIDtype.MessageType=COMMAND_FRAME;
 8000698:	2301      	movs	r3, #1
 800069a:	f8a7 37b4 	strh.w	r3, [r7, #1972]	; 0x7b4
  pIDtype.SenderID=OBSTALCE8;
 800069e:	230f      	movs	r3, #15
 80006a0:	f8a7 37b6 	strh.w	r3, [r7, #1974]	; 0x7b6
  CANBufferHandleStruct Buffer;
  CANBufferHandleStruct_Init(&Buffer);
 80006a4:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80006a8:	4618      	mov	r0, r3
 80006aa:	f7ff fd4f 	bl	800014c <CANBufferHandleStruct_Init>
  FlagRecNotification FlagRec;
  FlagFrameHandle Flag;
  FlagsFrameHandle_Init(&Flag);
 80006ae:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff fda3 	bl	80001fe <FlagsFrameHandle_Init>
  uint8_t mess[100]={0};
 80006b8:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 80006bc:	f5a3 63d9 	sub.w	r3, r3, #1736	; 0x6c8
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	3304      	adds	r3, #4
 80006c6:	2260      	movs	r2, #96	; 0x60
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f001 fd36 	bl	800213c <memset>
  uint8_t k=0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	f887 37c7 	strb.w	r3, [r7, #1991]	; 0x7c7
  uint8_t Data[64]={0};
 80006d6:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 80006da:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	3304      	adds	r3, #4
 80006e4:	223c      	movs	r2, #60	; 0x3c
 80006e6:	2100      	movs	r1, #0
 80006e8:	4618      	mov	r0, r3
 80006ea:	f001 fd27 	bl	800213c <memset>
  for (int i=0; i<DATA_TEST;i++)
 80006ee:	2300      	movs	r3, #0
 80006f0:	f8c7 37c0 	str.w	r3, [r7, #1984]	; 0x7c0
 80006f4:	e013      	b.n	800071e <main+0xbe>
    {
  	  Data[i]=k;
 80006f6:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 80006fa:	f5a3 62e1 	sub.w	r2, r3, #1800	; 0x708
 80006fe:	f8d7 37c0 	ldr.w	r3, [r7, #1984]	; 0x7c0
 8000702:	4413      	add	r3, r2
 8000704:	f897 27c7 	ldrb.w	r2, [r7, #1991]	; 0x7c7
 8000708:	701a      	strb	r2, [r3, #0]
  	  k=k+1;
 800070a:	f897 37c7 	ldrb.w	r3, [r7, #1991]	; 0x7c7
 800070e:	3301      	adds	r3, #1
 8000710:	f887 37c7 	strb.w	r3, [r7, #1991]	; 0x7c7
  for (int i=0; i<DATA_TEST;i++)
 8000714:	f8d7 37c0 	ldr.w	r3, [r7, #1984]	; 0x7c0
 8000718:	3301      	adds	r3, #1
 800071a:	f8c7 37c0 	str.w	r3, [r7, #1984]	; 0x7c0
 800071e:	f8d7 37c0 	ldr.w	r3, [r7, #1984]	; 0x7c0
 8000722:	2b3d      	cmp	r3, #61	; 0x3d
 8000724:	dde7      	ble.n	80006f6 <main+0x96>
    }
  uint8_t sendData[100] = {0};
 8000726:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 800072a:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	3304      	adds	r3, #4
 8000734:	2260      	movs	r2, #96	; 0x60
 8000736:	2100      	movs	r1, #0
 8000738:	4618      	mov	r0, r3
 800073a:	f001 fcff 	bl	800213c <memset>
  	  uint8_t len = 0;
 800073e:	2300      	movs	r3, #0
 8000740:	f887 37bf 	strb.w	r3, [r7, #1983]	; 0x7bf
  	  uint32_t cnt = 0;
 8000744:	2300      	movs	r3, #0
 8000746:	f8c7 37b8 	str.w	r3, [r7, #1976]	; 0x7b8
  	char Print[88] = {0};
 800074a:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 800074e:	f2a3 73c4 	subw	r3, r3, #1988	; 0x7c4
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	3304      	adds	r3, #4
 8000758:	2254      	movs	r2, #84	; 0x54
 800075a:	2100      	movs	r1, #0
 800075c:	4618      	mov	r0, r3
 800075e:	f001 fced 	bl	800213c <memset>
    /* USER CODE BEGIN 3 */
	  //CAN_Send_Dataframe(pIDtype, Data, Txmailbox, TxBufferSend)
	  //CAN_Send_DataLink_Separate(&Buffer, Data);
	 // CAN_DataLink_Separate(&Buffer,Data,9);
//	  len = sprintf((char*)sendData, "From OBSTALCE8 to 2: %lu\r\n",cnt++);
	  CAN_Send_Application(&Buffer, &pIDtype, Data,DATA_TEST);
 8000762:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8000766:	f207 71b4 	addw	r1, r7, #1972	; 0x7b4
 800076a:	f507 701e 	add.w	r0, r7, #632	; 0x278
 800076e:	233e      	movs	r3, #62	; 0x3e
 8000770:	f7ff fda8 	bl	80002c4 <CAN_Send_Application>
 8000774:	e7f5      	b.n	8000762 <main+0x102>
 8000776:	bf00      	nop
 8000778:	20000028 	.word	0x20000028

0800077c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b090      	sub	sp, #64	; 0x40
 8000780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000782:	f107 0318 	add.w	r3, r7, #24
 8000786:	2228      	movs	r2, #40	; 0x28
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f001 fcd6 	bl	800213c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800079e:	2301      	movs	r3, #1
 80007a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ac:	2301      	movs	r3, #1
 80007ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b0:	2302      	movs	r3, #2
 80007b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80007ba:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80007be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c0:	f107 0318 	add.w	r3, r7, #24
 80007c4:	4618      	mov	r0, r3
 80007c6:	f000 ffcb 	bl	8001760 <HAL_RCC_OscConfig>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80007d0:	f000 f8c6 	bl	8000960 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d4:	230f      	movs	r3, #15
 80007d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d8:	2302      	movs	r3, #2
 80007da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007dc:	2300      	movs	r3, #0
 80007de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e6:	2300      	movs	r3, #0
 80007e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	2102      	movs	r1, #2
 80007ee:	4618      	mov	r0, r3
 80007f0:	f001 fa38 	bl	8001c64 <HAL_RCC_ClockConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0x82>
  {
    Error_Handler();
 80007fa:	f000 f8b1 	bl	8000960 <Error_Handler>
  }
}
 80007fe:	bf00      	nop
 8000800:	3740      	adds	r7, #64	; 0x40
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
	...

08000808 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800080c:	4b17      	ldr	r3, [pc, #92]	; (800086c <MX_CAN_Init+0x64>)
 800080e:	4a18      	ldr	r2, [pc, #96]	; (8000870 <MX_CAN_Init+0x68>)
 8000810:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000812:	4b16      	ldr	r3, [pc, #88]	; (800086c <MX_CAN_Init+0x64>)
 8000814:	2204      	movs	r2, #4
 8000816:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000818:	4b14      	ldr	r3, [pc, #80]	; (800086c <MX_CAN_Init+0x64>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800081e:	4b13      	ldr	r3, [pc, #76]	; (800086c <MX_CAN_Init+0x64>)
 8000820:	2200      	movs	r2, #0
 8000822:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000824:	4b11      	ldr	r3, [pc, #68]	; (800086c <MX_CAN_Init+0x64>)
 8000826:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800082a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800082c:	4b0f      	ldr	r3, [pc, #60]	; (800086c <MX_CAN_Init+0x64>)
 800082e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000832:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000834:	4b0d      	ldr	r3, [pc, #52]	; (800086c <MX_CAN_Init+0x64>)
 8000836:	2200      	movs	r2, #0
 8000838:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800083a:	4b0c      	ldr	r3, [pc, #48]	; (800086c <MX_CAN_Init+0x64>)
 800083c:	2200      	movs	r2, #0
 800083e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000840:	4b0a      	ldr	r3, [pc, #40]	; (800086c <MX_CAN_Init+0x64>)
 8000842:	2200      	movs	r2, #0
 8000844:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <MX_CAN_Init+0x64>)
 8000848:	2200      	movs	r2, #0
 800084a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800084c:	4b07      	ldr	r3, [pc, #28]	; (800086c <MX_CAN_Init+0x64>)
 800084e:	2200      	movs	r2, #0
 8000850:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <MX_CAN_Init+0x64>)
 8000854:	2200      	movs	r2, #0
 8000856:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000858:	4804      	ldr	r0, [pc, #16]	; (800086c <MX_CAN_Init+0x64>)
 800085a:	f000 fa07 	bl	8000c6c <HAL_CAN_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000864:	f000 f87c 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000028 	.word	0x20000028
 8000870:	40006400 	.word	0x40006400

08000874 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000878:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_USART1_UART_Init+0x4c>)
 800087a:	4a12      	ldr	r2, [pc, #72]	; (80008c4 <MX_USART1_UART_Init+0x50>)
 800087c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <MX_USART1_UART_Init+0x4c>)
 8000880:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000884:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <MX_USART1_UART_Init+0x4c>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800088c:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <MX_USART1_UART_Init+0x4c>)
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000892:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <MX_USART1_UART_Init+0x4c>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000898:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <MX_USART1_UART_Init+0x4c>)
 800089a:	220c      	movs	r2, #12
 800089c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089e:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <MX_USART1_UART_Init+0x4c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <MX_USART1_UART_Init+0x4c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008aa:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_USART1_UART_Init+0x4c>)
 80008ac:	f001 fb68 	bl	8001f80 <HAL_UART_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008b6:	f000 f853 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000050 	.word	0x20000050
 80008c4:	40013800 	.word	0x40013800

080008c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b088      	sub	sp, #32
 80008cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ce:	f107 0310 	add.w	r3, r7, #16
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008dc:	4b1e      	ldr	r3, [pc, #120]	; (8000958 <MX_GPIO_Init+0x90>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	4a1d      	ldr	r2, [pc, #116]	; (8000958 <MX_GPIO_Init+0x90>)
 80008e2:	f043 0310 	orr.w	r3, r3, #16
 80008e6:	6193      	str	r3, [r2, #24]
 80008e8:	4b1b      	ldr	r3, [pc, #108]	; (8000958 <MX_GPIO_Init+0x90>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	f003 0310 	and.w	r3, r3, #16
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008f4:	4b18      	ldr	r3, [pc, #96]	; (8000958 <MX_GPIO_Init+0x90>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	4a17      	ldr	r2, [pc, #92]	; (8000958 <MX_GPIO_Init+0x90>)
 80008fa:	f043 0320 	orr.w	r3, r3, #32
 80008fe:	6193      	str	r3, [r2, #24]
 8000900:	4b15      	ldr	r3, [pc, #84]	; (8000958 <MX_GPIO_Init+0x90>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	f003 0320 	and.w	r3, r3, #32
 8000908:	60bb      	str	r3, [r7, #8]
 800090a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090c:	4b12      	ldr	r3, [pc, #72]	; (8000958 <MX_GPIO_Init+0x90>)
 800090e:	699b      	ldr	r3, [r3, #24]
 8000910:	4a11      	ldr	r2, [pc, #68]	; (8000958 <MX_GPIO_Init+0x90>)
 8000912:	f043 0304 	orr.w	r3, r3, #4
 8000916:	6193      	str	r3, [r2, #24]
 8000918:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <MX_GPIO_Init+0x90>)
 800091a:	699b      	ldr	r3, [r3, #24]
 800091c:	f003 0304 	and.w	r3, r3, #4
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000924:	2200      	movs	r2, #0
 8000926:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800092a:	480c      	ldr	r0, [pc, #48]	; (800095c <MX_GPIO_Init+0x94>)
 800092c:	f000 ff00 	bl	8001730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000930:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000934:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000936:	2301      	movs	r3, #1
 8000938:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	2302      	movs	r3, #2
 8000940:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000942:	f107 0310 	add.w	r3, r7, #16
 8000946:	4619      	mov	r1, r3
 8000948:	4804      	ldr	r0, [pc, #16]	; (800095c <MX_GPIO_Init+0x94>)
 800094a:	f000 fd6d 	bl	8001428 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800094e:	bf00      	nop
 8000950:	3720      	adds	r7, #32
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40021000 	.word	0x40021000
 800095c:	40011000 	.word	0x40011000

08000960 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000964:	b672      	cpsid	i
}
 8000966:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000968:	e7fe      	b.n	8000968 <Error_Handler+0x8>
	...

0800096c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800096c:	b480      	push	{r7}
 800096e:	b085      	sub	sp, #20
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000972:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <HAL_MspInit+0x5c>)
 8000974:	699b      	ldr	r3, [r3, #24]
 8000976:	4a14      	ldr	r2, [pc, #80]	; (80009c8 <HAL_MspInit+0x5c>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	6193      	str	r3, [r2, #24]
 800097e:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <HAL_MspInit+0x5c>)
 8000980:	699b      	ldr	r3, [r3, #24]
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800098a:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <HAL_MspInit+0x5c>)
 800098c:	69db      	ldr	r3, [r3, #28]
 800098e:	4a0e      	ldr	r2, [pc, #56]	; (80009c8 <HAL_MspInit+0x5c>)
 8000990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000994:	61d3      	str	r3, [r2, #28]
 8000996:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <HAL_MspInit+0x5c>)
 8000998:	69db      	ldr	r3, [r3, #28]
 800099a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009a2:	4b0a      	ldr	r3, [pc, #40]	; (80009cc <HAL_MspInit+0x60>)
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	4a04      	ldr	r2, [pc, #16]	; (80009cc <HAL_MspInit+0x60>)
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009be:	bf00      	nop
 80009c0:	3714      	adds	r7, #20
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bc80      	pop	{r7}
 80009c6:	4770      	bx	lr
 80009c8:	40021000 	.word	0x40021000
 80009cc:	40010000 	.word	0x40010000

080009d0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b088      	sub	sp, #32
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d8:	f107 0310 	add.w	r3, r7, #16
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4a1c      	ldr	r2, [pc, #112]	; (8000a5c <HAL_CAN_MspInit+0x8c>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d131      	bne.n	8000a54 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80009f0:	4b1b      	ldr	r3, [pc, #108]	; (8000a60 <HAL_CAN_MspInit+0x90>)
 80009f2:	69db      	ldr	r3, [r3, #28]
 80009f4:	4a1a      	ldr	r2, [pc, #104]	; (8000a60 <HAL_CAN_MspInit+0x90>)
 80009f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009fa:	61d3      	str	r3, [r2, #28]
 80009fc:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <HAL_CAN_MspInit+0x90>)
 80009fe:	69db      	ldr	r3, [r3, #28]
 8000a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a08:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <HAL_CAN_MspInit+0x90>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	4a14      	ldr	r2, [pc, #80]	; (8000a60 <HAL_CAN_MspInit+0x90>)
 8000a0e:	f043 0304 	orr.w	r3, r3, #4
 8000a12:	6193      	str	r3, [r2, #24]
 8000a14:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <HAL_CAN_MspInit+0x90>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	f003 0304 	and.w	r3, r3, #4
 8000a1c:	60bb      	str	r3, [r7, #8]
 8000a1e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000a20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a24:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a26:	2300      	movs	r3, #0
 8000a28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2e:	f107 0310 	add.w	r3, r7, #16
 8000a32:	4619      	mov	r1, r3
 8000a34:	480b      	ldr	r0, [pc, #44]	; (8000a64 <HAL_CAN_MspInit+0x94>)
 8000a36:	f000 fcf7 	bl	8001428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a40:	2302      	movs	r3, #2
 8000a42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a44:	2303      	movs	r3, #3
 8000a46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a48:	f107 0310 	add.w	r3, r7, #16
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4805      	ldr	r0, [pc, #20]	; (8000a64 <HAL_CAN_MspInit+0x94>)
 8000a50:	f000 fcea 	bl	8001428 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000a54:	bf00      	nop
 8000a56:	3720      	adds	r7, #32
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40006400 	.word	0x40006400
 8000a60:	40021000 	.word	0x40021000
 8000a64:	40010800 	.word	0x40010800

08000a68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b088      	sub	sp, #32
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a70:	f107 0310 	add.w	r3, r7, #16
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a1c      	ldr	r2, [pc, #112]	; (8000af4 <HAL_UART_MspInit+0x8c>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d131      	bne.n	8000aec <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a88:	4b1b      	ldr	r3, [pc, #108]	; (8000af8 <HAL_UART_MspInit+0x90>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	4a1a      	ldr	r2, [pc, #104]	; (8000af8 <HAL_UART_MspInit+0x90>)
 8000a8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a92:	6193      	str	r3, [r2, #24]
 8000a94:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <HAL_UART_MspInit+0x90>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa0:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <HAL_UART_MspInit+0x90>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	4a14      	ldr	r2, [pc, #80]	; (8000af8 <HAL_UART_MspInit+0x90>)
 8000aa6:	f043 0304 	orr.w	r3, r3, #4
 8000aaa:	6193      	str	r3, [r2, #24]
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <HAL_UART_MspInit+0x90>)
 8000aae:	699b      	ldr	r3, [r3, #24]
 8000ab0:	f003 0304 	and.w	r3, r3, #4
 8000ab4:	60bb      	str	r3, [r7, #8]
 8000ab6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ab8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000abc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac6:	f107 0310 	add.w	r3, r7, #16
 8000aca:	4619      	mov	r1, r3
 8000acc:	480b      	ldr	r0, [pc, #44]	; (8000afc <HAL_UART_MspInit+0x94>)
 8000ace:	f000 fcab 	bl	8001428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ad2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ad6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae0:	f107 0310 	add.w	r3, r7, #16
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4805      	ldr	r0, [pc, #20]	; (8000afc <HAL_UART_MspInit+0x94>)
 8000ae8:	f000 fc9e 	bl	8001428 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000aec:	bf00      	nop
 8000aee:	3720      	adds	r7, #32
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40013800 	.word	0x40013800
 8000af8:	40021000 	.word	0x40021000
 8000afc:	40010800 	.word	0x40010800

08000b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <NMI_Handler+0x4>

08000b06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b0a:	e7fe      	b.n	8000b0a <HardFault_Handler+0x4>

08000b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <MemManage_Handler+0x4>

08000b12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b16:	e7fe      	b.n	8000b16 <BusFault_Handler+0x4>

08000b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <UsageFault_Handler+0x4>

08000b1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bc80      	pop	{r7}
 8000b28:	4770      	bx	lr

08000b2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bc80      	pop	{r7}
 8000b34:	4770      	bx	lr

08000b36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bc80      	pop	{r7}
 8000b40:	4770      	bx	lr

08000b42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b46:	f000 f875 	bl	8000c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b52:	bf00      	nop
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bc80      	pop	{r7}
 8000b58:	4770      	bx	lr
	...

08000b5c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b5c:	f7ff fff7 	bl	8000b4e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b60:	480b      	ldr	r0, [pc, #44]	; (8000b90 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b62:	490c      	ldr	r1, [pc, #48]	; (8000b94 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b64:	4a0c      	ldr	r2, [pc, #48]	; (8000b98 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b68:	e002      	b.n	8000b70 <LoopCopyDataInit>

08000b6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b6e:	3304      	adds	r3, #4

08000b70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b74:	d3f9      	bcc.n	8000b6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b76:	4a09      	ldr	r2, [pc, #36]	; (8000b9c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b78:	4c09      	ldr	r4, [pc, #36]	; (8000ba0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b7c:	e001      	b.n	8000b82 <LoopFillZerobss>

08000b7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b80:	3204      	adds	r2, #4

08000b82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b84:	d3fb      	bcc.n	8000b7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b86:	f001 fae1 	bl	800214c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b8a:	f7ff fd69 	bl	8000660 <main>
  bx lr
 8000b8e:	4770      	bx	lr
  ldr r0, =_sdata
 8000b90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b94:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b98:	080021fc 	.word	0x080021fc
  ldr r2, =_sbss
 8000b9c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ba0:	2000009c 	.word	0x2000009c

08000ba4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ba4:	e7fe      	b.n	8000ba4 <ADC1_2_IRQHandler>
	...

08000ba8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bac:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <HAL_Init+0x28>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a07      	ldr	r2, [pc, #28]	; (8000bd0 <HAL_Init+0x28>)
 8000bb2:	f043 0310 	orr.w	r3, r3, #16
 8000bb6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb8:	2003      	movs	r0, #3
 8000bba:	f000 fc01 	bl	80013c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bbe:	200f      	movs	r0, #15
 8000bc0:	f000 f808 	bl	8000bd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bc4:	f7ff fed2 	bl	800096c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40022000 	.word	0x40022000

08000bd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bdc:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <HAL_InitTick+0x54>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <HAL_InitTick+0x58>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	4619      	mov	r1, r3
 8000be6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f000 fc0b 	bl	800140e <HAL_SYSTICK_Config>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e00e      	b.n	8000c20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2b0f      	cmp	r3, #15
 8000c06:	d80a      	bhi.n	8000c1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	6879      	ldr	r1, [r7, #4]
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	f000 fbe1 	bl	80013d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c14:	4a06      	ldr	r2, [pc, #24]	; (8000c30 <HAL_InitTick+0x5c>)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	e000      	b.n	8000c20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000000 	.word	0x20000000
 8000c2c:	20000008 	.word	0x20000008
 8000c30:	20000004 	.word	0x20000004

08000c34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c38:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <HAL_IncTick+0x1c>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <HAL_IncTick+0x20>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4413      	add	r3, r2
 8000c44:	4a03      	ldr	r2, [pc, #12]	; (8000c54 <HAL_IncTick+0x20>)
 8000c46:	6013      	str	r3, [r2, #0]
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr
 8000c50:	20000008 	.word	0x20000008
 8000c54:	20000098 	.word	0x20000098

08000c58 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c5c:	4b02      	ldr	r3, [pc, #8]	; (8000c68 <HAL_GetTick+0x10>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr
 8000c68:	20000098 	.word	0x20000098

08000c6c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d101      	bne.n	8000c7e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e0ed      	b.n	8000e5a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d102      	bne.n	8000c90 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f7ff fea0 	bl	80009d0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f042 0201 	orr.w	r2, r2, #1
 8000c9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ca0:	f7ff ffda 	bl	8000c58 <HAL_GetTick>
 8000ca4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ca6:	e012      	b.n	8000cce <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ca8:	f7ff ffd6 	bl	8000c58 <HAL_GetTick>
 8000cac:	4602      	mov	r2, r0
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	2b0a      	cmp	r3, #10
 8000cb4:	d90b      	bls.n	8000cce <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2205      	movs	r2, #5
 8000cc6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e0c5      	b.n	8000e5a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f003 0301 	and.w	r3, r3, #1
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d0e5      	beq.n	8000ca8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f022 0202 	bic.w	r2, r2, #2
 8000cea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000cec:	f7ff ffb4 	bl	8000c58 <HAL_GetTick>
 8000cf0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000cf2:	e012      	b.n	8000d1a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000cf4:	f7ff ffb0 	bl	8000c58 <HAL_GetTick>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	2b0a      	cmp	r3, #10
 8000d00:	d90b      	bls.n	8000d1a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d06:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2205      	movs	r2, #5
 8000d12:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	e09f      	b.n	8000e5a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f003 0302 	and.w	r3, r3, #2
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d1e5      	bne.n	8000cf4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	7e1b      	ldrb	r3, [r3, #24]
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d108      	bne.n	8000d42 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	e007      	b.n	8000d52 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d50:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	7e5b      	ldrb	r3, [r3, #25]
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d108      	bne.n	8000d6c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	e007      	b.n	8000d7c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000d7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	7e9b      	ldrb	r3, [r3, #26]
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d108      	bne.n	8000d96 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f042 0220 	orr.w	r2, r2, #32
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	e007      	b.n	8000da6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f022 0220 	bic.w	r2, r2, #32
 8000da4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	7edb      	ldrb	r3, [r3, #27]
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d108      	bne.n	8000dc0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f022 0210 	bic.w	r2, r2, #16
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	e007      	b.n	8000dd0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f042 0210 	orr.w	r2, r2, #16
 8000dce:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	7f1b      	ldrb	r3, [r3, #28]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d108      	bne.n	8000dea <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f042 0208 	orr.w	r2, r2, #8
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	e007      	b.n	8000dfa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f022 0208 	bic.w	r2, r2, #8
 8000df8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	7f5b      	ldrb	r3, [r3, #29]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d108      	bne.n	8000e14 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f042 0204 	orr.w	r2, r2, #4
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	e007      	b.n	8000e24 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f022 0204 	bic.w	r2, r2, #4
 8000e22:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	689a      	ldr	r2, [r3, #8]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	431a      	orrs	r2, r3
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	691b      	ldr	r3, [r3, #16]
 8000e32:	431a      	orrs	r2, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	695b      	ldr	r3, [r3, #20]
 8000e38:	ea42 0103 	orr.w	r1, r2, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	1e5a      	subs	r2, r3, #1
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	430a      	orrs	r2, r1
 8000e48:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2201      	movs	r2, #1
 8000e54:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000e62:	b480      	push	{r7}
 8000e64:	b087      	sub	sp, #28
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
 8000e6a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e78:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000e7a:	7cfb      	ldrb	r3, [r7, #19]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d003      	beq.n	8000e88 <HAL_CAN_ConfigFilter+0x26>
 8000e80:	7cfb      	ldrb	r3, [r7, #19]
 8000e82:	2b02      	cmp	r3, #2
 8000e84:	f040 80aa 	bne.w	8000fdc <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e8e:	f043 0201 	orr.w	r2, r3, #1
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	695b      	ldr	r3, [r3, #20]
 8000e9c:	f003 031f 	and.w	r3, r3, #31
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	401a      	ands	r2, r3
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	69db      	ldr	r3, [r3, #28]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d123      	bne.n	8000f0a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	401a      	ands	r2, r3
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ee0:	683a      	ldr	r2, [r7, #0]
 8000ee2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ee4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	3248      	adds	r2, #72	; 0x48
 8000eea:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000efe:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f00:	6979      	ldr	r1, [r7, #20]
 8000f02:	3348      	adds	r3, #72	; 0x48
 8000f04:	00db      	lsls	r3, r3, #3
 8000f06:	440b      	add	r3, r1
 8000f08:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	69db      	ldr	r3, [r3, #28]
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d122      	bne.n	8000f58 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	431a      	orrs	r2, r3
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f2e:	683a      	ldr	r2, [r7, #0]
 8000f30:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f32:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	3248      	adds	r2, #72	; 0x48
 8000f38:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	68db      	ldr	r3, [r3, #12]
 8000f46:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f4c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f4e:	6979      	ldr	r1, [r7, #20]
 8000f50:	3348      	adds	r3, #72	; 0x48
 8000f52:	00db      	lsls	r3, r3, #3
 8000f54:	440b      	add	r3, r1
 8000f56:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d109      	bne.n	8000f74 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	401a      	ands	r2, r3
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000f72:	e007      	b.n	8000f84 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	431a      	orrs	r2, r3
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	691b      	ldr	r3, [r3, #16]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d109      	bne.n	8000fa0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	43db      	mvns	r3, r3
 8000f96:	401a      	ands	r2, r3
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000f9e:	e007      	b.n	8000fb0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	431a      	orrs	r2, r3
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	6a1b      	ldr	r3, [r3, #32]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d107      	bne.n	8000fc8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	431a      	orrs	r2, r3
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000fce:	f023 0201 	bic.w	r2, r3, #1
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	e006      	b.n	8000fea <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000fe8:	2301      	movs	r3, #1
  }
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	371c      	adds	r7, #28
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr

08000ff4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001002:	b2db      	uxtb	r3, r3
 8001004:	2b01      	cmp	r3, #1
 8001006:	d12e      	bne.n	8001066 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2202      	movs	r2, #2
 800100c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f022 0201 	bic.w	r2, r2, #1
 800101e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001020:	f7ff fe1a 	bl	8000c58 <HAL_GetTick>
 8001024:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001026:	e012      	b.n	800104e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001028:	f7ff fe16 	bl	8000c58 <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	2b0a      	cmp	r3, #10
 8001034:	d90b      	bls.n	800104e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2205      	movs	r2, #5
 8001046:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e012      	b.n	8001074 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	2b00      	cmp	r3, #0
 800105a:	d1e5      	bne.n	8001028 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2200      	movs	r2, #0
 8001060:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001062:	2300      	movs	r3, #0
 8001064:	e006      	b.n	8001074 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800106a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
  }
}
 8001074:	4618      	mov	r0, r3
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800107c:	b480      	push	{r7}
 800107e:	b089      	sub	sp, #36	; 0x24
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
 8001088:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001090:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800109a:	7ffb      	ldrb	r3, [r7, #31]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d003      	beq.n	80010a8 <HAL_CAN_AddTxMessage+0x2c>
 80010a0:	7ffb      	ldrb	r3, [r7, #31]
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	f040 80ad 	bne.w	8001202 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d10a      	bne.n	80010c8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d105      	bne.n	80010c8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	f000 8095 	beq.w	80011f2 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	0e1b      	lsrs	r3, r3, #24
 80010cc:	f003 0303 	and.w	r3, r3, #3
 80010d0:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80010d2:	2201      	movs	r2, #1
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	409a      	lsls	r2, r3
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d10d      	bne.n	8001100 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80010ee:	68f9      	ldr	r1, [r7, #12]
 80010f0:	6809      	ldr	r1, [r1, #0]
 80010f2:	431a      	orrs	r2, r3
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	3318      	adds	r3, #24
 80010f8:	011b      	lsls	r3, r3, #4
 80010fa:	440b      	add	r3, r1
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	e00f      	b.n	8001120 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800110a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001110:	68f9      	ldr	r1, [r7, #12]
 8001112:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001114:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	3318      	adds	r3, #24
 800111a:	011b      	lsls	r3, r3, #4
 800111c:	440b      	add	r3, r1
 800111e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	6819      	ldr	r1, [r3, #0]
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	691a      	ldr	r2, [r3, #16]
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	3318      	adds	r3, #24
 800112c:	011b      	lsls	r3, r3, #4
 800112e:	440b      	add	r3, r1
 8001130:	3304      	adds	r3, #4
 8001132:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	7d1b      	ldrb	r3, [r3, #20]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d111      	bne.n	8001160 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	3318      	adds	r3, #24
 8001144:	011b      	lsls	r3, r3, #4
 8001146:	4413      	add	r3, r2
 8001148:	3304      	adds	r3, #4
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	68fa      	ldr	r2, [r7, #12]
 800114e:	6811      	ldr	r1, [r2, #0]
 8001150:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	3318      	adds	r3, #24
 8001158:	011b      	lsls	r3, r3, #4
 800115a:	440b      	add	r3, r1
 800115c:	3304      	adds	r3, #4
 800115e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3307      	adds	r3, #7
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	061a      	lsls	r2, r3, #24
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3306      	adds	r3, #6
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	041b      	lsls	r3, r3, #16
 8001170:	431a      	orrs	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	3305      	adds	r3, #5
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	021b      	lsls	r3, r3, #8
 800117a:	4313      	orrs	r3, r2
 800117c:	687a      	ldr	r2, [r7, #4]
 800117e:	3204      	adds	r2, #4
 8001180:	7812      	ldrb	r2, [r2, #0]
 8001182:	4610      	mov	r0, r2
 8001184:	68fa      	ldr	r2, [r7, #12]
 8001186:	6811      	ldr	r1, [r2, #0]
 8001188:	ea43 0200 	orr.w	r2, r3, r0
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	011b      	lsls	r3, r3, #4
 8001190:	440b      	add	r3, r1
 8001192:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001196:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3303      	adds	r3, #3
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	061a      	lsls	r2, r3, #24
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3302      	adds	r3, #2
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	041b      	lsls	r3, r3, #16
 80011a8:	431a      	orrs	r2, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	3301      	adds	r3, #1
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	021b      	lsls	r3, r3, #8
 80011b2:	4313      	orrs	r3, r2
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	7812      	ldrb	r2, [r2, #0]
 80011b8:	4610      	mov	r0, r2
 80011ba:	68fa      	ldr	r2, [r7, #12]
 80011bc:	6811      	ldr	r1, [r2, #0]
 80011be:	ea43 0200 	orr.w	r2, r3, r0
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	011b      	lsls	r3, r3, #4
 80011c6:	440b      	add	r3, r1
 80011c8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80011cc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	3318      	adds	r3, #24
 80011d6:	011b      	lsls	r3, r3, #4
 80011d8:	4413      	add	r3, r2
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	68fa      	ldr	r2, [r7, #12]
 80011de:	6811      	ldr	r1, [r2, #0]
 80011e0:	f043 0201 	orr.w	r2, r3, #1
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	3318      	adds	r3, #24
 80011e8:	011b      	lsls	r3, r3, #4
 80011ea:	440b      	add	r3, r1
 80011ec:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80011ee:	2300      	movs	r3, #0
 80011f0:	e00e      	b.n	8001210 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e006      	b.n	8001210 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001206:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
  }
}
 8001210:	4618      	mov	r0, r3
 8001212:	3724      	adds	r7, #36	; 0x24
 8001214:	46bd      	mov	sp, r7
 8001216:	bc80      	pop	{r7}
 8001218:	4770      	bx	lr

0800121a <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 800121a:	b480      	push	{r7}
 800121c:	b085      	sub	sp, #20
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
 8001222:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8001224:	2300      	movs	r3, #0
 8001226:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800122e:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8001230:	7afb      	ldrb	r3, [r7, #11]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d002      	beq.n	800123c <HAL_CAN_IsTxMessagePending+0x22>
 8001236:	7afb      	ldrb	r3, [r7, #11]
 8001238:	2b02      	cmp	r3, #2
 800123a:	d10b      	bne.n	8001254 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	689a      	ldr	r2, [r3, #8]
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	069b      	lsls	r3, r3, #26
 8001246:	401a      	ands	r2, r3
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	069b      	lsls	r3, r3, #26
 800124c:	429a      	cmp	r2, r3
 800124e:	d001      	beq.n	8001254 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8001250:	2301      	movs	r3, #1
 8001252:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8001254:	68fb      	ldr	r3, [r7, #12]
}
 8001256:	4618      	mov	r0, r3
 8001258:	3714      	adds	r7, #20
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr

08001260 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001270:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001276:	68ba      	ldr	r2, [r7, #8]
 8001278:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800127c:	4013      	ands	r3, r2
 800127e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001288:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800128c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001290:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001292:	4a04      	ldr	r2, [pc, #16]	; (80012a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	60d3      	str	r3, [r2, #12]
}
 8001298:	bf00      	nop
 800129a:	3714      	adds	r7, #20
 800129c:	46bd      	mov	sp, r7
 800129e:	bc80      	pop	{r7}
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	e000ed00 	.word	0xe000ed00

080012a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012ac:	4b04      	ldr	r3, [pc, #16]	; (80012c0 <__NVIC_GetPriorityGrouping+0x18>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	0a1b      	lsrs	r3, r3, #8
 80012b2:	f003 0307 	and.w	r3, r3, #7
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bc80      	pop	{r7}
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	6039      	str	r1, [r7, #0]
 80012ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	db0a      	blt.n	80012ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	490c      	ldr	r1, [pc, #48]	; (8001310 <__NVIC_SetPriority+0x4c>)
 80012de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e2:	0112      	lsls	r2, r2, #4
 80012e4:	b2d2      	uxtb	r2, r2
 80012e6:	440b      	add	r3, r1
 80012e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012ec:	e00a      	b.n	8001304 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	4908      	ldr	r1, [pc, #32]	; (8001314 <__NVIC_SetPriority+0x50>)
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	f003 030f 	and.w	r3, r3, #15
 80012fa:	3b04      	subs	r3, #4
 80012fc:	0112      	lsls	r2, r2, #4
 80012fe:	b2d2      	uxtb	r2, r2
 8001300:	440b      	add	r3, r1
 8001302:	761a      	strb	r2, [r3, #24]
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	e000e100 	.word	0xe000e100
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001318:	b480      	push	{r7}
 800131a:	b089      	sub	sp, #36	; 0x24
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	f1c3 0307 	rsb	r3, r3, #7
 8001332:	2b04      	cmp	r3, #4
 8001334:	bf28      	it	cs
 8001336:	2304      	movcs	r3, #4
 8001338:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	3304      	adds	r3, #4
 800133e:	2b06      	cmp	r3, #6
 8001340:	d902      	bls.n	8001348 <NVIC_EncodePriority+0x30>
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	3b03      	subs	r3, #3
 8001346:	e000      	b.n	800134a <NVIC_EncodePriority+0x32>
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800134c:	f04f 32ff 	mov.w	r2, #4294967295
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43da      	mvns	r2, r3
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	401a      	ands	r2, r3
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001360:	f04f 31ff 	mov.w	r1, #4294967295
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	fa01 f303 	lsl.w	r3, r1, r3
 800136a:	43d9      	mvns	r1, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001370:	4313      	orrs	r3, r2
         );
}
 8001372:	4618      	mov	r0, r3
 8001374:	3724      	adds	r7, #36	; 0x24
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr

0800137c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3b01      	subs	r3, #1
 8001388:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800138c:	d301      	bcc.n	8001392 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800138e:	2301      	movs	r3, #1
 8001390:	e00f      	b.n	80013b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001392:	4a0a      	ldr	r2, [pc, #40]	; (80013bc <SysTick_Config+0x40>)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3b01      	subs	r3, #1
 8001398:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800139a:	210f      	movs	r1, #15
 800139c:	f04f 30ff 	mov.w	r0, #4294967295
 80013a0:	f7ff ff90 	bl	80012c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013a4:	4b05      	ldr	r3, [pc, #20]	; (80013bc <SysTick_Config+0x40>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013aa:	4b04      	ldr	r3, [pc, #16]	; (80013bc <SysTick_Config+0x40>)
 80013ac:	2207      	movs	r2, #7
 80013ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	e000e010 	.word	0xe000e010

080013c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff ff49 	bl	8001260 <__NVIC_SetPriorityGrouping>
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b086      	sub	sp, #24
 80013da:	af00      	add	r7, sp, #0
 80013dc:	4603      	mov	r3, r0
 80013de:	60b9      	str	r1, [r7, #8]
 80013e0:	607a      	str	r2, [r7, #4]
 80013e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013e8:	f7ff ff5e 	bl	80012a8 <__NVIC_GetPriorityGrouping>
 80013ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	68b9      	ldr	r1, [r7, #8]
 80013f2:	6978      	ldr	r0, [r7, #20]
 80013f4:	f7ff ff90 	bl	8001318 <NVIC_EncodePriority>
 80013f8:	4602      	mov	r2, r0
 80013fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013fe:	4611      	mov	r1, r2
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff ff5f 	bl	80012c4 <__NVIC_SetPriority>
}
 8001406:	bf00      	nop
 8001408:	3718      	adds	r7, #24
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b082      	sub	sp, #8
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f7ff ffb0 	bl	800137c <SysTick_Config>
 800141c:	4603      	mov	r3, r0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
	...

08001428 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001428:	b480      	push	{r7}
 800142a:	b08b      	sub	sp, #44	; 0x2c
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001432:	2300      	movs	r3, #0
 8001434:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001436:	2300      	movs	r3, #0
 8001438:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800143a:	e169      	b.n	8001710 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800143c:	2201      	movs	r2, #1
 800143e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	69fa      	ldr	r2, [r7, #28]
 800144c:	4013      	ands	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	429a      	cmp	r2, r3
 8001456:	f040 8158 	bne.w	800170a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	4a9a      	ldr	r2, [pc, #616]	; (80016c8 <HAL_GPIO_Init+0x2a0>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d05e      	beq.n	8001522 <HAL_GPIO_Init+0xfa>
 8001464:	4a98      	ldr	r2, [pc, #608]	; (80016c8 <HAL_GPIO_Init+0x2a0>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d875      	bhi.n	8001556 <HAL_GPIO_Init+0x12e>
 800146a:	4a98      	ldr	r2, [pc, #608]	; (80016cc <HAL_GPIO_Init+0x2a4>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d058      	beq.n	8001522 <HAL_GPIO_Init+0xfa>
 8001470:	4a96      	ldr	r2, [pc, #600]	; (80016cc <HAL_GPIO_Init+0x2a4>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d86f      	bhi.n	8001556 <HAL_GPIO_Init+0x12e>
 8001476:	4a96      	ldr	r2, [pc, #600]	; (80016d0 <HAL_GPIO_Init+0x2a8>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d052      	beq.n	8001522 <HAL_GPIO_Init+0xfa>
 800147c:	4a94      	ldr	r2, [pc, #592]	; (80016d0 <HAL_GPIO_Init+0x2a8>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d869      	bhi.n	8001556 <HAL_GPIO_Init+0x12e>
 8001482:	4a94      	ldr	r2, [pc, #592]	; (80016d4 <HAL_GPIO_Init+0x2ac>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d04c      	beq.n	8001522 <HAL_GPIO_Init+0xfa>
 8001488:	4a92      	ldr	r2, [pc, #584]	; (80016d4 <HAL_GPIO_Init+0x2ac>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d863      	bhi.n	8001556 <HAL_GPIO_Init+0x12e>
 800148e:	4a92      	ldr	r2, [pc, #584]	; (80016d8 <HAL_GPIO_Init+0x2b0>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d046      	beq.n	8001522 <HAL_GPIO_Init+0xfa>
 8001494:	4a90      	ldr	r2, [pc, #576]	; (80016d8 <HAL_GPIO_Init+0x2b0>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d85d      	bhi.n	8001556 <HAL_GPIO_Init+0x12e>
 800149a:	2b12      	cmp	r3, #18
 800149c:	d82a      	bhi.n	80014f4 <HAL_GPIO_Init+0xcc>
 800149e:	2b12      	cmp	r3, #18
 80014a0:	d859      	bhi.n	8001556 <HAL_GPIO_Init+0x12e>
 80014a2:	a201      	add	r2, pc, #4	; (adr r2, 80014a8 <HAL_GPIO_Init+0x80>)
 80014a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014a8:	08001523 	.word	0x08001523
 80014ac:	080014fd 	.word	0x080014fd
 80014b0:	0800150f 	.word	0x0800150f
 80014b4:	08001551 	.word	0x08001551
 80014b8:	08001557 	.word	0x08001557
 80014bc:	08001557 	.word	0x08001557
 80014c0:	08001557 	.word	0x08001557
 80014c4:	08001557 	.word	0x08001557
 80014c8:	08001557 	.word	0x08001557
 80014cc:	08001557 	.word	0x08001557
 80014d0:	08001557 	.word	0x08001557
 80014d4:	08001557 	.word	0x08001557
 80014d8:	08001557 	.word	0x08001557
 80014dc:	08001557 	.word	0x08001557
 80014e0:	08001557 	.word	0x08001557
 80014e4:	08001557 	.word	0x08001557
 80014e8:	08001557 	.word	0x08001557
 80014ec:	08001505 	.word	0x08001505
 80014f0:	08001519 	.word	0x08001519
 80014f4:	4a79      	ldr	r2, [pc, #484]	; (80016dc <HAL_GPIO_Init+0x2b4>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d013      	beq.n	8001522 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014fa:	e02c      	b.n	8001556 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	623b      	str	r3, [r7, #32]
          break;
 8001502:	e029      	b.n	8001558 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	3304      	adds	r3, #4
 800150a:	623b      	str	r3, [r7, #32]
          break;
 800150c:	e024      	b.n	8001558 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	3308      	adds	r3, #8
 8001514:	623b      	str	r3, [r7, #32]
          break;
 8001516:	e01f      	b.n	8001558 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	330c      	adds	r3, #12
 800151e:	623b      	str	r3, [r7, #32]
          break;
 8001520:	e01a      	b.n	8001558 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d102      	bne.n	8001530 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800152a:	2304      	movs	r3, #4
 800152c:	623b      	str	r3, [r7, #32]
          break;
 800152e:	e013      	b.n	8001558 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d105      	bne.n	8001544 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001538:	2308      	movs	r3, #8
 800153a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	69fa      	ldr	r2, [r7, #28]
 8001540:	611a      	str	r2, [r3, #16]
          break;
 8001542:	e009      	b.n	8001558 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001544:	2308      	movs	r3, #8
 8001546:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	69fa      	ldr	r2, [r7, #28]
 800154c:	615a      	str	r2, [r3, #20]
          break;
 800154e:	e003      	b.n	8001558 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001550:	2300      	movs	r3, #0
 8001552:	623b      	str	r3, [r7, #32]
          break;
 8001554:	e000      	b.n	8001558 <HAL_GPIO_Init+0x130>
          break;
 8001556:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	2bff      	cmp	r3, #255	; 0xff
 800155c:	d801      	bhi.n	8001562 <HAL_GPIO_Init+0x13a>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	e001      	b.n	8001566 <HAL_GPIO_Init+0x13e>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	3304      	adds	r3, #4
 8001566:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	2bff      	cmp	r3, #255	; 0xff
 800156c:	d802      	bhi.n	8001574 <HAL_GPIO_Init+0x14c>
 800156e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	e002      	b.n	800157a <HAL_GPIO_Init+0x152>
 8001574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001576:	3b08      	subs	r3, #8
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	210f      	movs	r1, #15
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	fa01 f303 	lsl.w	r3, r1, r3
 8001588:	43db      	mvns	r3, r3
 800158a:	401a      	ands	r2, r3
 800158c:	6a39      	ldr	r1, [r7, #32]
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	fa01 f303 	lsl.w	r3, r1, r3
 8001594:	431a      	orrs	r2, r3
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 80b1 	beq.w	800170a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015a8:	4b4d      	ldr	r3, [pc, #308]	; (80016e0 <HAL_GPIO_Init+0x2b8>)
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	4a4c      	ldr	r2, [pc, #304]	; (80016e0 <HAL_GPIO_Init+0x2b8>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	6193      	str	r3, [r2, #24]
 80015b4:	4b4a      	ldr	r3, [pc, #296]	; (80016e0 <HAL_GPIO_Init+0x2b8>)
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015c0:	4a48      	ldr	r2, [pc, #288]	; (80016e4 <HAL_GPIO_Init+0x2bc>)
 80015c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c4:	089b      	lsrs	r3, r3, #2
 80015c6:	3302      	adds	r3, #2
 80015c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d0:	f003 0303 	and.w	r3, r3, #3
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	220f      	movs	r2, #15
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	4013      	ands	r3, r2
 80015e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4a40      	ldr	r2, [pc, #256]	; (80016e8 <HAL_GPIO_Init+0x2c0>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d013      	beq.n	8001614 <HAL_GPIO_Init+0x1ec>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a3f      	ldr	r2, [pc, #252]	; (80016ec <HAL_GPIO_Init+0x2c4>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d00d      	beq.n	8001610 <HAL_GPIO_Init+0x1e8>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a3e      	ldr	r2, [pc, #248]	; (80016f0 <HAL_GPIO_Init+0x2c8>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d007      	beq.n	800160c <HAL_GPIO_Init+0x1e4>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a3d      	ldr	r2, [pc, #244]	; (80016f4 <HAL_GPIO_Init+0x2cc>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d101      	bne.n	8001608 <HAL_GPIO_Init+0x1e0>
 8001604:	2303      	movs	r3, #3
 8001606:	e006      	b.n	8001616 <HAL_GPIO_Init+0x1ee>
 8001608:	2304      	movs	r3, #4
 800160a:	e004      	b.n	8001616 <HAL_GPIO_Init+0x1ee>
 800160c:	2302      	movs	r3, #2
 800160e:	e002      	b.n	8001616 <HAL_GPIO_Init+0x1ee>
 8001610:	2301      	movs	r3, #1
 8001612:	e000      	b.n	8001616 <HAL_GPIO_Init+0x1ee>
 8001614:	2300      	movs	r3, #0
 8001616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001618:	f002 0203 	and.w	r2, r2, #3
 800161c:	0092      	lsls	r2, r2, #2
 800161e:	4093      	lsls	r3, r2
 8001620:	68fa      	ldr	r2, [r7, #12]
 8001622:	4313      	orrs	r3, r2
 8001624:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001626:	492f      	ldr	r1, [pc, #188]	; (80016e4 <HAL_GPIO_Init+0x2bc>)
 8001628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162a:	089b      	lsrs	r3, r3, #2
 800162c:	3302      	adds	r3, #2
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d006      	beq.n	800164e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001640:	4b2d      	ldr	r3, [pc, #180]	; (80016f8 <HAL_GPIO_Init+0x2d0>)
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	492c      	ldr	r1, [pc, #176]	; (80016f8 <HAL_GPIO_Init+0x2d0>)
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	4313      	orrs	r3, r2
 800164a:	608b      	str	r3, [r1, #8]
 800164c:	e006      	b.n	800165c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800164e:	4b2a      	ldr	r3, [pc, #168]	; (80016f8 <HAL_GPIO_Init+0x2d0>)
 8001650:	689a      	ldr	r2, [r3, #8]
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	43db      	mvns	r3, r3
 8001656:	4928      	ldr	r1, [pc, #160]	; (80016f8 <HAL_GPIO_Init+0x2d0>)
 8001658:	4013      	ands	r3, r2
 800165a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d006      	beq.n	8001676 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001668:	4b23      	ldr	r3, [pc, #140]	; (80016f8 <HAL_GPIO_Init+0x2d0>)
 800166a:	68da      	ldr	r2, [r3, #12]
 800166c:	4922      	ldr	r1, [pc, #136]	; (80016f8 <HAL_GPIO_Init+0x2d0>)
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	4313      	orrs	r3, r2
 8001672:	60cb      	str	r3, [r1, #12]
 8001674:	e006      	b.n	8001684 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001676:	4b20      	ldr	r3, [pc, #128]	; (80016f8 <HAL_GPIO_Init+0x2d0>)
 8001678:	68da      	ldr	r2, [r3, #12]
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	43db      	mvns	r3, r3
 800167e:	491e      	ldr	r1, [pc, #120]	; (80016f8 <HAL_GPIO_Init+0x2d0>)
 8001680:	4013      	ands	r3, r2
 8001682:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d006      	beq.n	800169e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001690:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <HAL_GPIO_Init+0x2d0>)
 8001692:	685a      	ldr	r2, [r3, #4]
 8001694:	4918      	ldr	r1, [pc, #96]	; (80016f8 <HAL_GPIO_Init+0x2d0>)
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	4313      	orrs	r3, r2
 800169a:	604b      	str	r3, [r1, #4]
 800169c:	e006      	b.n	80016ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800169e:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <HAL_GPIO_Init+0x2d0>)
 80016a0:	685a      	ldr	r2, [r3, #4]
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	43db      	mvns	r3, r3
 80016a6:	4914      	ldr	r1, [pc, #80]	; (80016f8 <HAL_GPIO_Init+0x2d0>)
 80016a8:	4013      	ands	r3, r2
 80016aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d021      	beq.n	80016fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016b8:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <HAL_GPIO_Init+0x2d0>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	490e      	ldr	r1, [pc, #56]	; (80016f8 <HAL_GPIO_Init+0x2d0>)
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	600b      	str	r3, [r1, #0]
 80016c4:	e021      	b.n	800170a <HAL_GPIO_Init+0x2e2>
 80016c6:	bf00      	nop
 80016c8:	10320000 	.word	0x10320000
 80016cc:	10310000 	.word	0x10310000
 80016d0:	10220000 	.word	0x10220000
 80016d4:	10210000 	.word	0x10210000
 80016d8:	10120000 	.word	0x10120000
 80016dc:	10110000 	.word	0x10110000
 80016e0:	40021000 	.word	0x40021000
 80016e4:	40010000 	.word	0x40010000
 80016e8:	40010800 	.word	0x40010800
 80016ec:	40010c00 	.word	0x40010c00
 80016f0:	40011000 	.word	0x40011000
 80016f4:	40011400 	.word	0x40011400
 80016f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016fc:	4b0b      	ldr	r3, [pc, #44]	; (800172c <HAL_GPIO_Init+0x304>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	43db      	mvns	r3, r3
 8001704:	4909      	ldr	r1, [pc, #36]	; (800172c <HAL_GPIO_Init+0x304>)
 8001706:	4013      	ands	r3, r2
 8001708:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800170a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170c:	3301      	adds	r3, #1
 800170e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001716:	fa22 f303 	lsr.w	r3, r2, r3
 800171a:	2b00      	cmp	r3, #0
 800171c:	f47f ae8e 	bne.w	800143c <HAL_GPIO_Init+0x14>
  }
}
 8001720:	bf00      	nop
 8001722:	bf00      	nop
 8001724:	372c      	adds	r7, #44	; 0x2c
 8001726:	46bd      	mov	sp, r7
 8001728:	bc80      	pop	{r7}
 800172a:	4770      	bx	lr
 800172c:	40010400 	.word	0x40010400

08001730 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	460b      	mov	r3, r1
 800173a:	807b      	strh	r3, [r7, #2]
 800173c:	4613      	mov	r3, r2
 800173e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001740:	787b      	ldrb	r3, [r7, #1]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d003      	beq.n	800174e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001746:	887a      	ldrh	r2, [r7, #2]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800174c:	e003      	b.n	8001756 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800174e:	887b      	ldrh	r3, [r7, #2]
 8001750:	041a      	lsls	r2, r3, #16
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	611a      	str	r2, [r3, #16]
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	bc80      	pop	{r7}
 800175e:	4770      	bx	lr

08001760 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d101      	bne.n	8001772 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e272      	b.n	8001c58 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	2b00      	cmp	r3, #0
 800177c:	f000 8087 	beq.w	800188e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001780:	4b92      	ldr	r3, [pc, #584]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f003 030c 	and.w	r3, r3, #12
 8001788:	2b04      	cmp	r3, #4
 800178a:	d00c      	beq.n	80017a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800178c:	4b8f      	ldr	r3, [pc, #572]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f003 030c 	and.w	r3, r3, #12
 8001794:	2b08      	cmp	r3, #8
 8001796:	d112      	bne.n	80017be <HAL_RCC_OscConfig+0x5e>
 8001798:	4b8c      	ldr	r3, [pc, #560]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017a4:	d10b      	bne.n	80017be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a6:	4b89      	ldr	r3, [pc, #548]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d06c      	beq.n	800188c <HAL_RCC_OscConfig+0x12c>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d168      	bne.n	800188c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e24c      	b.n	8001c58 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017c6:	d106      	bne.n	80017d6 <HAL_RCC_OscConfig+0x76>
 80017c8:	4b80      	ldr	r3, [pc, #512]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a7f      	ldr	r2, [pc, #508]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 80017ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017d2:	6013      	str	r3, [r2, #0]
 80017d4:	e02e      	b.n	8001834 <HAL_RCC_OscConfig+0xd4>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d10c      	bne.n	80017f8 <HAL_RCC_OscConfig+0x98>
 80017de:	4b7b      	ldr	r3, [pc, #492]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a7a      	ldr	r2, [pc, #488]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 80017e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017e8:	6013      	str	r3, [r2, #0]
 80017ea:	4b78      	ldr	r3, [pc, #480]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a77      	ldr	r2, [pc, #476]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 80017f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017f4:	6013      	str	r3, [r2, #0]
 80017f6:	e01d      	b.n	8001834 <HAL_RCC_OscConfig+0xd4>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001800:	d10c      	bne.n	800181c <HAL_RCC_OscConfig+0xbc>
 8001802:	4b72      	ldr	r3, [pc, #456]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a71      	ldr	r2, [pc, #452]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 8001808:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800180c:	6013      	str	r3, [r2, #0]
 800180e:	4b6f      	ldr	r3, [pc, #444]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a6e      	ldr	r2, [pc, #440]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 8001814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001818:	6013      	str	r3, [r2, #0]
 800181a:	e00b      	b.n	8001834 <HAL_RCC_OscConfig+0xd4>
 800181c:	4b6b      	ldr	r3, [pc, #428]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a6a      	ldr	r2, [pc, #424]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 8001822:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001826:	6013      	str	r3, [r2, #0]
 8001828:	4b68      	ldr	r3, [pc, #416]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a67      	ldr	r2, [pc, #412]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 800182e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001832:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d013      	beq.n	8001864 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183c:	f7ff fa0c 	bl	8000c58 <HAL_GetTick>
 8001840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001844:	f7ff fa08 	bl	8000c58 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b64      	cmp	r3, #100	; 0x64
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e200      	b.n	8001c58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001856:	4b5d      	ldr	r3, [pc, #372]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d0f0      	beq.n	8001844 <HAL_RCC_OscConfig+0xe4>
 8001862:	e014      	b.n	800188e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001864:	f7ff f9f8 	bl	8000c58 <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800186c:	f7ff f9f4 	bl	8000c58 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b64      	cmp	r3, #100	; 0x64
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e1ec      	b.n	8001c58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800187e:	4b53      	ldr	r3, [pc, #332]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1f0      	bne.n	800186c <HAL_RCC_OscConfig+0x10c>
 800188a:	e000      	b.n	800188e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800188c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d063      	beq.n	8001962 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800189a:	4b4c      	ldr	r3, [pc, #304]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f003 030c 	and.w	r3, r3, #12
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d00b      	beq.n	80018be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018a6:	4b49      	ldr	r3, [pc, #292]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f003 030c 	and.w	r3, r3, #12
 80018ae:	2b08      	cmp	r3, #8
 80018b0:	d11c      	bne.n	80018ec <HAL_RCC_OscConfig+0x18c>
 80018b2:	4b46      	ldr	r3, [pc, #280]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d116      	bne.n	80018ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018be:	4b43      	ldr	r3, [pc, #268]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d005      	beq.n	80018d6 <HAL_RCC_OscConfig+0x176>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d001      	beq.n	80018d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e1c0      	b.n	8001c58 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d6:	4b3d      	ldr	r3, [pc, #244]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	4939      	ldr	r1, [pc, #228]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 80018e6:	4313      	orrs	r3, r2
 80018e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ea:	e03a      	b.n	8001962 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d020      	beq.n	8001936 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018f4:	4b36      	ldr	r3, [pc, #216]	; (80019d0 <HAL_RCC_OscConfig+0x270>)
 80018f6:	2201      	movs	r2, #1
 80018f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fa:	f7ff f9ad 	bl	8000c58 <HAL_GetTick>
 80018fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001900:	e008      	b.n	8001914 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001902:	f7ff f9a9 	bl	8000c58 <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b02      	cmp	r3, #2
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e1a1      	b.n	8001c58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001914:	4b2d      	ldr	r3, [pc, #180]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0302 	and.w	r3, r3, #2
 800191c:	2b00      	cmp	r3, #0
 800191e:	d0f0      	beq.n	8001902 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001920:	4b2a      	ldr	r3, [pc, #168]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	695b      	ldr	r3, [r3, #20]
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	4927      	ldr	r1, [pc, #156]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 8001930:	4313      	orrs	r3, r2
 8001932:	600b      	str	r3, [r1, #0]
 8001934:	e015      	b.n	8001962 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001936:	4b26      	ldr	r3, [pc, #152]	; (80019d0 <HAL_RCC_OscConfig+0x270>)
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193c:	f7ff f98c 	bl	8000c58 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001944:	f7ff f988 	bl	8000c58 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e180      	b.n	8001c58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001956:	4b1d      	ldr	r3, [pc, #116]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d1f0      	bne.n	8001944 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0308 	and.w	r3, r3, #8
 800196a:	2b00      	cmp	r3, #0
 800196c:	d03a      	beq.n	80019e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d019      	beq.n	80019aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001976:	4b17      	ldr	r3, [pc, #92]	; (80019d4 <HAL_RCC_OscConfig+0x274>)
 8001978:	2201      	movs	r2, #1
 800197a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800197c:	f7ff f96c 	bl	8000c58 <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001984:	f7ff f968 	bl	8000c58 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e160      	b.n	8001c58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001996:	4b0d      	ldr	r3, [pc, #52]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 8001998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d0f0      	beq.n	8001984 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019a2:	2001      	movs	r0, #1
 80019a4:	f000 face 	bl	8001f44 <RCC_Delay>
 80019a8:	e01c      	b.n	80019e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019aa:	4b0a      	ldr	r3, [pc, #40]	; (80019d4 <HAL_RCC_OscConfig+0x274>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b0:	f7ff f952 	bl	8000c58 <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019b6:	e00f      	b.n	80019d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019b8:	f7ff f94e 	bl	8000c58 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d908      	bls.n	80019d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e146      	b.n	8001c58 <HAL_RCC_OscConfig+0x4f8>
 80019ca:	bf00      	nop
 80019cc:	40021000 	.word	0x40021000
 80019d0:	42420000 	.word	0x42420000
 80019d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019d8:	4b92      	ldr	r3, [pc, #584]	; (8001c24 <HAL_RCC_OscConfig+0x4c4>)
 80019da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d1e9      	bne.n	80019b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0304 	and.w	r3, r3, #4
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	f000 80a6 	beq.w	8001b3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019f2:	2300      	movs	r3, #0
 80019f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019f6:	4b8b      	ldr	r3, [pc, #556]	; (8001c24 <HAL_RCC_OscConfig+0x4c4>)
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d10d      	bne.n	8001a1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a02:	4b88      	ldr	r3, [pc, #544]	; (8001c24 <HAL_RCC_OscConfig+0x4c4>)
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	4a87      	ldr	r2, [pc, #540]	; (8001c24 <HAL_RCC_OscConfig+0x4c4>)
 8001a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a0c:	61d3      	str	r3, [r2, #28]
 8001a0e:	4b85      	ldr	r3, [pc, #532]	; (8001c24 <HAL_RCC_OscConfig+0x4c4>)
 8001a10:	69db      	ldr	r3, [r3, #28]
 8001a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a16:	60bb      	str	r3, [r7, #8]
 8001a18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a1e:	4b82      	ldr	r3, [pc, #520]	; (8001c28 <HAL_RCC_OscConfig+0x4c8>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d118      	bne.n	8001a5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a2a:	4b7f      	ldr	r3, [pc, #508]	; (8001c28 <HAL_RCC_OscConfig+0x4c8>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a7e      	ldr	r2, [pc, #504]	; (8001c28 <HAL_RCC_OscConfig+0x4c8>)
 8001a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a36:	f7ff f90f 	bl	8000c58 <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a3c:	e008      	b.n	8001a50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a3e:	f7ff f90b 	bl	8000c58 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b64      	cmp	r3, #100	; 0x64
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e103      	b.n	8001c58 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a50:	4b75      	ldr	r3, [pc, #468]	; (8001c28 <HAL_RCC_OscConfig+0x4c8>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0f0      	beq.n	8001a3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d106      	bne.n	8001a72 <HAL_RCC_OscConfig+0x312>
 8001a64:	4b6f      	ldr	r3, [pc, #444]	; (8001c24 <HAL_RCC_OscConfig+0x4c4>)
 8001a66:	6a1b      	ldr	r3, [r3, #32]
 8001a68:	4a6e      	ldr	r2, [pc, #440]	; (8001c24 <HAL_RCC_OscConfig+0x4c4>)
 8001a6a:	f043 0301 	orr.w	r3, r3, #1
 8001a6e:	6213      	str	r3, [r2, #32]
 8001a70:	e02d      	b.n	8001ace <HAL_RCC_OscConfig+0x36e>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d10c      	bne.n	8001a94 <HAL_RCC_OscConfig+0x334>
 8001a7a:	4b6a      	ldr	r3, [pc, #424]	; (8001c24 <HAL_RCC_OscConfig+0x4c4>)
 8001a7c:	6a1b      	ldr	r3, [r3, #32]
 8001a7e:	4a69      	ldr	r2, [pc, #420]	; (8001c24 <HAL_RCC_OscConfig+0x4c4>)
 8001a80:	f023 0301 	bic.w	r3, r3, #1
 8001a84:	6213      	str	r3, [r2, #32]
 8001a86:	4b67      	ldr	r3, [pc, #412]	; (8001c24 <HAL_RCC_OscConfig+0x4c4>)
 8001a88:	6a1b      	ldr	r3, [r3, #32]
 8001a8a:	4a66      	ldr	r2, [pc, #408]	; (8001c24 <HAL_RCC_OscConfig+0x4c4>)
 8001a8c:	f023 0304 	bic.w	r3, r3, #4
 8001a90:	6213      	str	r3, [r2, #32]
 8001a92:	e01c      	b.n	8001ace <HAL_RCC_OscConfig+0x36e>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	2b05      	cmp	r3, #5
 8001a9a:	d10c      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x356>
 8001a9c:	4b61      	ldr	r3, [pc, #388]	; (8001c24 <HAL_RCC_OscConfig+0x4c4>)
 8001a9e:	6a1b      	ldr	r3, [r3, #32]
 8001aa0:	4a60      	ldr	r2, [pc, #384]	; (8001c24 <HAL_RCC_OscConfig+0x4c4>)
 8001aa2:	f043 0304 	orr.w	r3, r3, #4
 8001aa6:	6213      	str	r3, [r2, #32]
 8001aa8:	4b5e      	ldr	r3, [pc, #376]	; (8001c24 <HAL_RCC_OscConfig+0x4c4>)
 8001aaa:	6a1b      	ldr	r3, [r3, #32]
 8001aac:	4a5d      	ldr	r2, [pc, #372]	; (8001c24 <HAL_RCC_OscConfig+0x4c4>)
 8001aae:	f043 0301 	orr.w	r3, r3, #1
 8001ab2:	6213      	str	r3, [r2, #32]
 8001ab4:	e00b      	b.n	8001ace <HAL_RCC_OscConfig+0x36e>
 8001ab6:	4b5b      	ldr	r3, [pc, #364]	; (8001c24 <HAL_RCC_OscConfig+0x4c4>)
 8001ab8:	6a1b      	ldr	r3, [r3, #32]
 8001aba:	4a5a      	ldr	r2, [pc, #360]	; (8001c24 <HAL_RCC_OscConfig+0x4c4>)
 8001abc:	f023 0301 	bic.w	r3, r3, #1
 8001ac0:	6213      	str	r3, [r2, #32]
 8001ac2:	4b58      	ldr	r3, [pc, #352]	; (8001c24 <HAL_RCC_OscConfig+0x4c4>)
 8001ac4:	6a1b      	ldr	r3, [r3, #32]
 8001ac6:	4a57      	ldr	r2, [pc, #348]	; (8001c24 <HAL_RCC_OscConfig+0x4c4>)
 8001ac8:	f023 0304 	bic.w	r3, r3, #4
 8001acc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d015      	beq.n	8001b02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ad6:	f7ff f8bf 	bl	8000c58 <HAL_GetTick>
 8001ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001adc:	e00a      	b.n	8001af4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ade:	f7ff f8bb 	bl	8000c58 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e0b1      	b.n	8001c58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001af4:	4b4b      	ldr	r3, [pc, #300]	; (8001c24 <HAL_RCC_OscConfig+0x4c4>)
 8001af6:	6a1b      	ldr	r3, [r3, #32]
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d0ee      	beq.n	8001ade <HAL_RCC_OscConfig+0x37e>
 8001b00:	e014      	b.n	8001b2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b02:	f7ff f8a9 	bl	8000c58 <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b08:	e00a      	b.n	8001b20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b0a:	f7ff f8a5 	bl	8000c58 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e09b      	b.n	8001c58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b20:	4b40      	ldr	r3, [pc, #256]	; (8001c24 <HAL_RCC_OscConfig+0x4c4>)
 8001b22:	6a1b      	ldr	r3, [r3, #32]
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1ee      	bne.n	8001b0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b2c:	7dfb      	ldrb	r3, [r7, #23]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d105      	bne.n	8001b3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b32:	4b3c      	ldr	r3, [pc, #240]	; (8001c24 <HAL_RCC_OscConfig+0x4c4>)
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	4a3b      	ldr	r2, [pc, #236]	; (8001c24 <HAL_RCC_OscConfig+0x4c4>)
 8001b38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f000 8087 	beq.w	8001c56 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b48:	4b36      	ldr	r3, [pc, #216]	; (8001c24 <HAL_RCC_OscConfig+0x4c4>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 030c 	and.w	r3, r3, #12
 8001b50:	2b08      	cmp	r3, #8
 8001b52:	d061      	beq.n	8001c18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	69db      	ldr	r3, [r3, #28]
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d146      	bne.n	8001bea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b5c:	4b33      	ldr	r3, [pc, #204]	; (8001c2c <HAL_RCC_OscConfig+0x4cc>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b62:	f7ff f879 	bl	8000c58 <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b6a:	f7ff f875 	bl	8000c58 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e06d      	b.n	8001c58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b7c:	4b29      	ldr	r3, [pc, #164]	; (8001c24 <HAL_RCC_OscConfig+0x4c4>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1f0      	bne.n	8001b6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a1b      	ldr	r3, [r3, #32]
 8001b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b90:	d108      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b92:	4b24      	ldr	r3, [pc, #144]	; (8001c24 <HAL_RCC_OscConfig+0x4c4>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	4921      	ldr	r1, [pc, #132]	; (8001c24 <HAL_RCC_OscConfig+0x4c4>)
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ba4:	4b1f      	ldr	r3, [pc, #124]	; (8001c24 <HAL_RCC_OscConfig+0x4c4>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a19      	ldr	r1, [r3, #32]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb4:	430b      	orrs	r3, r1
 8001bb6:	491b      	ldr	r1, [pc, #108]	; (8001c24 <HAL_RCC_OscConfig+0x4c4>)
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bbc:	4b1b      	ldr	r3, [pc, #108]	; (8001c2c <HAL_RCC_OscConfig+0x4cc>)
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc2:	f7ff f849 	bl	8000c58 <HAL_GetTick>
 8001bc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bc8:	e008      	b.n	8001bdc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bca:	f7ff f845 	bl	8000c58 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e03d      	b.n	8001c58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bdc:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <HAL_RCC_OscConfig+0x4c4>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d0f0      	beq.n	8001bca <HAL_RCC_OscConfig+0x46a>
 8001be8:	e035      	b.n	8001c56 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bea:	4b10      	ldr	r3, [pc, #64]	; (8001c2c <HAL_RCC_OscConfig+0x4cc>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf0:	f7ff f832 	bl	8000c58 <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf8:	f7ff f82e 	bl	8000c58 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e026      	b.n	8001c58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c0a:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <HAL_RCC_OscConfig+0x4c4>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1f0      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x498>
 8001c16:	e01e      	b.n	8001c56 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	69db      	ldr	r3, [r3, #28]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d107      	bne.n	8001c30 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e019      	b.n	8001c58 <HAL_RCC_OscConfig+0x4f8>
 8001c24:	40021000 	.word	0x40021000
 8001c28:	40007000 	.word	0x40007000
 8001c2c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c30:	4b0b      	ldr	r3, [pc, #44]	; (8001c60 <HAL_RCC_OscConfig+0x500>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a1b      	ldr	r3, [r3, #32]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d106      	bne.n	8001c52 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d001      	beq.n	8001c56 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e000      	b.n	8001c58 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40021000 	.word	0x40021000

08001c64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d101      	bne.n	8001c78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e0d0      	b.n	8001e1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c78:	4b6a      	ldr	r3, [pc, #424]	; (8001e24 <HAL_RCC_ClockConfig+0x1c0>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0307 	and.w	r3, r3, #7
 8001c80:	683a      	ldr	r2, [r7, #0]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d910      	bls.n	8001ca8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c86:	4b67      	ldr	r3, [pc, #412]	; (8001e24 <HAL_RCC_ClockConfig+0x1c0>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f023 0207 	bic.w	r2, r3, #7
 8001c8e:	4965      	ldr	r1, [pc, #404]	; (8001e24 <HAL_RCC_ClockConfig+0x1c0>)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c96:	4b63      	ldr	r3, [pc, #396]	; (8001e24 <HAL_RCC_ClockConfig+0x1c0>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0307 	and.w	r3, r3, #7
 8001c9e:	683a      	ldr	r2, [r7, #0]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d001      	beq.n	8001ca8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e0b8      	b.n	8001e1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d020      	beq.n	8001cf6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0304 	and.w	r3, r3, #4
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d005      	beq.n	8001ccc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cc0:	4b59      	ldr	r3, [pc, #356]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	4a58      	ldr	r2, [pc, #352]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0308 	and.w	r3, r3, #8
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d005      	beq.n	8001ce4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cd8:	4b53      	ldr	r3, [pc, #332]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	4a52      	ldr	r2, [pc, #328]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001cde:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ce2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ce4:	4b50      	ldr	r3, [pc, #320]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	494d      	ldr	r1, [pc, #308]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d040      	beq.n	8001d84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d107      	bne.n	8001d1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d0a:	4b47      	ldr	r3, [pc, #284]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d115      	bne.n	8001d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e07f      	b.n	8001e1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d107      	bne.n	8001d32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d22:	4b41      	ldr	r3, [pc, #260]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d109      	bne.n	8001d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e073      	b.n	8001e1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d32:	4b3d      	ldr	r3, [pc, #244]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e06b      	b.n	8001e1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d42:	4b39      	ldr	r3, [pc, #228]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f023 0203 	bic.w	r2, r3, #3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	4936      	ldr	r1, [pc, #216]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001d50:	4313      	orrs	r3, r2
 8001d52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d54:	f7fe ff80 	bl	8000c58 <HAL_GetTick>
 8001d58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d5a:	e00a      	b.n	8001d72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d5c:	f7fe ff7c 	bl	8000c58 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e053      	b.n	8001e1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d72:	4b2d      	ldr	r3, [pc, #180]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f003 020c 	and.w	r2, r3, #12
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d1eb      	bne.n	8001d5c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d84:	4b27      	ldr	r3, [pc, #156]	; (8001e24 <HAL_RCC_ClockConfig+0x1c0>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	683a      	ldr	r2, [r7, #0]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d210      	bcs.n	8001db4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d92:	4b24      	ldr	r3, [pc, #144]	; (8001e24 <HAL_RCC_ClockConfig+0x1c0>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f023 0207 	bic.w	r2, r3, #7
 8001d9a:	4922      	ldr	r1, [pc, #136]	; (8001e24 <HAL_RCC_ClockConfig+0x1c0>)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001da2:	4b20      	ldr	r3, [pc, #128]	; (8001e24 <HAL_RCC_ClockConfig+0x1c0>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d001      	beq.n	8001db4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e032      	b.n	8001e1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d008      	beq.n	8001dd2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dc0:	4b19      	ldr	r3, [pc, #100]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	4916      	ldr	r1, [pc, #88]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0308 	and.w	r3, r3, #8
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d009      	beq.n	8001df2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001dde:	4b12      	ldr	r3, [pc, #72]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	00db      	lsls	r3, r3, #3
 8001dec:	490e      	ldr	r1, [pc, #56]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001df2:	f000 f821 	bl	8001e38 <HAL_RCC_GetSysClockFreq>
 8001df6:	4602      	mov	r2, r0
 8001df8:	4b0b      	ldr	r3, [pc, #44]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	091b      	lsrs	r3, r3, #4
 8001dfe:	f003 030f 	and.w	r3, r3, #15
 8001e02:	490a      	ldr	r1, [pc, #40]	; (8001e2c <HAL_RCC_ClockConfig+0x1c8>)
 8001e04:	5ccb      	ldrb	r3, [r1, r3]
 8001e06:	fa22 f303 	lsr.w	r3, r2, r3
 8001e0a:	4a09      	ldr	r2, [pc, #36]	; (8001e30 <HAL_RCC_ClockConfig+0x1cc>)
 8001e0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e0e:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <HAL_RCC_ClockConfig+0x1d0>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7fe fede 	bl	8000bd4 <HAL_InitTick>

  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40022000 	.word	0x40022000
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	080021c8 	.word	0x080021c8
 8001e30:	20000000 	.word	0x20000000
 8001e34:	20000004 	.word	0x20000004

08001e38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b087      	sub	sp, #28
 8001e3c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	2300      	movs	r3, #0
 8001e44:	60bb      	str	r3, [r7, #8]
 8001e46:	2300      	movs	r3, #0
 8001e48:	617b      	str	r3, [r7, #20]
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e52:	4b1e      	ldr	r3, [pc, #120]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x94>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f003 030c 	and.w	r3, r3, #12
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	d002      	beq.n	8001e68 <HAL_RCC_GetSysClockFreq+0x30>
 8001e62:	2b08      	cmp	r3, #8
 8001e64:	d003      	beq.n	8001e6e <HAL_RCC_GetSysClockFreq+0x36>
 8001e66:	e027      	b.n	8001eb8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e68:	4b19      	ldr	r3, [pc, #100]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e6a:	613b      	str	r3, [r7, #16]
      break;
 8001e6c:	e027      	b.n	8001ebe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	0c9b      	lsrs	r3, r3, #18
 8001e72:	f003 030f 	and.w	r3, r3, #15
 8001e76:	4a17      	ldr	r2, [pc, #92]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e78:	5cd3      	ldrb	r3, [r2, r3]
 8001e7a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d010      	beq.n	8001ea8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e86:	4b11      	ldr	r3, [pc, #68]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x94>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	0c5b      	lsrs	r3, r3, #17
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	4a11      	ldr	r2, [pc, #68]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e92:	5cd3      	ldrb	r3, [r2, r3]
 8001e94:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a0d      	ldr	r2, [pc, #52]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e9a:	fb03 f202 	mul.w	r2, r3, r2
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea4:	617b      	str	r3, [r7, #20]
 8001ea6:	e004      	b.n	8001eb2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a0c      	ldr	r2, [pc, #48]	; (8001edc <HAL_RCC_GetSysClockFreq+0xa4>)
 8001eac:	fb02 f303 	mul.w	r3, r2, r3
 8001eb0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	613b      	str	r3, [r7, #16]
      break;
 8001eb6:	e002      	b.n	8001ebe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001eb8:	4b05      	ldr	r3, [pc, #20]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001eba:	613b      	str	r3, [r7, #16]
      break;
 8001ebc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ebe:	693b      	ldr	r3, [r7, #16]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	371c      	adds	r7, #28
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bc80      	pop	{r7}
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	007a1200 	.word	0x007a1200
 8001ed4:	080021e0 	.word	0x080021e0
 8001ed8:	080021f0 	.word	0x080021f0
 8001edc:	003d0900 	.word	0x003d0900

08001ee0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ee4:	4b02      	ldr	r3, [pc, #8]	; (8001ef0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bc80      	pop	{r7}
 8001eee:	4770      	bx	lr
 8001ef0:	20000000 	.word	0x20000000

08001ef4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ef8:	f7ff fff2 	bl	8001ee0 <HAL_RCC_GetHCLKFreq>
 8001efc:	4602      	mov	r2, r0
 8001efe:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	0a1b      	lsrs	r3, r3, #8
 8001f04:	f003 0307 	and.w	r3, r3, #7
 8001f08:	4903      	ldr	r1, [pc, #12]	; (8001f18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f0a:	5ccb      	ldrb	r3, [r1, r3]
 8001f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40021000 	.word	0x40021000
 8001f18:	080021d8 	.word	0x080021d8

08001f1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f20:	f7ff ffde 	bl	8001ee0 <HAL_RCC_GetHCLKFreq>
 8001f24:	4602      	mov	r2, r0
 8001f26:	4b05      	ldr	r3, [pc, #20]	; (8001f3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	0adb      	lsrs	r3, r3, #11
 8001f2c:	f003 0307 	and.w	r3, r3, #7
 8001f30:	4903      	ldr	r1, [pc, #12]	; (8001f40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f32:	5ccb      	ldrb	r3, [r1, r3]
 8001f34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	080021d8 	.word	0x080021d8

08001f44 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f4c:	4b0a      	ldr	r3, [pc, #40]	; (8001f78 <RCC_Delay+0x34>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a0a      	ldr	r2, [pc, #40]	; (8001f7c <RCC_Delay+0x38>)
 8001f52:	fba2 2303 	umull	r2, r3, r2, r3
 8001f56:	0a5b      	lsrs	r3, r3, #9
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	fb02 f303 	mul.w	r3, r2, r3
 8001f5e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f60:	bf00      	nop
  }
  while (Delay --);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	1e5a      	subs	r2, r3, #1
 8001f66:	60fa      	str	r2, [r7, #12]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d1f9      	bne.n	8001f60 <RCC_Delay+0x1c>
}
 8001f6c:	bf00      	nop
 8001f6e:	bf00      	nop
 8001f70:	3714      	adds	r7, #20
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr
 8001f78:	20000000 	.word	0x20000000
 8001f7c:	10624dd3 	.word	0x10624dd3

08001f80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e042      	b.n	8002018 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d106      	bne.n	8001fac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7fe fd5e 	bl	8000a68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2224      	movs	r2, #36	; 0x24
 8001fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68da      	ldr	r2, [r3, #12]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f000 f82b 	bl	8002020 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	691a      	ldr	r2, [r3, #16]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	695a      	ldr	r2, [r3, #20]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001fe8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68da      	ldr	r2, [r3, #12]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ff8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2220      	movs	r2, #32
 8002004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2220      	movs	r2, #32
 800200c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68da      	ldr	r2, [r3, #12]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	430a      	orrs	r2, r1
 800203c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689a      	ldr	r2, [r3, #8]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	431a      	orrs	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	695b      	ldr	r3, [r3, #20]
 800204c:	4313      	orrs	r3, r2
 800204e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800205a:	f023 030c 	bic.w	r3, r3, #12
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	6812      	ldr	r2, [r2, #0]
 8002062:	68b9      	ldr	r1, [r7, #8]
 8002064:	430b      	orrs	r3, r1
 8002066:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	699a      	ldr	r2, [r3, #24]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	430a      	orrs	r2, r1
 800207c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a2c      	ldr	r2, [pc, #176]	; (8002134 <UART_SetConfig+0x114>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d103      	bne.n	8002090 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002088:	f7ff ff48 	bl	8001f1c <HAL_RCC_GetPCLK2Freq>
 800208c:	60f8      	str	r0, [r7, #12]
 800208e:	e002      	b.n	8002096 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002090:	f7ff ff30 	bl	8001ef4 <HAL_RCC_GetPCLK1Freq>
 8002094:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	4613      	mov	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4413      	add	r3, r2
 800209e:	009a      	lsls	r2, r3, #2
 80020a0:	441a      	add	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ac:	4a22      	ldr	r2, [pc, #136]	; (8002138 <UART_SetConfig+0x118>)
 80020ae:	fba2 2303 	umull	r2, r3, r2, r3
 80020b2:	095b      	lsrs	r3, r3, #5
 80020b4:	0119      	lsls	r1, r3, #4
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	4613      	mov	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	4413      	add	r3, r2
 80020be:	009a      	lsls	r2, r3, #2
 80020c0:	441a      	add	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80020cc:	4b1a      	ldr	r3, [pc, #104]	; (8002138 <UART_SetConfig+0x118>)
 80020ce:	fba3 0302 	umull	r0, r3, r3, r2
 80020d2:	095b      	lsrs	r3, r3, #5
 80020d4:	2064      	movs	r0, #100	; 0x64
 80020d6:	fb00 f303 	mul.w	r3, r0, r3
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	011b      	lsls	r3, r3, #4
 80020de:	3332      	adds	r3, #50	; 0x32
 80020e0:	4a15      	ldr	r2, [pc, #84]	; (8002138 <UART_SetConfig+0x118>)
 80020e2:	fba2 2303 	umull	r2, r3, r2, r3
 80020e6:	095b      	lsrs	r3, r3, #5
 80020e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020ec:	4419      	add	r1, r3
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	4613      	mov	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	009a      	lsls	r2, r3, #2
 80020f8:	441a      	add	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	fbb2 f2f3 	udiv	r2, r2, r3
 8002104:	4b0c      	ldr	r3, [pc, #48]	; (8002138 <UART_SetConfig+0x118>)
 8002106:	fba3 0302 	umull	r0, r3, r3, r2
 800210a:	095b      	lsrs	r3, r3, #5
 800210c:	2064      	movs	r0, #100	; 0x64
 800210e:	fb00 f303 	mul.w	r3, r0, r3
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	011b      	lsls	r3, r3, #4
 8002116:	3332      	adds	r3, #50	; 0x32
 8002118:	4a07      	ldr	r2, [pc, #28]	; (8002138 <UART_SetConfig+0x118>)
 800211a:	fba2 2303 	umull	r2, r3, r2, r3
 800211e:	095b      	lsrs	r3, r3, #5
 8002120:	f003 020f 	and.w	r2, r3, #15
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	440a      	add	r2, r1
 800212a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800212c:	bf00      	nop
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40013800 	.word	0x40013800
 8002138:	51eb851f 	.word	0x51eb851f

0800213c <memset>:
 800213c:	4603      	mov	r3, r0
 800213e:	4402      	add	r2, r0
 8002140:	4293      	cmp	r3, r2
 8002142:	d100      	bne.n	8002146 <memset+0xa>
 8002144:	4770      	bx	lr
 8002146:	f803 1b01 	strb.w	r1, [r3], #1
 800214a:	e7f9      	b.n	8002140 <memset+0x4>

0800214c <__libc_init_array>:
 800214c:	b570      	push	{r4, r5, r6, lr}
 800214e:	2600      	movs	r6, #0
 8002150:	4d0c      	ldr	r5, [pc, #48]	; (8002184 <__libc_init_array+0x38>)
 8002152:	4c0d      	ldr	r4, [pc, #52]	; (8002188 <__libc_init_array+0x3c>)
 8002154:	1b64      	subs	r4, r4, r5
 8002156:	10a4      	asrs	r4, r4, #2
 8002158:	42a6      	cmp	r6, r4
 800215a:	d109      	bne.n	8002170 <__libc_init_array+0x24>
 800215c:	f000 f828 	bl	80021b0 <_init>
 8002160:	2600      	movs	r6, #0
 8002162:	4d0a      	ldr	r5, [pc, #40]	; (800218c <__libc_init_array+0x40>)
 8002164:	4c0a      	ldr	r4, [pc, #40]	; (8002190 <__libc_init_array+0x44>)
 8002166:	1b64      	subs	r4, r4, r5
 8002168:	10a4      	asrs	r4, r4, #2
 800216a:	42a6      	cmp	r6, r4
 800216c:	d105      	bne.n	800217a <__libc_init_array+0x2e>
 800216e:	bd70      	pop	{r4, r5, r6, pc}
 8002170:	f855 3b04 	ldr.w	r3, [r5], #4
 8002174:	4798      	blx	r3
 8002176:	3601      	adds	r6, #1
 8002178:	e7ee      	b.n	8002158 <__libc_init_array+0xc>
 800217a:	f855 3b04 	ldr.w	r3, [r5], #4
 800217e:	4798      	blx	r3
 8002180:	3601      	adds	r6, #1
 8002182:	e7f2      	b.n	800216a <__libc_init_array+0x1e>
 8002184:	080021f4 	.word	0x080021f4
 8002188:	080021f4 	.word	0x080021f4
 800218c:	080021f4 	.word	0x080021f4
 8002190:	080021f8 	.word	0x080021f8

08002194 <memcpy>:
 8002194:	440a      	add	r2, r1
 8002196:	4291      	cmp	r1, r2
 8002198:	f100 33ff 	add.w	r3, r0, #4294967295
 800219c:	d100      	bne.n	80021a0 <memcpy+0xc>
 800219e:	4770      	bx	lr
 80021a0:	b510      	push	{r4, lr}
 80021a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80021a6:	4291      	cmp	r1, r2
 80021a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80021ac:	d1f9      	bne.n	80021a2 <memcpy+0xe>
 80021ae:	bd10      	pop	{r4, pc}

080021b0 <_init>:
 80021b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021b2:	bf00      	nop
 80021b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021b6:	bc08      	pop	{r3}
 80021b8:	469e      	mov	lr, r3
 80021ba:	4770      	bx	lr

080021bc <_fini>:
 80021bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021be:	bf00      	nop
 80021c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021c2:	bc08      	pop	{r3}
 80021c4:	469e      	mov	lr, r3
 80021c6:	4770      	bx	lr
