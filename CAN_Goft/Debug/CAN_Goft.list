
CAN_Goft.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002674  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002780  08002780  00012780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027ac  080027ac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080027ac  080027ac  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027ac  080027ac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027ac  080027ac  000127ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027b0  080027b0  000127b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080027b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  2000000c  080027c0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  080027c0  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009bd4  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bfc  00000000  00000000  00029c4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000838  00000000  00000000  0002b848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000640  00000000  00000000  0002c080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017271  00000000  00000000  0002c6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a1df  00000000  00000000  00043931  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084539  00000000  00000000  0004db10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000204c  00000000  00000000  000d204c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000d4098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002768 	.word	0x08002768

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002768 	.word	0x08002768

0800014c <CANBufferHandleStruct_Init>:
 *      Author: win 10
 */
#include <CAN_OSI.h>
#include <string.h>
#include "CAN_Flag.h"
void CANBufferHandleStruct_Init(CANBufferHandleStruct *Buffer) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b096      	sub	sp, #88	; 0x58
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	NodeBufferHandle defaultNodeHandle = {0};
 8000154:	f107 030c 	add.w	r3, r7, #12
 8000158:	2247      	movs	r2, #71	; 0x47
 800015a:	2100      	movs	r1, #0
 800015c:	4618      	mov	r0, r3
 800015e:	f002 fac9 	bl	80026f4 <memset>
	Buffer->Buffer_Index = 0;
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2200      	movs	r2, #0
 8000166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	Buffer->SenderID = 0;
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	2200      	movs	r2, #0
 800016e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	Buffer->RecvID = 0;
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	2200      	movs	r2, #0
 8000176:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	Buffer->FrameType_Index = SET_UP_FRAME;
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	2200      	movs	r2, #0
 800017e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	Buffer->PacketDataLength = 0;
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	2200      	movs	r2, #0
 8000186:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	Buffer->CRCValue = 0;
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2200      	movs	r2, #0
 800018e:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	Buffer->NumberOfFrame=0;
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	2200      	movs	r2, #0
 8000196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	memset(Buffer->NetworkBuffer, 0, sizeof(Buffer->NetworkBuffer));
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	2240      	movs	r2, #64	; 0x40
 800019e:	2100      	movs	r1, #0
 80001a0:	4618      	mov	r0, r3
 80001a2:	f002 faa7 	bl	80026f4 <memset>
	memset(Buffer->Buffer, 0x55, sizeof(Buffer->Buffer));
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	3348      	adds	r3, #72	; 0x48
 80001aa:	2240      	movs	r2, #64	; 0x40
 80001ac:	2155      	movs	r1, #85	; 0x55
 80001ae:	4618      	mov	r0, r3
 80001b0:	f002 faa0 	bl	80026f4 <memset>
	memset(Buffer->StoreData, 0, sizeof(Buffer->StoreData));
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	3388      	adds	r3, #136	; 0x88
 80001b8:	2240      	movs	r2, #64	; 0x40
 80001ba:	2100      	movs	r1, #0
 80001bc:	4618      	mov	r0, r3
 80001be:	f002 fa99 	bl	80026f4 <memset>
	for (int i = 0; i < 16; i++) {
 80001c2:	2300      	movs	r3, #0
 80001c4:	657b      	str	r3, [r7, #84]	; 0x54
 80001c6:	e012      	b.n	80001ee <CANBufferHandleStruct_Init+0xa2>
		Buffer->NodeHandle[i] = defaultNodeHandle;
 80001c8:	6879      	ldr	r1, [r7, #4]
 80001ca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80001cc:	4613      	mov	r3, r2
 80001ce:	00db      	lsls	r3, r3, #3
 80001d0:	4413      	add	r3, r2
 80001d2:	00db      	lsls	r3, r3, #3
 80001d4:	1a9b      	subs	r3, r3, r2
 80001d6:	440b      	add	r3, r1
 80001d8:	33c8      	adds	r3, #200	; 0xc8
 80001da:	3302      	adds	r3, #2
 80001dc:	f107 010c 	add.w	r1, r7, #12
 80001e0:	2247      	movs	r2, #71	; 0x47
 80001e2:	4618      	mov	r0, r3
 80001e4:	f002 fab2 	bl	800274c <memcpy>
	for (int i = 0; i < 16; i++) {
 80001e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80001ea:	3301      	adds	r3, #1
 80001ec:	657b      	str	r3, [r7, #84]	; 0x54
 80001ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80001f0:	2b0f      	cmp	r3, #15
 80001f2:	dde9      	ble.n	80001c8 <CANBufferHandleStruct_Init+0x7c>
	}
}
 80001f4:	bf00      	nop
 80001f6:	bf00      	nop
 80001f8:	3758      	adds	r7, #88	; 0x58
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bd80      	pop	{r7, pc}

080001fe <FlagsFrameHandle_Init>:
void FlagsFrameHandle_Init(FlagFrameHandle *FlagInit) {
 80001fe:	b4b0      	push	{r4, r5, r7}
 8000200:	b089      	sub	sp, #36	; 0x24
 8000202:	af00      	add	r7, sp, #0
 8000204:	6078      	str	r0, [r7, #4]
	FlagIdHandle DefaultFlagID= {0};
 8000206:	f107 0308 	add.w	r3, r7, #8
 800020a:	2200      	movs	r2, #0
 800020c:	601a      	str	r2, [r3, #0]
 800020e:	605a      	str	r2, [r3, #4]
 8000210:	609a      	str	r2, [r3, #8]
 8000212:	60da      	str	r2, [r3, #12]
 8000214:	741a      	strb	r2, [r3, #16]
	FlagInit->FrameBits.Flag_Frame_0 = 0;
 8000216:	687a      	ldr	r2, [r7, #4]
 8000218:	f892 3110 	ldrb.w	r3, [r2, #272]	; 0x110
 800021c:	f36f 0300 	bfc	r3, #0, #1
 8000220:	f882 3110 	strb.w	r3, [r2, #272]	; 0x110
	FlagInit->FrameBits.Flag_Frame_1 = 0;
 8000224:	687a      	ldr	r2, [r7, #4]
 8000226:	f892 3110 	ldrb.w	r3, [r2, #272]	; 0x110
 800022a:	f36f 0341 	bfc	r3, #1, #1
 800022e:	f882 3110 	strb.w	r3, [r2, #272]	; 0x110
	FlagInit->FrameBits.Flag_Frame_2 = 0;
 8000232:	687a      	ldr	r2, [r7, #4]
 8000234:	f892 3110 	ldrb.w	r3, [r2, #272]	; 0x110
 8000238:	f36f 0382 	bfc	r3, #2, #1
 800023c:	f882 3110 	strb.w	r3, [r2, #272]	; 0x110
	FlagInit->FrameBits.Flag_Frame_3 = 0;
 8000240:	687a      	ldr	r2, [r7, #4]
 8000242:	f892 3110 	ldrb.w	r3, [r2, #272]	; 0x110
 8000246:	f36f 03c3 	bfc	r3, #3, #1
 800024a:	f882 3110 	strb.w	r3, [r2, #272]	; 0x110
	FlagInit->FrameBits.Flag_Frame_4 = 0;
 800024e:	687a      	ldr	r2, [r7, #4]
 8000250:	f892 3110 	ldrb.w	r3, [r2, #272]	; 0x110
 8000254:	f36f 1304 	bfc	r3, #4, #1
 8000258:	f882 3110 	strb.w	r3, [r2, #272]	; 0x110
	FlagInit->FrameBits.Flag_Frame_5 = 0;
 800025c:	687a      	ldr	r2, [r7, #4]
 800025e:	f892 3110 	ldrb.w	r3, [r2, #272]	; 0x110
 8000262:	f36f 1345 	bfc	r3, #5, #1
 8000266:	f882 3110 	strb.w	r3, [r2, #272]	; 0x110
	FlagInit->FrameBits.Flag_Frame_6 = 0;
 800026a:	687a      	ldr	r2, [r7, #4]
 800026c:	f892 3110 	ldrb.w	r3, [r2, #272]	; 0x110
 8000270:	f36f 1386 	bfc	r3, #6, #1
 8000274:	f882 3110 	strb.w	r3, [r2, #272]	; 0x110
	FlagInit->FrameBits.Flag_Frame_7 = 0;
 8000278:	687a      	ldr	r2, [r7, #4]
 800027a:	f892 3110 	ldrb.w	r3, [r2, #272]	; 0x110
 800027e:	f36f 13c7 	bfc	r3, #7, #1
 8000282:	f882 3110 	strb.w	r3, [r2, #272]	; 0x110
	for(int i=0; i<16;i++)
 8000286:	2300      	movs	r3, #0
 8000288:	61fb      	str	r3, [r7, #28]
 800028a:	e012      	b.n	80002b2 <FlagsFrameHandle_Init+0xb4>
	{
		FlagInit->FlagID[i]=DefaultFlagID;
 800028c:	6879      	ldr	r1, [r7, #4]
 800028e:	69fa      	ldr	r2, [r7, #28]
 8000290:	4613      	mov	r3, r2
 8000292:	011b      	lsls	r3, r3, #4
 8000294:	4413      	add	r3, r2
 8000296:	440b      	add	r3, r1
 8000298:	461d      	mov	r5, r3
 800029a:	f107 0408 	add.w	r4, r7, #8
 800029e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80002a0:	6028      	str	r0, [r5, #0]
 80002a2:	6069      	str	r1, [r5, #4]
 80002a4:	60aa      	str	r2, [r5, #8]
 80002a6:	60eb      	str	r3, [r5, #12]
 80002a8:	7823      	ldrb	r3, [r4, #0]
 80002aa:	742b      	strb	r3, [r5, #16]
	for(int i=0; i<16;i++)
 80002ac:	69fb      	ldr	r3, [r7, #28]
 80002ae:	3301      	adds	r3, #1
 80002b0:	61fb      	str	r3, [r7, #28]
 80002b2:	69fb      	ldr	r3, [r7, #28]
 80002b4:	2b0f      	cmp	r3, #15
 80002b6:	dde9      	ble.n	800028c <FlagsFrameHandle_Init+0x8e>
	}
}
 80002b8:	bf00      	nop
 80002ba:	bf00      	nop
 80002bc:	3724      	adds	r7, #36	; 0x24
 80002be:	46bd      	mov	sp, r7
 80002c0:	bcb0      	pop	{r4, r5, r7}
 80002c2:	4770      	bx	lr

080002c4 <CAN_Send_Application>:
				FlagHandle->FlagID[ID].FlagFrameFull[FrameType];
	}
}

uint8_t CAN_Send_Application(CANBufferHandleStruct *AppBuffer,
		CANConfigIDTxtypedef *pStID, uint8_t *Data, uint8_t DataLength) {
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b084      	sub	sp, #16
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	60f8      	str	r0, [r7, #12]
 80002cc:	60b9      	str	r1, [r7, #8]
 80002ce:	607a      	str	r2, [r7, #4]
 80002d0:	70fb      	strb	r3, [r7, #3]
	return CAN_Send_Network_Packet(AppBuffer, Data, DataLength, pStID);
 80002d2:	78fa      	ldrb	r2, [r7, #3]
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	6879      	ldr	r1, [r7, #4]
 80002d8:	68f8      	ldr	r0, [r7, #12]
 80002da:	f000 f805 	bl	80002e8 <CAN_Send_Network_Packet>
 80002de:	4603      	mov	r3, r0
}
 80002e0:	4618      	mov	r0, r3
 80002e2:	3710      	adds	r7, #16
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}

080002e8 <CAN_Send_Network_Packet>:

uint8_t CAN_Send_Network_Packet(CANBufferHandleStruct *TxBuffer, uint8_t *Data,
		uint8_t DataLength, CANConfigIDTxtypedef *pStID) {
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b084      	sub	sp, #16
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	60f8      	str	r0, [r7, #12]
 80002f0:	60b9      	str	r1, [r7, #8]
 80002f2:	603b      	str	r3, [r7, #0]
 80002f4:	4613      	mov	r3, r2
 80002f6:	71fb      	strb	r3, [r7, #7]
	TxBuffer->PacketDataLength = DataLength + 2;
 80002f8:	79fb      	ldrb	r3, [r7, #7]
 80002fa:	3302      	adds	r3, #2
 80002fc:	b2db      	uxtb	r3, r3
 80002fe:	b25a      	sxtb	r2, r3
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	TxBuffer->CRCValue = crc_8(Data, DataLength);
 8000306:	79fb      	ldrb	r3, [r7, #7]
 8000308:	4619      	mov	r1, r3
 800030a:	68b8      	ldr	r0, [r7, #8]
 800030c:	f000 f9c8 	bl	80006a0 <crc_8>
 8000310:	4603      	mov	r3, r0
 8000312:	461a      	mov	r2, r3
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	TxBuffer->Buffer_Index = DataLength;
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	79fa      	ldrb	r2, [r7, #7]
 800031e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	if (TxBuffer->PacketDataLength % 8 == 0) {
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 8000328:	b2db      	uxtb	r3, r3
 800032a:	f003 0307 	and.w	r3, r3, #7
 800032e:	b2db      	uxtb	r3, r3
 8000330:	2b00      	cmp	r3, #0
 8000332:	d10c      	bne.n	800034e <CAN_Send_Network_Packet+0x66>
		TxBuffer->NumberOfFrame = (TxBuffer->PacketDataLength / 8);
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 800033a:	2b00      	cmp	r3, #0
 800033c:	da00      	bge.n	8000340 <CAN_Send_Network_Packet+0x58>
 800033e:	3307      	adds	r3, #7
 8000340:	10db      	asrs	r3, r3, #3
 8000342:	b25b      	sxtb	r3, r3
 8000344:	b2da      	uxtb	r2, r3
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800034c:	e00d      	b.n	800036a <CAN_Send_Network_Packet+0x82>
	} else {
		TxBuffer->NumberOfFrame = (TxBuffer->PacketDataLength / 8) + 1;
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 8000354:	2b00      	cmp	r3, #0
 8000356:	da00      	bge.n	800035a <CAN_Send_Network_Packet+0x72>
 8000358:	3307      	adds	r3, #7
 800035a:	10db      	asrs	r3, r3, #3
 800035c:	b25b      	sxtb	r3, r3
 800035e:	b2db      	uxtb	r3, r3
 8000360:	3301      	adds	r3, #1
 8000362:	b2da      	uxtb	r2, r3
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	}
	memcpy(TxBuffer->NetworkBuffer, Data, DataLength);
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	79fa      	ldrb	r2, [r7, #7]
 800036e:	68b9      	ldr	r1, [r7, #8]
 8000370:	4618      	mov	r0, r3
 8000372:	f002 f9eb 	bl	800274c <memcpy>
	TxBuffer->NetworkBuffer[TxBuffer->Buffer_Index] =
			TxBuffer->PacketDataLength;
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	f993 10c8 	ldrsb.w	r1, [r3, #200]	; 0xc8
	TxBuffer->NetworkBuffer[TxBuffer->Buffer_Index] =
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000382:	461a      	mov	r2, r3
			TxBuffer->PacketDataLength;
 8000384:	b2c9      	uxtb	r1, r1
	TxBuffer->NetworkBuffer[TxBuffer->Buffer_Index] =
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	5499      	strb	r1, [r3, r2]
	TxBuffer->NetworkBuffer[TxBuffer->Buffer_Index + 1] = TxBuffer->CRCValue;
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000390:	3301      	adds	r3, #1
 8000392:	68fa      	ldr	r2, [r7, #12]
 8000394:	f892 10c9 	ldrb.w	r1, [r2, #201]	; 0xc9
 8000398:	68fa      	ldr	r2, [r7, #12]
 800039a:	54d1      	strb	r1, [r2, r3]
	TxBuffer->Buffer_Index = 0;
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	2200      	movs	r2, #0
 80003a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	return CAN_Send_DataLink_Separate(TxBuffer, Data, pStID);
 80003a4:	683a      	ldr	r2, [r7, #0]
 80003a6:	68b9      	ldr	r1, [r7, #8]
 80003a8:	68f8      	ldr	r0, [r7, #12]
 80003aa:	f000 f805 	bl	80003b8 <CAN_Send_DataLink_Separate>
 80003ae:	4603      	mov	r3, r0
}
 80003b0:	4618      	mov	r0, r3
 80003b2:	3710      	adds	r7, #16
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}

080003b8 <CAN_Send_DataLink_Separate>:
uint8_t CAN_Send_DataLink_Separate(CANBufferHandleStruct *TxBuffer,
		uint8_t *Data, CANConfigIDTxtypedef *pStID) {
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b088      	sub	sp, #32
 80003bc:	af00      	add	r7, sp, #0
 80003be:	60f8      	str	r0, [r7, #12]
 80003c0:	60b9      	str	r1, [r7, #8]
 80003c2:	607a      	str	r2, [r7, #4]
	uint8_t PacketLength = TxBuffer->PacketDataLength;
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 80003ca:	77fb      	strb	r3, [r7, #31]
	uint8_t NumberOfFrame = TxBuffer->NumberOfFrame;
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80003d2:	75fb      	strb	r3, [r7, #23]
	TxBuffer->Buffer[NumberOfFrame - 1][6] = PacketLength;
 80003d4:	7dfb      	ldrb	r3, [r7, #23]
 80003d6:	3b01      	subs	r3, #1
 80003d8:	68fa      	ldr	r2, [r7, #12]
 80003da:	00db      	lsls	r3, r3, #3
 80003dc:	4413      	add	r3, r2
 80003de:	7ffa      	ldrb	r2, [r7, #31]
 80003e0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	TxBuffer->Buffer[NumberOfFrame - 1][7] = TxBuffer->CRCValue;
 80003e4:	7dfb      	ldrb	r3, [r7, #23]
 80003e6:	3b01      	subs	r3, #1
 80003e8:	68fa      	ldr	r2, [r7, #12]
 80003ea:	f892 10c9 	ldrb.w	r1, [r2, #201]	; 0xc9
 80003ee:	68fa      	ldr	r2, [r7, #12]
 80003f0:	00db      	lsls	r3, r3, #3
 80003f2:	4413      	add	r3, r2
 80003f4:	460a      	mov	r2, r1
 80003f6:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	for (int i = 0; i < NumberOfFrame; i++) {
 80003fa:	2300      	movs	r3, #0
 80003fc:	61bb      	str	r3, [r7, #24]
 80003fe:	e033      	b.n	8000468 <CAN_Send_DataLink_Separate+0xb0>
		for (TxBuffer->Buffer_Index = 0; TxBuffer->Buffer_Index < 8;
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	2200      	movs	r2, #0
 8000404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8000408:	e021      	b.n	800044e <CAN_Send_DataLink_Separate+0x96>
				TxBuffer->Buffer_Index++) {
			TxBuffer->Buffer[i][TxBuffer->Buffer_Index] =
					TxBuffer->NetworkBuffer[i * 8 + TxBuffer->Buffer_Index];
 800040a:	69bb      	ldr	r3, [r7, #24]
 800040c:	00db      	lsls	r3, r3, #3
 800040e:	68fa      	ldr	r2, [r7, #12]
 8000410:	f892 2041 	ldrb.w	r2, [r2, #65]	; 0x41
 8000414:	4413      	add	r3, r2
			TxBuffer->Buffer[i][TxBuffer->Buffer_Index] =
 8000416:	68fa      	ldr	r2, [r7, #12]
 8000418:	f892 2041 	ldrb.w	r2, [r2, #65]	; 0x41
 800041c:	4610      	mov	r0, r2
					TxBuffer->NetworkBuffer[i * 8 + TxBuffer->Buffer_Index];
 800041e:	68fa      	ldr	r2, [r7, #12]
 8000420:	5cd1      	ldrb	r1, [r2, r3]
			TxBuffer->Buffer[i][TxBuffer->Buffer_Index] =
 8000422:	68fa      	ldr	r2, [r7, #12]
 8000424:	69bb      	ldr	r3, [r7, #24]
 8000426:	00db      	lsls	r3, r3, #3
 8000428:	4413      	add	r3, r2
 800042a:	4403      	add	r3, r0
 800042c:	3348      	adds	r3, #72	; 0x48
 800042e:	460a      	mov	r2, r1
 8000430:	701a      	strb	r2, [r3, #0]
			PacketLength--;
 8000432:	7ffb      	ldrb	r3, [r7, #31]
 8000434:	3b01      	subs	r3, #1
 8000436:	77fb      	strb	r3, [r7, #31]
			if (PacketLength == 2) {
 8000438:	7ffb      	ldrb	r3, [r7, #31]
 800043a:	2b02      	cmp	r3, #2
 800043c:	d00d      	beq.n	800045a <CAN_Send_DataLink_Separate+0xa2>
				TxBuffer->Buffer_Index++) {
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000444:	3301      	adds	r3, #1
 8000446:	b2da      	uxtb	r2, r3
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		for (TxBuffer->Buffer_Index = 0; TxBuffer->Buffer_Index < 8;
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000454:	2b07      	cmp	r3, #7
 8000456:	d9d8      	bls.n	800040a <CAN_Send_DataLink_Separate+0x52>
 8000458:	e000      	b.n	800045c <CAN_Send_DataLink_Separate+0xa4>
				break;
 800045a:	bf00      	nop
			}
		}
		if (PacketLength == 2) {
 800045c:	7ffb      	ldrb	r3, [r7, #31]
 800045e:	2b02      	cmp	r3, #2
 8000460:	d007      	beq.n	8000472 <CAN_Send_DataLink_Separate+0xba>
	for (int i = 0; i < NumberOfFrame; i++) {
 8000462:	69bb      	ldr	r3, [r7, #24]
 8000464:	3301      	adds	r3, #1
 8000466:	61bb      	str	r3, [r7, #24]
 8000468:	7dfb      	ldrb	r3, [r7, #23]
 800046a:	69ba      	ldr	r2, [r7, #24]
 800046c:	429a      	cmp	r2, r3
 800046e:	dbc7      	blt.n	8000400 <CAN_Send_DataLink_Separate+0x48>
 8000470:	e000      	b.n	8000474 <CAN_Send_DataLink_Separate+0xbc>
			break;
 8000472:	bf00      	nop
		}
	}
	TxBuffer->Buffer_Index = 0;
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	2200      	movs	r2, #0
 8000478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	return CAN_Send_Physical_Send(TxBuffer, Data, pStID);
 800047c:	687a      	ldr	r2, [r7, #4]
 800047e:	68b9      	ldr	r1, [r7, #8]
 8000480:	68f8      	ldr	r0, [r7, #12]
 8000482:	f000 f805 	bl	8000490 <CAN_Send_Physical_Send>
 8000486:	4603      	mov	r3, r0
}
 8000488:	4618      	mov	r0, r3
 800048a:	3720      	adds	r7, #32
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}

08000490 <CAN_Send_Physical_Send>:
uint8_t CAN_Send_Physical_Send(CANBufferHandleStruct *TxBuffer, uint8_t *Data,
		CANConfigIDTxtypedef *pIDtype) {
 8000490:	b580      	push	{r7, lr}
 8000492:	b08e      	sub	sp, #56	; 0x38
 8000494:	af00      	add	r7, sp, #0
 8000496:	60f8      	str	r0, [r7, #12]
 8000498:	60b9      	str	r1, [r7, #8]
 800049a:	607a      	str	r2, [r7, #4]

	uint32_t Txmailbox;
	CAN_TxHeaderTypeDef Txheader;

	uint8_t Message_ID = pIDtype->MessageType;
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	881b      	ldrh	r3, [r3, #0]
 80004a0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint8_t Sender_ID = pIDtype->SenderID;
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	885b      	ldrh	r3, [r3, #2]
 80004a8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	uint8_t FrameType = TxBuffer->FrameType_Index;
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80004b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t NumberOfFrame = TxBuffer->NumberOfFrame;
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80004bc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	uint16_t StdId = 0x00;
 80004c0:	2300      	movs	r3, #0
 80004c2:	86bb      	strh	r3, [r7, #52]	; 0x34

	StdId |= Message_ID;
 80004c4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80004c8:	b29a      	uxth	r2, r3
 80004ca:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80004cc:	4313      	orrs	r3, r2
 80004ce:	86bb      	strh	r3, [r7, #52]	; 0x34
	StdId = (StdId << 4) | Sender_ID;
 80004d0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80004d2:	011b      	lsls	r3, r3, #4
 80004d4:	b21a      	sxth	r2, r3
 80004d6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80004da:	b21b      	sxth	r3, r3
 80004dc:	4313      	orrs	r3, r2
 80004de:	b21b      	sxth	r3, r3
 80004e0:	86bb      	strh	r3, [r7, #52]	; 0x34
	StdId = (StdId << 3) | TxBuffer->FrameType_Index;
 80004e2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80004e4:	00db      	lsls	r3, r3, #3
 80004e6:	b21a      	sxth	r2, r3
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80004ee:	b21b      	sxth	r3, r3
 80004f0:	4313      	orrs	r3, r2
 80004f2:	b21b      	sxth	r3, r3
 80004f4:	86bb      	strh	r3, [r7, #52]	; 0x34

	Txheader.DLC = 8;
 80004f6:	2308      	movs	r3, #8
 80004f8:	627b      	str	r3, [r7, #36]	; 0x24
	Txheader.RTR = CAN_RTR_DATA;
 80004fa:	2300      	movs	r3, #0
 80004fc:	623b      	str	r3, [r7, #32]
	Txheader.IDE = CAN_ID_STD;
 80004fe:	2300      	movs	r3, #0
 8000500:	61fb      	str	r3, [r7, #28]

	CAN_Store_Data(TxBuffer, pIDtype);
 8000502:	6879      	ldr	r1, [r7, #4]
 8000504:	68f8      	ldr	r0, [r7, #12]
 8000506:	f000 f847 	bl	8000598 <CAN_Store_Data>

	for (int8_t i = NumberOfFrame - 1; i >= 0; i--) {
 800050a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800050e:	3b01      	subs	r3, #1
 8000510:	b2db      	uxtb	r3, r3
 8000512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8000516:	e034      	b.n	8000582 <CAN_Send_Physical_Send+0xf2>
		Txheader.StdId = StdId;
 8000518:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800051a:	617b      	str	r3, [r7, #20]
		if (HAL_CAN_AddTxMessage(&hcan, &Txheader, TxBuffer->Buffer[i],
 800051c:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000520:	3309      	adds	r3, #9
 8000522:	00db      	lsls	r3, r3, #3
 8000524:	68fa      	ldr	r2, [r7, #12]
 8000526:	441a      	add	r2, r3
 8000528:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800052c:	f107 0114 	add.w	r1, r7, #20
 8000530:	4818      	ldr	r0, [pc, #96]	; (8000594 <CAN_Send_Physical_Send+0x104>)
 8000532:	f000 fe29 	bl	8001188 <HAL_CAN_AddTxMessage>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <CAN_Send_Physical_Send+0xb0>
				&Txmailbox) != HAL_OK) {
			Error_Handler();
 800053c:	f000 fa4e 	bl	80009dc <Error_Handler>
		}
		while (HAL_CAN_IsTxMessagePending(&hcan, Txmailbox))
 8000540:	bf00      	nop
 8000542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000544:	4619      	mov	r1, r3
 8000546:	4813      	ldr	r0, [pc, #76]	; (8000594 <CAN_Send_Physical_Send+0x104>)
 8000548:	f000 feed 	bl	8001326 <HAL_CAN_IsTxMessagePending>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d1f7      	bne.n	8000542 <CAN_Send_Physical_Send+0xb2>
			;

		StdId = StdId >> 3;
 8000552:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000554:	08db      	lsrs	r3, r3, #3
 8000556:	86bb      	strh	r3, [r7, #52]	; 0x34
		FrameType++;
 8000558:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800055c:	3301      	adds	r3, #1
 800055e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		StdId = (StdId << 3) | FrameType;
 8000562:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000564:	00db      	lsls	r3, r3, #3
 8000566:	b21a      	sxth	r2, r3
 8000568:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800056c:	b21b      	sxth	r3, r3
 800056e:	4313      	orrs	r3, r2
 8000570:	b21b      	sxth	r3, r3
 8000572:	86bb      	strh	r3, [r7, #52]	; 0x34
	for (int8_t i = NumberOfFrame - 1; i >= 0; i--) {
 8000574:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000578:	b2db      	uxtb	r3, r3
 800057a:	3b01      	subs	r3, #1
 800057c:	b2db      	uxtb	r3, r3
 800057e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8000582:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000586:	2b00      	cmp	r3, #0
 8000588:	dac6      	bge.n	8000518 <CAN_Send_Physical_Send+0x88>

	}
	return HAL_OK;
 800058a:	2300      	movs	r3, #0
}
 800058c:	4618      	mov	r0, r3
 800058e:	3738      	adds	r7, #56	; 0x38
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000028 	.word	0x20000028

08000598 <CAN_Store_Data>:

uint8_t CAN_Store_Data(CANBufferHandleStruct *Store, CANConfigIDTxtypedef *ID) {
 8000598:	b480      	push	{r7}
 800059a:	b087      	sub	sp, #28
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	6039      	str	r1, [r7, #0]
	uint8_t FrameType = Store->FrameType_Index;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80005a8:	75fb      	strb	r3, [r7, #23]
	uint8_t BufferIndex = Store->Buffer_Index;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80005b0:	75bb      	strb	r3, [r7, #22]
	uint8_t NumberFrame = Store->NumberOfFrame;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80005b8:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < NumberFrame; i++) {
 80005ba:	2300      	movs	r3, #0
 80005bc:	613b      	str	r3, [r7, #16]
 80005be:	e03b      	b.n	8000638 <CAN_Store_Data+0xa0>
		Store->StoreData[i][BufferIndex] = ID->SenderID;
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	885a      	ldrh	r2, [r3, #2]
 80005c4:	7dbb      	ldrb	r3, [r7, #22]
 80005c6:	b2d0      	uxtb	r0, r2
 80005c8:	6879      	ldr	r1, [r7, #4]
 80005ca:	693a      	ldr	r2, [r7, #16]
 80005cc:	00d2      	lsls	r2, r2, #3
 80005ce:	440a      	add	r2, r1
 80005d0:	4413      	add	r3, r2
 80005d2:	3388      	adds	r3, #136	; 0x88
 80005d4:	4602      	mov	r2, r0
 80005d6:	701a      	strb	r2, [r3, #0]
		BufferIndex++;
 80005d8:	7dbb      	ldrb	r3, [r7, #22]
 80005da:	3301      	adds	r3, #1
 80005dc:	75bb      	strb	r3, [r7, #22]
		Store->StoreData[i][BufferIndex] = FrameType;
 80005de:	7dbb      	ldrb	r3, [r7, #22]
 80005e0:	6879      	ldr	r1, [r7, #4]
 80005e2:	693a      	ldr	r2, [r7, #16]
 80005e4:	00d2      	lsls	r2, r2, #3
 80005e6:	440a      	add	r2, r1
 80005e8:	4413      	add	r3, r2
 80005ea:	3388      	adds	r3, #136	; 0x88
 80005ec:	7dfa      	ldrb	r2, [r7, #23]
 80005ee:	701a      	strb	r2, [r3, #0]
		BufferIndex++;
 80005f0:	7dbb      	ldrb	r3, [r7, #22]
 80005f2:	3301      	adds	r3, #1
 80005f4:	75bb      	strb	r3, [r7, #22]
		for (; BufferIndex < 10; BufferIndex++) {
 80005f6:	e014      	b.n	8000622 <CAN_Store_Data+0x8a>
			Store->StoreData[i][BufferIndex] =
					Store->Buffer[i][BufferIndex - 2];
 80005f8:	7dbb      	ldrb	r3, [r7, #22]
 80005fa:	1e9a      	subs	r2, r3, #2
			Store->StoreData[i][BufferIndex] =
 80005fc:	7dbb      	ldrb	r3, [r7, #22]
					Store->Buffer[i][BufferIndex - 2];
 80005fe:	6878      	ldr	r0, [r7, #4]
 8000600:	6939      	ldr	r1, [r7, #16]
 8000602:	00c9      	lsls	r1, r1, #3
 8000604:	4401      	add	r1, r0
 8000606:	440a      	add	r2, r1
 8000608:	3248      	adds	r2, #72	; 0x48
 800060a:	7810      	ldrb	r0, [r2, #0]
			Store->StoreData[i][BufferIndex] =
 800060c:	6879      	ldr	r1, [r7, #4]
 800060e:	693a      	ldr	r2, [r7, #16]
 8000610:	00d2      	lsls	r2, r2, #3
 8000612:	440a      	add	r2, r1
 8000614:	4413      	add	r3, r2
 8000616:	3388      	adds	r3, #136	; 0x88
 8000618:	4602      	mov	r2, r0
 800061a:	701a      	strb	r2, [r3, #0]
		for (; BufferIndex < 10; BufferIndex++) {
 800061c:	7dbb      	ldrb	r3, [r7, #22]
 800061e:	3301      	adds	r3, #1
 8000620:	75bb      	strb	r3, [r7, #22]
 8000622:	7dbb      	ldrb	r3, [r7, #22]
 8000624:	2b09      	cmp	r3, #9
 8000626:	d9e7      	bls.n	80005f8 <CAN_Store_Data+0x60>
		}
		FrameType++;
 8000628:	7dfb      	ldrb	r3, [r7, #23]
 800062a:	3301      	adds	r3, #1
 800062c:	75fb      	strb	r3, [r7, #23]
		BufferIndex = 0;
 800062e:	2300      	movs	r3, #0
 8000630:	75bb      	strb	r3, [r7, #22]
	for (int i = 0; i < NumberFrame; i++) {
 8000632:	693b      	ldr	r3, [r7, #16]
 8000634:	3301      	adds	r3, #1
 8000636:	613b      	str	r3, [r7, #16]
 8000638:	7bfb      	ldrb	r3, [r7, #15]
 800063a:	693a      	ldr	r2, [r7, #16]
 800063c:	429a      	cmp	r2, r3
 800063e:	dbbf      	blt.n	80005c0 <CAN_Store_Data+0x28>
	}
	return HAL_OK;
 8000640:	2300      	movs	r3, #0
}
 8000642:	4618      	mov	r0, r3
 8000644:	371c      	adds	r7, #28
 8000646:	46bd      	mov	sp, r7
 8000648:	bc80      	pop	{r7}
 800064a:	4770      	bx	lr

0800064c <CAN_Config_filtering>:
		memcpy(Data, AppBuffer->NetworkBuffer, AppDataLength);
	}
	CAN_Monitor_Flow(FlagNotification, FlagFrame);
	return HAL_OK;
}
uint32_t CAN_Config_filtering(uint8_t FIFO) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b08c      	sub	sp, #48	; 0x30
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
	CAN_FilterTypeDef Can_filter_init;
	Can_filter_init.FilterActivation = ENABLE;
 8000656:	2301      	movs	r3, #1
 8000658:	62bb      	str	r3, [r7, #40]	; 0x28
	Can_filter_init.FilterBank = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	61fb      	str	r3, [r7, #28]
	Can_filter_init.FilterFIFOAssignment = FIFO;
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	61bb      	str	r3, [r7, #24]
	Can_filter_init.FilterIdHigh = 0x0000;
 8000662:	2300      	movs	r3, #0
 8000664:	60bb      	str	r3, [r7, #8]
	Can_filter_init.FilterIdLow = 0x0000;
 8000666:	2300      	movs	r3, #0
 8000668:	60fb      	str	r3, [r7, #12]
	Can_filter_init.FilterMaskIdHigh = 0x0000;
 800066a:	2300      	movs	r3, #0
 800066c:	613b      	str	r3, [r7, #16]
	Can_filter_init.FilterMaskIdLow = 0x0000;
 800066e:	2300      	movs	r3, #0
 8000670:	617b      	str	r3, [r7, #20]
	Can_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 8000672:	2300      	movs	r3, #0
 8000674:	623b      	str	r3, [r7, #32]
	Can_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 8000676:	2301      	movs	r3, #1
 8000678:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_CAN_ConfigFilter(&hcan, &Can_filter_init) != HAL_OK) {
 800067a:	f107 0308 	add.w	r3, r7, #8
 800067e:	4619      	mov	r1, r3
 8000680:	4806      	ldr	r0, [pc, #24]	; (800069c <CAN_Config_filtering+0x50>)
 8000682:	f000 fc74 	bl	8000f6e <HAL_CAN_ConfigFilter>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <CAN_Config_filtering+0x44>
		Error_Handler();
 800068c:	f000 f9a6 	bl	80009dc <Error_Handler>
	}
	return HAL_OK;
 8000690:	2300      	movs	r3, #0
}
 8000692:	4618      	mov	r0, r3
 8000694:	3730      	adds	r7, #48	; 0x30
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000028 	.word	0x20000028

080006a0 <crc_8>:

#include "CRC.h"
#include "stdint.h"
unsigned char table[256] = {0};

uint8_t crc_8(uint8_t* data, uint8_t len) {
 80006a0:	b480      	push	{r7}
 80006a2:	b087      	sub	sp, #28
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	460b      	mov	r3, r1
 80006aa:	70fb      	strb	r3, [r7, #3]
  unsigned crc = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]
  int i, j;
  for (j = len; j; j--, data++) {
 80006b0:	78fb      	ldrb	r3, [r7, #3]
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	e023      	b.n	80006fe <crc_8+0x5e>
    crc ^= (*data << 8);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	021b      	lsls	r3, r3, #8
 80006bc:	461a      	mov	r2, r3
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	4053      	eors	r3, r2
 80006c2:	617b      	str	r3, [r7, #20]
    for(i = 8; i; i--) {
 80006c4:	2308      	movs	r3, #8
 80006c6:	613b      	str	r3, [r7, #16]
 80006c8:	e010      	b.n	80006ec <crc_8+0x4c>
      if (crc & 0x8000)
 80006ca:	697b      	ldr	r3, [r7, #20]
 80006cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d005      	beq.n	80006e0 <crc_8+0x40>
        crc ^= (0x1070 << 3);
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	f483 4303 	eor.w	r3, r3, #33536	; 0x8300
 80006da:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 80006de:	617b      	str	r3, [r7, #20]
      crc <<= 1;
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	617b      	str	r3, [r7, #20]
    for(i = 8; i; i--) {
 80006e6:	693b      	ldr	r3, [r7, #16]
 80006e8:	3b01      	subs	r3, #1
 80006ea:	613b      	str	r3, [r7, #16]
 80006ec:	693b      	ldr	r3, [r7, #16]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d1eb      	bne.n	80006ca <crc_8+0x2a>
  for (j = len; j; j--, data++) {
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	3b01      	subs	r3, #1
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	3301      	adds	r3, #1
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d1d8      	bne.n	80006b6 <crc_8+0x16>
    }
  }
  return (uint8_t)(crc >> 8);
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	0a1b      	lsrs	r3, r3, #8
 8000708:	b2db      	uxtb	r3, r3
}
 800070a:	4618      	mov	r0, r3
 800070c:	371c      	adds	r7, #28
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr

08000714 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	f5ad 6de7 	sub.w	sp, sp, #1848	; 0x738
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800071c:	f000 faca 	bl	8000cb4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000720:	f000 f86a 	bl	80007f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000724:	f000 f90e 	bl	8000944 <MX_GPIO_Init>
  MX_CAN_Init();
 8000728:	f000 f8ac 	bl	8000884 <MX_CAN_Init>
  MX_USART1_UART_Init();
 800072c:	f000 f8e0 	bl	80008f0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  CAN_Config_filtering(CAN_FILTER_FIFO0);
 8000730:	2000      	movs	r0, #0
 8000732:	f7ff ff8b 	bl	800064c <CAN_Config_filtering>
  //CAN_Config_filtering(CAN_FILTER_FIFO1);
  if(HAL_CAN_Start(&hcan)!=HAL_OK)
 8000736:	482f      	ldr	r0, [pc, #188]	; (80007f4 <main+0xe0>)
 8000738:	f000 fce2 	bl	8001100 <HAL_CAN_Start>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <main+0x32>
     {
     	Error_Handler();
 8000742:	f000 f94b 	bl	80009dc <Error_Handler>
     }
  uint32_t Txmailbox;
  CANConfigIDTxtypedef pIDtype;
  pIDtype.MessageType=COMMAND_FRAME;
 8000746:	2301      	movs	r3, #1
 8000748:	f8a7 3724 	strh.w	r3, [r7, #1828]	; 0x724
  pIDtype.SenderID=OBSTALCE7;
 800074c:	230e      	movs	r3, #14
 800074e:	f8a7 3726 	strh.w	r3, [r7, #1830]	; 0x726
  CANBufferHandleStruct Buffer;
  CANBufferHandleStruct_Init(&Buffer);
 8000752:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff fcf8 	bl	800014c <CANBufferHandleStruct_Init>
  CAN_RxHeaderTypeDef RxHeader;
  FlagRecNotification FlagRec;
  FlagFrameHandle Flag;
  FlagsFrameHandle_Init(&Flag);
 800075c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff fd4c 	bl	80001fe <FlagsFrameHandle_Init>
  uint8_t DataRec[16];
  uint8_t Data[64]={0};
 8000766:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 800076a:	f5a3 63da 	sub.w	r3, r3, #1744	; 0x6d0
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	3304      	adds	r3, #4
 8000774:	223c      	movs	r2, #60	; 0x3c
 8000776:	2100      	movs	r1, #0
 8000778:	4618      	mov	r0, r3
 800077a:	f001 ffbb 	bl	80026f4 <memset>
  uint8_t mess[100]={0};
 800077e:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 8000782:	f2a3 7334 	subw	r3, r3, #1844	; 0x734
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	3304      	adds	r3, #4
 800078c:	2260      	movs	r2, #96	; 0x60
 800078e:	2100      	movs	r1, #0
 8000790:	4618      	mov	r0, r3
 8000792:	f001 ffaf 	bl	80026f4 <memset>
  uint8_t Len=0;
 8000796:	2300      	movs	r3, #0
 8000798:	f887 372f 	strb.w	r3, [r7, #1839]	; 0x72f
  uint32_t cnt=0;
 800079c:	2300      	movs	r3, #0
 800079e:	f8c7 3728 	str.w	r3, [r7, #1832]	; 0x728
  uint8_t k=0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	f887 3737 	strb.w	r3, [r7, #1847]	; 0x737
  for (int i=0; i<DATA_TEST;i++)
 80007a8:	2300      	movs	r3, #0
 80007aa:	f8c7 3730 	str.w	r3, [r7, #1840]	; 0x730
 80007ae:	e013      	b.n	80007d8 <main+0xc4>
  {
	  Data[i]=k;
 80007b0:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 80007b4:	f5a3 62da 	sub.w	r2, r3, #1744	; 0x6d0
 80007b8:	f8d7 3730 	ldr.w	r3, [r7, #1840]	; 0x730
 80007bc:	4413      	add	r3, r2
 80007be:	f897 2737 	ldrb.w	r2, [r7, #1847]	; 0x737
 80007c2:	701a      	strb	r2, [r3, #0]
	  k=k+1;
 80007c4:	f897 3737 	ldrb.w	r3, [r7, #1847]	; 0x737
 80007c8:	3301      	adds	r3, #1
 80007ca:	f887 3737 	strb.w	r3, [r7, #1847]	; 0x737
  for (int i=0; i<DATA_TEST;i++)
 80007ce:	f8d7 3730 	ldr.w	r3, [r7, #1840]	; 0x730
 80007d2:	3301      	adds	r3, #1
 80007d4:	f8c7 3730 	str.w	r3, [r7, #1840]	; 0x730
 80007d8:	f8d7 3730 	ldr.w	r3, [r7, #1840]	; 0x730
 80007dc:	2b3d      	cmp	r3, #61	; 0x3d
 80007de:	dde7      	ble.n	80007b0 <main+0x9c>

    /* USER CODE BEGIN 3 */
	  //CAN_Send_Dataframe(pIDtype, Data, Txmailbox, TxBufferSend)
	  //CAN_Send_DataLink_Separate(&Buffer, Data);
	 // CAN_DataLink_Separate(&Buffer,Data,9);
	  CAN_Send_Application(&Buffer, &pIDtype, Data,DATA_TEST);
 80007e0:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80007e4:	f207 7124 	addw	r1, r7, #1828	; 0x724
 80007e8:	f507 70f4 	add.w	r0, r7, #488	; 0x1e8
 80007ec:	233e      	movs	r3, #62	; 0x3e
 80007ee:	f7ff fd69 	bl	80002c4 <CAN_Send_Application>
 80007f2:	e7f5      	b.n	80007e0 <main+0xcc>
 80007f4:	20000028 	.word	0x20000028

080007f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b090      	sub	sp, #64	; 0x40
 80007fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fe:	f107 0318 	add.w	r3, r7, #24
 8000802:	2228      	movs	r2, #40	; 0x28
 8000804:	2100      	movs	r1, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f001 ff74 	bl	80026f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800080c:	1d3b      	adds	r3, r7, #4
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
 8000818:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800081a:	2301      	movs	r3, #1
 800081c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800081e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000822:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000824:	2300      	movs	r3, #0
 8000826:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000828:	2301      	movs	r3, #1
 800082a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800082c:	2302      	movs	r3, #2
 800082e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000830:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000834:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000836:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800083a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083c:	f107 0318 	add.w	r3, r7, #24
 8000840:	4618      	mov	r0, r3
 8000842:	f001 fa69 	bl	8001d18 <HAL_RCC_OscConfig>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800084c:	f000 f8c6 	bl	80009dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000850:	230f      	movs	r3, #15
 8000852:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000854:	2302      	movs	r3, #2
 8000856:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000858:	2300      	movs	r3, #0
 800085a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800085c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000860:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	2102      	movs	r1, #2
 800086a:	4618      	mov	r0, r3
 800086c:	f001 fcd6 	bl	800221c <HAL_RCC_ClockConfig>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000876:	f000 f8b1 	bl	80009dc <Error_Handler>
  }
}
 800087a:	bf00      	nop
 800087c:	3740      	adds	r7, #64	; 0x40
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
	...

08000884 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000888:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <MX_CAN_Init+0x64>)
 800088a:	4a18      	ldr	r2, [pc, #96]	; (80008ec <MX_CAN_Init+0x68>)
 800088c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 800088e:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <MX_CAN_Init+0x64>)
 8000890:	2204      	movs	r2, #4
 8000892:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000894:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <MX_CAN_Init+0x64>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800089a:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <MX_CAN_Init+0x64>)
 800089c:	2200      	movs	r2, #0
 800089e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 80008a0:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_CAN_Init+0x64>)
 80008a2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80008a6:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <MX_CAN_Init+0x64>)
 80008aa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80008ae:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80008b0:	4b0d      	ldr	r3, [pc, #52]	; (80008e8 <MX_CAN_Init+0x64>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80008b6:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_CAN_Init+0x64>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80008bc:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <MX_CAN_Init+0x64>)
 80008be:	2200      	movs	r2, #0
 80008c0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80008c2:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_CAN_Init+0x64>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80008c8:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <MX_CAN_Init+0x64>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_CAN_Init+0x64>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80008d4:	4804      	ldr	r0, [pc, #16]	; (80008e8 <MX_CAN_Init+0x64>)
 80008d6:	f000 fa4f 	bl	8000d78 <HAL_CAN_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80008e0:	f000 f87c 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20000028 	.word	0x20000028
 80008ec:	40006400 	.word	0x40006400

080008f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008f4:	4b11      	ldr	r3, [pc, #68]	; (800093c <MX_USART1_UART_Init+0x4c>)
 80008f6:	4a12      	ldr	r2, [pc, #72]	; (8000940 <MX_USART1_UART_Init+0x50>)
 80008f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008fa:	4b10      	ldr	r3, [pc, #64]	; (800093c <MX_USART1_UART_Init+0x4c>)
 80008fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000900:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <MX_USART1_UART_Init+0x4c>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000908:	4b0c      	ldr	r3, [pc, #48]	; (800093c <MX_USART1_UART_Init+0x4c>)
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800090e:	4b0b      	ldr	r3, [pc, #44]	; (800093c <MX_USART1_UART_Init+0x4c>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000914:	4b09      	ldr	r3, [pc, #36]	; (800093c <MX_USART1_UART_Init+0x4c>)
 8000916:	220c      	movs	r2, #12
 8000918:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091a:	4b08      	ldr	r3, [pc, #32]	; (800093c <MX_USART1_UART_Init+0x4c>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <MX_USART1_UART_Init+0x4c>)
 8000922:	2200      	movs	r2, #0
 8000924:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000926:	4805      	ldr	r0, [pc, #20]	; (800093c <MX_USART1_UART_Init+0x4c>)
 8000928:	f001 fe06 	bl	8002538 <HAL_UART_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000932:	f000 f853 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000050 	.word	0x20000050
 8000940:	40013800 	.word	0x40013800

08000944 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b088      	sub	sp, #32
 8000948:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094a:	f107 0310 	add.w	r3, r7, #16
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000958:	4b1e      	ldr	r3, [pc, #120]	; (80009d4 <MX_GPIO_Init+0x90>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	4a1d      	ldr	r2, [pc, #116]	; (80009d4 <MX_GPIO_Init+0x90>)
 800095e:	f043 0310 	orr.w	r3, r3, #16
 8000962:	6193      	str	r3, [r2, #24]
 8000964:	4b1b      	ldr	r3, [pc, #108]	; (80009d4 <MX_GPIO_Init+0x90>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	f003 0310 	and.w	r3, r3, #16
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000970:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <MX_GPIO_Init+0x90>)
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	4a17      	ldr	r2, [pc, #92]	; (80009d4 <MX_GPIO_Init+0x90>)
 8000976:	f043 0320 	orr.w	r3, r3, #32
 800097a:	6193      	str	r3, [r2, #24]
 800097c:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <MX_GPIO_Init+0x90>)
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	f003 0320 	and.w	r3, r3, #32
 8000984:	60bb      	str	r3, [r7, #8]
 8000986:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000988:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <MX_GPIO_Init+0x90>)
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	4a11      	ldr	r2, [pc, #68]	; (80009d4 <MX_GPIO_Init+0x90>)
 800098e:	f043 0304 	orr.w	r3, r3, #4
 8000992:	6193      	str	r3, [r2, #24]
 8000994:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <MX_GPIO_Init+0x90>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	f003 0304 	and.w	r3, r3, #4
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80009a0:	2200      	movs	r2, #0
 80009a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009a6:	480c      	ldr	r0, [pc, #48]	; (80009d8 <MX_GPIO_Init+0x94>)
 80009a8:	f001 f99e 	bl	8001ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80009ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b2:	2301      	movs	r3, #1
 80009b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2302      	movs	r3, #2
 80009bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009be:	f107 0310 	add.w	r3, r7, #16
 80009c2:	4619      	mov	r1, r3
 80009c4:	4804      	ldr	r0, [pc, #16]	; (80009d8 <MX_GPIO_Init+0x94>)
 80009c6:	f001 f80b 	bl	80019e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009ca:	bf00      	nop
 80009cc:	3720      	adds	r7, #32
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40021000 	.word	0x40021000
 80009d8:	40011000 	.word	0x40011000

080009dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e0:	b672      	cpsid	i
}
 80009e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <Error_Handler+0x8>
	...

080009e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009ee:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <HAL_MspInit+0x5c>)
 80009f0:	699b      	ldr	r3, [r3, #24]
 80009f2:	4a14      	ldr	r2, [pc, #80]	; (8000a44 <HAL_MspInit+0x5c>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	6193      	str	r3, [r2, #24]
 80009fa:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <HAL_MspInit+0x5c>)
 80009fc:	699b      	ldr	r3, [r3, #24]
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	60bb      	str	r3, [r7, #8]
 8000a04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a06:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <HAL_MspInit+0x5c>)
 8000a08:	69db      	ldr	r3, [r3, #28]
 8000a0a:	4a0e      	ldr	r2, [pc, #56]	; (8000a44 <HAL_MspInit+0x5c>)
 8000a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a10:	61d3      	str	r3, [r2, #28]
 8000a12:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <HAL_MspInit+0x5c>)
 8000a14:	69db      	ldr	r3, [r3, #28]
 8000a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a1e:	4b0a      	ldr	r3, [pc, #40]	; (8000a48 <HAL_MspInit+0x60>)
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	4a04      	ldr	r2, [pc, #16]	; (8000a48 <HAL_MspInit+0x60>)
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	3714      	adds	r7, #20
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr
 8000a44:	40021000 	.word	0x40021000
 8000a48:	40010000 	.word	0x40010000

08000a4c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b088      	sub	sp, #32
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	f107 0310 	add.w	r3, r7, #16
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a2c      	ldr	r2, [pc, #176]	; (8000b18 <HAL_CAN_MspInit+0xcc>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d151      	bne.n	8000b10 <HAL_CAN_MspInit+0xc4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a6c:	4b2b      	ldr	r3, [pc, #172]	; (8000b1c <HAL_CAN_MspInit+0xd0>)
 8000a6e:	69db      	ldr	r3, [r3, #28]
 8000a70:	4a2a      	ldr	r2, [pc, #168]	; (8000b1c <HAL_CAN_MspInit+0xd0>)
 8000a72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a76:	61d3      	str	r3, [r2, #28]
 8000a78:	4b28      	ldr	r3, [pc, #160]	; (8000b1c <HAL_CAN_MspInit+0xd0>)
 8000a7a:	69db      	ldr	r3, [r3, #28]
 8000a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a84:	4b25      	ldr	r3, [pc, #148]	; (8000b1c <HAL_CAN_MspInit+0xd0>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	4a24      	ldr	r2, [pc, #144]	; (8000b1c <HAL_CAN_MspInit+0xd0>)
 8000a8a:	f043 0304 	orr.w	r3, r3, #4
 8000a8e:	6193      	str	r3, [r2, #24]
 8000a90:	4b22      	ldr	r3, [pc, #136]	; (8000b1c <HAL_CAN_MspInit+0xd0>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	f003 0304 	and.w	r3, r3, #4
 8000a98:	60bb      	str	r3, [r7, #8]
 8000a9a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000a9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000aa0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aaa:	f107 0310 	add.w	r3, r7, #16
 8000aae:	4619      	mov	r1, r3
 8000ab0:	481b      	ldr	r0, [pc, #108]	; (8000b20 <HAL_CAN_MspInit+0xd4>)
 8000ab2:	f000 ff95 	bl	80019e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000ab6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abc:	2302      	movs	r3, #2
 8000abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac4:	f107 0310 	add.w	r3, r7, #16
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4815      	ldr	r0, [pc, #84]	; (8000b20 <HAL_CAN_MspInit+0xd4>)
 8000acc:	f000 ff88 	bl	80019e0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	2013      	movs	r0, #19
 8000ad6:	f000 ff4c 	bl	8001972 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8000ada:	2013      	movs	r0, #19
 8000adc:	f000 ff65 	bl	80019aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	2014      	movs	r0, #20
 8000ae6:	f000 ff44 	bl	8001972 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000aea:	2014      	movs	r0, #20
 8000aec:	f000 ff5d 	bl	80019aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000af0:	2200      	movs	r2, #0
 8000af2:	2100      	movs	r1, #0
 8000af4:	2015      	movs	r0, #21
 8000af6:	f000 ff3c 	bl	8001972 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000afa:	2015      	movs	r0, #21
 8000afc:	f000 ff55 	bl	80019aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000b00:	2200      	movs	r2, #0
 8000b02:	2100      	movs	r1, #0
 8000b04:	2016      	movs	r0, #22
 8000b06:	f000 ff34 	bl	8001972 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000b0a:	2016      	movs	r0, #22
 8000b0c:	f000 ff4d 	bl	80019aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000b10:	bf00      	nop
 8000b12:	3720      	adds	r7, #32
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40006400 	.word	0x40006400
 8000b1c:	40021000 	.word	0x40021000
 8000b20:	40010800 	.word	0x40010800

08000b24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b088      	sub	sp, #32
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 0310 	add.w	r3, r7, #16
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a1c      	ldr	r2, [pc, #112]	; (8000bb0 <HAL_UART_MspInit+0x8c>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d131      	bne.n	8000ba8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b44:	4b1b      	ldr	r3, [pc, #108]	; (8000bb4 <HAL_UART_MspInit+0x90>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	4a1a      	ldr	r2, [pc, #104]	; (8000bb4 <HAL_UART_MspInit+0x90>)
 8000b4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b4e:	6193      	str	r3, [r2, #24]
 8000b50:	4b18      	ldr	r3, [pc, #96]	; (8000bb4 <HAL_UART_MspInit+0x90>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5c:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <HAL_UART_MspInit+0x90>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	4a14      	ldr	r2, [pc, #80]	; (8000bb4 <HAL_UART_MspInit+0x90>)
 8000b62:	f043 0304 	orr.w	r3, r3, #4
 8000b66:	6193      	str	r3, [r2, #24]
 8000b68:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <HAL_UART_MspInit+0x90>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	f003 0304 	and.w	r3, r3, #4
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b78:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b82:	f107 0310 	add.w	r3, r7, #16
 8000b86:	4619      	mov	r1, r3
 8000b88:	480b      	ldr	r0, [pc, #44]	; (8000bb8 <HAL_UART_MspInit+0x94>)
 8000b8a:	f000 ff29 	bl	80019e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9c:	f107 0310 	add.w	r3, r7, #16
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4805      	ldr	r0, [pc, #20]	; (8000bb8 <HAL_UART_MspInit+0x94>)
 8000ba4:	f000 ff1c 	bl	80019e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ba8:	bf00      	nop
 8000baa:	3720      	adds	r7, #32
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40013800 	.word	0x40013800
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	40010800 	.word	0x40010800

08000bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <NMI_Handler+0x4>

08000bc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc6:	e7fe      	b.n	8000bc6 <HardFault_Handler+0x4>

08000bc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <MemManage_Handler+0x4>

08000bce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <BusFault_Handler+0x4>

08000bd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <UsageFault_Handler+0x4>

08000bda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bc80      	pop	{r7}
 8000be4:	4770      	bx	lr

08000be6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bc80      	pop	{r7}
 8000bf0:	4770      	bx	lr

08000bf2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bc80      	pop	{r7}
 8000bfc:	4770      	bx	lr

08000bfe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c02:	f000 f89d 	bl	8000d40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
	...

08000c0c <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000c10:	4802      	ldr	r0, [pc, #8]	; (8000c1c <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8000c12:	f000 fbab 	bl	800136c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000028 	.word	0x20000028

08000c20 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000c24:	4802      	ldr	r0, [pc, #8]	; (8000c30 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000c26:	f000 fba1 	bl	800136c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000028 	.word	0x20000028

08000c34 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000c38:	4802      	ldr	r0, [pc, #8]	; (8000c44 <CAN1_RX1_IRQHandler+0x10>)
 8000c3a:	f000 fb97 	bl	800136c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20000028 	.word	0x20000028

08000c48 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000c4c:	4802      	ldr	r0, [pc, #8]	; (8000c58 <CAN1_SCE_IRQHandler+0x10>)
 8000c4e:	f000 fb8d 	bl	800136c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20000028 	.word	0x20000028

08000c5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr

08000c68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c68:	f7ff fff8 	bl	8000c5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c6c:	480b      	ldr	r0, [pc, #44]	; (8000c9c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c6e:	490c      	ldr	r1, [pc, #48]	; (8000ca0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c70:	4a0c      	ldr	r2, [pc, #48]	; (8000ca4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c74:	e002      	b.n	8000c7c <LoopCopyDataInit>

08000c76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c7a:	3304      	adds	r3, #4

08000c7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c80:	d3f9      	bcc.n	8000c76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c82:	4a09      	ldr	r2, [pc, #36]	; (8000ca8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c84:	4c09      	ldr	r4, [pc, #36]	; (8000cac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c88:	e001      	b.n	8000c8e <LoopFillZerobss>

08000c8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c8c:	3204      	adds	r2, #4

08000c8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c90:	d3fb      	bcc.n	8000c8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c92:	f001 fd37 	bl	8002704 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c96:	f7ff fd3d 	bl	8000714 <main>
  bx lr
 8000c9a:	4770      	bx	lr
  ldr r0, =_sdata
 8000c9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ca4:	080027b4 	.word	0x080027b4
  ldr r2, =_sbss
 8000ca8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cac:	2000009c 	.word	0x2000009c

08000cb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cb0:	e7fe      	b.n	8000cb0 <ADC1_2_IRQHandler>
	...

08000cb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb8:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <HAL_Init+0x28>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a07      	ldr	r2, [pc, #28]	; (8000cdc <HAL_Init+0x28>)
 8000cbe:	f043 0310 	orr.w	r3, r3, #16
 8000cc2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc4:	2003      	movs	r0, #3
 8000cc6:	f000 fe49 	bl	800195c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cca:	200f      	movs	r0, #15
 8000ccc:	f000 f808 	bl	8000ce0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd0:	f7ff fe8a 	bl	80009e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40022000 	.word	0x40022000

08000ce0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ce8:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <HAL_InitTick+0x54>)
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <HAL_InitTick+0x58>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f000 fe61 	bl	80019c6 <HAL_SYSTICK_Config>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e00e      	b.n	8000d2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2b0f      	cmp	r3, #15
 8000d12:	d80a      	bhi.n	8000d2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d14:	2200      	movs	r2, #0
 8000d16:	6879      	ldr	r1, [r7, #4]
 8000d18:	f04f 30ff 	mov.w	r0, #4294967295
 8000d1c:	f000 fe29 	bl	8001972 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d20:	4a06      	ldr	r2, [pc, #24]	; (8000d3c <HAL_InitTick+0x5c>)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d26:	2300      	movs	r3, #0
 8000d28:	e000      	b.n	8000d2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000000 	.word	0x20000000
 8000d38:	20000008 	.word	0x20000008
 8000d3c:	20000004 	.word	0x20000004

08000d40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d44:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <HAL_IncTick+0x1c>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	461a      	mov	r2, r3
 8000d4a:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <HAL_IncTick+0x20>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4413      	add	r3, r2
 8000d50:	4a03      	ldr	r2, [pc, #12]	; (8000d60 <HAL_IncTick+0x20>)
 8000d52:	6013      	str	r3, [r2, #0]
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bc80      	pop	{r7}
 8000d5a:	4770      	bx	lr
 8000d5c:	20000008 	.word	0x20000008
 8000d60:	20000098 	.word	0x20000098

08000d64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return uwTick;
 8000d68:	4b02      	ldr	r3, [pc, #8]	; (8000d74 <HAL_GetTick+0x10>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bc80      	pop	{r7}
 8000d72:	4770      	bx	lr
 8000d74:	20000098 	.word	0x20000098

08000d78 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d101      	bne.n	8000d8a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	e0ed      	b.n	8000f66 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d102      	bne.n	8000d9c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f7ff fe58 	bl	8000a4c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f042 0201 	orr.w	r2, r2, #1
 8000daa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000dac:	f7ff ffda 	bl	8000d64 <HAL_GetTick>
 8000db0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000db2:	e012      	b.n	8000dda <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000db4:	f7ff ffd6 	bl	8000d64 <HAL_GetTick>
 8000db8:	4602      	mov	r2, r0
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	2b0a      	cmp	r3, #10
 8000dc0:	d90b      	bls.n	8000dda <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2205      	movs	r2, #5
 8000dd2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e0c5      	b.n	8000f66 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f003 0301 	and.w	r3, r3, #1
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d0e5      	beq.n	8000db4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f022 0202 	bic.w	r2, r2, #2
 8000df6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000df8:	f7ff ffb4 	bl	8000d64 <HAL_GetTick>
 8000dfc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000dfe:	e012      	b.n	8000e26 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e00:	f7ff ffb0 	bl	8000d64 <HAL_GetTick>
 8000e04:	4602      	mov	r2, r0
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	2b0a      	cmp	r3, #10
 8000e0c:	d90b      	bls.n	8000e26 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e12:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2205      	movs	r2, #5
 8000e1e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	e09f      	b.n	8000f66 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f003 0302 	and.w	r3, r3, #2
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d1e5      	bne.n	8000e00 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	7e1b      	ldrb	r3, [r3, #24]
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d108      	bne.n	8000e4e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	e007      	b.n	8000e5e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e5c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	7e5b      	ldrb	r3, [r3, #25]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d108      	bne.n	8000e78 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	e007      	b.n	8000e88 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e86:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	7e9b      	ldrb	r3, [r3, #26]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d108      	bne.n	8000ea2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f042 0220 	orr.w	r2, r2, #32
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	e007      	b.n	8000eb2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f022 0220 	bic.w	r2, r2, #32
 8000eb0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	7edb      	ldrb	r3, [r3, #27]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d108      	bne.n	8000ecc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f022 0210 	bic.w	r2, r2, #16
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	e007      	b.n	8000edc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f042 0210 	orr.w	r2, r2, #16
 8000eda:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	7f1b      	ldrb	r3, [r3, #28]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d108      	bne.n	8000ef6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f042 0208 	orr.w	r2, r2, #8
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	e007      	b.n	8000f06 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f022 0208 	bic.w	r2, r2, #8
 8000f04:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	7f5b      	ldrb	r3, [r3, #29]
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d108      	bne.n	8000f20 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f042 0204 	orr.w	r2, r2, #4
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	e007      	b.n	8000f30 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f022 0204 	bic.w	r2, r2, #4
 8000f2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	689a      	ldr	r2, [r3, #8]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	431a      	orrs	r2, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	691b      	ldr	r3, [r3, #16]
 8000f3e:	431a      	orrs	r2, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	695b      	ldr	r3, [r3, #20]
 8000f44:	ea42 0103 	orr.w	r1, r2, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	1e5a      	subs	r2, r3, #1
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	430a      	orrs	r2, r1
 8000f54:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2201      	movs	r2, #1
 8000f60:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	b087      	sub	sp, #28
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
 8000f76:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f84:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000f86:	7cfb      	ldrb	r3, [r7, #19]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d003      	beq.n	8000f94 <HAL_CAN_ConfigFilter+0x26>
 8000f8c:	7cfb      	ldrb	r3, [r7, #19]
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	f040 80aa 	bne.w	80010e8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f9a:	f043 0201 	orr.w	r2, r3, #1
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	695b      	ldr	r3, [r3, #20]
 8000fa8:	f003 031f 	and.w	r3, r3, #31
 8000fac:	2201      	movs	r2, #1
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	401a      	ands	r2, r3
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	69db      	ldr	r3, [r3, #28]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d123      	bne.n	8001016 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	401a      	ands	r2, r3
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fec:	683a      	ldr	r2, [r7, #0]
 8000fee:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ff0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	3248      	adds	r2, #72	; 0x48
 8000ff6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800100a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800100c:	6979      	ldr	r1, [r7, #20]
 800100e:	3348      	adds	r3, #72	; 0x48
 8001010:	00db      	lsls	r3, r3, #3
 8001012:	440b      	add	r3, r1
 8001014:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	69db      	ldr	r3, [r3, #28]
 800101a:	2b01      	cmp	r3, #1
 800101c:	d122      	bne.n	8001064 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	431a      	orrs	r2, r3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800103a:	683a      	ldr	r2, [r7, #0]
 800103c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800103e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	3248      	adds	r2, #72	; 0x48
 8001044:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	68db      	ldr	r3, [r3, #12]
 8001052:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001058:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800105a:	6979      	ldr	r1, [r7, #20]
 800105c:	3348      	adds	r3, #72	; 0x48
 800105e:	00db      	lsls	r3, r3, #3
 8001060:	440b      	add	r3, r1
 8001062:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d109      	bne.n	8001080 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	43db      	mvns	r3, r3
 8001076:	401a      	ands	r2, r3
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800107e:	e007      	b.n	8001090 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	431a      	orrs	r2, r3
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	691b      	ldr	r3, [r3, #16]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d109      	bne.n	80010ac <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	43db      	mvns	r3, r3
 80010a2:	401a      	ands	r2, r3
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80010aa:	e007      	b.n	80010bc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	431a      	orrs	r2, r3
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	6a1b      	ldr	r3, [r3, #32]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d107      	bne.n	80010d4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	431a      	orrs	r2, r3
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80010da:	f023 0201 	bic.w	r2, r3, #1
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80010e4:	2300      	movs	r3, #0
 80010e6:	e006      	b.n	80010f6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ec:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
  }
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	371c      	adds	r7, #28
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr

08001100 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800110e:	b2db      	uxtb	r3, r3
 8001110:	2b01      	cmp	r3, #1
 8001112:	d12e      	bne.n	8001172 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2202      	movs	r2, #2
 8001118:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f022 0201 	bic.w	r2, r2, #1
 800112a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800112c:	f7ff fe1a 	bl	8000d64 <HAL_GetTick>
 8001130:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001132:	e012      	b.n	800115a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001134:	f7ff fe16 	bl	8000d64 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	2b0a      	cmp	r3, #10
 8001140:	d90b      	bls.n	800115a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001146:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2205      	movs	r2, #5
 8001152:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e012      	b.n	8001180 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f003 0301 	and.w	r3, r3, #1
 8001164:	2b00      	cmp	r3, #0
 8001166:	d1e5      	bne.n	8001134 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2200      	movs	r2, #0
 800116c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800116e:	2300      	movs	r3, #0
 8001170:	e006      	b.n	8001180 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001176:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
  }
}
 8001180:	4618      	mov	r0, r3
 8001182:	3710      	adds	r7, #16
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001188:	b480      	push	{r7}
 800118a:	b089      	sub	sp, #36	; 0x24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
 8001194:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	f893 3020 	ldrb.w	r3, [r3, #32]
 800119c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80011a6:	7ffb      	ldrb	r3, [r7, #31]
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d003      	beq.n	80011b4 <HAL_CAN_AddTxMessage+0x2c>
 80011ac:	7ffb      	ldrb	r3, [r7, #31]
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	f040 80ad 	bne.w	800130e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d10a      	bne.n	80011d4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d105      	bne.n	80011d4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	f000 8095 	beq.w	80012fe <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	0e1b      	lsrs	r3, r3, #24
 80011d8:	f003 0303 	and.w	r3, r3, #3
 80011dc:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80011de:	2201      	movs	r2, #1
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	409a      	lsls	r2, r3
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d10d      	bne.n	800120c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80011fa:	68f9      	ldr	r1, [r7, #12]
 80011fc:	6809      	ldr	r1, [r1, #0]
 80011fe:	431a      	orrs	r2, r3
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	3318      	adds	r3, #24
 8001204:	011b      	lsls	r3, r3, #4
 8001206:	440b      	add	r3, r1
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	e00f      	b.n	800122c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001216:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800121c:	68f9      	ldr	r1, [r7, #12]
 800121e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001220:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	3318      	adds	r3, #24
 8001226:	011b      	lsls	r3, r3, #4
 8001228:	440b      	add	r3, r1
 800122a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	6819      	ldr	r1, [r3, #0]
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	691a      	ldr	r2, [r3, #16]
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	3318      	adds	r3, #24
 8001238:	011b      	lsls	r3, r3, #4
 800123a:	440b      	add	r3, r1
 800123c:	3304      	adds	r3, #4
 800123e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	7d1b      	ldrb	r3, [r3, #20]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d111      	bne.n	800126c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	3318      	adds	r3, #24
 8001250:	011b      	lsls	r3, r3, #4
 8001252:	4413      	add	r3, r2
 8001254:	3304      	adds	r3, #4
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	68fa      	ldr	r2, [r7, #12]
 800125a:	6811      	ldr	r1, [r2, #0]
 800125c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	3318      	adds	r3, #24
 8001264:	011b      	lsls	r3, r3, #4
 8001266:	440b      	add	r3, r1
 8001268:	3304      	adds	r3, #4
 800126a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3307      	adds	r3, #7
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	061a      	lsls	r2, r3, #24
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3306      	adds	r3, #6
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	041b      	lsls	r3, r3, #16
 800127c:	431a      	orrs	r2, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	3305      	adds	r3, #5
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	021b      	lsls	r3, r3, #8
 8001286:	4313      	orrs	r3, r2
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	3204      	adds	r2, #4
 800128c:	7812      	ldrb	r2, [r2, #0]
 800128e:	4610      	mov	r0, r2
 8001290:	68fa      	ldr	r2, [r7, #12]
 8001292:	6811      	ldr	r1, [r2, #0]
 8001294:	ea43 0200 	orr.w	r2, r3, r0
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	011b      	lsls	r3, r3, #4
 800129c:	440b      	add	r3, r1
 800129e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80012a2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3303      	adds	r3, #3
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	061a      	lsls	r2, r3, #24
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3302      	adds	r3, #2
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	041b      	lsls	r3, r3, #16
 80012b4:	431a      	orrs	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	3301      	adds	r3, #1
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	021b      	lsls	r3, r3, #8
 80012be:	4313      	orrs	r3, r2
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	7812      	ldrb	r2, [r2, #0]
 80012c4:	4610      	mov	r0, r2
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	6811      	ldr	r1, [r2, #0]
 80012ca:	ea43 0200 	orr.w	r2, r3, r0
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	011b      	lsls	r3, r3, #4
 80012d2:	440b      	add	r3, r1
 80012d4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80012d8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	3318      	adds	r3, #24
 80012e2:	011b      	lsls	r3, r3, #4
 80012e4:	4413      	add	r3, r2
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	68fa      	ldr	r2, [r7, #12]
 80012ea:	6811      	ldr	r1, [r2, #0]
 80012ec:	f043 0201 	orr.w	r2, r3, #1
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	3318      	adds	r3, #24
 80012f4:	011b      	lsls	r3, r3, #4
 80012f6:	440b      	add	r3, r1
 80012f8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80012fa:	2300      	movs	r3, #0
 80012fc:	e00e      	b.n	800131c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001302:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e006      	b.n	800131c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001312:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
  }
}
 800131c:	4618      	mov	r0, r3
 800131e:	3724      	adds	r7, #36	; 0x24
 8001320:	46bd      	mov	sp, r7
 8001322:	bc80      	pop	{r7}
 8001324:	4770      	bx	lr

08001326 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8001326:	b480      	push	{r7}
 8001328:	b085      	sub	sp, #20
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
 800132e:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8001330:	2300      	movs	r3, #0
 8001332:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f893 3020 	ldrb.w	r3, [r3, #32]
 800133a:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 800133c:	7afb      	ldrb	r3, [r7, #11]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d002      	beq.n	8001348 <HAL_CAN_IsTxMessagePending+0x22>
 8001342:	7afb      	ldrb	r3, [r7, #11]
 8001344:	2b02      	cmp	r3, #2
 8001346:	d10b      	bne.n	8001360 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	689a      	ldr	r2, [r3, #8]
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	069b      	lsls	r3, r3, #26
 8001352:	401a      	ands	r2, r3
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	069b      	lsls	r3, r3, #26
 8001358:	429a      	cmp	r2, r3
 800135a:	d001      	beq.n	8001360 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 800135c:	2301      	movs	r3, #1
 800135e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8001360:	68fb      	ldr	r3, [r7, #12]
}
 8001362:	4618      	mov	r0, r3
 8001364:	3714      	adds	r7, #20
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr

0800136c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08a      	sub	sp, #40	; 0x28
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001374:	2300      	movs	r3, #0
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	695b      	ldr	r3, [r3, #20]
 800137e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	691b      	ldr	r3, [r3, #16]
 800139e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	699b      	ldr	r3, [r3, #24]
 80013a6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80013a8:	6a3b      	ldr	r3, [r7, #32]
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d07c      	beq.n	80014ac <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	f003 0301 	and.w	r3, r3, #1
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d023      	beq.n	8001404 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2201      	movs	r2, #1
 80013c2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f000 f983 	bl	80016da <HAL_CAN_TxMailbox0CompleteCallback>
 80013d4:	e016      	b.n	8001404 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	f003 0304 	and.w	r3, r3, #4
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d004      	beq.n	80013ea <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80013e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
 80013e8:	e00c      	b.n	8001404 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	f003 0308 	and.w	r3, r3, #8
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d004      	beq.n	80013fe <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80013f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013fa:	627b      	str	r3, [r7, #36]	; 0x24
 80013fc:	e002      	b.n	8001404 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f000 f986 	bl	8001710 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800140a:	2b00      	cmp	r3, #0
 800140c:	d024      	beq.n	8001458 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001416:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f000 f962 	bl	80016ec <HAL_CAN_TxMailbox1CompleteCallback>
 8001428:	e016      	b.n	8001458 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001430:	2b00      	cmp	r3, #0
 8001432:	d004      	beq.n	800143e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001436:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800143a:	627b      	str	r3, [r7, #36]	; 0x24
 800143c:	e00c      	b.n	8001458 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001444:	2b00      	cmp	r3, #0
 8001446:	d004      	beq.n	8001452 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800144e:	627b      	str	r3, [r7, #36]	; 0x24
 8001450:	e002      	b.n	8001458 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f000 f965 	bl	8001722 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d024      	beq.n	80014ac <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800146a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d003      	beq.n	800147e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f000 f941 	bl	80016fe <HAL_CAN_TxMailbox2CompleteCallback>
 800147c:	e016      	b.n	80014ac <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d004      	beq.n	8001492 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800148e:	627b      	str	r3, [r7, #36]	; 0x24
 8001490:	e00c      	b.n	80014ac <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d004      	beq.n	80014a6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800149c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a2:	627b      	str	r3, [r7, #36]	; 0x24
 80014a4:	e002      	b.n	80014ac <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f000 f944 	bl	8001734 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80014ac:	6a3b      	ldr	r3, [r7, #32]
 80014ae:	f003 0308 	and.w	r3, r3, #8
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d00c      	beq.n	80014d0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	f003 0310 	and.w	r3, r3, #16
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d007      	beq.n	80014d0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80014c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014c6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2210      	movs	r2, #16
 80014ce:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80014d0:	6a3b      	ldr	r3, [r7, #32]
 80014d2:	f003 0304 	and.w	r3, r3, #4
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d00b      	beq.n	80014f2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	f003 0308 	and.w	r3, r3, #8
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d006      	beq.n	80014f2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2208      	movs	r2, #8
 80014ea:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f000 f933 	bl	8001758 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80014f2:	6a3b      	ldr	r3, [r7, #32]
 80014f4:	f003 0302 	and.w	r3, r3, #2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d009      	beq.n	8001510 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	f003 0303 	and.w	r3, r3, #3
 8001506:	2b00      	cmp	r3, #0
 8001508:	d002      	beq.n	8001510 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f000 f91b 	bl	8001746 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001510:	6a3b      	ldr	r3, [r7, #32]
 8001512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001516:	2b00      	cmp	r3, #0
 8001518:	d00c      	beq.n	8001534 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	f003 0310 	and.w	r3, r3, #16
 8001520:	2b00      	cmp	r3, #0
 8001522:	d007      	beq.n	8001534 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001526:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800152a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2210      	movs	r2, #16
 8001532:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001534:	6a3b      	ldr	r3, [r7, #32]
 8001536:	f003 0320 	and.w	r3, r3, #32
 800153a:	2b00      	cmp	r3, #0
 800153c:	d00b      	beq.n	8001556 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	f003 0308 	and.w	r3, r3, #8
 8001544:	2b00      	cmp	r3, #0
 8001546:	d006      	beq.n	8001556 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2208      	movs	r2, #8
 800154e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f000 f913 	bl	800177c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001556:	6a3b      	ldr	r3, [r7, #32]
 8001558:	f003 0310 	and.w	r3, r3, #16
 800155c:	2b00      	cmp	r3, #0
 800155e:	d009      	beq.n	8001574 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	691b      	ldr	r3, [r3, #16]
 8001566:	f003 0303 	and.w	r3, r3, #3
 800156a:	2b00      	cmp	r3, #0
 800156c:	d002      	beq.n	8001574 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f000 f8fb 	bl	800176a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001574:	6a3b      	ldr	r3, [r7, #32]
 8001576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d00b      	beq.n	8001596 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	f003 0310 	and.w	r3, r3, #16
 8001584:	2b00      	cmp	r3, #0
 8001586:	d006      	beq.n	8001596 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2210      	movs	r2, #16
 800158e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f000 f8fc 	bl	800178e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001596:	6a3b      	ldr	r3, [r7, #32]
 8001598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d00b      	beq.n	80015b8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	f003 0308 	and.w	r3, r3, #8
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d006      	beq.n	80015b8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2208      	movs	r2, #8
 80015b0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f000 f8f4 	bl	80017a0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80015b8:	6a3b      	ldr	r3, [r7, #32]
 80015ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d07b      	beq.n	80016ba <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	f003 0304 	and.w	r3, r3, #4
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d072      	beq.n	80016b2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80015cc:	6a3b      	ldr	r3, [r7, #32]
 80015ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d008      	beq.n	80015e8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d003      	beq.n	80015e8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80015e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e2:	f043 0301 	orr.w	r3, r3, #1
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80015e8:	6a3b      	ldr	r3, [r7, #32]
 80015ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d008      	beq.n	8001604 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d003      	beq.n	8001604 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80015fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fe:	f043 0302 	orr.w	r3, r3, #2
 8001602:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001604:	6a3b      	ldr	r3, [r7, #32]
 8001606:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800160a:	2b00      	cmp	r3, #0
 800160c:	d008      	beq.n	8001620 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001614:	2b00      	cmp	r3, #0
 8001616:	d003      	beq.n	8001620 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161a:	f043 0304 	orr.w	r3, r3, #4
 800161e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001620:	6a3b      	ldr	r3, [r7, #32]
 8001622:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001626:	2b00      	cmp	r3, #0
 8001628:	d043      	beq.n	80016b2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001630:	2b00      	cmp	r3, #0
 8001632:	d03e      	beq.n	80016b2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800163a:	2b60      	cmp	r3, #96	; 0x60
 800163c:	d02b      	beq.n	8001696 <HAL_CAN_IRQHandler+0x32a>
 800163e:	2b60      	cmp	r3, #96	; 0x60
 8001640:	d82e      	bhi.n	80016a0 <HAL_CAN_IRQHandler+0x334>
 8001642:	2b50      	cmp	r3, #80	; 0x50
 8001644:	d022      	beq.n	800168c <HAL_CAN_IRQHandler+0x320>
 8001646:	2b50      	cmp	r3, #80	; 0x50
 8001648:	d82a      	bhi.n	80016a0 <HAL_CAN_IRQHandler+0x334>
 800164a:	2b40      	cmp	r3, #64	; 0x40
 800164c:	d019      	beq.n	8001682 <HAL_CAN_IRQHandler+0x316>
 800164e:	2b40      	cmp	r3, #64	; 0x40
 8001650:	d826      	bhi.n	80016a0 <HAL_CAN_IRQHandler+0x334>
 8001652:	2b30      	cmp	r3, #48	; 0x30
 8001654:	d010      	beq.n	8001678 <HAL_CAN_IRQHandler+0x30c>
 8001656:	2b30      	cmp	r3, #48	; 0x30
 8001658:	d822      	bhi.n	80016a0 <HAL_CAN_IRQHandler+0x334>
 800165a:	2b10      	cmp	r3, #16
 800165c:	d002      	beq.n	8001664 <HAL_CAN_IRQHandler+0x2f8>
 800165e:	2b20      	cmp	r3, #32
 8001660:	d005      	beq.n	800166e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001662:	e01d      	b.n	80016a0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001666:	f043 0308 	orr.w	r3, r3, #8
 800166a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800166c:	e019      	b.n	80016a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800166e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001670:	f043 0310 	orr.w	r3, r3, #16
 8001674:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001676:	e014      	b.n	80016a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167a:	f043 0320 	orr.w	r3, r3, #32
 800167e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001680:	e00f      	b.n	80016a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001688:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800168a:	e00a      	b.n	80016a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800168c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001694:	e005      	b.n	80016a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800169c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800169e:	e000      	b.n	80016a2 <HAL_CAN_IRQHandler+0x336>
            break;
 80016a0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	699a      	ldr	r2, [r3, #24]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80016b0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2204      	movs	r2, #4
 80016b8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d008      	beq.n	80016d2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c6:	431a      	orrs	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f000 f870 	bl	80017b2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80016d2:	bf00      	nop
 80016d4:	3728      	adds	r7, #40	; 0x28
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80016da:	b480      	push	{r7}
 80016dc:	b083      	sub	sp, #12
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr

080016ec <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bc80      	pop	{r7}
 80016fc:	4770      	bx	lr

080016fe <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80016fe:	b480      	push	{r7}
 8001700:	b083      	sub	sp, #12
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr

08001710 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr

08001722 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001722:	b480      	push	{r7}
 8001724:	b083      	sub	sp, #12
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr

08001734 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	bc80      	pop	{r7}
 8001744:	4770      	bx	lr

08001746 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001746:	b480      	push	{r7}
 8001748:	b083      	sub	sp, #12
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr

08001758 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	bc80      	pop	{r7}
 8001768:	4770      	bx	lr

0800176a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800176a:	b480      	push	{r7}
 800176c:	b083      	sub	sp, #12
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	bc80      	pop	{r7}
 800177a:	4770      	bx	lr

0800177c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	bc80      	pop	{r7}
 800178c:	4770      	bx	lr

0800178e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800178e:	b480      	push	{r7}
 8001790:	b083      	sub	sp, #12
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr

080017a0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bc80      	pop	{r7}
 80017b0:	4770      	bx	lr

080017b2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80017b2:	b480      	push	{r7}
 80017b4:	b083      	sub	sp, #12
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr

080017c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d4:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <__NVIC_SetPriorityGrouping+0x44>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017da:	68ba      	ldr	r2, [r7, #8]
 80017dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017e0:	4013      	ands	r3, r2
 80017e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017f6:	4a04      	ldr	r2, [pc, #16]	; (8001808 <__NVIC_SetPriorityGrouping+0x44>)
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	60d3      	str	r3, [r2, #12]
}
 80017fc:	bf00      	nop
 80017fe:	3714      	adds	r7, #20
 8001800:	46bd      	mov	sp, r7
 8001802:	bc80      	pop	{r7}
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001810:	4b04      	ldr	r3, [pc, #16]	; (8001824 <__NVIC_GetPriorityGrouping+0x18>)
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	0a1b      	lsrs	r3, r3, #8
 8001816:	f003 0307 	and.w	r3, r3, #7
}
 800181a:	4618      	mov	r0, r3
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001836:	2b00      	cmp	r3, #0
 8001838:	db0b      	blt.n	8001852 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	f003 021f 	and.w	r2, r3, #31
 8001840:	4906      	ldr	r1, [pc, #24]	; (800185c <__NVIC_EnableIRQ+0x34>)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	095b      	lsrs	r3, r3, #5
 8001848:	2001      	movs	r0, #1
 800184a:	fa00 f202 	lsl.w	r2, r0, r2
 800184e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr
 800185c:	e000e100 	.word	0xe000e100

08001860 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	6039      	str	r1, [r7, #0]
 800186a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800186c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001870:	2b00      	cmp	r3, #0
 8001872:	db0a      	blt.n	800188a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	b2da      	uxtb	r2, r3
 8001878:	490c      	ldr	r1, [pc, #48]	; (80018ac <__NVIC_SetPriority+0x4c>)
 800187a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187e:	0112      	lsls	r2, r2, #4
 8001880:	b2d2      	uxtb	r2, r2
 8001882:	440b      	add	r3, r1
 8001884:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001888:	e00a      	b.n	80018a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	b2da      	uxtb	r2, r3
 800188e:	4908      	ldr	r1, [pc, #32]	; (80018b0 <__NVIC_SetPriority+0x50>)
 8001890:	79fb      	ldrb	r3, [r7, #7]
 8001892:	f003 030f 	and.w	r3, r3, #15
 8001896:	3b04      	subs	r3, #4
 8001898:	0112      	lsls	r2, r2, #4
 800189a:	b2d2      	uxtb	r2, r2
 800189c:	440b      	add	r3, r1
 800189e:	761a      	strb	r2, [r3, #24]
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	e000e100 	.word	0xe000e100
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b089      	sub	sp, #36	; 0x24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	f1c3 0307 	rsb	r3, r3, #7
 80018ce:	2b04      	cmp	r3, #4
 80018d0:	bf28      	it	cs
 80018d2:	2304      	movcs	r3, #4
 80018d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	3304      	adds	r3, #4
 80018da:	2b06      	cmp	r3, #6
 80018dc:	d902      	bls.n	80018e4 <NVIC_EncodePriority+0x30>
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	3b03      	subs	r3, #3
 80018e2:	e000      	b.n	80018e6 <NVIC_EncodePriority+0x32>
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e8:	f04f 32ff 	mov.w	r2, #4294967295
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	43da      	mvns	r2, r3
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	401a      	ands	r2, r3
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	fa01 f303 	lsl.w	r3, r1, r3
 8001906:	43d9      	mvns	r1, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800190c:	4313      	orrs	r3, r2
         );
}
 800190e:	4618      	mov	r0, r3
 8001910:	3724      	adds	r7, #36	; 0x24
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr

08001918 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3b01      	subs	r3, #1
 8001924:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001928:	d301      	bcc.n	800192e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800192a:	2301      	movs	r3, #1
 800192c:	e00f      	b.n	800194e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800192e:	4a0a      	ldr	r2, [pc, #40]	; (8001958 <SysTick_Config+0x40>)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3b01      	subs	r3, #1
 8001934:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001936:	210f      	movs	r1, #15
 8001938:	f04f 30ff 	mov.w	r0, #4294967295
 800193c:	f7ff ff90 	bl	8001860 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001940:	4b05      	ldr	r3, [pc, #20]	; (8001958 <SysTick_Config+0x40>)
 8001942:	2200      	movs	r2, #0
 8001944:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001946:	4b04      	ldr	r3, [pc, #16]	; (8001958 <SysTick_Config+0x40>)
 8001948:	2207      	movs	r2, #7
 800194a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	e000e010 	.word	0xe000e010

0800195c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f7ff ff2d 	bl	80017c4 <__NVIC_SetPriorityGrouping>
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001972:	b580      	push	{r7, lr}
 8001974:	b086      	sub	sp, #24
 8001976:	af00      	add	r7, sp, #0
 8001978:	4603      	mov	r3, r0
 800197a:	60b9      	str	r1, [r7, #8]
 800197c:	607a      	str	r2, [r7, #4]
 800197e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001984:	f7ff ff42 	bl	800180c <__NVIC_GetPriorityGrouping>
 8001988:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	68b9      	ldr	r1, [r7, #8]
 800198e:	6978      	ldr	r0, [r7, #20]
 8001990:	f7ff ff90 	bl	80018b4 <NVIC_EncodePriority>
 8001994:	4602      	mov	r2, r0
 8001996:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800199a:	4611      	mov	r1, r2
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff ff5f 	bl	8001860 <__NVIC_SetPriority>
}
 80019a2:	bf00      	nop
 80019a4:	3718      	adds	r7, #24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b082      	sub	sp, #8
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	4603      	mov	r3, r0
 80019b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff ff35 	bl	8001828 <__NVIC_EnableIRQ>
}
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b082      	sub	sp, #8
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7ff ffa2 	bl	8001918 <SysTick_Config>
 80019d4:	4603      	mov	r3, r0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
	...

080019e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b08b      	sub	sp, #44	; 0x2c
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019ea:	2300      	movs	r3, #0
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019ee:	2300      	movs	r3, #0
 80019f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019f2:	e169      	b.n	8001cc8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019f4:	2201      	movs	r2, #1
 80019f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	69fa      	ldr	r2, [r7, #28]
 8001a04:	4013      	ands	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	f040 8158 	bne.w	8001cc2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	4a9a      	ldr	r2, [pc, #616]	; (8001c80 <HAL_GPIO_Init+0x2a0>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d05e      	beq.n	8001ada <HAL_GPIO_Init+0xfa>
 8001a1c:	4a98      	ldr	r2, [pc, #608]	; (8001c80 <HAL_GPIO_Init+0x2a0>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d875      	bhi.n	8001b0e <HAL_GPIO_Init+0x12e>
 8001a22:	4a98      	ldr	r2, [pc, #608]	; (8001c84 <HAL_GPIO_Init+0x2a4>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d058      	beq.n	8001ada <HAL_GPIO_Init+0xfa>
 8001a28:	4a96      	ldr	r2, [pc, #600]	; (8001c84 <HAL_GPIO_Init+0x2a4>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d86f      	bhi.n	8001b0e <HAL_GPIO_Init+0x12e>
 8001a2e:	4a96      	ldr	r2, [pc, #600]	; (8001c88 <HAL_GPIO_Init+0x2a8>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d052      	beq.n	8001ada <HAL_GPIO_Init+0xfa>
 8001a34:	4a94      	ldr	r2, [pc, #592]	; (8001c88 <HAL_GPIO_Init+0x2a8>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d869      	bhi.n	8001b0e <HAL_GPIO_Init+0x12e>
 8001a3a:	4a94      	ldr	r2, [pc, #592]	; (8001c8c <HAL_GPIO_Init+0x2ac>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d04c      	beq.n	8001ada <HAL_GPIO_Init+0xfa>
 8001a40:	4a92      	ldr	r2, [pc, #584]	; (8001c8c <HAL_GPIO_Init+0x2ac>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d863      	bhi.n	8001b0e <HAL_GPIO_Init+0x12e>
 8001a46:	4a92      	ldr	r2, [pc, #584]	; (8001c90 <HAL_GPIO_Init+0x2b0>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d046      	beq.n	8001ada <HAL_GPIO_Init+0xfa>
 8001a4c:	4a90      	ldr	r2, [pc, #576]	; (8001c90 <HAL_GPIO_Init+0x2b0>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d85d      	bhi.n	8001b0e <HAL_GPIO_Init+0x12e>
 8001a52:	2b12      	cmp	r3, #18
 8001a54:	d82a      	bhi.n	8001aac <HAL_GPIO_Init+0xcc>
 8001a56:	2b12      	cmp	r3, #18
 8001a58:	d859      	bhi.n	8001b0e <HAL_GPIO_Init+0x12e>
 8001a5a:	a201      	add	r2, pc, #4	; (adr r2, 8001a60 <HAL_GPIO_Init+0x80>)
 8001a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a60:	08001adb 	.word	0x08001adb
 8001a64:	08001ab5 	.word	0x08001ab5
 8001a68:	08001ac7 	.word	0x08001ac7
 8001a6c:	08001b09 	.word	0x08001b09
 8001a70:	08001b0f 	.word	0x08001b0f
 8001a74:	08001b0f 	.word	0x08001b0f
 8001a78:	08001b0f 	.word	0x08001b0f
 8001a7c:	08001b0f 	.word	0x08001b0f
 8001a80:	08001b0f 	.word	0x08001b0f
 8001a84:	08001b0f 	.word	0x08001b0f
 8001a88:	08001b0f 	.word	0x08001b0f
 8001a8c:	08001b0f 	.word	0x08001b0f
 8001a90:	08001b0f 	.word	0x08001b0f
 8001a94:	08001b0f 	.word	0x08001b0f
 8001a98:	08001b0f 	.word	0x08001b0f
 8001a9c:	08001b0f 	.word	0x08001b0f
 8001aa0:	08001b0f 	.word	0x08001b0f
 8001aa4:	08001abd 	.word	0x08001abd
 8001aa8:	08001ad1 	.word	0x08001ad1
 8001aac:	4a79      	ldr	r2, [pc, #484]	; (8001c94 <HAL_GPIO_Init+0x2b4>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d013      	beq.n	8001ada <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ab2:	e02c      	b.n	8001b0e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	623b      	str	r3, [r7, #32]
          break;
 8001aba:	e029      	b.n	8001b10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	3304      	adds	r3, #4
 8001ac2:	623b      	str	r3, [r7, #32]
          break;
 8001ac4:	e024      	b.n	8001b10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	3308      	adds	r3, #8
 8001acc:	623b      	str	r3, [r7, #32]
          break;
 8001ace:	e01f      	b.n	8001b10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	330c      	adds	r3, #12
 8001ad6:	623b      	str	r3, [r7, #32]
          break;
 8001ad8:	e01a      	b.n	8001b10 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d102      	bne.n	8001ae8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ae2:	2304      	movs	r3, #4
 8001ae4:	623b      	str	r3, [r7, #32]
          break;
 8001ae6:	e013      	b.n	8001b10 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d105      	bne.n	8001afc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001af0:	2308      	movs	r3, #8
 8001af2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	69fa      	ldr	r2, [r7, #28]
 8001af8:	611a      	str	r2, [r3, #16]
          break;
 8001afa:	e009      	b.n	8001b10 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001afc:	2308      	movs	r3, #8
 8001afe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	69fa      	ldr	r2, [r7, #28]
 8001b04:	615a      	str	r2, [r3, #20]
          break;
 8001b06:	e003      	b.n	8001b10 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	623b      	str	r3, [r7, #32]
          break;
 8001b0c:	e000      	b.n	8001b10 <HAL_GPIO_Init+0x130>
          break;
 8001b0e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	2bff      	cmp	r3, #255	; 0xff
 8001b14:	d801      	bhi.n	8001b1a <HAL_GPIO_Init+0x13a>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	e001      	b.n	8001b1e <HAL_GPIO_Init+0x13e>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	3304      	adds	r3, #4
 8001b1e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	2bff      	cmp	r3, #255	; 0xff
 8001b24:	d802      	bhi.n	8001b2c <HAL_GPIO_Init+0x14c>
 8001b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	e002      	b.n	8001b32 <HAL_GPIO_Init+0x152>
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2e:	3b08      	subs	r3, #8
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	210f      	movs	r1, #15
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	401a      	ands	r2, r3
 8001b44:	6a39      	ldr	r1, [r7, #32]
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4c:	431a      	orrs	r2, r3
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	f000 80b1 	beq.w	8001cc2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b60:	4b4d      	ldr	r3, [pc, #308]	; (8001c98 <HAL_GPIO_Init+0x2b8>)
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	4a4c      	ldr	r2, [pc, #304]	; (8001c98 <HAL_GPIO_Init+0x2b8>)
 8001b66:	f043 0301 	orr.w	r3, r3, #1
 8001b6a:	6193      	str	r3, [r2, #24]
 8001b6c:	4b4a      	ldr	r3, [pc, #296]	; (8001c98 <HAL_GPIO_Init+0x2b8>)
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	f003 0301 	and.w	r3, r3, #1
 8001b74:	60bb      	str	r3, [r7, #8]
 8001b76:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b78:	4a48      	ldr	r2, [pc, #288]	; (8001c9c <HAL_GPIO_Init+0x2bc>)
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7c:	089b      	lsrs	r3, r3, #2
 8001b7e:	3302      	adds	r3, #2
 8001b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b84:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b88:	f003 0303 	and.w	r3, r3, #3
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	220f      	movs	r2, #15
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	43db      	mvns	r3, r3
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4a40      	ldr	r2, [pc, #256]	; (8001ca0 <HAL_GPIO_Init+0x2c0>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d013      	beq.n	8001bcc <HAL_GPIO_Init+0x1ec>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	4a3f      	ldr	r2, [pc, #252]	; (8001ca4 <HAL_GPIO_Init+0x2c4>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d00d      	beq.n	8001bc8 <HAL_GPIO_Init+0x1e8>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4a3e      	ldr	r2, [pc, #248]	; (8001ca8 <HAL_GPIO_Init+0x2c8>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d007      	beq.n	8001bc4 <HAL_GPIO_Init+0x1e4>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4a3d      	ldr	r2, [pc, #244]	; (8001cac <HAL_GPIO_Init+0x2cc>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d101      	bne.n	8001bc0 <HAL_GPIO_Init+0x1e0>
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e006      	b.n	8001bce <HAL_GPIO_Init+0x1ee>
 8001bc0:	2304      	movs	r3, #4
 8001bc2:	e004      	b.n	8001bce <HAL_GPIO_Init+0x1ee>
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	e002      	b.n	8001bce <HAL_GPIO_Init+0x1ee>
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e000      	b.n	8001bce <HAL_GPIO_Init+0x1ee>
 8001bcc:	2300      	movs	r3, #0
 8001bce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bd0:	f002 0203 	and.w	r2, r2, #3
 8001bd4:	0092      	lsls	r2, r2, #2
 8001bd6:	4093      	lsls	r3, r2
 8001bd8:	68fa      	ldr	r2, [r7, #12]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bde:	492f      	ldr	r1, [pc, #188]	; (8001c9c <HAL_GPIO_Init+0x2bc>)
 8001be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be2:	089b      	lsrs	r3, r3, #2
 8001be4:	3302      	adds	r3, #2
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d006      	beq.n	8001c06 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bf8:	4b2d      	ldr	r3, [pc, #180]	; (8001cb0 <HAL_GPIO_Init+0x2d0>)
 8001bfa:	689a      	ldr	r2, [r3, #8]
 8001bfc:	492c      	ldr	r1, [pc, #176]	; (8001cb0 <HAL_GPIO_Init+0x2d0>)
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	608b      	str	r3, [r1, #8]
 8001c04:	e006      	b.n	8001c14 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c06:	4b2a      	ldr	r3, [pc, #168]	; (8001cb0 <HAL_GPIO_Init+0x2d0>)
 8001c08:	689a      	ldr	r2, [r3, #8]
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	4928      	ldr	r1, [pc, #160]	; (8001cb0 <HAL_GPIO_Init+0x2d0>)
 8001c10:	4013      	ands	r3, r2
 8001c12:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d006      	beq.n	8001c2e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c20:	4b23      	ldr	r3, [pc, #140]	; (8001cb0 <HAL_GPIO_Init+0x2d0>)
 8001c22:	68da      	ldr	r2, [r3, #12]
 8001c24:	4922      	ldr	r1, [pc, #136]	; (8001cb0 <HAL_GPIO_Init+0x2d0>)
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	60cb      	str	r3, [r1, #12]
 8001c2c:	e006      	b.n	8001c3c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c2e:	4b20      	ldr	r3, [pc, #128]	; (8001cb0 <HAL_GPIO_Init+0x2d0>)
 8001c30:	68da      	ldr	r2, [r3, #12]
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	43db      	mvns	r3, r3
 8001c36:	491e      	ldr	r1, [pc, #120]	; (8001cb0 <HAL_GPIO_Init+0x2d0>)
 8001c38:	4013      	ands	r3, r2
 8001c3a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d006      	beq.n	8001c56 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c48:	4b19      	ldr	r3, [pc, #100]	; (8001cb0 <HAL_GPIO_Init+0x2d0>)
 8001c4a:	685a      	ldr	r2, [r3, #4]
 8001c4c:	4918      	ldr	r1, [pc, #96]	; (8001cb0 <HAL_GPIO_Init+0x2d0>)
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	604b      	str	r3, [r1, #4]
 8001c54:	e006      	b.n	8001c64 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c56:	4b16      	ldr	r3, [pc, #88]	; (8001cb0 <HAL_GPIO_Init+0x2d0>)
 8001c58:	685a      	ldr	r2, [r3, #4]
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	4914      	ldr	r1, [pc, #80]	; (8001cb0 <HAL_GPIO_Init+0x2d0>)
 8001c60:	4013      	ands	r3, r2
 8001c62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d021      	beq.n	8001cb4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c70:	4b0f      	ldr	r3, [pc, #60]	; (8001cb0 <HAL_GPIO_Init+0x2d0>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	490e      	ldr	r1, [pc, #56]	; (8001cb0 <HAL_GPIO_Init+0x2d0>)
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	600b      	str	r3, [r1, #0]
 8001c7c:	e021      	b.n	8001cc2 <HAL_GPIO_Init+0x2e2>
 8001c7e:	bf00      	nop
 8001c80:	10320000 	.word	0x10320000
 8001c84:	10310000 	.word	0x10310000
 8001c88:	10220000 	.word	0x10220000
 8001c8c:	10210000 	.word	0x10210000
 8001c90:	10120000 	.word	0x10120000
 8001c94:	10110000 	.word	0x10110000
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	40010000 	.word	0x40010000
 8001ca0:	40010800 	.word	0x40010800
 8001ca4:	40010c00 	.word	0x40010c00
 8001ca8:	40011000 	.word	0x40011000
 8001cac:	40011400 	.word	0x40011400
 8001cb0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001cb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <HAL_GPIO_Init+0x304>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	4909      	ldr	r1, [pc, #36]	; (8001ce4 <HAL_GPIO_Init+0x304>)
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cce:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f47f ae8e 	bne.w	80019f4 <HAL_GPIO_Init+0x14>
  }
}
 8001cd8:	bf00      	nop
 8001cda:	bf00      	nop
 8001cdc:	372c      	adds	r7, #44	; 0x2c
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr
 8001ce4:	40010400 	.word	0x40010400

08001ce8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	807b      	strh	r3, [r7, #2]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cf8:	787b      	ldrb	r3, [r7, #1]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cfe:	887a      	ldrh	r2, [r7, #2]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d04:	e003      	b.n	8001d0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d06:	887b      	ldrh	r3, [r7, #2]
 8001d08:	041a      	lsls	r2, r3, #16
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	611a      	str	r2, [r3, #16]
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bc80      	pop	{r7}
 8001d16:	4770      	bx	lr

08001d18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e272      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f000 8087 	beq.w	8001e46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d38:	4b92      	ldr	r3, [pc, #584]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f003 030c 	and.w	r3, r3, #12
 8001d40:	2b04      	cmp	r3, #4
 8001d42:	d00c      	beq.n	8001d5e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d44:	4b8f      	ldr	r3, [pc, #572]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f003 030c 	and.w	r3, r3, #12
 8001d4c:	2b08      	cmp	r3, #8
 8001d4e:	d112      	bne.n	8001d76 <HAL_RCC_OscConfig+0x5e>
 8001d50:	4b8c      	ldr	r3, [pc, #560]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d5c:	d10b      	bne.n	8001d76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d5e:	4b89      	ldr	r3, [pc, #548]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d06c      	beq.n	8001e44 <HAL_RCC_OscConfig+0x12c>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d168      	bne.n	8001e44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e24c      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d7e:	d106      	bne.n	8001d8e <HAL_RCC_OscConfig+0x76>
 8001d80:	4b80      	ldr	r3, [pc, #512]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a7f      	ldr	r2, [pc, #508]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001d86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d8a:	6013      	str	r3, [r2, #0]
 8001d8c:	e02e      	b.n	8001dec <HAL_RCC_OscConfig+0xd4>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10c      	bne.n	8001db0 <HAL_RCC_OscConfig+0x98>
 8001d96:	4b7b      	ldr	r3, [pc, #492]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a7a      	ldr	r2, [pc, #488]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001da0:	6013      	str	r3, [r2, #0]
 8001da2:	4b78      	ldr	r3, [pc, #480]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a77      	ldr	r2, [pc, #476]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001da8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dac:	6013      	str	r3, [r2, #0]
 8001dae:	e01d      	b.n	8001dec <HAL_RCC_OscConfig+0xd4>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001db8:	d10c      	bne.n	8001dd4 <HAL_RCC_OscConfig+0xbc>
 8001dba:	4b72      	ldr	r3, [pc, #456]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a71      	ldr	r2, [pc, #452]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001dc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dc4:	6013      	str	r3, [r2, #0]
 8001dc6:	4b6f      	ldr	r3, [pc, #444]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a6e      	ldr	r2, [pc, #440]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dd0:	6013      	str	r3, [r2, #0]
 8001dd2:	e00b      	b.n	8001dec <HAL_RCC_OscConfig+0xd4>
 8001dd4:	4b6b      	ldr	r3, [pc, #428]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a6a      	ldr	r2, [pc, #424]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001dda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dde:	6013      	str	r3, [r2, #0]
 8001de0:	4b68      	ldr	r3, [pc, #416]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a67      	ldr	r2, [pc, #412]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001de6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d013      	beq.n	8001e1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df4:	f7fe ffb6 	bl	8000d64 <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dfc:	f7fe ffb2 	bl	8000d64 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b64      	cmp	r3, #100	; 0x64
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e200      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e0e:	4b5d      	ldr	r3, [pc, #372]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d0f0      	beq.n	8001dfc <HAL_RCC_OscConfig+0xe4>
 8001e1a:	e014      	b.n	8001e46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1c:	f7fe ffa2 	bl	8000d64 <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e24:	f7fe ff9e 	bl	8000d64 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b64      	cmp	r3, #100	; 0x64
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e1ec      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e36:	4b53      	ldr	r3, [pc, #332]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1f0      	bne.n	8001e24 <HAL_RCC_OscConfig+0x10c>
 8001e42:	e000      	b.n	8001e46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d063      	beq.n	8001f1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e52:	4b4c      	ldr	r3, [pc, #304]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f003 030c 	and.w	r3, r3, #12
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00b      	beq.n	8001e76 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e5e:	4b49      	ldr	r3, [pc, #292]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f003 030c 	and.w	r3, r3, #12
 8001e66:	2b08      	cmp	r3, #8
 8001e68:	d11c      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x18c>
 8001e6a:	4b46      	ldr	r3, [pc, #280]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d116      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e76:	4b43      	ldr	r3, [pc, #268]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d005      	beq.n	8001e8e <HAL_RCC_OscConfig+0x176>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d001      	beq.n	8001e8e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e1c0      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e8e:	4b3d      	ldr	r3, [pc, #244]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	695b      	ldr	r3, [r3, #20]
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	4939      	ldr	r1, [pc, #228]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ea2:	e03a      	b.n	8001f1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	691b      	ldr	r3, [r3, #16]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d020      	beq.n	8001eee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eac:	4b36      	ldr	r3, [pc, #216]	; (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb2:	f7fe ff57 	bl	8000d64 <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb8:	e008      	b.n	8001ecc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eba:	f7fe ff53 	bl	8000d64 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e1a1      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ecc:	4b2d      	ldr	r3, [pc, #180]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d0f0      	beq.n	8001eba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed8:	4b2a      	ldr	r3, [pc, #168]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	4927      	ldr	r1, [pc, #156]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	600b      	str	r3, [r1, #0]
 8001eec:	e015      	b.n	8001f1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eee:	4b26      	ldr	r3, [pc, #152]	; (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef4:	f7fe ff36 	bl	8000d64 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001efc:	f7fe ff32 	bl	8000d64 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e180      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f0e:	4b1d      	ldr	r3, [pc, #116]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1f0      	bne.n	8001efc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0308 	and.w	r3, r3, #8
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d03a      	beq.n	8001f9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d019      	beq.n	8001f62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f2e:	4b17      	ldr	r3, [pc, #92]	; (8001f8c <HAL_RCC_OscConfig+0x274>)
 8001f30:	2201      	movs	r2, #1
 8001f32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f34:	f7fe ff16 	bl	8000d64 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f3c:	f7fe ff12 	bl	8000d64 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e160      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f4e:	4b0d      	ldr	r3, [pc, #52]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d0f0      	beq.n	8001f3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f5a:	2001      	movs	r0, #1
 8001f5c:	f000 face 	bl	80024fc <RCC_Delay>
 8001f60:	e01c      	b.n	8001f9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f62:	4b0a      	ldr	r3, [pc, #40]	; (8001f8c <HAL_RCC_OscConfig+0x274>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f68:	f7fe fefc 	bl	8000d64 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f6e:	e00f      	b.n	8001f90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f70:	f7fe fef8 	bl	8000d64 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d908      	bls.n	8001f90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e146      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
 8001f82:	bf00      	nop
 8001f84:	40021000 	.word	0x40021000
 8001f88:	42420000 	.word	0x42420000
 8001f8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f90:	4b92      	ldr	r3, [pc, #584]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8001f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1e9      	bne.n	8001f70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0304 	and.w	r3, r3, #4
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f000 80a6 	beq.w	80020f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001faa:	2300      	movs	r3, #0
 8001fac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fae:	4b8b      	ldr	r3, [pc, #556]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10d      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fba:	4b88      	ldr	r3, [pc, #544]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	4a87      	ldr	r2, [pc, #540]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8001fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc4:	61d3      	str	r3, [r2, #28]
 8001fc6:	4b85      	ldr	r3, [pc, #532]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fce:	60bb      	str	r3, [r7, #8]
 8001fd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd6:	4b82      	ldr	r3, [pc, #520]	; (80021e0 <HAL_RCC_OscConfig+0x4c8>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d118      	bne.n	8002014 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fe2:	4b7f      	ldr	r3, [pc, #508]	; (80021e0 <HAL_RCC_OscConfig+0x4c8>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a7e      	ldr	r2, [pc, #504]	; (80021e0 <HAL_RCC_OscConfig+0x4c8>)
 8001fe8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fee:	f7fe feb9 	bl	8000d64 <HAL_GetTick>
 8001ff2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff4:	e008      	b.n	8002008 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ff6:	f7fe feb5 	bl	8000d64 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b64      	cmp	r3, #100	; 0x64
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e103      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002008:	4b75      	ldr	r3, [pc, #468]	; (80021e0 <HAL_RCC_OscConfig+0x4c8>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002010:	2b00      	cmp	r3, #0
 8002012:	d0f0      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d106      	bne.n	800202a <HAL_RCC_OscConfig+0x312>
 800201c:	4b6f      	ldr	r3, [pc, #444]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 800201e:	6a1b      	ldr	r3, [r3, #32]
 8002020:	4a6e      	ldr	r2, [pc, #440]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002022:	f043 0301 	orr.w	r3, r3, #1
 8002026:	6213      	str	r3, [r2, #32]
 8002028:	e02d      	b.n	8002086 <HAL_RCC_OscConfig+0x36e>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d10c      	bne.n	800204c <HAL_RCC_OscConfig+0x334>
 8002032:	4b6a      	ldr	r3, [pc, #424]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002034:	6a1b      	ldr	r3, [r3, #32]
 8002036:	4a69      	ldr	r2, [pc, #420]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002038:	f023 0301 	bic.w	r3, r3, #1
 800203c:	6213      	str	r3, [r2, #32]
 800203e:	4b67      	ldr	r3, [pc, #412]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002040:	6a1b      	ldr	r3, [r3, #32]
 8002042:	4a66      	ldr	r2, [pc, #408]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002044:	f023 0304 	bic.w	r3, r3, #4
 8002048:	6213      	str	r3, [r2, #32]
 800204a:	e01c      	b.n	8002086 <HAL_RCC_OscConfig+0x36e>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	2b05      	cmp	r3, #5
 8002052:	d10c      	bne.n	800206e <HAL_RCC_OscConfig+0x356>
 8002054:	4b61      	ldr	r3, [pc, #388]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002056:	6a1b      	ldr	r3, [r3, #32]
 8002058:	4a60      	ldr	r2, [pc, #384]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 800205a:	f043 0304 	orr.w	r3, r3, #4
 800205e:	6213      	str	r3, [r2, #32]
 8002060:	4b5e      	ldr	r3, [pc, #376]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002062:	6a1b      	ldr	r3, [r3, #32]
 8002064:	4a5d      	ldr	r2, [pc, #372]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002066:	f043 0301 	orr.w	r3, r3, #1
 800206a:	6213      	str	r3, [r2, #32]
 800206c:	e00b      	b.n	8002086 <HAL_RCC_OscConfig+0x36e>
 800206e:	4b5b      	ldr	r3, [pc, #364]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002070:	6a1b      	ldr	r3, [r3, #32]
 8002072:	4a5a      	ldr	r2, [pc, #360]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002074:	f023 0301 	bic.w	r3, r3, #1
 8002078:	6213      	str	r3, [r2, #32]
 800207a:	4b58      	ldr	r3, [pc, #352]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 800207c:	6a1b      	ldr	r3, [r3, #32]
 800207e:	4a57      	ldr	r2, [pc, #348]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002080:	f023 0304 	bic.w	r3, r3, #4
 8002084:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d015      	beq.n	80020ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800208e:	f7fe fe69 	bl	8000d64 <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002094:	e00a      	b.n	80020ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002096:	f7fe fe65 	bl	8000d64 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e0b1      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ac:	4b4b      	ldr	r3, [pc, #300]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d0ee      	beq.n	8002096 <HAL_RCC_OscConfig+0x37e>
 80020b8:	e014      	b.n	80020e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ba:	f7fe fe53 	bl	8000d64 <HAL_GetTick>
 80020be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020c0:	e00a      	b.n	80020d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020c2:	f7fe fe4f 	bl	8000d64 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e09b      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020d8:	4b40      	ldr	r3, [pc, #256]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1ee      	bne.n	80020c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020e4:	7dfb      	ldrb	r3, [r7, #23]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d105      	bne.n	80020f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ea:	4b3c      	ldr	r3, [pc, #240]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	4a3b      	ldr	r2, [pc, #236]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 80020f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	69db      	ldr	r3, [r3, #28]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f000 8087 	beq.w	800220e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002100:	4b36      	ldr	r3, [pc, #216]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f003 030c 	and.w	r3, r3, #12
 8002108:	2b08      	cmp	r3, #8
 800210a:	d061      	beq.n	80021d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	69db      	ldr	r3, [r3, #28]
 8002110:	2b02      	cmp	r3, #2
 8002112:	d146      	bne.n	80021a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002114:	4b33      	ldr	r3, [pc, #204]	; (80021e4 <HAL_RCC_OscConfig+0x4cc>)
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211a:	f7fe fe23 	bl	8000d64 <HAL_GetTick>
 800211e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002120:	e008      	b.n	8002134 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002122:	f7fe fe1f 	bl	8000d64 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e06d      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002134:	4b29      	ldr	r3, [pc, #164]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1f0      	bne.n	8002122 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002148:	d108      	bne.n	800215c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800214a:	4b24      	ldr	r3, [pc, #144]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	4921      	ldr	r1, [pc, #132]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002158:	4313      	orrs	r3, r2
 800215a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800215c:	4b1f      	ldr	r3, [pc, #124]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a19      	ldr	r1, [r3, #32]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216c:	430b      	orrs	r3, r1
 800216e:	491b      	ldr	r1, [pc, #108]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002170:	4313      	orrs	r3, r2
 8002172:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002174:	4b1b      	ldr	r3, [pc, #108]	; (80021e4 <HAL_RCC_OscConfig+0x4cc>)
 8002176:	2201      	movs	r2, #1
 8002178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217a:	f7fe fdf3 	bl	8000d64 <HAL_GetTick>
 800217e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002180:	e008      	b.n	8002194 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002182:	f7fe fdef 	bl	8000d64 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e03d      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002194:	4b11      	ldr	r3, [pc, #68]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d0f0      	beq.n	8002182 <HAL_RCC_OscConfig+0x46a>
 80021a0:	e035      	b.n	800220e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021a2:	4b10      	ldr	r3, [pc, #64]	; (80021e4 <HAL_RCC_OscConfig+0x4cc>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a8:	f7fe fddc 	bl	8000d64 <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b0:	f7fe fdd8 	bl	8000d64 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e026      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021c2:	4b06      	ldr	r3, [pc, #24]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1f0      	bne.n	80021b0 <HAL_RCC_OscConfig+0x498>
 80021ce:	e01e      	b.n	800220e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	69db      	ldr	r3, [r3, #28]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d107      	bne.n	80021e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e019      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
 80021dc:	40021000 	.word	0x40021000
 80021e0:	40007000 	.word	0x40007000
 80021e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021e8:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <HAL_RCC_OscConfig+0x500>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d106      	bne.n	800220a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002206:	429a      	cmp	r2, r3
 8002208:	d001      	beq.n	800220e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e000      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3718      	adds	r7, #24
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40021000 	.word	0x40021000

0800221c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d101      	bne.n	8002230 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e0d0      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002230:	4b6a      	ldr	r3, [pc, #424]	; (80023dc <HAL_RCC_ClockConfig+0x1c0>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0307 	and.w	r3, r3, #7
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	429a      	cmp	r2, r3
 800223c:	d910      	bls.n	8002260 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223e:	4b67      	ldr	r3, [pc, #412]	; (80023dc <HAL_RCC_ClockConfig+0x1c0>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f023 0207 	bic.w	r2, r3, #7
 8002246:	4965      	ldr	r1, [pc, #404]	; (80023dc <HAL_RCC_ClockConfig+0x1c0>)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	4313      	orrs	r3, r2
 800224c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800224e:	4b63      	ldr	r3, [pc, #396]	; (80023dc <HAL_RCC_ClockConfig+0x1c0>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	429a      	cmp	r2, r3
 800225a:	d001      	beq.n	8002260 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e0b8      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d020      	beq.n	80022ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0304 	and.w	r3, r3, #4
 8002274:	2b00      	cmp	r3, #0
 8002276:	d005      	beq.n	8002284 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002278:	4b59      	ldr	r3, [pc, #356]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	4a58      	ldr	r2, [pc, #352]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 800227e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002282:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0308 	and.w	r3, r3, #8
 800228c:	2b00      	cmp	r3, #0
 800228e:	d005      	beq.n	800229c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002290:	4b53      	ldr	r3, [pc, #332]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	4a52      	ldr	r2, [pc, #328]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002296:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800229a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800229c:	4b50      	ldr	r3, [pc, #320]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	494d      	ldr	r1, [pc, #308]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d040      	beq.n	800233c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d107      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c2:	4b47      	ldr	r3, [pc, #284]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d115      	bne.n	80022fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e07f      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d107      	bne.n	80022ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022da:	4b41      	ldr	r3, [pc, #260]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d109      	bne.n	80022fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e073      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ea:	4b3d      	ldr	r3, [pc, #244]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e06b      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022fa:	4b39      	ldr	r3, [pc, #228]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f023 0203 	bic.w	r2, r3, #3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	4936      	ldr	r1, [pc, #216]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002308:	4313      	orrs	r3, r2
 800230a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800230c:	f7fe fd2a 	bl	8000d64 <HAL_GetTick>
 8002310:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002312:	e00a      	b.n	800232a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002314:	f7fe fd26 	bl	8000d64 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002322:	4293      	cmp	r3, r2
 8002324:	d901      	bls.n	800232a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e053      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800232a:	4b2d      	ldr	r3, [pc, #180]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f003 020c 	and.w	r2, r3, #12
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	429a      	cmp	r2, r3
 800233a:	d1eb      	bne.n	8002314 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800233c:	4b27      	ldr	r3, [pc, #156]	; (80023dc <HAL_RCC_ClockConfig+0x1c0>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	429a      	cmp	r2, r3
 8002348:	d210      	bcs.n	800236c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800234a:	4b24      	ldr	r3, [pc, #144]	; (80023dc <HAL_RCC_ClockConfig+0x1c0>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f023 0207 	bic.w	r2, r3, #7
 8002352:	4922      	ldr	r1, [pc, #136]	; (80023dc <HAL_RCC_ClockConfig+0x1c0>)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	4313      	orrs	r3, r2
 8002358:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800235a:	4b20      	ldr	r3, [pc, #128]	; (80023dc <HAL_RCC_ClockConfig+0x1c0>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	429a      	cmp	r2, r3
 8002366:	d001      	beq.n	800236c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e032      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0304 	and.w	r3, r3, #4
 8002374:	2b00      	cmp	r3, #0
 8002376:	d008      	beq.n	800238a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002378:	4b19      	ldr	r3, [pc, #100]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	4916      	ldr	r1, [pc, #88]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002386:	4313      	orrs	r3, r2
 8002388:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0308 	and.w	r3, r3, #8
 8002392:	2b00      	cmp	r3, #0
 8002394:	d009      	beq.n	80023aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002396:	4b12      	ldr	r3, [pc, #72]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	490e      	ldr	r1, [pc, #56]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023aa:	f000 f821 	bl	80023f0 <HAL_RCC_GetSysClockFreq>
 80023ae:	4602      	mov	r2, r0
 80023b0:	4b0b      	ldr	r3, [pc, #44]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	091b      	lsrs	r3, r3, #4
 80023b6:	f003 030f 	and.w	r3, r3, #15
 80023ba:	490a      	ldr	r1, [pc, #40]	; (80023e4 <HAL_RCC_ClockConfig+0x1c8>)
 80023bc:	5ccb      	ldrb	r3, [r1, r3]
 80023be:	fa22 f303 	lsr.w	r3, r2, r3
 80023c2:	4a09      	ldr	r2, [pc, #36]	; (80023e8 <HAL_RCC_ClockConfig+0x1cc>)
 80023c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023c6:	4b09      	ldr	r3, [pc, #36]	; (80023ec <HAL_RCC_ClockConfig+0x1d0>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7fe fc88 	bl	8000ce0 <HAL_InitTick>

  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	40022000 	.word	0x40022000
 80023e0:	40021000 	.word	0x40021000
 80023e4:	08002780 	.word	0x08002780
 80023e8:	20000000 	.word	0x20000000
 80023ec:	20000004 	.word	0x20000004

080023f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b087      	sub	sp, #28
 80023f4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023f6:	2300      	movs	r3, #0
 80023f8:	60fb      	str	r3, [r7, #12]
 80023fa:	2300      	movs	r3, #0
 80023fc:	60bb      	str	r3, [r7, #8]
 80023fe:	2300      	movs	r3, #0
 8002400:	617b      	str	r3, [r7, #20]
 8002402:	2300      	movs	r3, #0
 8002404:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002406:	2300      	movs	r3, #0
 8002408:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800240a:	4b1e      	ldr	r3, [pc, #120]	; (8002484 <HAL_RCC_GetSysClockFreq+0x94>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f003 030c 	and.w	r3, r3, #12
 8002416:	2b04      	cmp	r3, #4
 8002418:	d002      	beq.n	8002420 <HAL_RCC_GetSysClockFreq+0x30>
 800241a:	2b08      	cmp	r3, #8
 800241c:	d003      	beq.n	8002426 <HAL_RCC_GetSysClockFreq+0x36>
 800241e:	e027      	b.n	8002470 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002420:	4b19      	ldr	r3, [pc, #100]	; (8002488 <HAL_RCC_GetSysClockFreq+0x98>)
 8002422:	613b      	str	r3, [r7, #16]
      break;
 8002424:	e027      	b.n	8002476 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	0c9b      	lsrs	r3, r3, #18
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	4a17      	ldr	r2, [pc, #92]	; (800248c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002430:	5cd3      	ldrb	r3, [r2, r3]
 8002432:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d010      	beq.n	8002460 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800243e:	4b11      	ldr	r3, [pc, #68]	; (8002484 <HAL_RCC_GetSysClockFreq+0x94>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	0c5b      	lsrs	r3, r3, #17
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	4a11      	ldr	r2, [pc, #68]	; (8002490 <HAL_RCC_GetSysClockFreq+0xa0>)
 800244a:	5cd3      	ldrb	r3, [r2, r3]
 800244c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a0d      	ldr	r2, [pc, #52]	; (8002488 <HAL_RCC_GetSysClockFreq+0x98>)
 8002452:	fb03 f202 	mul.w	r2, r3, r2
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	fbb2 f3f3 	udiv	r3, r2, r3
 800245c:	617b      	str	r3, [r7, #20]
 800245e:	e004      	b.n	800246a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a0c      	ldr	r2, [pc, #48]	; (8002494 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002464:	fb02 f303 	mul.w	r3, r2, r3
 8002468:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	613b      	str	r3, [r7, #16]
      break;
 800246e:	e002      	b.n	8002476 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002470:	4b05      	ldr	r3, [pc, #20]	; (8002488 <HAL_RCC_GetSysClockFreq+0x98>)
 8002472:	613b      	str	r3, [r7, #16]
      break;
 8002474:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002476:	693b      	ldr	r3, [r7, #16]
}
 8002478:	4618      	mov	r0, r3
 800247a:	371c      	adds	r7, #28
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	40021000 	.word	0x40021000
 8002488:	007a1200 	.word	0x007a1200
 800248c:	08002798 	.word	0x08002798
 8002490:	080027a8 	.word	0x080027a8
 8002494:	003d0900 	.word	0x003d0900

08002498 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800249c:	4b02      	ldr	r3, [pc, #8]	; (80024a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800249e:	681b      	ldr	r3, [r3, #0]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bc80      	pop	{r7}
 80024a6:	4770      	bx	lr
 80024a8:	20000000 	.word	0x20000000

080024ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024b0:	f7ff fff2 	bl	8002498 <HAL_RCC_GetHCLKFreq>
 80024b4:	4602      	mov	r2, r0
 80024b6:	4b05      	ldr	r3, [pc, #20]	; (80024cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	0a1b      	lsrs	r3, r3, #8
 80024bc:	f003 0307 	and.w	r3, r3, #7
 80024c0:	4903      	ldr	r1, [pc, #12]	; (80024d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024c2:	5ccb      	ldrb	r3, [r1, r3]
 80024c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40021000 	.word	0x40021000
 80024d0:	08002790 	.word	0x08002790

080024d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80024d8:	f7ff ffde 	bl	8002498 <HAL_RCC_GetHCLKFreq>
 80024dc:	4602      	mov	r2, r0
 80024de:	4b05      	ldr	r3, [pc, #20]	; (80024f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	0adb      	lsrs	r3, r3, #11
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	4903      	ldr	r1, [pc, #12]	; (80024f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024ea:	5ccb      	ldrb	r3, [r1, r3]
 80024ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40021000 	.word	0x40021000
 80024f8:	08002790 	.word	0x08002790

080024fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002504:	4b0a      	ldr	r3, [pc, #40]	; (8002530 <RCC_Delay+0x34>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a0a      	ldr	r2, [pc, #40]	; (8002534 <RCC_Delay+0x38>)
 800250a:	fba2 2303 	umull	r2, r3, r2, r3
 800250e:	0a5b      	lsrs	r3, r3, #9
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	fb02 f303 	mul.w	r3, r2, r3
 8002516:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002518:	bf00      	nop
  }
  while (Delay --);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	1e5a      	subs	r2, r3, #1
 800251e:	60fa      	str	r2, [r7, #12]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1f9      	bne.n	8002518 <RCC_Delay+0x1c>
}
 8002524:	bf00      	nop
 8002526:	bf00      	nop
 8002528:	3714      	adds	r7, #20
 800252a:	46bd      	mov	sp, r7
 800252c:	bc80      	pop	{r7}
 800252e:	4770      	bx	lr
 8002530:	20000000 	.word	0x20000000
 8002534:	10624dd3 	.word	0x10624dd3

08002538 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e042      	b.n	80025d0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d106      	bne.n	8002564 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f7fe fae0 	bl	8000b24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2224      	movs	r2, #36	; 0x24
 8002568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68da      	ldr	r2, [r3, #12]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800257a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f000 f82b 	bl	80025d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	691a      	ldr	r2, [r3, #16]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002590:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	695a      	ldr	r2, [r3, #20]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68da      	ldr	r2, [r3, #12]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2220      	movs	r2, #32
 80025bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2220      	movs	r2, #32
 80025c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	68da      	ldr	r2, [r3, #12]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	689a      	ldr	r2, [r3, #8]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	431a      	orrs	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	695b      	ldr	r3, [r3, #20]
 8002604:	4313      	orrs	r3, r2
 8002606:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002612:	f023 030c 	bic.w	r3, r3, #12
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	6812      	ldr	r2, [r2, #0]
 800261a:	68b9      	ldr	r1, [r7, #8]
 800261c:	430b      	orrs	r3, r1
 800261e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	699a      	ldr	r2, [r3, #24]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	430a      	orrs	r2, r1
 8002634:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a2c      	ldr	r2, [pc, #176]	; (80026ec <UART_SetConfig+0x114>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d103      	bne.n	8002648 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002640:	f7ff ff48 	bl	80024d4 <HAL_RCC_GetPCLK2Freq>
 8002644:	60f8      	str	r0, [r7, #12]
 8002646:	e002      	b.n	800264e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002648:	f7ff ff30 	bl	80024ac <HAL_RCC_GetPCLK1Freq>
 800264c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	4613      	mov	r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4413      	add	r3, r2
 8002656:	009a      	lsls	r2, r3, #2
 8002658:	441a      	add	r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	fbb2 f3f3 	udiv	r3, r2, r3
 8002664:	4a22      	ldr	r2, [pc, #136]	; (80026f0 <UART_SetConfig+0x118>)
 8002666:	fba2 2303 	umull	r2, r3, r2, r3
 800266a:	095b      	lsrs	r3, r3, #5
 800266c:	0119      	lsls	r1, r3, #4
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	4613      	mov	r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	4413      	add	r3, r2
 8002676:	009a      	lsls	r2, r3, #2
 8002678:	441a      	add	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	fbb2 f2f3 	udiv	r2, r2, r3
 8002684:	4b1a      	ldr	r3, [pc, #104]	; (80026f0 <UART_SetConfig+0x118>)
 8002686:	fba3 0302 	umull	r0, r3, r3, r2
 800268a:	095b      	lsrs	r3, r3, #5
 800268c:	2064      	movs	r0, #100	; 0x64
 800268e:	fb00 f303 	mul.w	r3, r0, r3
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	011b      	lsls	r3, r3, #4
 8002696:	3332      	adds	r3, #50	; 0x32
 8002698:	4a15      	ldr	r2, [pc, #84]	; (80026f0 <UART_SetConfig+0x118>)
 800269a:	fba2 2303 	umull	r2, r3, r2, r3
 800269e:	095b      	lsrs	r3, r3, #5
 80026a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026a4:	4419      	add	r1, r3
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	4613      	mov	r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	4413      	add	r3, r2
 80026ae:	009a      	lsls	r2, r3, #2
 80026b0:	441a      	add	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80026bc:	4b0c      	ldr	r3, [pc, #48]	; (80026f0 <UART_SetConfig+0x118>)
 80026be:	fba3 0302 	umull	r0, r3, r3, r2
 80026c2:	095b      	lsrs	r3, r3, #5
 80026c4:	2064      	movs	r0, #100	; 0x64
 80026c6:	fb00 f303 	mul.w	r3, r0, r3
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	011b      	lsls	r3, r3, #4
 80026ce:	3332      	adds	r3, #50	; 0x32
 80026d0:	4a07      	ldr	r2, [pc, #28]	; (80026f0 <UART_SetConfig+0x118>)
 80026d2:	fba2 2303 	umull	r2, r3, r2, r3
 80026d6:	095b      	lsrs	r3, r3, #5
 80026d8:	f003 020f 	and.w	r2, r3, #15
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	440a      	add	r2, r1
 80026e2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80026e4:	bf00      	nop
 80026e6:	3710      	adds	r7, #16
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	40013800 	.word	0x40013800
 80026f0:	51eb851f 	.word	0x51eb851f

080026f4 <memset>:
 80026f4:	4603      	mov	r3, r0
 80026f6:	4402      	add	r2, r0
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d100      	bne.n	80026fe <memset+0xa>
 80026fc:	4770      	bx	lr
 80026fe:	f803 1b01 	strb.w	r1, [r3], #1
 8002702:	e7f9      	b.n	80026f8 <memset+0x4>

08002704 <__libc_init_array>:
 8002704:	b570      	push	{r4, r5, r6, lr}
 8002706:	2600      	movs	r6, #0
 8002708:	4d0c      	ldr	r5, [pc, #48]	; (800273c <__libc_init_array+0x38>)
 800270a:	4c0d      	ldr	r4, [pc, #52]	; (8002740 <__libc_init_array+0x3c>)
 800270c:	1b64      	subs	r4, r4, r5
 800270e:	10a4      	asrs	r4, r4, #2
 8002710:	42a6      	cmp	r6, r4
 8002712:	d109      	bne.n	8002728 <__libc_init_array+0x24>
 8002714:	f000 f828 	bl	8002768 <_init>
 8002718:	2600      	movs	r6, #0
 800271a:	4d0a      	ldr	r5, [pc, #40]	; (8002744 <__libc_init_array+0x40>)
 800271c:	4c0a      	ldr	r4, [pc, #40]	; (8002748 <__libc_init_array+0x44>)
 800271e:	1b64      	subs	r4, r4, r5
 8002720:	10a4      	asrs	r4, r4, #2
 8002722:	42a6      	cmp	r6, r4
 8002724:	d105      	bne.n	8002732 <__libc_init_array+0x2e>
 8002726:	bd70      	pop	{r4, r5, r6, pc}
 8002728:	f855 3b04 	ldr.w	r3, [r5], #4
 800272c:	4798      	blx	r3
 800272e:	3601      	adds	r6, #1
 8002730:	e7ee      	b.n	8002710 <__libc_init_array+0xc>
 8002732:	f855 3b04 	ldr.w	r3, [r5], #4
 8002736:	4798      	blx	r3
 8002738:	3601      	adds	r6, #1
 800273a:	e7f2      	b.n	8002722 <__libc_init_array+0x1e>
 800273c:	080027ac 	.word	0x080027ac
 8002740:	080027ac 	.word	0x080027ac
 8002744:	080027ac 	.word	0x080027ac
 8002748:	080027b0 	.word	0x080027b0

0800274c <memcpy>:
 800274c:	440a      	add	r2, r1
 800274e:	4291      	cmp	r1, r2
 8002750:	f100 33ff 	add.w	r3, r0, #4294967295
 8002754:	d100      	bne.n	8002758 <memcpy+0xc>
 8002756:	4770      	bx	lr
 8002758:	b510      	push	{r4, lr}
 800275a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800275e:	4291      	cmp	r1, r2
 8002760:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002764:	d1f9      	bne.n	800275a <memcpy+0xe>
 8002766:	bd10      	pop	{r4, pc}

08002768 <_init>:
 8002768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800276a:	bf00      	nop
 800276c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800276e:	bc08      	pop	{r3}
 8002770:	469e      	mov	lr, r3
 8002772:	4770      	bx	lr

08002774 <_fini>:
 8002774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002776:	bf00      	nop
 8002778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800277a:	bc08      	pop	{r3}
 800277c:	469e      	mov	lr, r3
 800277e:	4770      	bx	lr
