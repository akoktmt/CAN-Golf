
CAN_Goft.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a30  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002b3c  08002b3c  00012b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b68  08002b68  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002b68  08002b68  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b68  08002b68  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b68  08002b68  00012b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b6c  08002b6c  00012b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002b70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  2000000c  08002b7c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08002b7c  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009487  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019bf  00000000  00000000  000294ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007e8  00000000  00000000  0002aec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000060b  00000000  00000000  0002b6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001672c  00000000  00000000  0002bcb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009430  00000000  00000000  000423df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084a2c  00000000  00000000  0004b80f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001f8c  00000000  00000000  000d023c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000d21c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b24 	.word	0x08002b24

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002b24 	.word	0x08002b24

0800014c <CANBufferHandleStruct_Init>:
#include "canframe.h"
#include "stm32f1xx_hal_can.h"
#include "CRC.h"
#include "CAN_Flag.h"
extern CAN_HandleTypeDef hcan;
void CANBufferHandleStruct_Init(CANBufferHandleStruct *Buffer) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b096      	sub	sp, #88	; 0x58
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	NodeBufferHandle defaultNodeHandle = {0};
 8000154:	f107 0308 	add.w	r3, r7, #8
 8000158:	2249      	movs	r2, #73	; 0x49
 800015a:	2100      	movs	r1, #0
 800015c:	4618      	mov	r0, r3
 800015e:	f002 fca7 	bl	8002ab0 <memset>
	Buffer->Buffer_Index = 0;
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2200      	movs	r2, #0
 8000166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	Buffer->SenderID = 0;
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	2200      	movs	r2, #0
 800016e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	Buffer->RecvID = 0;
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	2200      	movs	r2, #0
 8000176:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	Buffer->FrameType_Index = SET_UP_FRAME;
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	2200      	movs	r2, #0
 800017e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	Buffer->PacketDataLength = 0;
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	2200      	movs	r2, #0
 8000186:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	Buffer->CRCValue = 0;
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2200      	movs	r2, #0
 800018e:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	Buffer->NumberOfFrame=0;
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	2200      	movs	r2, #0
 8000196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	memset(Buffer->NetworkBuffer, 0, sizeof(Buffer->NetworkBuffer));
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	2240      	movs	r2, #64	; 0x40
 800019e:	2100      	movs	r1, #0
 80001a0:	4618      	mov	r0, r3
 80001a2:	f002 fc85 	bl	8002ab0 <memset>
	memset(Buffer->Buffer, 0x55, sizeof(Buffer->Buffer));
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	3348      	adds	r3, #72	; 0x48
 80001aa:	2240      	movs	r2, #64	; 0x40
 80001ac:	2155      	movs	r1, #85	; 0x55
 80001ae:	4618      	mov	r0, r3
 80001b0:	f002 fc7e 	bl	8002ab0 <memset>
	memset(Buffer->StoreData, 0, sizeof(Buffer->StoreData));
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	3388      	adds	r3, #136	; 0x88
 80001b8:	2240      	movs	r2, #64	; 0x40
 80001ba:	2100      	movs	r1, #0
 80001bc:	4618      	mov	r0, r3
 80001be:	f002 fc77 	bl	8002ab0 <memset>
	for (int i = 0; i < 16; i++) {
 80001c2:	2300      	movs	r3, #0
 80001c4:	657b      	str	r3, [r7, #84]	; 0x54
 80001c6:	e012      	b.n	80001ee <CANBufferHandleStruct_Init+0xa2>
		Buffer->NodeHandle[i] = defaultNodeHandle;
 80001c8:	6879      	ldr	r1, [r7, #4]
 80001ca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80001cc:	4613      	mov	r3, r2
 80001ce:	00db      	lsls	r3, r3, #3
 80001d0:	4413      	add	r3, r2
 80001d2:	00db      	lsls	r3, r3, #3
 80001d4:	4413      	add	r3, r2
 80001d6:	440b      	add	r3, r1
 80001d8:	33c8      	adds	r3, #200	; 0xc8
 80001da:	3302      	adds	r3, #2
 80001dc:	f107 0108 	add.w	r1, r7, #8
 80001e0:	2249      	movs	r2, #73	; 0x49
 80001e2:	4618      	mov	r0, r3
 80001e4:	f002 fc90 	bl	8002b08 <memcpy>
	for (int i = 0; i < 16; i++) {
 80001e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80001ea:	3301      	adds	r3, #1
 80001ec:	657b      	str	r3, [r7, #84]	; 0x54
 80001ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80001f0:	2b0f      	cmp	r3, #15
 80001f2:	dde9      	ble.n	80001c8 <CANBufferHandleStruct_Init+0x7c>
	}
}
 80001f4:	bf00      	nop
 80001f6:	bf00      	nop
 80001f8:	3758      	adds	r7, #88	; 0x58
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bd80      	pop	{r7, pc}

080001fe <FlagsDataHandle_Init>:
void FlagsDataHandle_Init(FlagsDataHandle *FlagInit) {
 80001fe:	b580      	push	{r7, lr}
 8000200:	b082      	sub	sp, #8
 8000202:	af00      	add	r7, sp, #0
 8000204:	6078      	str	r0, [r7, #4]
	FlagInit->Bits.Flag_bit_0 = 0;
 8000206:	687a      	ldr	r2, [r7, #4]
 8000208:	7a93      	ldrb	r3, [r2, #10]
 800020a:	f36f 0300 	bfc	r3, #0, #1
 800020e:	7293      	strb	r3, [r2, #10]
	FlagInit->Bits.Flag_bit_1 = 0;
 8000210:	687a      	ldr	r2, [r7, #4]
 8000212:	7a93      	ldrb	r3, [r2, #10]
 8000214:	f36f 0341 	bfc	r3, #1, #1
 8000218:	7293      	strb	r3, [r2, #10]
	FlagInit->Bits.Flag_bit_2 = 0;
 800021a:	687a      	ldr	r2, [r7, #4]
 800021c:	7a93      	ldrb	r3, [r2, #10]
 800021e:	f36f 0382 	bfc	r3, #2, #1
 8000222:	7293      	strb	r3, [r2, #10]
	FlagInit->Bits.Flag_bit_3 = 0;
 8000224:	687a      	ldr	r2, [r7, #4]
 8000226:	7a93      	ldrb	r3, [r2, #10]
 8000228:	f36f 03c3 	bfc	r3, #3, #1
 800022c:	7293      	strb	r3, [r2, #10]
	FlagInit->Bits.Flag_bit_4 = 0;
 800022e:	687a      	ldr	r2, [r7, #4]
 8000230:	7a93      	ldrb	r3, [r2, #10]
 8000232:	f36f 1304 	bfc	r3, #4, #1
 8000236:	7293      	strb	r3, [r2, #10]
	FlagInit->Bits.Flag_bit_5 = 0;
 8000238:	687a      	ldr	r2, [r7, #4]
 800023a:	7a93      	ldrb	r3, [r2, #10]
 800023c:	f36f 1345 	bfc	r3, #5, #1
 8000240:	7293      	strb	r3, [r2, #10]
	FlagInit->Bits.Flag_bit_6 = 0;
 8000242:	687a      	ldr	r2, [r7, #4]
 8000244:	7a93      	ldrb	r3, [r2, #10]
 8000246:	f36f 1386 	bfc	r3, #6, #1
 800024a:	7293      	strb	r3, [r2, #10]
	FlagInit->Bits.Flag_bit_7 = 0;
 800024c:	687a      	ldr	r2, [r7, #4]
 800024e:	7a93      	ldrb	r3, [r2, #10]
 8000250:	f36f 13c7 	bfc	r3, #7, #1
 8000254:	7293      	strb	r3, [r2, #10]
	FlagInit->FlagDuplicate=0;
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	2200      	movs	r2, #0
 800025a:	701a      	strb	r2, [r3, #0]
	FlagInit->SumOfFlag=0;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2200      	movs	r2, #0
 8000260:	725a      	strb	r2, [r3, #9]
	memset(FlagInit->FlagFrameFull,0,sizeof(FlagInit->FlagFrameFull));
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	3301      	adds	r3, #1
 8000266:	2208      	movs	r2, #8
 8000268:	2100      	movs	r1, #0
 800026a:	4618      	mov	r0, r3
 800026c:	f002 fc20 	bl	8002ab0 <memset>
}
 8000270:	bf00      	nop
 8000272:	3708      	adds	r7, #8
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}

08000278 <CAN_TXHeaderConfig>:
void CAN_TXHeaderConfig(CAN_TxHeaderTypeDef *Txheader, uint32_t StdId) {
 8000278:	b480      	push	{r7}
 800027a:	b083      	sub	sp, #12
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
 8000280:	6039      	str	r1, [r7, #0]
	Txheader->DLC = 8;
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	2208      	movs	r2, #8
 8000286:	611a      	str	r2, [r3, #16]
	Txheader->RTR = CAN_RTR_DATA;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2200      	movs	r2, #0
 800028c:	60da      	str	r2, [r3, #12]
	Txheader->IDE = CAN_ID_STD;
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	2200      	movs	r2, #0
 8000292:	609a      	str	r2, [r3, #8]
	Txheader->StdId = StdId;
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	683a      	ldr	r2, [r7, #0]
 8000298:	601a      	str	r2, [r3, #0]
}
 800029a:	bf00      	nop
 800029c:	370c      	adds	r7, #12
 800029e:	46bd      	mov	sp, r7
 80002a0:	bc80      	pop	{r7}
 80002a2:	4770      	bx	lr

080002a4 <NodeBufferHandle_Init>:
void NodeBufferHandle_Init(NodeBufferHandle *NodeBuffer) {
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
	NodeBuffer->NodeIndex = 0;
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	2200      	movs	r2, #0
 80002b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	NodeBuffer->CRCValue = 0;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	2200      	movs	r2, #0
 80002b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	NodeBuffer->FrameType = 0;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	2200      	movs	r2, #0
 80002c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	NodeBuffer->NumberOfFlags = 0;
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	2200      	movs	r2, #0
 80002c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	memset(NodeBuffer->NodeBuffer, 0, sizeof(NodeBuffer->NodeBuffer));
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	3301      	adds	r3, #1
 80002d0:	2240      	movs	r2, #64	; 0x40
 80002d2:	2100      	movs	r1, #0
 80002d4:	4618      	mov	r0, r3
 80002d6:	f002 fbeb 	bl	8002ab0 <memset>
}
 80002da:	bf00      	nop
 80002dc:	3708      	adds	r7, #8
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
	...

080002e4 <CAN_Send_Response>:
uint16_t CAN_Send_Response(uint8_t ID,uint8_t Opcode,uint8_t FrameType){
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b08c      	sub	sp, #48	; 0x30
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	4603      	mov	r3, r0
 80002ec:	71fb      	strb	r3, [r7, #7]
 80002ee:	460b      	mov	r3, r1
 80002f0:	71bb      	strb	r3, [r7, #6]
 80002f2:	4613      	mov	r3, r2
 80002f4:	717b      	strb	r3, [r7, #5]
	CAN_TxHeaderTypeDef TxHeader;
	uint32_t Txmailbox;
	uint8_t OpcodeData[8] = { Opcode, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55 };
 80002f6:	79bb      	ldrb	r3, [r7, #6]
 80002f8:	723b      	strb	r3, [r7, #8]
 80002fa:	2355      	movs	r3, #85	; 0x55
 80002fc:	727b      	strb	r3, [r7, #9]
 80002fe:	2355      	movs	r3, #85	; 0x55
 8000300:	72bb      	strb	r3, [r7, #10]
 8000302:	2355      	movs	r3, #85	; 0x55
 8000304:	72fb      	strb	r3, [r7, #11]
 8000306:	2355      	movs	r3, #85	; 0x55
 8000308:	733b      	strb	r3, [r7, #12]
 800030a:	2355      	movs	r3, #85	; 0x55
 800030c:	737b      	strb	r3, [r7, #13]
 800030e:	2355      	movs	r3, #85	; 0x55
 8000310:	73bb      	strb	r3, [r7, #14]
 8000312:	2355      	movs	r3, #85	; 0x55
 8000314:	73fb      	strb	r3, [r7, #15]
	uint8_t StID=0x00;
 8000316:	2300      	movs	r3, #0
 8000318:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	StID|=ID;
 800031c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000320:	79fb      	ldrb	r3, [r7, #7]
 8000322:	4313      	orrs	r3, r2
 8000324:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	StID=(StID<<3)|FrameType;
 8000328:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800032c:	00db      	lsls	r3, r3, #3
 800032e:	b25a      	sxtb	r2, r3
 8000330:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000334:	4313      	orrs	r3, r2
 8000336:	b25b      	sxtb	r3, r3
 8000338:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	CAN_TXHeaderConfig(&TxHeader, StID);
 800033c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000340:	f107 0314 	add.w	r3, r7, #20
 8000344:	4611      	mov	r1, r2
 8000346:	4618      	mov	r0, r3
 8000348:	f7ff ff96 	bl	8000278 <CAN_TXHeaderConfig>
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, OpcodeData, &Txmailbox)
 800034c:	f107 0310 	add.w	r3, r7, #16
 8000350:	f107 0208 	add.w	r2, r7, #8
 8000354:	f107 0114 	add.w	r1, r7, #20
 8000358:	480a      	ldr	r0, [pc, #40]	; (8000384 <CAN_Send_Response+0xa0>)
 800035a:	f000 ff91 	bl	8001280 <HAL_CAN_AddTxMessage>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <CAN_Send_Response+0x84>
			!= HAL_OK) {
		Error_Handler();
 8000364:	f000 fb92 	bl	8000a8c <Error_Handler>
	}
	while (HAL_CAN_IsTxMessagePending(&hcan, Txmailbox))
 8000368:	bf00      	nop
 800036a:	693b      	ldr	r3, [r7, #16]
 800036c:	4619      	mov	r1, r3
 800036e:	4805      	ldr	r0, [pc, #20]	; (8000384 <CAN_Send_Response+0xa0>)
 8000370:	f001 f855 	bl	800141e <HAL_CAN_IsTxMessagePending>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d1f7      	bne.n	800036a <CAN_Send_Response+0x86>
		;
	return HAL_OK;
 800037a:	2300      	movs	r3, #0
}
 800037c:	4618      	mov	r0, r3
 800037e:	3730      	adds	r7, #48	; 0x30
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	20000028 	.word	0x20000028

08000388 <processFrame>:
void processFrame(FlagsDataHandle *FlagHandle,uint8_t ID,CANBufferHandleStruct *RxBuffer,uint8_t FrameType,uint8_t* Data) {
 8000388:	b580      	push	{r7, lr}
 800038a:	b084      	sub	sp, #16
 800038c:	af00      	add	r7, sp, #0
 800038e:	60f8      	str	r0, [r7, #12]
 8000390:	607a      	str	r2, [r7, #4]
 8000392:	461a      	mov	r2, r3
 8000394:	460b      	mov	r3, r1
 8000396:	72fb      	strb	r3, [r7, #11]
 8000398:	4613      	mov	r3, r2
 800039a:	72bb      	strb	r3, [r7, #10]
    if (RxBuffer->NodeHandle[ID].FrameType == FrameType && FlagHandle->FlagFrameFull[FrameType] == 0) {
 800039c:	7afa      	ldrb	r2, [r7, #11]
 800039e:	6879      	ldr	r1, [r7, #4]
 80003a0:	4613      	mov	r3, r2
 80003a2:	00db      	lsls	r3, r3, #3
 80003a4:	4413      	add	r3, r2
 80003a6:	00db      	lsls	r3, r3, #3
 80003a8:	4413      	add	r3, r2
 80003aa:	440b      	add	r3, r1
 80003ac:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	7aba      	ldrb	r2, [r7, #10]
 80003b4:	429a      	cmp	r2, r3
 80003b6:	d130      	bne.n	800041a <processFrame+0x92>
 80003b8:	7abb      	ldrb	r3, [r7, #10]
 80003ba:	68fa      	ldr	r2, [r7, #12]
 80003bc:	4413      	add	r3, r2
 80003be:	785b      	ldrb	r3, [r3, #1]
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d12a      	bne.n	800041a <processFrame+0x92>
    	memcpy(RxBuffer->NodeHandle[ID].NodeBuffer[RxBuffer->NodeHandle[ID].FrameType], Data, CAN_MAX_DATA);
 80003c4:	7afa      	ldrb	r2, [r7, #11]
 80003c6:	7af9      	ldrb	r1, [r7, #11]
 80003c8:	6878      	ldr	r0, [r7, #4]
 80003ca:	460b      	mov	r3, r1
 80003cc:	00db      	lsls	r3, r3, #3
 80003ce:	440b      	add	r3, r1
 80003d0:	00db      	lsls	r3, r3, #3
 80003d2:	440b      	add	r3, r1
 80003d4:	4403      	add	r3, r0
 80003d6:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	00d9      	lsls	r1, r3, #3
 80003de:	4613      	mov	r3, r2
 80003e0:	00db      	lsls	r3, r3, #3
 80003e2:	4413      	add	r3, r2
 80003e4:	00db      	lsls	r3, r3, #3
 80003e6:	4413      	add	r3, r2
 80003e8:	440b      	add	r3, r1
 80003ea:	33c8      	adds	r3, #200	; 0xc8
 80003ec:	687a      	ldr	r2, [r7, #4]
 80003ee:	4413      	add	r3, r2
 80003f0:	3303      	adds	r3, #3
 80003f2:	2208      	movs	r2, #8
 80003f4:	69b9      	ldr	r1, [r7, #24]
 80003f6:	4618      	mov	r0, r3
 80003f8:	f002 fb86 	bl	8002b08 <memcpy>
        FlagHandle->FlagFrameFull[FrameType]= 1;
 80003fc:	7abb      	ldrb	r3, [r7, #10]
 80003fe:	68fa      	ldr	r2, [r7, #12]
 8000400:	4413      	add	r3, r2
 8000402:	2201      	movs	r2, #1
 8000404:	705a      	strb	r2, [r3, #1]
        FlagHandle->SumOfFlag+=FlagHandle->FlagFrameFull[FrameType];
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	7a5a      	ldrb	r2, [r3, #9]
 800040a:	7abb      	ldrb	r3, [r7, #10]
 800040c:	68f9      	ldr	r1, [r7, #12]
 800040e:	440b      	add	r3, r1
 8000410:	785b      	ldrb	r3, [r3, #1]
 8000412:	4413      	add	r3, r2
 8000414:	b2da      	uxtb	r2, r3
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	725a      	strb	r2, [r3, #9]
    }
}
 800041a:	bf00      	nop
 800041c:	3710      	adds	r7, #16
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
	...

08000424 <CAN_Recieve_Physical>:
		BufferIndex = 0;
	}
	return HAL_OK;
}

uint8_t CAN_Recieve_Physical(CAN_RxHeaderTypeDef *RxHeader, uint8_t *Data) {
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
 800042c:	6039      	str	r1, [r7, #0]

	while (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) == 0)
 800042e:	bf00      	nop
 8000430:	2100      	movs	r1, #0
 8000432:	480b      	ldr	r0, [pc, #44]	; (8000460 <CAN_Recieve_Physical+0x3c>)
 8000434:	f001 f937 	bl	80016a6 <HAL_CAN_GetRxFifoFillLevel>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d0f8      	beq.n	8000430 <CAN_Recieve_Physical+0xc>
		;
	if (HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, RxHeader, Data) != HAL_OK) {
 800043e:	683b      	ldr	r3, [r7, #0]
 8000440:	687a      	ldr	r2, [r7, #4]
 8000442:	2100      	movs	r1, #0
 8000444:	4806      	ldr	r0, [pc, #24]	; (8000460 <CAN_Recieve_Physical+0x3c>)
 8000446:	f001 f80d 	bl	8001464 <HAL_CAN_GetRxMessage>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <CAN_Recieve_Physical+0x30>
		Error_Handler();
 8000450:	f000 fb1c 	bl	8000a8c <Error_Handler>
	}
	return HAL_OK;
 8000454:	2300      	movs	r3, #0
}
 8000456:	4618      	mov	r0, r3
 8000458:	3708      	adds	r7, #8
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	20000028 	.word	0x20000028

08000464 <CAN_Receive_DataLink>:

uint8_t CAN_Receive_DataLink(CAN_RxHeaderTypeDef *RxHeader,
		FlagsDataHandle *FlagHandle, CANBufferHandleStruct *RxBuffer,FlagRecDataEnum *FlagRecHandle) {
 8000464:	b580      	push	{r7, lr}
 8000466:	b08a      	sub	sp, #40	; 0x28
 8000468:	af02      	add	r7, sp, #8
 800046a:	60f8      	str	r0, [r7, #12]
 800046c:	60b9      	str	r1, [r7, #8]
 800046e:	607a      	str	r2, [r7, #4]
 8000470:	603b      	str	r3, [r7, #0]
	uint8_t Data[8] = { 0 };
 8000472:	2300      	movs	r3, #0
 8000474:	613b      	str	r3, [r7, #16]
 8000476:	2300      	movs	r3, #0
 8000478:	617b      	str	r3, [r7, #20]
	uint16_t StdID = 0;
 800047a:	2300      	movs	r3, #0
 800047c:	83bb      	strh	r3, [r7, #28]
	uint8_t ID = 0;
 800047e:	2300      	movs	r3, #0
 8000480:	76fb      	strb	r3, [r7, #27]
	uint8_t FrameType = 0;
 8000482:	2300      	movs	r3, #0
 8000484:	77fb      	strb	r3, [r7, #31]
	CAN_Recieve_Physical(RxHeader, Data);
 8000486:	f107 0310 	add.w	r3, r7, #16
 800048a:	4619      	mov	r1, r3
 800048c:	68f8      	ldr	r0, [r7, #12]
 800048e:	f7ff ffc9 	bl	8000424 <CAN_Recieve_Physical>

	StdID = RxHeader->StdId;
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	83bb      	strh	r3, [r7, #28]
	ID = (StdID >> 3) & 15;
 8000498:	8bbb      	ldrh	r3, [r7, #28]
 800049a:	08db      	lsrs	r3, r3, #3
 800049c:	b29b      	uxth	r3, r3
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	f003 030f 	and.w	r3, r3, #15
 80004a4:	76fb      	strb	r3, [r7, #27]
	RxBuffer->NodeHandle[ID].FrameType = StdID & 7;
 80004a6:	8bbb      	ldrh	r3, [r7, #28]
 80004a8:	b2db      	uxtb	r3, r3
 80004aa:	7efa      	ldrb	r2, [r7, #27]
 80004ac:	f003 0307 	and.w	r3, r3, #7
 80004b0:	b2d8      	uxtb	r0, r3
 80004b2:	6879      	ldr	r1, [r7, #4]
 80004b4:	4613      	mov	r3, r2
 80004b6:	00db      	lsls	r3, r3, #3
 80004b8:	4413      	add	r3, r2
 80004ba:	00db      	lsls	r3, r3, #3
 80004bc:	4413      	add	r3, r2
 80004be:	440b      	add	r3, r1
 80004c0:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80004c4:	4602      	mov	r2, r0
 80004c6:	701a      	strb	r2, [r3, #0]
	if (RxBuffer->NodeHandle[ID].FrameType == SET_UP_FRAME&&RxBuffer->NodeHandle[ID].DuplicateFrame!=1) {
 80004c8:	7efa      	ldrb	r2, [r7, #27]
 80004ca:	6879      	ldr	r1, [r7, #4]
 80004cc:	4613      	mov	r3, r2
 80004ce:	00db      	lsls	r3, r3, #3
 80004d0:	4413      	add	r3, r2
 80004d2:	00db      	lsls	r3, r3, #3
 80004d4:	4413      	add	r3, r2
 80004d6:	440b      	add	r3, r1
 80004d8:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d177      	bne.n	80005d2 <CAN_Receive_DataLink+0x16e>
 80004e2:	7efa      	ldrb	r2, [r7, #27]
 80004e4:	6879      	ldr	r1, [r7, #4]
 80004e6:	4613      	mov	r3, r2
 80004e8:	00db      	lsls	r3, r3, #3
 80004ea:	4413      	add	r3, r2
 80004ec:	00db      	lsls	r3, r3, #3
 80004ee:	4413      	add	r3, r2
 80004f0:	440b      	add	r3, r1
 80004f2:	f203 130b 	addw	r3, r3, #267	; 0x10b
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	2b01      	cmp	r3, #1
 80004fa:	d06a      	beq.n	80005d2 <CAN_Receive_DataLink+0x16e>
		RxBuffer->NodeHandle[ID].DuplicateFrame=1;
 80004fc:	7efa      	ldrb	r2, [r7, #27]
 80004fe:	6879      	ldr	r1, [r7, #4]
 8000500:	4613      	mov	r3, r2
 8000502:	00db      	lsls	r3, r3, #3
 8000504:	4413      	add	r3, r2
 8000506:	00db      	lsls	r3, r3, #3
 8000508:	4413      	add	r3, r2
 800050a:	440b      	add	r3, r1
 800050c:	f203 130b 	addw	r3, r3, #267	; 0x10b
 8000510:	2201      	movs	r2, #1
 8000512:	701a      	strb	r2, [r3, #0]
		RxBuffer->NodeHandle[ID].PacketLength = Data[6];
 8000514:	7efa      	ldrb	r2, [r7, #27]
 8000516:	7db8      	ldrb	r0, [r7, #22]
 8000518:	6879      	ldr	r1, [r7, #4]
 800051a:	4613      	mov	r3, r2
 800051c:	00db      	lsls	r3, r3, #3
 800051e:	4413      	add	r3, r2
 8000520:	00db      	lsls	r3, r3, #3
 8000522:	4413      	add	r3, r2
 8000524:	440b      	add	r3, r1
 8000526:	f203 130d 	addw	r3, r3, #269	; 0x10d
 800052a:	4602      	mov	r2, r0
 800052c:	701a      	strb	r2, [r3, #0]
		RxBuffer->NodeHandle[ID].CRCValue = Data[7];
 800052e:	7efa      	ldrb	r2, [r7, #27]
 8000530:	7df8      	ldrb	r0, [r7, #23]
 8000532:	6879      	ldr	r1, [r7, #4]
 8000534:	4613      	mov	r3, r2
 8000536:	00db      	lsls	r3, r3, #3
 8000538:	4413      	add	r3, r2
 800053a:	00db      	lsls	r3, r3, #3
 800053c:	4413      	add	r3, r2
 800053e:	440b      	add	r3, r1
 8000540:	f203 130f 	addw	r3, r3, #271	; 0x10f
 8000544:	4602      	mov	r2, r0
 8000546:	701a      	strb	r2, [r3, #0]
		if (RxBuffer->NodeHandle[ID].PacketLength % 8 == 0) {
 8000548:	7efa      	ldrb	r2, [r7, #27]
 800054a:	6879      	ldr	r1, [r7, #4]
 800054c:	4613      	mov	r3, r2
 800054e:	00db      	lsls	r3, r3, #3
 8000550:	4413      	add	r3, r2
 8000552:	00db      	lsls	r3, r3, #3
 8000554:	4413      	add	r3, r2
 8000556:	440b      	add	r3, r1
 8000558:	f203 130d 	addw	r3, r3, #269	; 0x10d
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	f003 0307 	and.w	r3, r3, #7
 8000562:	b2db      	uxtb	r3, r3
 8000564:	2b00      	cmp	r3, #0
 8000566:	d119      	bne.n	800059c <CAN_Receive_DataLink+0x138>
			RxBuffer->NodeHandle[ID].NumberOfFrame = (RxBuffer->NodeHandle[ID].PacketLength / 8);
 8000568:	7efa      	ldrb	r2, [r7, #27]
 800056a:	6879      	ldr	r1, [r7, #4]
 800056c:	4613      	mov	r3, r2
 800056e:	00db      	lsls	r3, r3, #3
 8000570:	4413      	add	r3, r2
 8000572:	00db      	lsls	r3, r3, #3
 8000574:	4413      	add	r3, r2
 8000576:	440b      	add	r3, r1
 8000578:	f203 130d 	addw	r3, r3, #269	; 0x10d
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	7efa      	ldrb	r2, [r7, #27]
 8000580:	08db      	lsrs	r3, r3, #3
 8000582:	b2d8      	uxtb	r0, r3
 8000584:	6879      	ldr	r1, [r7, #4]
 8000586:	4613      	mov	r3, r2
 8000588:	00db      	lsls	r3, r3, #3
 800058a:	4413      	add	r3, r2
 800058c:	00db      	lsls	r3, r3, #3
 800058e:	4413      	add	r3, r2
 8000590:	440b      	add	r3, r1
 8000592:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8000596:	4602      	mov	r2, r0
 8000598:	701a      	strb	r2, [r3, #0]
 800059a:	e01a      	b.n	80005d2 <CAN_Receive_DataLink+0x16e>
		} else {
			RxBuffer->NodeHandle[ID].NumberOfFrame = (RxBuffer->NodeHandle[ID].PacketLength / 8) + 1;
 800059c:	7efa      	ldrb	r2, [r7, #27]
 800059e:	6879      	ldr	r1, [r7, #4]
 80005a0:	4613      	mov	r3, r2
 80005a2:	00db      	lsls	r3, r3, #3
 80005a4:	4413      	add	r3, r2
 80005a6:	00db      	lsls	r3, r3, #3
 80005a8:	4413      	add	r3, r2
 80005aa:	440b      	add	r3, r1
 80005ac:	f203 130d 	addw	r3, r3, #269	; 0x10d
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	08db      	lsrs	r3, r3, #3
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	7efa      	ldrb	r2, [r7, #27]
 80005b8:	3301      	adds	r3, #1
 80005ba:	b2d8      	uxtb	r0, r3
 80005bc:	6879      	ldr	r1, [r7, #4]
 80005be:	4613      	mov	r3, r2
 80005c0:	00db      	lsls	r3, r3, #3
 80005c2:	4413      	add	r3, r2
 80005c4:	00db      	lsls	r3, r3, #3
 80005c6:	4413      	add	r3, r2
 80005c8:	440b      	add	r3, r1
 80005ca:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80005ce:	4602      	mov	r2, r0
 80005d0:	701a      	strb	r2, [r3, #0]
		if(RxBuffer->NodeHandle[ID].FrameType == SET_UP_FRAME)
		{
			//FlagFrameError
		}
	}
	switch (ID) {
 80005d2:	7efb      	ldrb	r3, [r7, #27]
 80005d4:	2b0f      	cmp	r3, #15
 80005d6:	f200 80bc 	bhi.w	8000752 <CAN_Receive_DataLink+0x2ee>
 80005da:	a201      	add	r2, pc, #4	; (adr r2, 80005e0 <CAN_Receive_DataLink+0x17c>)
 80005dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005e0:	08000753 	.word	0x08000753
 80005e4:	08000753 	.word	0x08000753
 80005e8:	08000753 	.word	0x08000753
 80005ec:	08000753 	.word	0x08000753
 80005f0:	08000753 	.word	0x08000753
 80005f4:	08000753 	.word	0x08000753
 80005f8:	08000753 	.word	0x08000753
 80005fc:	08000753 	.word	0x08000753
 8000600:	08000753 	.word	0x08000753
 8000604:	08000753 	.word	0x08000753
 8000608:	08000753 	.word	0x08000753
 800060c:	08000753 	.word	0x08000753
 8000610:	08000753 	.word	0x08000753
 8000614:	08000753 	.word	0x08000753
 8000618:	08000729 	.word	0x08000729
 800061c:	08000621 	.word	0x08000621
	case OBSTALCE8:
		RxBuffer->NodeHandle[ID].NodeIndex++;
 8000620:	7efa      	ldrb	r2, [r7, #27]
 8000622:	6879      	ldr	r1, [r7, #4]
 8000624:	4613      	mov	r3, r2
 8000626:	00db      	lsls	r3, r3, #3
 8000628:	4413      	add	r3, r2
 800062a:	00db      	lsls	r3, r3, #3
 800062c:	4413      	add	r3, r2
 800062e:	440b      	add	r3, r1
 8000630:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	3301      	adds	r3, #1
 8000638:	b2d8      	uxtb	r0, r3
 800063a:	6879      	ldr	r1, [r7, #4]
 800063c:	4613      	mov	r3, r2
 800063e:	00db      	lsls	r3, r3, #3
 8000640:	4413      	add	r3, r2
 8000642:	00db      	lsls	r3, r3, #3
 8000644:	4413      	add	r3, r2
 8000646:	440b      	add	r3, r1
 8000648:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800064c:	4602      	mov	r2, r0
 800064e:	701a      	strb	r2, [r3, #0]
		for(FrameType=0; FrameType<RxBuffer->NodeHandle[ID].NumberOfFrame;FrameType++)
 8000650:	2300      	movs	r3, #0
 8000652:	77fb      	strb	r3, [r7, #31]
 8000654:	e00c      	b.n	8000670 <CAN_Receive_DataLink+0x20c>
		{
			processFrame(FlagHandle, ID, RxBuffer,FrameType, Data);
 8000656:	7ffa      	ldrb	r2, [r7, #31]
 8000658:	7ef9      	ldrb	r1, [r7, #27]
 800065a:	f107 0310 	add.w	r3, r7, #16
 800065e:	9300      	str	r3, [sp, #0]
 8000660:	4613      	mov	r3, r2
 8000662:	687a      	ldr	r2, [r7, #4]
 8000664:	68b8      	ldr	r0, [r7, #8]
 8000666:	f7ff fe8f 	bl	8000388 <processFrame>
		for(FrameType=0; FrameType<RxBuffer->NodeHandle[ID].NumberOfFrame;FrameType++)
 800066a:	7ffb      	ldrb	r3, [r7, #31]
 800066c:	3301      	adds	r3, #1
 800066e:	77fb      	strb	r3, [r7, #31]
 8000670:	7efa      	ldrb	r2, [r7, #27]
 8000672:	6879      	ldr	r1, [r7, #4]
 8000674:	4613      	mov	r3, r2
 8000676:	00db      	lsls	r3, r3, #3
 8000678:	4413      	add	r3, r2
 800067a:	00db      	lsls	r3, r3, #3
 800067c:	4413      	add	r3, r2
 800067e:	440b      	add	r3, r1
 8000680:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	7ffa      	ldrb	r2, [r7, #31]
 8000688:	429a      	cmp	r2, r3
 800068a:	d3e4      	bcc.n	8000656 <CAN_Receive_DataLink+0x1f2>
		}
		if(RxBuffer->NodeHandle[ID].NodeIndex==RxBuffer->NodeHandle[ID].NumberOfFrame)
 800068c:	7efa      	ldrb	r2, [r7, #27]
 800068e:	6879      	ldr	r1, [r7, #4]
 8000690:	4613      	mov	r3, r2
 8000692:	00db      	lsls	r3, r3, #3
 8000694:	4413      	add	r3, r2
 8000696:	00db      	lsls	r3, r3, #3
 8000698:	4413      	add	r3, r2
 800069a:	440b      	add	r3, r1
 800069c:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80006a0:	7819      	ldrb	r1, [r3, #0]
 80006a2:	7efa      	ldrb	r2, [r7, #27]
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	4613      	mov	r3, r2
 80006a8:	00db      	lsls	r3, r3, #3
 80006aa:	4413      	add	r3, r2
 80006ac:	00db      	lsls	r3, r3, #3
 80006ae:	4413      	add	r3, r2
 80006b0:	4403      	add	r3, r0
 80006b2:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	4299      	cmp	r1, r3
 80006ba:	d149      	bne.n	8000750 <CAN_Receive_DataLink+0x2ec>
		{
			if(FlagHandle->SumOfFlag=RxBuffer->NodeHandle[ID].NumberOfFrame)
 80006bc:	7efa      	ldrb	r2, [r7, #27]
 80006be:	6879      	ldr	r1, [r7, #4]
 80006c0:	4613      	mov	r3, r2
 80006c2:	00db      	lsls	r3, r3, #3
 80006c4:	4413      	add	r3, r2
 80006c6:	00db      	lsls	r3, r3, #3
 80006c8:	4413      	add	r3, r2
 80006ca:	440b      	add	r3, r1
 80006cc:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80006d0:	781a      	ldrb	r2, [r3, #0]
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	725a      	strb	r2, [r3, #9]
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	7a5b      	ldrb	r3, [r3, #9]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d003      	beq.n	80006e6 <CAN_Receive_DataLink+0x282>
			{
				*FlagRecHandle=REC_SUCCESS;
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	2203      	movs	r2, #3
 80006e2:	701a      	strb	r2, [r3, #0]
						CAN_Send_Response(OBSTALCE8, FRAME_ERROR, FrameType);
					}
				}
			}
		}
	break;
 80006e4:	e034      	b.n	8000750 <CAN_Receive_DataLink+0x2ec>
				for(FrameType=0;FrameType<=RxBuffer->NodeHandle[ID].NumberOfFrame;FrameType++)
 80006e6:	2300      	movs	r3, #0
 80006e8:	77fb      	strb	r3, [r7, #31]
 80006ea:	e00e      	b.n	800070a <CAN_Receive_DataLink+0x2a6>
					if(FlagHandle->FlagFrameFull[FrameType]==0)
 80006ec:	7ffb      	ldrb	r3, [r7, #31]
 80006ee:	68ba      	ldr	r2, [r7, #8]
 80006f0:	4413      	add	r3, r2
 80006f2:	785b      	ldrb	r3, [r3, #1]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d105      	bne.n	8000704 <CAN_Receive_DataLink+0x2a0>
						CAN_Send_Response(OBSTALCE8, FRAME_ERROR, FrameType);
 80006f8:	7ffb      	ldrb	r3, [r7, #31]
 80006fa:	461a      	mov	r2, r3
 80006fc:	2103      	movs	r1, #3
 80006fe:	200f      	movs	r0, #15
 8000700:	f7ff fdf0 	bl	80002e4 <CAN_Send_Response>
				for(FrameType=0;FrameType<=RxBuffer->NodeHandle[ID].NumberOfFrame;FrameType++)
 8000704:	7ffb      	ldrb	r3, [r7, #31]
 8000706:	3301      	adds	r3, #1
 8000708:	77fb      	strb	r3, [r7, #31]
 800070a:	7efa      	ldrb	r2, [r7, #27]
 800070c:	6879      	ldr	r1, [r7, #4]
 800070e:	4613      	mov	r3, r2
 8000710:	00db      	lsls	r3, r3, #3
 8000712:	4413      	add	r3, r2
 8000714:	00db      	lsls	r3, r3, #3
 8000716:	4413      	add	r3, r2
 8000718:	440b      	add	r3, r1
 800071a:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	7ffa      	ldrb	r2, [r7, #31]
 8000722:	429a      	cmp	r2, r3
 8000724:	d9e2      	bls.n	80006ec <CAN_Receive_DataLink+0x288>
	break;
 8000726:	e013      	b.n	8000750 <CAN_Receive_DataLink+0x2ec>
	case OBSTALCE7:
		for(FrameType=0; FrameType<SIZE_FRAME_DATA;FrameType++)
 8000728:	2300      	movs	r3, #0
 800072a:	77fb      	strb	r3, [r7, #31]
 800072c:	e00c      	b.n	8000748 <CAN_Receive_DataLink+0x2e4>
				{
					processFrame(FlagHandle, ID, RxBuffer,FrameType, Data);
 800072e:	7ffa      	ldrb	r2, [r7, #31]
 8000730:	7ef9      	ldrb	r1, [r7, #27]
 8000732:	f107 0310 	add.w	r3, r7, #16
 8000736:	9300      	str	r3, [sp, #0]
 8000738:	4613      	mov	r3, r2
 800073a:	687a      	ldr	r2, [r7, #4]
 800073c:	68b8      	ldr	r0, [r7, #8]
 800073e:	f7ff fe23 	bl	8000388 <processFrame>
		for(FrameType=0; FrameType<SIZE_FRAME_DATA;FrameType++)
 8000742:	7ffb      	ldrb	r3, [r7, #31]
 8000744:	3301      	adds	r3, #1
 8000746:	77fb      	strb	r3, [r7, #31]
 8000748:	7ffb      	ldrb	r3, [r7, #31]
 800074a:	2b07      	cmp	r3, #7
 800074c:	d9ef      	bls.n	800072e <CAN_Receive_DataLink+0x2ca>
				}
		break;
 800074e:	e000      	b.n	8000752 <CAN_Receive_DataLink+0x2ee>
	break;
 8000750:	bf00      	nop
	case ALL_NODE:

		break;

}
	return HAL_OK;
 8000752:	2300      	movs	r3, #0
}
 8000754:	4618      	mov	r0, r3
 8000756:	3720      	adds	r7, #32
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}

0800075c <CAN_Config_filtering>:
//	Rec[SenderId].Index=0;
//	free(Rec);
//	return HAL_OK;
//}

uint32_t CAN_Config_filtering(void) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b08a      	sub	sp, #40	; 0x28
 8000760:	af00      	add	r7, sp, #0
CAN_FilterTypeDef Can_filter_init;
Can_filter_init.FilterActivation = ENABLE;
 8000762:	2301      	movs	r3, #1
 8000764:	623b      	str	r3, [r7, #32]
Can_filter_init.FilterBank = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
Can_filter_init.FilterFIFOAssignment = CAN_RX_FIFO0;
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
Can_filter_init.FilterIdHigh = 0x0000;
 800076e:	2300      	movs	r3, #0
 8000770:	603b      	str	r3, [r7, #0]
Can_filter_init.FilterIdLow = 0x0000;
 8000772:	2300      	movs	r3, #0
 8000774:	607b      	str	r3, [r7, #4]
Can_filter_init.FilterMaskIdHigh = 0x0000;
 8000776:	2300      	movs	r3, #0
 8000778:	60bb      	str	r3, [r7, #8]
Can_filter_init.FilterMaskIdLow = 0x0000;
 800077a:	2300      	movs	r3, #0
 800077c:	60fb      	str	r3, [r7, #12]
Can_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 800077e:	2300      	movs	r3, #0
 8000780:	61bb      	str	r3, [r7, #24]
Can_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 8000782:	2301      	movs	r3, #1
 8000784:	61fb      	str	r3, [r7, #28]
if (HAL_CAN_ConfigFilter(&hcan, &Can_filter_init) != HAL_OK) {
 8000786:	463b      	mov	r3, r7
 8000788:	4619      	mov	r1, r3
 800078a:	4806      	ldr	r0, [pc, #24]	; (80007a4 <CAN_Config_filtering+0x48>)
 800078c:	f000 fc6b 	bl	8001066 <HAL_CAN_ConfigFilter>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <CAN_Config_filtering+0x3e>
	Error_Handler();
 8000796:	f000 f979 	bl	8000a8c <Error_Handler>
}
return HAL_OK;
 800079a:	2300      	movs	r3, #0
}
 800079c:	4618      	mov	r0, r3
 800079e:	3728      	adds	r7, #40	; 0x28
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000028 	.word	0x20000028

080007a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	f5ad 6dcb 	sub.w	sp, sp, #1624	; 0x658
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b0:	f000 fad8 	bl	8000d64 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b4:	f000 f878 	bl	80008a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b8:	f000 f91c 	bl	80009f4 <MX_GPIO_Init>
  MX_CAN_Init();
 80007bc:	f000 f8ba 	bl	8000934 <MX_CAN_Init>
  MX_USART1_UART_Init();
 80007c0:	f000 f8ee 	bl	80009a0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  CAN_Config_filtering();
 80007c4:	f7ff ffca 	bl	800075c <CAN_Config_filtering>
  if(HAL_CAN_Start(&hcan)!=HAL_OK)
 80007c8:	4835      	ldr	r0, [pc, #212]	; (80008a0 <main+0xf8>)
 80007ca:	f000 fd15 	bl	80011f8 <HAL_CAN_Start>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <main+0x30>
     {
     	Error_Handler();
 80007d4:	f000 f95a 	bl	8000a8c <Error_Handler>
     }
  uint32_t Txmailbox;
  CANConfigIDTxtypedef pIDtype;
  pIDtype.MessageType=COMMAND_FRAME;
 80007d8:	2301      	movs	r3, #1
 80007da:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c
  pIDtype.SenderID=OBSTALCE8;
 80007de:	230f      	movs	r3, #15
 80007e0:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
  CANBufferHandleStruct Buffer;
  CANBufferHandleStruct_Init(&Buffer);
 80007e4:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff fcaf 	bl	800014c <CANBufferHandleStruct_Init>
  CAN_RxHeaderTypeDef RxHeader;
  FlagRecDataEnum FlagRec;
  FlagsDataHandle FlagHandle;
  FlagsDataHandle Flag;
  FlagsDataHandle_Init(&Flag);
 80007ee:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff fd03 	bl	80001fe <FlagsDataHandle_Init>
  NodeBufferHandle NodeID;
  NodeBufferHandle_Init(&NodeID);
 80007f8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff fd51 	bl	80002a4 <NodeBufferHandle_Init>
  uint8_t DataRec[16];
  char Data[64]={0};
 8000802:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8000806:	f5a3 63c7 	sub.w	r3, r3, #1592	; 0x638
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	3304      	adds	r3, #4
 8000810:	223c      	movs	r2, #60	; 0x3c
 8000812:	2100      	movs	r1, #0
 8000814:	4618      	mov	r0, r3
 8000816:	f002 f94b 	bl	8002ab0 <memset>
  uint8_t mess[30]={0};
 800081a:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800081e:	f5a3 63cb 	sub.w	r3, r3, #1624	; 0x658
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	3304      	adds	r3, #4
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]
 8000834:	615a      	str	r2, [r3, #20]
 8000836:	831a      	strh	r2, [r3, #24]
  uint8_t k=0;
 8000838:	2300      	movs	r3, #0
 800083a:	f887 3657 	strb.w	r3, [r7, #1623]	; 0x657
  for (int i=0; i<DATA_TEST;i++)
 800083e:	2300      	movs	r3, #0
 8000840:	f8c7 3650 	str.w	r3, [r7, #1616]	; 0x650
 8000844:	e013      	b.n	800086e <main+0xc6>
  {
	  Data[i]=k;
 8000846:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800084a:	f5a3 62c7 	sub.w	r2, r3, #1592	; 0x638
 800084e:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 8000852:	4413      	add	r3, r2
 8000854:	f897 2657 	ldrb.w	r2, [r7, #1623]	; 0x657
 8000858:	701a      	strb	r2, [r3, #0]
	  k=k+1;
 800085a:	f897 3657 	ldrb.w	r3, [r7, #1623]	; 0x657
 800085e:	3301      	adds	r3, #1
 8000860:	f887 3657 	strb.w	r3, [r7, #1623]	; 0x657
  for (int i=0; i<DATA_TEST;i++)
 8000864:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 8000868:	3301      	adds	r3, #1
 800086a:	f8c7 3650 	str.w	r3, [r7, #1616]	; 0x650
 800086e:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 8000872:	2b0f      	cmp	r3, #15
 8000874:	dde7      	ble.n	8000846 <main+0x9e>
    /* USER CODE BEGIN 3 */
	  //CAN_Send_Dataframe(pIDtype, Data, Txmailbox, TxBufferSend)
	  //CAN_Send_DataLink_Separate(&Buffer, Data);
	 // CAN_DataLink_Separate(&Buffer,Data,9);
	//	CAN_Network_Packet(&Buffer,Data,62);
	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000876:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800087a:	480a      	ldr	r0, [pc, #40]	; (80008a4 <main+0xfc>)
 800087c:	f001 fc10 	bl	80020a0 <HAL_GPIO_TogglePin>
	 //CAN_Send_Physical_Send(&Buffer, Data , DATA_TEST , &pIDtype, Txmailbox);
	// CAN_Recieve_Physical(&RxBuffer,DataRec);
	 //HAL_UART_Transmit( &huart1, DataRec, sizeof(DataRec), HAL_MAX_DELAY);
	 CAN_Receive_DataLink(&RxHeader,&Flag,&Buffer,&FlagRec);
 8000880:	f107 03d3 	add.w	r3, r7, #211	; 0xd3
 8000884:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8000888:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 800088c:	f107 00d4 	add.w	r0, r7, #212	; 0xd4
 8000890:	f7ff fde8 	bl	8000464 <CAN_Receive_DataLink>
	//CAN_Send_Response(0b1111, ACK, 0b010);
	 HAL_Delay(500);
 8000894:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000898:	f000 fac6 	bl	8000e28 <HAL_Delay>
	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800089c:	e7eb      	b.n	8000876 <main+0xce>
 800089e:	bf00      	nop
 80008a0:	20000028 	.word	0x20000028
 80008a4:	40011000 	.word	0x40011000

080008a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b090      	sub	sp, #64	; 0x40
 80008ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ae:	f107 0318 	add.w	r3, r7, #24
 80008b2:	2228      	movs	r2, #40	; 0x28
 80008b4:	2100      	movs	r1, #0
 80008b6:	4618      	mov	r0, r3
 80008b8:	f002 f8fa 	bl	8002ab0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
 80008c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008ca:	2301      	movs	r3, #1
 80008cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80008d4:	2300      	movs	r3, #0
 80008d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008d8:	2301      	movs	r3, #1
 80008da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008dc:	2302      	movs	r3, #2
 80008de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008e6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80008ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ec:	f107 0318 	add.w	r3, r7, #24
 80008f0:	4618      	mov	r0, r3
 80008f2:	f001 fbef 	bl	80020d4 <HAL_RCC_OscConfig>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80008fc:	f000 f8c6 	bl	8000a8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000900:	230f      	movs	r3, #15
 8000902:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000904:	2302      	movs	r3, #2
 8000906:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000908:	2300      	movs	r3, #0
 800090a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800090c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000910:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000912:	2300      	movs	r3, #0
 8000914:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	2102      	movs	r1, #2
 800091a:	4618      	mov	r0, r3
 800091c:	f001 fe5c 	bl	80025d8 <HAL_RCC_ClockConfig>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000926:	f000 f8b1 	bl	8000a8c <Error_Handler>
  }
}
 800092a:	bf00      	nop
 800092c:	3740      	adds	r7, #64	; 0x40
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000938:	4b17      	ldr	r3, [pc, #92]	; (8000998 <MX_CAN_Init+0x64>)
 800093a:	4a18      	ldr	r2, [pc, #96]	; (800099c <MX_CAN_Init+0x68>)
 800093c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 800093e:	4b16      	ldr	r3, [pc, #88]	; (8000998 <MX_CAN_Init+0x64>)
 8000940:	2204      	movs	r2, #4
 8000942:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000944:	4b14      	ldr	r3, [pc, #80]	; (8000998 <MX_CAN_Init+0x64>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800094a:	4b13      	ldr	r3, [pc, #76]	; (8000998 <MX_CAN_Init+0x64>)
 800094c:	2200      	movs	r2, #0
 800094e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000950:	4b11      	ldr	r3, [pc, #68]	; (8000998 <MX_CAN_Init+0x64>)
 8000952:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000956:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000958:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <MX_CAN_Init+0x64>)
 800095a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800095e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000960:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <MX_CAN_Init+0x64>)
 8000962:	2200      	movs	r2, #0
 8000964:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000966:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <MX_CAN_Init+0x64>)
 8000968:	2200      	movs	r2, #0
 800096a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800096c:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <MX_CAN_Init+0x64>)
 800096e:	2200      	movs	r2, #0
 8000970:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000972:	4b09      	ldr	r3, [pc, #36]	; (8000998 <MX_CAN_Init+0x64>)
 8000974:	2200      	movs	r2, #0
 8000976:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000978:	4b07      	ldr	r3, [pc, #28]	; (8000998 <MX_CAN_Init+0x64>)
 800097a:	2200      	movs	r2, #0
 800097c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <MX_CAN_Init+0x64>)
 8000980:	2200      	movs	r2, #0
 8000982:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000984:	4804      	ldr	r0, [pc, #16]	; (8000998 <MX_CAN_Init+0x64>)
 8000986:	f000 fa73 	bl	8000e70 <HAL_CAN_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000990:	f000 f87c 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}
 8000998:	20000028 	.word	0x20000028
 800099c:	40006400 	.word	0x40006400

080009a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009a4:	4b11      	ldr	r3, [pc, #68]	; (80009ec <MX_USART1_UART_Init+0x4c>)
 80009a6:	4a12      	ldr	r2, [pc, #72]	; (80009f0 <MX_USART1_UART_Init+0x50>)
 80009a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009aa:	4b10      	ldr	r3, [pc, #64]	; (80009ec <MX_USART1_UART_Init+0x4c>)
 80009ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <MX_USART1_UART_Init+0x4c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009b8:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <MX_USART1_UART_Init+0x4c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <MX_USART1_UART_Init+0x4c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009c4:	4b09      	ldr	r3, [pc, #36]	; (80009ec <MX_USART1_UART_Init+0x4c>)
 80009c6:	220c      	movs	r2, #12
 80009c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ca:	4b08      	ldr	r3, [pc, #32]	; (80009ec <MX_USART1_UART_Init+0x4c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <MX_USART1_UART_Init+0x4c>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009d6:	4805      	ldr	r0, [pc, #20]	; (80009ec <MX_USART1_UART_Init+0x4c>)
 80009d8:	f001 ff8c 	bl	80028f4 <HAL_UART_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009e2:	f000 f853 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000050 	.word	0x20000050
 80009f0:	40013800 	.word	0x40013800

080009f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b088      	sub	sp, #32
 80009f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fa:	f107 0310 	add.w	r3, r7, #16
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
 8000a06:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a08:	4b1e      	ldr	r3, [pc, #120]	; (8000a84 <MX_GPIO_Init+0x90>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	4a1d      	ldr	r2, [pc, #116]	; (8000a84 <MX_GPIO_Init+0x90>)
 8000a0e:	f043 0310 	orr.w	r3, r3, #16
 8000a12:	6193      	str	r3, [r2, #24]
 8000a14:	4b1b      	ldr	r3, [pc, #108]	; (8000a84 <MX_GPIO_Init+0x90>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	f003 0310 	and.w	r3, r3, #16
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a20:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <MX_GPIO_Init+0x90>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	4a17      	ldr	r2, [pc, #92]	; (8000a84 <MX_GPIO_Init+0x90>)
 8000a26:	f043 0320 	orr.w	r3, r3, #32
 8000a2a:	6193      	str	r3, [r2, #24]
 8000a2c:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <MX_GPIO_Init+0x90>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	f003 0320 	and.w	r3, r3, #32
 8000a34:	60bb      	str	r3, [r7, #8]
 8000a36:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a38:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <MX_GPIO_Init+0x90>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	4a11      	ldr	r2, [pc, #68]	; (8000a84 <MX_GPIO_Init+0x90>)
 8000a3e:	f043 0304 	orr.w	r3, r3, #4
 8000a42:	6193      	str	r3, [r2, #24]
 8000a44:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <MX_GPIO_Init+0x90>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	f003 0304 	and.w	r3, r3, #4
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a50:	2200      	movs	r2, #0
 8000a52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a56:	480c      	ldr	r0, [pc, #48]	; (8000a88 <MX_GPIO_Init+0x94>)
 8000a58:	f001 fb0a 	bl	8002070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a62:	2301      	movs	r3, #1
 8000a64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a6e:	f107 0310 	add.w	r3, r7, #16
 8000a72:	4619      	mov	r1, r3
 8000a74:	4804      	ldr	r0, [pc, #16]	; (8000a88 <MX_GPIO_Init+0x94>)
 8000a76:	f001 f977 	bl	8001d68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a7a:	bf00      	nop
 8000a7c:	3720      	adds	r7, #32
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40021000 	.word	0x40021000
 8000a88:	40011000 	.word	0x40011000

08000a8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a90:	b672      	cpsid	i
}
 8000a92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <Error_Handler+0x8>
	...

08000a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a9e:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <HAL_MspInit+0x5c>)
 8000aa0:	699b      	ldr	r3, [r3, #24]
 8000aa2:	4a14      	ldr	r2, [pc, #80]	; (8000af4 <HAL_MspInit+0x5c>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	6193      	str	r3, [r2, #24]
 8000aaa:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <HAL_MspInit+0x5c>)
 8000aac:	699b      	ldr	r3, [r3, #24]
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab6:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <HAL_MspInit+0x5c>)
 8000ab8:	69db      	ldr	r3, [r3, #28]
 8000aba:	4a0e      	ldr	r2, [pc, #56]	; (8000af4 <HAL_MspInit+0x5c>)
 8000abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac0:	61d3      	str	r3, [r2, #28]
 8000ac2:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <HAL_MspInit+0x5c>)
 8000ac4:	69db      	ldr	r3, [r3, #28]
 8000ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ace:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <HAL_MspInit+0x60>)
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	4a04      	ldr	r2, [pc, #16]	; (8000af8 <HAL_MspInit+0x60>)
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aea:	bf00      	nop
 8000aec:	3714      	adds	r7, #20
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr
 8000af4:	40021000 	.word	0x40021000
 8000af8:	40010000 	.word	0x40010000

08000afc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b088      	sub	sp, #32
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b04:	f107 0310 	add.w	r3, r7, #16
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a2c      	ldr	r2, [pc, #176]	; (8000bc8 <HAL_CAN_MspInit+0xcc>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d151      	bne.n	8000bc0 <HAL_CAN_MspInit+0xc4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000b1c:	4b2b      	ldr	r3, [pc, #172]	; (8000bcc <HAL_CAN_MspInit+0xd0>)
 8000b1e:	69db      	ldr	r3, [r3, #28]
 8000b20:	4a2a      	ldr	r2, [pc, #168]	; (8000bcc <HAL_CAN_MspInit+0xd0>)
 8000b22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b26:	61d3      	str	r3, [r2, #28]
 8000b28:	4b28      	ldr	r3, [pc, #160]	; (8000bcc <HAL_CAN_MspInit+0xd0>)
 8000b2a:	69db      	ldr	r3, [r3, #28]
 8000b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b34:	4b25      	ldr	r3, [pc, #148]	; (8000bcc <HAL_CAN_MspInit+0xd0>)
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	4a24      	ldr	r2, [pc, #144]	; (8000bcc <HAL_CAN_MspInit+0xd0>)
 8000b3a:	f043 0304 	orr.w	r3, r3, #4
 8000b3e:	6193      	str	r3, [r2, #24]
 8000b40:	4b22      	ldr	r3, [pc, #136]	; (8000bcc <HAL_CAN_MspInit+0xd0>)
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	f003 0304 	and.w	r3, r3, #4
 8000b48:	60bb      	str	r3, [r7, #8]
 8000b4a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000b4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b50:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b52:	2300      	movs	r3, #0
 8000b54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5a:	f107 0310 	add.w	r3, r7, #16
 8000b5e:	4619      	mov	r1, r3
 8000b60:	481b      	ldr	r0, [pc, #108]	; (8000bd0 <HAL_CAN_MspInit+0xd4>)
 8000b62:	f001 f901 	bl	8001d68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b70:	2303      	movs	r3, #3
 8000b72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b74:	f107 0310 	add.w	r3, r7, #16
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4815      	ldr	r0, [pc, #84]	; (8000bd0 <HAL_CAN_MspInit+0xd4>)
 8000b7c:	f001 f8f4 	bl	8001d68 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2100      	movs	r1, #0
 8000b84:	2013      	movs	r0, #19
 8000b86:	f001 f8b8 	bl	8001cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8000b8a:	2013      	movs	r0, #19
 8000b8c:	f001 f8d1 	bl	8001d32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000b90:	2200      	movs	r2, #0
 8000b92:	2100      	movs	r1, #0
 8000b94:	2014      	movs	r0, #20
 8000b96:	f001 f8b0 	bl	8001cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000b9a:	2014      	movs	r0, #20
 8000b9c:	f001 f8c9 	bl	8001d32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	2015      	movs	r0, #21
 8000ba6:	f001 f8a8 	bl	8001cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000baa:	2015      	movs	r0, #21
 8000bac:	f001 f8c1 	bl	8001d32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	2016      	movs	r0, #22
 8000bb6:	f001 f8a0 	bl	8001cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000bba:	2016      	movs	r0, #22
 8000bbc:	f001 f8b9 	bl	8001d32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000bc0:	bf00      	nop
 8000bc2:	3720      	adds	r7, #32
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40006400 	.word	0x40006400
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	40010800 	.word	0x40010800

08000bd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b088      	sub	sp, #32
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 0310 	add.w	r3, r7, #16
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a1c      	ldr	r2, [pc, #112]	; (8000c60 <HAL_UART_MspInit+0x8c>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d131      	bne.n	8000c58 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bf4:	4b1b      	ldr	r3, [pc, #108]	; (8000c64 <HAL_UART_MspInit+0x90>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	4a1a      	ldr	r2, [pc, #104]	; (8000c64 <HAL_UART_MspInit+0x90>)
 8000bfa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bfe:	6193      	str	r3, [r2, #24]
 8000c00:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <HAL_UART_MspInit+0x90>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0c:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <HAL_UART_MspInit+0x90>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	4a14      	ldr	r2, [pc, #80]	; (8000c64 <HAL_UART_MspInit+0x90>)
 8000c12:	f043 0304 	orr.w	r3, r3, #4
 8000c16:	6193      	str	r3, [r2, #24]
 8000c18:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <HAL_UART_MspInit+0x90>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	f003 0304 	and.w	r3, r3, #4
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c28:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c2e:	2303      	movs	r3, #3
 8000c30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c32:	f107 0310 	add.w	r3, r7, #16
 8000c36:	4619      	mov	r1, r3
 8000c38:	480b      	ldr	r0, [pc, #44]	; (8000c68 <HAL_UART_MspInit+0x94>)
 8000c3a:	f001 f895 	bl	8001d68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4c:	f107 0310 	add.w	r3, r7, #16
 8000c50:	4619      	mov	r1, r3
 8000c52:	4805      	ldr	r0, [pc, #20]	; (8000c68 <HAL_UART_MspInit+0x94>)
 8000c54:	f001 f888 	bl	8001d68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c58:	bf00      	nop
 8000c5a:	3720      	adds	r7, #32
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40013800 	.word	0x40013800
 8000c64:	40021000 	.word	0x40021000
 8000c68:	40010800 	.word	0x40010800

08000c6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <NMI_Handler+0x4>

08000c72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c76:	e7fe      	b.n	8000c76 <HardFault_Handler+0x4>

08000c78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <MemManage_Handler+0x4>

08000c7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c82:	e7fe      	b.n	8000c82 <BusFault_Handler+0x4>

08000c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <UsageFault_Handler+0x4>

08000c8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bc80      	pop	{r7}
 8000c94:	4770      	bx	lr

08000c96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr

08000ca2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bc80      	pop	{r7}
 8000cac:	4770      	bx	lr

08000cae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb2:	f000 f89d 	bl	8000df0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
	...

08000cbc <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000cc0:	4802      	ldr	r0, [pc, #8]	; (8000ccc <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8000cc2:	f000 fd17 	bl	80016f4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000028 	.word	0x20000028

08000cd0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000cd4:	4802      	ldr	r0, [pc, #8]	; (8000ce0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000cd6:	f000 fd0d 	bl	80016f4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000028 	.word	0x20000028

08000ce4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000ce8:	4802      	ldr	r0, [pc, #8]	; (8000cf4 <CAN1_RX1_IRQHandler+0x10>)
 8000cea:	f000 fd03 	bl	80016f4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000028 	.word	0x20000028

08000cf8 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000cfc:	4802      	ldr	r0, [pc, #8]	; (8000d08 <CAN1_SCE_IRQHandler+0x10>)
 8000cfe:	f000 fcf9 	bl	80016f4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000028 	.word	0x20000028

08000d0c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bc80      	pop	{r7}
 8000d16:	4770      	bx	lr

08000d18 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d18:	f7ff fff8 	bl	8000d0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d1c:	480b      	ldr	r0, [pc, #44]	; (8000d4c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d1e:	490c      	ldr	r1, [pc, #48]	; (8000d50 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d20:	4a0c      	ldr	r2, [pc, #48]	; (8000d54 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d24:	e002      	b.n	8000d2c <LoopCopyDataInit>

08000d26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d2a:	3304      	adds	r3, #4

08000d2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d30:	d3f9      	bcc.n	8000d26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d32:	4a09      	ldr	r2, [pc, #36]	; (8000d58 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d34:	4c09      	ldr	r4, [pc, #36]	; (8000d5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d38:	e001      	b.n	8000d3e <LoopFillZerobss>

08000d3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d3c:	3204      	adds	r2, #4

08000d3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d40:	d3fb      	bcc.n	8000d3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d42:	f001 febd 	bl	8002ac0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d46:	f7ff fd2f 	bl	80007a8 <main>
  bx lr
 8000d4a:	4770      	bx	lr
  ldr r0, =_sdata
 8000d4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d50:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d54:	08002b70 	.word	0x08002b70
  ldr r2, =_sbss
 8000d58:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d5c:	2000009c 	.word	0x2000009c

08000d60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d60:	e7fe      	b.n	8000d60 <ADC1_2_IRQHandler>
	...

08000d64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d68:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <HAL_Init+0x28>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a07      	ldr	r2, [pc, #28]	; (8000d8c <HAL_Init+0x28>)
 8000d6e:	f043 0310 	orr.w	r3, r3, #16
 8000d72:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d74:	2003      	movs	r0, #3
 8000d76:	f000 ffb5 	bl	8001ce4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d7a:	200f      	movs	r0, #15
 8000d7c:	f000 f808 	bl	8000d90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d80:	f7ff fe8a 	bl	8000a98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40022000 	.word	0x40022000

08000d90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d98:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <HAL_InitTick+0x54>)
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <HAL_InitTick+0x58>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	4619      	mov	r1, r3
 8000da2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dae:	4618      	mov	r0, r3
 8000db0:	f000 ffcd 	bl	8001d4e <HAL_SYSTICK_Config>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e00e      	b.n	8000ddc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2b0f      	cmp	r3, #15
 8000dc2:	d80a      	bhi.n	8000dda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	6879      	ldr	r1, [r7, #4]
 8000dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dcc:	f000 ff95 	bl	8001cfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dd0:	4a06      	ldr	r2, [pc, #24]	; (8000dec <HAL_InitTick+0x5c>)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	e000      	b.n	8000ddc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20000000 	.word	0x20000000
 8000de8:	20000008 	.word	0x20000008
 8000dec:	20000004 	.word	0x20000004

08000df0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df4:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <HAL_IncTick+0x1c>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	461a      	mov	r2, r3
 8000dfa:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <HAL_IncTick+0x20>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4413      	add	r3, r2
 8000e00:	4a03      	ldr	r2, [pc, #12]	; (8000e10 <HAL_IncTick+0x20>)
 8000e02:	6013      	str	r3, [r2, #0]
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr
 8000e0c:	20000008 	.word	0x20000008
 8000e10:	20000098 	.word	0x20000098

08000e14 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  return uwTick;
 8000e18:	4b02      	ldr	r3, [pc, #8]	; (8000e24 <HAL_GetTick+0x10>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bc80      	pop	{r7}
 8000e22:	4770      	bx	lr
 8000e24:	20000098 	.word	0x20000098

08000e28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e30:	f7ff fff0 	bl	8000e14 <HAL_GetTick>
 8000e34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e40:	d005      	beq.n	8000e4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e42:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <HAL_Delay+0x44>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	461a      	mov	r2, r3
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e4e:	bf00      	nop
 8000e50:	f7ff ffe0 	bl	8000e14 <HAL_GetTick>
 8000e54:	4602      	mov	r2, r0
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	68fa      	ldr	r2, [r7, #12]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d8f7      	bhi.n	8000e50 <HAL_Delay+0x28>
  {
  }
}
 8000e60:	bf00      	nop
 8000e62:	bf00      	nop
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000008 	.word	0x20000008

08000e70 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d101      	bne.n	8000e82 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e0ed      	b.n	800105e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d102      	bne.n	8000e94 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f7ff fe34 	bl	8000afc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f042 0201 	orr.w	r2, r2, #1
 8000ea2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ea4:	f7ff ffb6 	bl	8000e14 <HAL_GetTick>
 8000ea8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000eaa:	e012      	b.n	8000ed2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000eac:	f7ff ffb2 	bl	8000e14 <HAL_GetTick>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	2b0a      	cmp	r3, #10
 8000eb8:	d90b      	bls.n	8000ed2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ebe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2205      	movs	r2, #5
 8000eca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e0c5      	b.n	800105e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f003 0301 	and.w	r3, r3, #1
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d0e5      	beq.n	8000eac <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f022 0202 	bic.w	r2, r2, #2
 8000eee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ef0:	f7ff ff90 	bl	8000e14 <HAL_GetTick>
 8000ef4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ef6:	e012      	b.n	8000f1e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ef8:	f7ff ff8c 	bl	8000e14 <HAL_GetTick>
 8000efc:	4602      	mov	r2, r0
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	2b0a      	cmp	r3, #10
 8000f04:	d90b      	bls.n	8000f1e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f0a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2205      	movs	r2, #5
 8000f16:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e09f      	b.n	800105e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f003 0302 	and.w	r3, r3, #2
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d1e5      	bne.n	8000ef8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	7e1b      	ldrb	r3, [r3, #24]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d108      	bne.n	8000f46 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	e007      	b.n	8000f56 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f54:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	7e5b      	ldrb	r3, [r3, #25]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d108      	bne.n	8000f70 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	e007      	b.n	8000f80 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000f7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	7e9b      	ldrb	r3, [r3, #26]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d108      	bne.n	8000f9a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f042 0220 	orr.w	r2, r2, #32
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	e007      	b.n	8000faa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f022 0220 	bic.w	r2, r2, #32
 8000fa8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	7edb      	ldrb	r3, [r3, #27]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d108      	bne.n	8000fc4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f022 0210 	bic.w	r2, r2, #16
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	e007      	b.n	8000fd4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f042 0210 	orr.w	r2, r2, #16
 8000fd2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	7f1b      	ldrb	r3, [r3, #28]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d108      	bne.n	8000fee <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f042 0208 	orr.w	r2, r2, #8
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	e007      	b.n	8000ffe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f022 0208 	bic.w	r2, r2, #8
 8000ffc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	7f5b      	ldrb	r3, [r3, #29]
 8001002:	2b01      	cmp	r3, #1
 8001004:	d108      	bne.n	8001018 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f042 0204 	orr.w	r2, r2, #4
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	e007      	b.n	8001028 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f022 0204 	bic.w	r2, r2, #4
 8001026:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	689a      	ldr	r2, [r3, #8]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	431a      	orrs	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	691b      	ldr	r3, [r3, #16]
 8001036:	431a      	orrs	r2, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	695b      	ldr	r3, [r3, #20]
 800103c:	ea42 0103 	orr.w	r1, r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	1e5a      	subs	r2, r3, #1
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	430a      	orrs	r2, r1
 800104c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2200      	movs	r2, #0
 8001052:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2201      	movs	r2, #1
 8001058:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001066:	b480      	push	{r7}
 8001068:	b087      	sub	sp, #28
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
 800106e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f893 3020 	ldrb.w	r3, [r3, #32]
 800107c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800107e:	7cfb      	ldrb	r3, [r7, #19]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d003      	beq.n	800108c <HAL_CAN_ConfigFilter+0x26>
 8001084:	7cfb      	ldrb	r3, [r7, #19]
 8001086:	2b02      	cmp	r3, #2
 8001088:	f040 80aa 	bne.w	80011e0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001092:	f043 0201 	orr.w	r2, r3, #1
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	695b      	ldr	r3, [r3, #20]
 80010a0:	f003 031f 	and.w	r3, r3, #31
 80010a4:	2201      	movs	r2, #1
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	43db      	mvns	r3, r3
 80010b6:	401a      	ands	r2, r3
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	69db      	ldr	r3, [r3, #28]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d123      	bne.n	800110e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	43db      	mvns	r3, r3
 80010d0:	401a      	ands	r2, r3
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010e4:	683a      	ldr	r2, [r7, #0]
 80010e6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80010e8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	3248      	adds	r2, #72	; 0x48
 80010ee:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001102:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001104:	6979      	ldr	r1, [r7, #20]
 8001106:	3348      	adds	r3, #72	; 0x48
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	440b      	add	r3, r1
 800110c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	69db      	ldr	r3, [r3, #28]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d122      	bne.n	800115c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	431a      	orrs	r2, r3
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001132:	683a      	ldr	r2, [r7, #0]
 8001134:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001136:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	3248      	adds	r2, #72	; 0x48
 800113c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001150:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001152:	6979      	ldr	r1, [r7, #20]
 8001154:	3348      	adds	r3, #72	; 0x48
 8001156:	00db      	lsls	r3, r3, #3
 8001158:	440b      	add	r3, r1
 800115a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d109      	bne.n	8001178 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	43db      	mvns	r3, r3
 800116e:	401a      	ands	r2, r3
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001176:	e007      	b.n	8001188 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	431a      	orrs	r2, r3
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	691b      	ldr	r3, [r3, #16]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d109      	bne.n	80011a4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	43db      	mvns	r3, r3
 800119a:	401a      	ands	r2, r3
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80011a2:	e007      	b.n	80011b4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	431a      	orrs	r2, r3
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	6a1b      	ldr	r3, [r3, #32]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d107      	bne.n	80011cc <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	431a      	orrs	r2, r3
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80011d2:	f023 0201 	bic.w	r2, r3, #1
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80011dc:	2300      	movs	r3, #0
 80011de:	e006      	b.n	80011ee <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
  }
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	371c      	adds	r7, #28
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bc80      	pop	{r7}
 80011f6:	4770      	bx	lr

080011f8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001206:	b2db      	uxtb	r3, r3
 8001208:	2b01      	cmp	r3, #1
 800120a:	d12e      	bne.n	800126a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2202      	movs	r2, #2
 8001210:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f022 0201 	bic.w	r2, r2, #1
 8001222:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001224:	f7ff fdf6 	bl	8000e14 <HAL_GetTick>
 8001228:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800122a:	e012      	b.n	8001252 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800122c:	f7ff fdf2 	bl	8000e14 <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b0a      	cmp	r3, #10
 8001238:	d90b      	bls.n	8001252 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2205      	movs	r2, #5
 800124a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e012      	b.n	8001278 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 0301 	and.w	r3, r3, #1
 800125c:	2b00      	cmp	r3, #0
 800125e:	d1e5      	bne.n	800122c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2200      	movs	r2, #0
 8001264:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001266:	2300      	movs	r3, #0
 8001268:	e006      	b.n	8001278 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
  }
}
 8001278:	4618      	mov	r0, r3
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001280:	b480      	push	{r7}
 8001282:	b089      	sub	sp, #36	; 0x24
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
 800128c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001294:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800129e:	7ffb      	ldrb	r3, [r7, #31]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d003      	beq.n	80012ac <HAL_CAN_AddTxMessage+0x2c>
 80012a4:	7ffb      	ldrb	r3, [r7, #31]
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	f040 80ad 	bne.w	8001406 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d10a      	bne.n	80012cc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d105      	bne.n	80012cc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f000 8095 	beq.w	80013f6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	0e1b      	lsrs	r3, r3, #24
 80012d0:	f003 0303 	and.w	r3, r3, #3
 80012d4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80012d6:	2201      	movs	r2, #1
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	409a      	lsls	r2, r3
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d10d      	bne.n	8001304 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80012f2:	68f9      	ldr	r1, [r7, #12]
 80012f4:	6809      	ldr	r1, [r1, #0]
 80012f6:	431a      	orrs	r2, r3
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	3318      	adds	r3, #24
 80012fc:	011b      	lsls	r3, r3, #4
 80012fe:	440b      	add	r3, r1
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	e00f      	b.n	8001324 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800130e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001314:	68f9      	ldr	r1, [r7, #12]
 8001316:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001318:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	3318      	adds	r3, #24
 800131e:	011b      	lsls	r3, r3, #4
 8001320:	440b      	add	r3, r1
 8001322:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	6819      	ldr	r1, [r3, #0]
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	691a      	ldr	r2, [r3, #16]
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	3318      	adds	r3, #24
 8001330:	011b      	lsls	r3, r3, #4
 8001332:	440b      	add	r3, r1
 8001334:	3304      	adds	r3, #4
 8001336:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	7d1b      	ldrb	r3, [r3, #20]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d111      	bne.n	8001364 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	3318      	adds	r3, #24
 8001348:	011b      	lsls	r3, r3, #4
 800134a:	4413      	add	r3, r2
 800134c:	3304      	adds	r3, #4
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	68fa      	ldr	r2, [r7, #12]
 8001352:	6811      	ldr	r1, [r2, #0]
 8001354:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	3318      	adds	r3, #24
 800135c:	011b      	lsls	r3, r3, #4
 800135e:	440b      	add	r3, r1
 8001360:	3304      	adds	r3, #4
 8001362:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3307      	adds	r3, #7
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	061a      	lsls	r2, r3, #24
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3306      	adds	r3, #6
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	041b      	lsls	r3, r3, #16
 8001374:	431a      	orrs	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	3305      	adds	r3, #5
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	021b      	lsls	r3, r3, #8
 800137e:	4313      	orrs	r3, r2
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	3204      	adds	r2, #4
 8001384:	7812      	ldrb	r2, [r2, #0]
 8001386:	4610      	mov	r0, r2
 8001388:	68fa      	ldr	r2, [r7, #12]
 800138a:	6811      	ldr	r1, [r2, #0]
 800138c:	ea43 0200 	orr.w	r2, r3, r0
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	011b      	lsls	r3, r3, #4
 8001394:	440b      	add	r3, r1
 8001396:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800139a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3303      	adds	r3, #3
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	061a      	lsls	r2, r3, #24
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3302      	adds	r3, #2
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	041b      	lsls	r3, r3, #16
 80013ac:	431a      	orrs	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	3301      	adds	r3, #1
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	021b      	lsls	r3, r3, #8
 80013b6:	4313      	orrs	r3, r2
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	7812      	ldrb	r2, [r2, #0]
 80013bc:	4610      	mov	r0, r2
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	6811      	ldr	r1, [r2, #0]
 80013c2:	ea43 0200 	orr.w	r2, r3, r0
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	011b      	lsls	r3, r3, #4
 80013ca:	440b      	add	r3, r1
 80013cc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80013d0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	3318      	adds	r3, #24
 80013da:	011b      	lsls	r3, r3, #4
 80013dc:	4413      	add	r3, r2
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	68fa      	ldr	r2, [r7, #12]
 80013e2:	6811      	ldr	r1, [r2, #0]
 80013e4:	f043 0201 	orr.w	r2, r3, #1
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	3318      	adds	r3, #24
 80013ec:	011b      	lsls	r3, r3, #4
 80013ee:	440b      	add	r3, r1
 80013f0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80013f2:	2300      	movs	r3, #0
 80013f4:	e00e      	b.n	8001414 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e006      	b.n	8001414 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
  }
}
 8001414:	4618      	mov	r0, r3
 8001416:	3724      	adds	r7, #36	; 0x24
 8001418:	46bd      	mov	sp, r7
 800141a:	bc80      	pop	{r7}
 800141c:	4770      	bx	lr

0800141e <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 800141e:	b480      	push	{r7}
 8001420:	b085      	sub	sp, #20
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
 8001426:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8001428:	2300      	movs	r3, #0
 800142a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001432:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8001434:	7afb      	ldrb	r3, [r7, #11]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d002      	beq.n	8001440 <HAL_CAN_IsTxMessagePending+0x22>
 800143a:	7afb      	ldrb	r3, [r7, #11]
 800143c:	2b02      	cmp	r3, #2
 800143e:	d10b      	bne.n	8001458 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	689a      	ldr	r2, [r3, #8]
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	069b      	lsls	r3, r3, #26
 800144a:	401a      	ands	r2, r3
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	069b      	lsls	r3, r3, #26
 8001450:	429a      	cmp	r2, r3
 8001452:	d001      	beq.n	8001458 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8001454:	2301      	movs	r3, #1
 8001456:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8001458:	68fb      	ldr	r3, [r7, #12]
}
 800145a:	4618      	mov	r0, r3
 800145c:	3714      	adds	r7, #20
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr

08001464 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001464:	b480      	push	{r7}
 8001466:	b087      	sub	sp, #28
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
 8001470:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001478:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800147a:	7dfb      	ldrb	r3, [r7, #23]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d003      	beq.n	8001488 <HAL_CAN_GetRxMessage+0x24>
 8001480:	7dfb      	ldrb	r3, [r7, #23]
 8001482:	2b02      	cmp	r3, #2
 8001484:	f040 8103 	bne.w	800168e <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d10e      	bne.n	80014ac <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	f003 0303 	and.w	r3, r3, #3
 8001498:	2b00      	cmp	r3, #0
 800149a:	d116      	bne.n	80014ca <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e0f7      	b.n	800169c <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	691b      	ldr	r3, [r3, #16]
 80014b2:	f003 0303 	and.w	r3, r3, #3
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d107      	bne.n	80014ca <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e0e8      	b.n	800169c <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	331b      	adds	r3, #27
 80014d2:	011b      	lsls	r3, r3, #4
 80014d4:	4413      	add	r3, r2
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0204 	and.w	r2, r3, #4
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d10c      	bne.n	8001502 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	331b      	adds	r3, #27
 80014f0:	011b      	lsls	r3, r3, #4
 80014f2:	4413      	add	r3, r2
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	0d5b      	lsrs	r3, r3, #21
 80014f8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	e00b      	b.n	800151a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	331b      	adds	r3, #27
 800150a:	011b      	lsls	r3, r3, #4
 800150c:	4413      	add	r3, r2
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	08db      	lsrs	r3, r3, #3
 8001512:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	331b      	adds	r3, #27
 8001522:	011b      	lsls	r3, r3, #4
 8001524:	4413      	add	r3, r2
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0202 	and.w	r2, r3, #2
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	331b      	adds	r3, #27
 8001538:	011b      	lsls	r3, r3, #4
 800153a:	4413      	add	r3, r2
 800153c:	3304      	adds	r3, #4
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0308 	and.w	r3, r3, #8
 8001544:	2b00      	cmp	r3, #0
 8001546:	d003      	beq.n	8001550 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2208      	movs	r2, #8
 800154c:	611a      	str	r2, [r3, #16]
 800154e:	e00b      	b.n	8001568 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	331b      	adds	r3, #27
 8001558:	011b      	lsls	r3, r3, #4
 800155a:	4413      	add	r3, r2
 800155c:	3304      	adds	r3, #4
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 020f 	and.w	r2, r3, #15
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	331b      	adds	r3, #27
 8001570:	011b      	lsls	r3, r3, #4
 8001572:	4413      	add	r3, r2
 8001574:	3304      	adds	r3, #4
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	0a1b      	lsrs	r3, r3, #8
 800157a:	b2da      	uxtb	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	331b      	adds	r3, #27
 8001588:	011b      	lsls	r3, r3, #4
 800158a:	4413      	add	r3, r2
 800158c:	3304      	adds	r3, #4
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	0c1b      	lsrs	r3, r3, #16
 8001592:	b29a      	uxth	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	011b      	lsls	r3, r3, #4
 80015a0:	4413      	add	r3, r2
 80015a2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	011b      	lsls	r3, r3, #4
 80015b6:	4413      	add	r3, r2
 80015b8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	0a1a      	lsrs	r2, r3, #8
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	3301      	adds	r3, #1
 80015c4:	b2d2      	uxtb	r2, r2
 80015c6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	011b      	lsls	r3, r3, #4
 80015d0:	4413      	add	r3, r2
 80015d2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	0c1a      	lsrs	r2, r3, #16
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	3302      	adds	r3, #2
 80015de:	b2d2      	uxtb	r2, r2
 80015e0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	011b      	lsls	r3, r3, #4
 80015ea:	4413      	add	r3, r2
 80015ec:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	0e1a      	lsrs	r2, r3, #24
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	3303      	adds	r3, #3
 80015f8:	b2d2      	uxtb	r2, r2
 80015fa:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	011b      	lsls	r3, r3, #4
 8001604:	4413      	add	r3, r2
 8001606:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	3304      	adds	r3, #4
 8001610:	b2d2      	uxtb	r2, r2
 8001612:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	011b      	lsls	r3, r3, #4
 800161c:	4413      	add	r3, r2
 800161e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	0a1a      	lsrs	r2, r3, #8
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	3305      	adds	r3, #5
 800162a:	b2d2      	uxtb	r2, r2
 800162c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	011b      	lsls	r3, r3, #4
 8001636:	4413      	add	r3, r2
 8001638:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	0c1a      	lsrs	r2, r3, #16
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	3306      	adds	r3, #6
 8001644:	b2d2      	uxtb	r2, r2
 8001646:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	011b      	lsls	r3, r3, #4
 8001650:	4413      	add	r3, r2
 8001652:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	0e1a      	lsrs	r2, r3, #24
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	3307      	adds	r3, #7
 800165e:	b2d2      	uxtb	r2, r2
 8001660:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d108      	bne.n	800167a <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	68da      	ldr	r2, [r3, #12]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f042 0220 	orr.w	r2, r2, #32
 8001676:	60da      	str	r2, [r3, #12]
 8001678:	e007      	b.n	800168a <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	691a      	ldr	r2, [r3, #16]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f042 0220 	orr.w	r2, r2, #32
 8001688:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800168a:	2300      	movs	r3, #0
 800168c:	e006      	b.n	800169c <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001692:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
  }
}
 800169c:	4618      	mov	r0, r3
 800169e:	371c      	adds	r7, #28
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bc80      	pop	{r7}
 80016a4:	4770      	bx	lr

080016a6 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80016a6:	b480      	push	{r7}
 80016a8:	b085      	sub	sp, #20
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
 80016ae:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80016b0:	2300      	movs	r3, #0
 80016b2:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016ba:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80016bc:	7afb      	ldrb	r3, [r7, #11]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d002      	beq.n	80016c8 <HAL_CAN_GetRxFifoFillLevel+0x22>
 80016c2:	7afb      	ldrb	r3, [r7, #11]
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d10f      	bne.n	80016e8 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d106      	bne.n	80016dc <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	f003 0303 	and.w	r3, r3, #3
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	e005      	b.n	80016e8 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	f003 0303 	and.w	r3, r3, #3
 80016e6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80016e8:	68fb      	ldr	r3, [r7, #12]
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3714      	adds	r7, #20
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr

080016f4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b08a      	sub	sp, #40	; 0x28
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80016fc:	2300      	movs	r3, #0
 80016fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001730:	6a3b      	ldr	r3, [r7, #32]
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	2b00      	cmp	r3, #0
 8001738:	d07c      	beq.n	8001834 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	2b00      	cmp	r3, #0
 8001742:	d023      	beq.n	800178c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2201      	movs	r2, #1
 800174a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d003      	beq.n	800175e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 f983 	bl	8001a62 <HAL_CAN_TxMailbox0CompleteCallback>
 800175c:	e016      	b.n	800178c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	f003 0304 	and.w	r3, r3, #4
 8001764:	2b00      	cmp	r3, #0
 8001766:	d004      	beq.n	8001772 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800176e:	627b      	str	r3, [r7, #36]	; 0x24
 8001770:	e00c      	b.n	800178c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	f003 0308 	and.w	r3, r3, #8
 8001778:	2b00      	cmp	r3, #0
 800177a:	d004      	beq.n	8001786 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800177c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001782:	627b      	str	r3, [r7, #36]	; 0x24
 8001784:	e002      	b.n	800178c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f000 f986 	bl	8001a98 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001792:	2b00      	cmp	r3, #0
 8001794:	d024      	beq.n	80017e0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800179e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d003      	beq.n	80017b2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f000 f962 	bl	8001a74 <HAL_CAN_TxMailbox1CompleteCallback>
 80017b0:	e016      	b.n	80017e0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d004      	beq.n	80017c6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80017bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017c2:	627b      	str	r3, [r7, #36]	; 0x24
 80017c4:	e00c      	b.n	80017e0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d004      	beq.n	80017da <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80017d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
 80017d8:	e002      	b.n	80017e0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f000 f965 	bl	8001aaa <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d024      	beq.n	8001834 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017f2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d003      	beq.n	8001806 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f000 f941 	bl	8001a86 <HAL_CAN_TxMailbox2CompleteCallback>
 8001804:	e016      	b.n	8001834 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d004      	beq.n	800181a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001812:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001816:	627b      	str	r3, [r7, #36]	; 0x24
 8001818:	e00c      	b.n	8001834 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d004      	beq.n	800182e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001826:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800182a:	627b      	str	r3, [r7, #36]	; 0x24
 800182c:	e002      	b.n	8001834 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f000 f944 	bl	8001abc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001834:	6a3b      	ldr	r3, [r7, #32]
 8001836:	f003 0308 	and.w	r3, r3, #8
 800183a:	2b00      	cmp	r3, #0
 800183c:	d00c      	beq.n	8001858 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	f003 0310 	and.w	r3, r3, #16
 8001844:	2b00      	cmp	r3, #0
 8001846:	d007      	beq.n	8001858 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800184e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2210      	movs	r2, #16
 8001856:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001858:	6a3b      	ldr	r3, [r7, #32]
 800185a:	f003 0304 	and.w	r3, r3, #4
 800185e:	2b00      	cmp	r3, #0
 8001860:	d00b      	beq.n	800187a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	f003 0308 	and.w	r3, r3, #8
 8001868:	2b00      	cmp	r3, #0
 800186a:	d006      	beq.n	800187a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2208      	movs	r2, #8
 8001872:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f000 f933 	bl	8001ae0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800187a:	6a3b      	ldr	r3, [r7, #32]
 800187c:	f003 0302 	and.w	r3, r3, #2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d009      	beq.n	8001898 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	f003 0303 	and.w	r3, r3, #3
 800188e:	2b00      	cmp	r3, #0
 8001890:	d002      	beq.n	8001898 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f000 f91b 	bl	8001ace <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001898:	6a3b      	ldr	r3, [r7, #32]
 800189a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d00c      	beq.n	80018bc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	f003 0310 	and.w	r3, r3, #16
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d007      	beq.n	80018bc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80018ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018b2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2210      	movs	r2, #16
 80018ba:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80018bc:	6a3b      	ldr	r3, [r7, #32]
 80018be:	f003 0320 	and.w	r3, r3, #32
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d00b      	beq.n	80018de <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	f003 0308 	and.w	r3, r3, #8
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d006      	beq.n	80018de <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2208      	movs	r2, #8
 80018d6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f000 f913 	bl	8001b04 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80018de:	6a3b      	ldr	r3, [r7, #32]
 80018e0:	f003 0310 	and.w	r3, r3, #16
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d009      	beq.n	80018fc <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	f003 0303 	and.w	r3, r3, #3
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d002      	beq.n	80018fc <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f000 f8fb 	bl	8001af2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80018fc:	6a3b      	ldr	r3, [r7, #32]
 80018fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d00b      	beq.n	800191e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	f003 0310 	and.w	r3, r3, #16
 800190c:	2b00      	cmp	r3, #0
 800190e:	d006      	beq.n	800191e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2210      	movs	r2, #16
 8001916:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f000 f8fc 	bl	8001b16 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800191e:	6a3b      	ldr	r3, [r7, #32]
 8001920:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d00b      	beq.n	8001940 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	f003 0308 	and.w	r3, r3, #8
 800192e:	2b00      	cmp	r3, #0
 8001930:	d006      	beq.n	8001940 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2208      	movs	r2, #8
 8001938:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f000 f8f4 	bl	8001b28 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001940:	6a3b      	ldr	r3, [r7, #32]
 8001942:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d07b      	beq.n	8001a42 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	f003 0304 	and.w	r3, r3, #4
 8001950:	2b00      	cmp	r3, #0
 8001952:	d072      	beq.n	8001a3a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001954:	6a3b      	ldr	r3, [r7, #32]
 8001956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195a:	2b00      	cmp	r3, #0
 800195c:	d008      	beq.n	8001970 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001964:	2b00      	cmp	r3, #0
 8001966:	d003      	beq.n	8001970 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196a:	f043 0301 	orr.w	r3, r3, #1
 800196e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001970:	6a3b      	ldr	r3, [r7, #32]
 8001972:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001976:	2b00      	cmp	r3, #0
 8001978:	d008      	beq.n	800198c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001980:	2b00      	cmp	r3, #0
 8001982:	d003      	beq.n	800198c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001986:	f043 0302 	orr.w	r3, r3, #2
 800198a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800198c:	6a3b      	ldr	r3, [r7, #32]
 800198e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001992:	2b00      	cmp	r3, #0
 8001994:	d008      	beq.n	80019a8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800199c:	2b00      	cmp	r3, #0
 800199e:	d003      	beq.n	80019a8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80019a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a2:	f043 0304 	orr.w	r3, r3, #4
 80019a6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80019a8:	6a3b      	ldr	r3, [r7, #32]
 80019aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d043      	beq.n	8001a3a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d03e      	beq.n	8001a3a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80019c2:	2b60      	cmp	r3, #96	; 0x60
 80019c4:	d02b      	beq.n	8001a1e <HAL_CAN_IRQHandler+0x32a>
 80019c6:	2b60      	cmp	r3, #96	; 0x60
 80019c8:	d82e      	bhi.n	8001a28 <HAL_CAN_IRQHandler+0x334>
 80019ca:	2b50      	cmp	r3, #80	; 0x50
 80019cc:	d022      	beq.n	8001a14 <HAL_CAN_IRQHandler+0x320>
 80019ce:	2b50      	cmp	r3, #80	; 0x50
 80019d0:	d82a      	bhi.n	8001a28 <HAL_CAN_IRQHandler+0x334>
 80019d2:	2b40      	cmp	r3, #64	; 0x40
 80019d4:	d019      	beq.n	8001a0a <HAL_CAN_IRQHandler+0x316>
 80019d6:	2b40      	cmp	r3, #64	; 0x40
 80019d8:	d826      	bhi.n	8001a28 <HAL_CAN_IRQHandler+0x334>
 80019da:	2b30      	cmp	r3, #48	; 0x30
 80019dc:	d010      	beq.n	8001a00 <HAL_CAN_IRQHandler+0x30c>
 80019de:	2b30      	cmp	r3, #48	; 0x30
 80019e0:	d822      	bhi.n	8001a28 <HAL_CAN_IRQHandler+0x334>
 80019e2:	2b10      	cmp	r3, #16
 80019e4:	d002      	beq.n	80019ec <HAL_CAN_IRQHandler+0x2f8>
 80019e6:	2b20      	cmp	r3, #32
 80019e8:	d005      	beq.n	80019f6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80019ea:	e01d      	b.n	8001a28 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80019ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ee:	f043 0308 	orr.w	r3, r3, #8
 80019f2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019f4:	e019      	b.n	8001a2a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80019f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f8:	f043 0310 	orr.w	r3, r3, #16
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019fe:	e014      	b.n	8001a2a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a02:	f043 0320 	orr.w	r3, r3, #32
 8001a06:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a08:	e00f      	b.n	8001a2a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a12:	e00a      	b.n	8001a2a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a1a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a1c:	e005      	b.n	8001a2a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a26:	e000      	b.n	8001a2a <HAL_CAN_IRQHandler+0x336>
            break;
 8001a28:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	699a      	ldr	r2, [r3, #24]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001a38:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2204      	movs	r2, #4
 8001a40:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d008      	beq.n	8001a5a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f000 f870 	bl	8001b3a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001a5a:	bf00      	nop
 8001a5c:	3728      	adds	r7, #40	; 0x28
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr

08001a74 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bc80      	pop	{r7}
 8001a84:	4770      	bx	lr

08001a86 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b083      	sub	sp, #12
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr

08001a98 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc80      	pop	{r7}
 8001aa8:	4770      	bx	lr

08001aaa <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr

08001abc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bc80      	pop	{r7}
 8001acc:	4770      	bx	lr

08001ace <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b083      	sub	sp, #12
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001ad6:	bf00      	nop
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bc80      	pop	{r7}
 8001ade:	4770      	bx	lr

08001ae0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bc80      	pop	{r7}
 8001af0:	4770      	bx	lr

08001af2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001af2:	b480      	push	{r7}
 8001af4:	b083      	sub	sp, #12
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr

08001b04 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bc80      	pop	{r7}
 8001b14:	4770      	bx	lr

08001b16 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001b16:	b480      	push	{r7}
 8001b18:	b083      	sub	sp, #12
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bc80      	pop	{r7}
 8001b26:	4770      	bx	lr

08001b28 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bc80      	pop	{r7}
 8001b38:	4770      	bx	lr

08001b3a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b083      	sub	sp, #12
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr

08001b4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <__NVIC_SetPriorityGrouping+0x44>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b62:	68ba      	ldr	r2, [r7, #8]
 8001b64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b68:	4013      	ands	r3, r2
 8001b6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b7e:	4a04      	ldr	r2, [pc, #16]	; (8001b90 <__NVIC_SetPriorityGrouping+0x44>)
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	60d3      	str	r3, [r2, #12]
}
 8001b84:	bf00      	nop
 8001b86:	3714      	adds	r7, #20
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bc80      	pop	{r7}
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b98:	4b04      	ldr	r3, [pc, #16]	; (8001bac <__NVIC_GetPriorityGrouping+0x18>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	0a1b      	lsrs	r3, r3, #8
 8001b9e:	f003 0307 	and.w	r3, r3, #7
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bc80      	pop	{r7}
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	e000ed00 	.word	0xe000ed00

08001bb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	db0b      	blt.n	8001bda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	f003 021f 	and.w	r2, r3, #31
 8001bc8:	4906      	ldr	r1, [pc, #24]	; (8001be4 <__NVIC_EnableIRQ+0x34>)
 8001bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bce:	095b      	lsrs	r3, r3, #5
 8001bd0:	2001      	movs	r0, #1
 8001bd2:	fa00 f202 	lsl.w	r2, r0, r2
 8001bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bc80      	pop	{r7}
 8001be2:	4770      	bx	lr
 8001be4:	e000e100 	.word	0xe000e100

08001be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	6039      	str	r1, [r7, #0]
 8001bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	db0a      	blt.n	8001c12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	b2da      	uxtb	r2, r3
 8001c00:	490c      	ldr	r1, [pc, #48]	; (8001c34 <__NVIC_SetPriority+0x4c>)
 8001c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c06:	0112      	lsls	r2, r2, #4
 8001c08:	b2d2      	uxtb	r2, r2
 8001c0a:	440b      	add	r3, r1
 8001c0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c10:	e00a      	b.n	8001c28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	b2da      	uxtb	r2, r3
 8001c16:	4908      	ldr	r1, [pc, #32]	; (8001c38 <__NVIC_SetPriority+0x50>)
 8001c18:	79fb      	ldrb	r3, [r7, #7]
 8001c1a:	f003 030f 	and.w	r3, r3, #15
 8001c1e:	3b04      	subs	r3, #4
 8001c20:	0112      	lsls	r2, r2, #4
 8001c22:	b2d2      	uxtb	r2, r2
 8001c24:	440b      	add	r3, r1
 8001c26:	761a      	strb	r2, [r3, #24]
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc80      	pop	{r7}
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	e000e100 	.word	0xe000e100
 8001c38:	e000ed00 	.word	0xe000ed00

08001c3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b089      	sub	sp, #36	; 0x24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	f1c3 0307 	rsb	r3, r3, #7
 8001c56:	2b04      	cmp	r3, #4
 8001c58:	bf28      	it	cs
 8001c5a:	2304      	movcs	r3, #4
 8001c5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	3304      	adds	r3, #4
 8001c62:	2b06      	cmp	r3, #6
 8001c64:	d902      	bls.n	8001c6c <NVIC_EncodePriority+0x30>
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	3b03      	subs	r3, #3
 8001c6a:	e000      	b.n	8001c6e <NVIC_EncodePriority+0x32>
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c70:	f04f 32ff 	mov.w	r2, #4294967295
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	43da      	mvns	r2, r3
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	401a      	ands	r2, r3
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c84:	f04f 31ff 	mov.w	r1, #4294967295
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8e:	43d9      	mvns	r1, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c94:	4313      	orrs	r3, r2
         );
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3724      	adds	r7, #36	; 0x24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bc80      	pop	{r7}
 8001c9e:	4770      	bx	lr

08001ca0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	3b01      	subs	r3, #1
 8001cac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cb0:	d301      	bcc.n	8001cb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e00f      	b.n	8001cd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cb6:	4a0a      	ldr	r2, [pc, #40]	; (8001ce0 <SysTick_Config+0x40>)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cbe:	210f      	movs	r1, #15
 8001cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc4:	f7ff ff90 	bl	8001be8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cc8:	4b05      	ldr	r3, [pc, #20]	; (8001ce0 <SysTick_Config+0x40>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cce:	4b04      	ldr	r3, [pc, #16]	; (8001ce0 <SysTick_Config+0x40>)
 8001cd0:	2207      	movs	r2, #7
 8001cd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	e000e010 	.word	0xe000e010

08001ce4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7ff ff2d 	bl	8001b4c <__NVIC_SetPriorityGrouping>
}
 8001cf2:	bf00      	nop
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b086      	sub	sp, #24
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	4603      	mov	r3, r0
 8001d02:	60b9      	str	r1, [r7, #8]
 8001d04:	607a      	str	r2, [r7, #4]
 8001d06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d0c:	f7ff ff42 	bl	8001b94 <__NVIC_GetPriorityGrouping>
 8001d10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	68b9      	ldr	r1, [r7, #8]
 8001d16:	6978      	ldr	r0, [r7, #20]
 8001d18:	f7ff ff90 	bl	8001c3c <NVIC_EncodePriority>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d22:	4611      	mov	r1, r2
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff ff5f 	bl	8001be8 <__NVIC_SetPriority>
}
 8001d2a:	bf00      	nop
 8001d2c:	3718      	adds	r7, #24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b082      	sub	sp, #8
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	4603      	mov	r3, r0
 8001d3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff ff35 	bl	8001bb0 <__NVIC_EnableIRQ>
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b082      	sub	sp, #8
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f7ff ffa2 	bl	8001ca0 <SysTick_Config>
 8001d5c:	4603      	mov	r3, r0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
	...

08001d68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b08b      	sub	sp, #44	; 0x2c
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d72:	2300      	movs	r3, #0
 8001d74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d76:	2300      	movs	r3, #0
 8001d78:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d7a:	e169      	b.n	8002050 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	69fa      	ldr	r2, [r7, #28]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	f040 8158 	bne.w	800204a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	4a9a      	ldr	r2, [pc, #616]	; (8002008 <HAL_GPIO_Init+0x2a0>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d05e      	beq.n	8001e62 <HAL_GPIO_Init+0xfa>
 8001da4:	4a98      	ldr	r2, [pc, #608]	; (8002008 <HAL_GPIO_Init+0x2a0>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d875      	bhi.n	8001e96 <HAL_GPIO_Init+0x12e>
 8001daa:	4a98      	ldr	r2, [pc, #608]	; (800200c <HAL_GPIO_Init+0x2a4>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d058      	beq.n	8001e62 <HAL_GPIO_Init+0xfa>
 8001db0:	4a96      	ldr	r2, [pc, #600]	; (800200c <HAL_GPIO_Init+0x2a4>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d86f      	bhi.n	8001e96 <HAL_GPIO_Init+0x12e>
 8001db6:	4a96      	ldr	r2, [pc, #600]	; (8002010 <HAL_GPIO_Init+0x2a8>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d052      	beq.n	8001e62 <HAL_GPIO_Init+0xfa>
 8001dbc:	4a94      	ldr	r2, [pc, #592]	; (8002010 <HAL_GPIO_Init+0x2a8>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d869      	bhi.n	8001e96 <HAL_GPIO_Init+0x12e>
 8001dc2:	4a94      	ldr	r2, [pc, #592]	; (8002014 <HAL_GPIO_Init+0x2ac>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d04c      	beq.n	8001e62 <HAL_GPIO_Init+0xfa>
 8001dc8:	4a92      	ldr	r2, [pc, #584]	; (8002014 <HAL_GPIO_Init+0x2ac>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d863      	bhi.n	8001e96 <HAL_GPIO_Init+0x12e>
 8001dce:	4a92      	ldr	r2, [pc, #584]	; (8002018 <HAL_GPIO_Init+0x2b0>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d046      	beq.n	8001e62 <HAL_GPIO_Init+0xfa>
 8001dd4:	4a90      	ldr	r2, [pc, #576]	; (8002018 <HAL_GPIO_Init+0x2b0>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d85d      	bhi.n	8001e96 <HAL_GPIO_Init+0x12e>
 8001dda:	2b12      	cmp	r3, #18
 8001ddc:	d82a      	bhi.n	8001e34 <HAL_GPIO_Init+0xcc>
 8001dde:	2b12      	cmp	r3, #18
 8001de0:	d859      	bhi.n	8001e96 <HAL_GPIO_Init+0x12e>
 8001de2:	a201      	add	r2, pc, #4	; (adr r2, 8001de8 <HAL_GPIO_Init+0x80>)
 8001de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de8:	08001e63 	.word	0x08001e63
 8001dec:	08001e3d 	.word	0x08001e3d
 8001df0:	08001e4f 	.word	0x08001e4f
 8001df4:	08001e91 	.word	0x08001e91
 8001df8:	08001e97 	.word	0x08001e97
 8001dfc:	08001e97 	.word	0x08001e97
 8001e00:	08001e97 	.word	0x08001e97
 8001e04:	08001e97 	.word	0x08001e97
 8001e08:	08001e97 	.word	0x08001e97
 8001e0c:	08001e97 	.word	0x08001e97
 8001e10:	08001e97 	.word	0x08001e97
 8001e14:	08001e97 	.word	0x08001e97
 8001e18:	08001e97 	.word	0x08001e97
 8001e1c:	08001e97 	.word	0x08001e97
 8001e20:	08001e97 	.word	0x08001e97
 8001e24:	08001e97 	.word	0x08001e97
 8001e28:	08001e97 	.word	0x08001e97
 8001e2c:	08001e45 	.word	0x08001e45
 8001e30:	08001e59 	.word	0x08001e59
 8001e34:	4a79      	ldr	r2, [pc, #484]	; (800201c <HAL_GPIO_Init+0x2b4>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d013      	beq.n	8001e62 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e3a:	e02c      	b.n	8001e96 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	623b      	str	r3, [r7, #32]
          break;
 8001e42:	e029      	b.n	8001e98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	3304      	adds	r3, #4
 8001e4a:	623b      	str	r3, [r7, #32]
          break;
 8001e4c:	e024      	b.n	8001e98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	3308      	adds	r3, #8
 8001e54:	623b      	str	r3, [r7, #32]
          break;
 8001e56:	e01f      	b.n	8001e98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	330c      	adds	r3, #12
 8001e5e:	623b      	str	r3, [r7, #32]
          break;
 8001e60:	e01a      	b.n	8001e98 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d102      	bne.n	8001e70 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e6a:	2304      	movs	r3, #4
 8001e6c:	623b      	str	r3, [r7, #32]
          break;
 8001e6e:	e013      	b.n	8001e98 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d105      	bne.n	8001e84 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e78:	2308      	movs	r3, #8
 8001e7a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	69fa      	ldr	r2, [r7, #28]
 8001e80:	611a      	str	r2, [r3, #16]
          break;
 8001e82:	e009      	b.n	8001e98 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e84:	2308      	movs	r3, #8
 8001e86:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	69fa      	ldr	r2, [r7, #28]
 8001e8c:	615a      	str	r2, [r3, #20]
          break;
 8001e8e:	e003      	b.n	8001e98 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e90:	2300      	movs	r3, #0
 8001e92:	623b      	str	r3, [r7, #32]
          break;
 8001e94:	e000      	b.n	8001e98 <HAL_GPIO_Init+0x130>
          break;
 8001e96:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	2bff      	cmp	r3, #255	; 0xff
 8001e9c:	d801      	bhi.n	8001ea2 <HAL_GPIO_Init+0x13a>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	e001      	b.n	8001ea6 <HAL_GPIO_Init+0x13e>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	2bff      	cmp	r3, #255	; 0xff
 8001eac:	d802      	bhi.n	8001eb4 <HAL_GPIO_Init+0x14c>
 8001eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	e002      	b.n	8001eba <HAL_GPIO_Init+0x152>
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb6:	3b08      	subs	r3, #8
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	210f      	movs	r1, #15
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	401a      	ands	r2, r3
 8001ecc:	6a39      	ldr	r1, [r7, #32]
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed4:	431a      	orrs	r2, r3
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f000 80b1 	beq.w	800204a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ee8:	4b4d      	ldr	r3, [pc, #308]	; (8002020 <HAL_GPIO_Init+0x2b8>)
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	4a4c      	ldr	r2, [pc, #304]	; (8002020 <HAL_GPIO_Init+0x2b8>)
 8001eee:	f043 0301 	orr.w	r3, r3, #1
 8001ef2:	6193      	str	r3, [r2, #24]
 8001ef4:	4b4a      	ldr	r3, [pc, #296]	; (8002020 <HAL_GPIO_Init+0x2b8>)
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	60bb      	str	r3, [r7, #8]
 8001efe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f00:	4a48      	ldr	r2, [pc, #288]	; (8002024 <HAL_GPIO_Init+0x2bc>)
 8001f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f04:	089b      	lsrs	r3, r3, #2
 8001f06:	3302      	adds	r3, #2
 8001f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f0c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f10:	f003 0303 	and.w	r3, r3, #3
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	220f      	movs	r2, #15
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	4013      	ands	r3, r2
 8001f22:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a40      	ldr	r2, [pc, #256]	; (8002028 <HAL_GPIO_Init+0x2c0>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d013      	beq.n	8001f54 <HAL_GPIO_Init+0x1ec>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a3f      	ldr	r2, [pc, #252]	; (800202c <HAL_GPIO_Init+0x2c4>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d00d      	beq.n	8001f50 <HAL_GPIO_Init+0x1e8>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a3e      	ldr	r2, [pc, #248]	; (8002030 <HAL_GPIO_Init+0x2c8>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d007      	beq.n	8001f4c <HAL_GPIO_Init+0x1e4>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a3d      	ldr	r2, [pc, #244]	; (8002034 <HAL_GPIO_Init+0x2cc>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d101      	bne.n	8001f48 <HAL_GPIO_Init+0x1e0>
 8001f44:	2303      	movs	r3, #3
 8001f46:	e006      	b.n	8001f56 <HAL_GPIO_Init+0x1ee>
 8001f48:	2304      	movs	r3, #4
 8001f4a:	e004      	b.n	8001f56 <HAL_GPIO_Init+0x1ee>
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	e002      	b.n	8001f56 <HAL_GPIO_Init+0x1ee>
 8001f50:	2301      	movs	r3, #1
 8001f52:	e000      	b.n	8001f56 <HAL_GPIO_Init+0x1ee>
 8001f54:	2300      	movs	r3, #0
 8001f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f58:	f002 0203 	and.w	r2, r2, #3
 8001f5c:	0092      	lsls	r2, r2, #2
 8001f5e:	4093      	lsls	r3, r2
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f66:	492f      	ldr	r1, [pc, #188]	; (8002024 <HAL_GPIO_Init+0x2bc>)
 8001f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6a:	089b      	lsrs	r3, r3, #2
 8001f6c:	3302      	adds	r3, #2
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d006      	beq.n	8001f8e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f80:	4b2d      	ldr	r3, [pc, #180]	; (8002038 <HAL_GPIO_Init+0x2d0>)
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	492c      	ldr	r1, [pc, #176]	; (8002038 <HAL_GPIO_Init+0x2d0>)
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	608b      	str	r3, [r1, #8]
 8001f8c:	e006      	b.n	8001f9c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f8e:	4b2a      	ldr	r3, [pc, #168]	; (8002038 <HAL_GPIO_Init+0x2d0>)
 8001f90:	689a      	ldr	r2, [r3, #8]
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	43db      	mvns	r3, r3
 8001f96:	4928      	ldr	r1, [pc, #160]	; (8002038 <HAL_GPIO_Init+0x2d0>)
 8001f98:	4013      	ands	r3, r2
 8001f9a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d006      	beq.n	8001fb6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fa8:	4b23      	ldr	r3, [pc, #140]	; (8002038 <HAL_GPIO_Init+0x2d0>)
 8001faa:	68da      	ldr	r2, [r3, #12]
 8001fac:	4922      	ldr	r1, [pc, #136]	; (8002038 <HAL_GPIO_Init+0x2d0>)
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	60cb      	str	r3, [r1, #12]
 8001fb4:	e006      	b.n	8001fc4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fb6:	4b20      	ldr	r3, [pc, #128]	; (8002038 <HAL_GPIO_Init+0x2d0>)
 8001fb8:	68da      	ldr	r2, [r3, #12]
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	491e      	ldr	r1, [pc, #120]	; (8002038 <HAL_GPIO_Init+0x2d0>)
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d006      	beq.n	8001fde <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fd0:	4b19      	ldr	r3, [pc, #100]	; (8002038 <HAL_GPIO_Init+0x2d0>)
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	4918      	ldr	r1, [pc, #96]	; (8002038 <HAL_GPIO_Init+0x2d0>)
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	604b      	str	r3, [r1, #4]
 8001fdc:	e006      	b.n	8001fec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fde:	4b16      	ldr	r3, [pc, #88]	; (8002038 <HAL_GPIO_Init+0x2d0>)
 8001fe0:	685a      	ldr	r2, [r3, #4]
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	4914      	ldr	r1, [pc, #80]	; (8002038 <HAL_GPIO_Init+0x2d0>)
 8001fe8:	4013      	ands	r3, r2
 8001fea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d021      	beq.n	800203c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ff8:	4b0f      	ldr	r3, [pc, #60]	; (8002038 <HAL_GPIO_Init+0x2d0>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	490e      	ldr	r1, [pc, #56]	; (8002038 <HAL_GPIO_Init+0x2d0>)
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	4313      	orrs	r3, r2
 8002002:	600b      	str	r3, [r1, #0]
 8002004:	e021      	b.n	800204a <HAL_GPIO_Init+0x2e2>
 8002006:	bf00      	nop
 8002008:	10320000 	.word	0x10320000
 800200c:	10310000 	.word	0x10310000
 8002010:	10220000 	.word	0x10220000
 8002014:	10210000 	.word	0x10210000
 8002018:	10120000 	.word	0x10120000
 800201c:	10110000 	.word	0x10110000
 8002020:	40021000 	.word	0x40021000
 8002024:	40010000 	.word	0x40010000
 8002028:	40010800 	.word	0x40010800
 800202c:	40010c00 	.word	0x40010c00
 8002030:	40011000 	.word	0x40011000
 8002034:	40011400 	.word	0x40011400
 8002038:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800203c:	4b0b      	ldr	r3, [pc, #44]	; (800206c <HAL_GPIO_Init+0x304>)
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	43db      	mvns	r3, r3
 8002044:	4909      	ldr	r1, [pc, #36]	; (800206c <HAL_GPIO_Init+0x304>)
 8002046:	4013      	ands	r3, r2
 8002048:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204c:	3301      	adds	r3, #1
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002056:	fa22 f303 	lsr.w	r3, r2, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	f47f ae8e 	bne.w	8001d7c <HAL_GPIO_Init+0x14>
  }
}
 8002060:	bf00      	nop
 8002062:	bf00      	nop
 8002064:	372c      	adds	r7, #44	; 0x2c
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr
 800206c:	40010400 	.word	0x40010400

08002070 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	460b      	mov	r3, r1
 800207a:	807b      	strh	r3, [r7, #2]
 800207c:	4613      	mov	r3, r2
 800207e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002080:	787b      	ldrb	r3, [r7, #1]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002086:	887a      	ldrh	r2, [r7, #2]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800208c:	e003      	b.n	8002096 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800208e:	887b      	ldrh	r3, [r7, #2]
 8002090:	041a      	lsls	r2, r3, #16
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	611a      	str	r2, [r3, #16]
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	bc80      	pop	{r7}
 800209e:	4770      	bx	lr

080020a0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	460b      	mov	r3, r1
 80020aa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020b2:	887a      	ldrh	r2, [r7, #2]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	4013      	ands	r3, r2
 80020b8:	041a      	lsls	r2, r3, #16
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	43d9      	mvns	r1, r3
 80020be:	887b      	ldrh	r3, [r7, #2]
 80020c0:	400b      	ands	r3, r1
 80020c2:	431a      	orrs	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	611a      	str	r2, [r3, #16]
}
 80020c8:	bf00      	nop
 80020ca:	3714      	adds	r7, #20
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bc80      	pop	{r7}
 80020d0:	4770      	bx	lr
	...

080020d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e272      	b.n	80025cc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f000 8087 	beq.w	8002202 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020f4:	4b92      	ldr	r3, [pc, #584]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f003 030c 	and.w	r3, r3, #12
 80020fc:	2b04      	cmp	r3, #4
 80020fe:	d00c      	beq.n	800211a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002100:	4b8f      	ldr	r3, [pc, #572]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f003 030c 	and.w	r3, r3, #12
 8002108:	2b08      	cmp	r3, #8
 800210a:	d112      	bne.n	8002132 <HAL_RCC_OscConfig+0x5e>
 800210c:	4b8c      	ldr	r3, [pc, #560]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002118:	d10b      	bne.n	8002132 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800211a:	4b89      	ldr	r3, [pc, #548]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d06c      	beq.n	8002200 <HAL_RCC_OscConfig+0x12c>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d168      	bne.n	8002200 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e24c      	b.n	80025cc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800213a:	d106      	bne.n	800214a <HAL_RCC_OscConfig+0x76>
 800213c:	4b80      	ldr	r3, [pc, #512]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a7f      	ldr	r2, [pc, #508]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 8002142:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002146:	6013      	str	r3, [r2, #0]
 8002148:	e02e      	b.n	80021a8 <HAL_RCC_OscConfig+0xd4>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d10c      	bne.n	800216c <HAL_RCC_OscConfig+0x98>
 8002152:	4b7b      	ldr	r3, [pc, #492]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a7a      	ldr	r2, [pc, #488]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 8002158:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800215c:	6013      	str	r3, [r2, #0]
 800215e:	4b78      	ldr	r3, [pc, #480]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a77      	ldr	r2, [pc, #476]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 8002164:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002168:	6013      	str	r3, [r2, #0]
 800216a:	e01d      	b.n	80021a8 <HAL_RCC_OscConfig+0xd4>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002174:	d10c      	bne.n	8002190 <HAL_RCC_OscConfig+0xbc>
 8002176:	4b72      	ldr	r3, [pc, #456]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a71      	ldr	r2, [pc, #452]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 800217c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002180:	6013      	str	r3, [r2, #0]
 8002182:	4b6f      	ldr	r3, [pc, #444]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a6e      	ldr	r2, [pc, #440]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 8002188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800218c:	6013      	str	r3, [r2, #0]
 800218e:	e00b      	b.n	80021a8 <HAL_RCC_OscConfig+0xd4>
 8002190:	4b6b      	ldr	r3, [pc, #428]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a6a      	ldr	r2, [pc, #424]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 8002196:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800219a:	6013      	str	r3, [r2, #0]
 800219c:	4b68      	ldr	r3, [pc, #416]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a67      	ldr	r2, [pc, #412]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 80021a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d013      	beq.n	80021d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b0:	f7fe fe30 	bl	8000e14 <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021b8:	f7fe fe2c 	bl	8000e14 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b64      	cmp	r3, #100	; 0x64
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e200      	b.n	80025cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ca:	4b5d      	ldr	r3, [pc, #372]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d0f0      	beq.n	80021b8 <HAL_RCC_OscConfig+0xe4>
 80021d6:	e014      	b.n	8002202 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d8:	f7fe fe1c 	bl	8000e14 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021e0:	f7fe fe18 	bl	8000e14 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b64      	cmp	r3, #100	; 0x64
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e1ec      	b.n	80025cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021f2:	4b53      	ldr	r3, [pc, #332]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1f0      	bne.n	80021e0 <HAL_RCC_OscConfig+0x10c>
 80021fe:	e000      	b.n	8002202 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002200:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d063      	beq.n	80022d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800220e:	4b4c      	ldr	r3, [pc, #304]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f003 030c 	and.w	r3, r3, #12
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00b      	beq.n	8002232 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800221a:	4b49      	ldr	r3, [pc, #292]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f003 030c 	and.w	r3, r3, #12
 8002222:	2b08      	cmp	r3, #8
 8002224:	d11c      	bne.n	8002260 <HAL_RCC_OscConfig+0x18c>
 8002226:	4b46      	ldr	r3, [pc, #280]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d116      	bne.n	8002260 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002232:	4b43      	ldr	r3, [pc, #268]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d005      	beq.n	800224a <HAL_RCC_OscConfig+0x176>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d001      	beq.n	800224a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e1c0      	b.n	80025cc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800224a:	4b3d      	ldr	r3, [pc, #244]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	4939      	ldr	r1, [pc, #228]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 800225a:	4313      	orrs	r3, r2
 800225c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800225e:	e03a      	b.n	80022d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d020      	beq.n	80022aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002268:	4b36      	ldr	r3, [pc, #216]	; (8002344 <HAL_RCC_OscConfig+0x270>)
 800226a:	2201      	movs	r2, #1
 800226c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226e:	f7fe fdd1 	bl	8000e14 <HAL_GetTick>
 8002272:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002274:	e008      	b.n	8002288 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002276:	f7fe fdcd 	bl	8000e14 <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	2b02      	cmp	r3, #2
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e1a1      	b.n	80025cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002288:	4b2d      	ldr	r3, [pc, #180]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d0f0      	beq.n	8002276 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002294:	4b2a      	ldr	r3, [pc, #168]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	695b      	ldr	r3, [r3, #20]
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	4927      	ldr	r1, [pc, #156]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	600b      	str	r3, [r1, #0]
 80022a8:	e015      	b.n	80022d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022aa:	4b26      	ldr	r3, [pc, #152]	; (8002344 <HAL_RCC_OscConfig+0x270>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b0:	f7fe fdb0 	bl	8000e14 <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022b8:	f7fe fdac 	bl	8000e14 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e180      	b.n	80025cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ca:	4b1d      	ldr	r3, [pc, #116]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1f0      	bne.n	80022b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0308 	and.w	r3, r3, #8
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d03a      	beq.n	8002358 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d019      	beq.n	800231e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022ea:	4b17      	ldr	r3, [pc, #92]	; (8002348 <HAL_RCC_OscConfig+0x274>)
 80022ec:	2201      	movs	r2, #1
 80022ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f0:	f7fe fd90 	bl	8000e14 <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022f8:	f7fe fd8c 	bl	8000e14 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e160      	b.n	80025cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800230a:	4b0d      	ldr	r3, [pc, #52]	; (8002340 <HAL_RCC_OscConfig+0x26c>)
 800230c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d0f0      	beq.n	80022f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002316:	2001      	movs	r0, #1
 8002318:	f000 face 	bl	80028b8 <RCC_Delay>
 800231c:	e01c      	b.n	8002358 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800231e:	4b0a      	ldr	r3, [pc, #40]	; (8002348 <HAL_RCC_OscConfig+0x274>)
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002324:	f7fe fd76 	bl	8000e14 <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800232a:	e00f      	b.n	800234c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800232c:	f7fe fd72 	bl	8000e14 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d908      	bls.n	800234c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e146      	b.n	80025cc <HAL_RCC_OscConfig+0x4f8>
 800233e:	bf00      	nop
 8002340:	40021000 	.word	0x40021000
 8002344:	42420000 	.word	0x42420000
 8002348:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800234c:	4b92      	ldr	r3, [pc, #584]	; (8002598 <HAL_RCC_OscConfig+0x4c4>)
 800234e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d1e9      	bne.n	800232c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	2b00      	cmp	r3, #0
 8002362:	f000 80a6 	beq.w	80024b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002366:	2300      	movs	r3, #0
 8002368:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800236a:	4b8b      	ldr	r3, [pc, #556]	; (8002598 <HAL_RCC_OscConfig+0x4c4>)
 800236c:	69db      	ldr	r3, [r3, #28]
 800236e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10d      	bne.n	8002392 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002376:	4b88      	ldr	r3, [pc, #544]	; (8002598 <HAL_RCC_OscConfig+0x4c4>)
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	4a87      	ldr	r2, [pc, #540]	; (8002598 <HAL_RCC_OscConfig+0x4c4>)
 800237c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002380:	61d3      	str	r3, [r2, #28]
 8002382:	4b85      	ldr	r3, [pc, #532]	; (8002598 <HAL_RCC_OscConfig+0x4c4>)
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238a:	60bb      	str	r3, [r7, #8]
 800238c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800238e:	2301      	movs	r3, #1
 8002390:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002392:	4b82      	ldr	r3, [pc, #520]	; (800259c <HAL_RCC_OscConfig+0x4c8>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239a:	2b00      	cmp	r3, #0
 800239c:	d118      	bne.n	80023d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800239e:	4b7f      	ldr	r3, [pc, #508]	; (800259c <HAL_RCC_OscConfig+0x4c8>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a7e      	ldr	r2, [pc, #504]	; (800259c <HAL_RCC_OscConfig+0x4c8>)
 80023a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023aa:	f7fe fd33 	bl	8000e14 <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b0:	e008      	b.n	80023c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023b2:	f7fe fd2f 	bl	8000e14 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b64      	cmp	r3, #100	; 0x64
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e103      	b.n	80025cc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c4:	4b75      	ldr	r3, [pc, #468]	; (800259c <HAL_RCC_OscConfig+0x4c8>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0f0      	beq.n	80023b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d106      	bne.n	80023e6 <HAL_RCC_OscConfig+0x312>
 80023d8:	4b6f      	ldr	r3, [pc, #444]	; (8002598 <HAL_RCC_OscConfig+0x4c4>)
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	4a6e      	ldr	r2, [pc, #440]	; (8002598 <HAL_RCC_OscConfig+0x4c4>)
 80023de:	f043 0301 	orr.w	r3, r3, #1
 80023e2:	6213      	str	r3, [r2, #32]
 80023e4:	e02d      	b.n	8002442 <HAL_RCC_OscConfig+0x36e>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d10c      	bne.n	8002408 <HAL_RCC_OscConfig+0x334>
 80023ee:	4b6a      	ldr	r3, [pc, #424]	; (8002598 <HAL_RCC_OscConfig+0x4c4>)
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	4a69      	ldr	r2, [pc, #420]	; (8002598 <HAL_RCC_OscConfig+0x4c4>)
 80023f4:	f023 0301 	bic.w	r3, r3, #1
 80023f8:	6213      	str	r3, [r2, #32]
 80023fa:	4b67      	ldr	r3, [pc, #412]	; (8002598 <HAL_RCC_OscConfig+0x4c4>)
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	4a66      	ldr	r2, [pc, #408]	; (8002598 <HAL_RCC_OscConfig+0x4c4>)
 8002400:	f023 0304 	bic.w	r3, r3, #4
 8002404:	6213      	str	r3, [r2, #32]
 8002406:	e01c      	b.n	8002442 <HAL_RCC_OscConfig+0x36e>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	2b05      	cmp	r3, #5
 800240e:	d10c      	bne.n	800242a <HAL_RCC_OscConfig+0x356>
 8002410:	4b61      	ldr	r3, [pc, #388]	; (8002598 <HAL_RCC_OscConfig+0x4c4>)
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	4a60      	ldr	r2, [pc, #384]	; (8002598 <HAL_RCC_OscConfig+0x4c4>)
 8002416:	f043 0304 	orr.w	r3, r3, #4
 800241a:	6213      	str	r3, [r2, #32]
 800241c:	4b5e      	ldr	r3, [pc, #376]	; (8002598 <HAL_RCC_OscConfig+0x4c4>)
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	4a5d      	ldr	r2, [pc, #372]	; (8002598 <HAL_RCC_OscConfig+0x4c4>)
 8002422:	f043 0301 	orr.w	r3, r3, #1
 8002426:	6213      	str	r3, [r2, #32]
 8002428:	e00b      	b.n	8002442 <HAL_RCC_OscConfig+0x36e>
 800242a:	4b5b      	ldr	r3, [pc, #364]	; (8002598 <HAL_RCC_OscConfig+0x4c4>)
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	4a5a      	ldr	r2, [pc, #360]	; (8002598 <HAL_RCC_OscConfig+0x4c4>)
 8002430:	f023 0301 	bic.w	r3, r3, #1
 8002434:	6213      	str	r3, [r2, #32]
 8002436:	4b58      	ldr	r3, [pc, #352]	; (8002598 <HAL_RCC_OscConfig+0x4c4>)
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	4a57      	ldr	r2, [pc, #348]	; (8002598 <HAL_RCC_OscConfig+0x4c4>)
 800243c:	f023 0304 	bic.w	r3, r3, #4
 8002440:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d015      	beq.n	8002476 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800244a:	f7fe fce3 	bl	8000e14 <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002450:	e00a      	b.n	8002468 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002452:	f7fe fcdf 	bl	8000e14 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002460:	4293      	cmp	r3, r2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e0b1      	b.n	80025cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002468:	4b4b      	ldr	r3, [pc, #300]	; (8002598 <HAL_RCC_OscConfig+0x4c4>)
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d0ee      	beq.n	8002452 <HAL_RCC_OscConfig+0x37e>
 8002474:	e014      	b.n	80024a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002476:	f7fe fccd 	bl	8000e14 <HAL_GetTick>
 800247a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800247c:	e00a      	b.n	8002494 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800247e:	f7fe fcc9 	bl	8000e14 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	f241 3288 	movw	r2, #5000	; 0x1388
 800248c:	4293      	cmp	r3, r2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e09b      	b.n	80025cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002494:	4b40      	ldr	r3, [pc, #256]	; (8002598 <HAL_RCC_OscConfig+0x4c4>)
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1ee      	bne.n	800247e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024a0:	7dfb      	ldrb	r3, [r7, #23]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d105      	bne.n	80024b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024a6:	4b3c      	ldr	r3, [pc, #240]	; (8002598 <HAL_RCC_OscConfig+0x4c4>)
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	4a3b      	ldr	r2, [pc, #236]	; (8002598 <HAL_RCC_OscConfig+0x4c4>)
 80024ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f000 8087 	beq.w	80025ca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024bc:	4b36      	ldr	r3, [pc, #216]	; (8002598 <HAL_RCC_OscConfig+0x4c4>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f003 030c 	and.w	r3, r3, #12
 80024c4:	2b08      	cmp	r3, #8
 80024c6:	d061      	beq.n	800258c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	69db      	ldr	r3, [r3, #28]
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d146      	bne.n	800255e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024d0:	4b33      	ldr	r3, [pc, #204]	; (80025a0 <HAL_RCC_OscConfig+0x4cc>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d6:	f7fe fc9d 	bl	8000e14 <HAL_GetTick>
 80024da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024dc:	e008      	b.n	80024f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024de:	f7fe fc99 	bl	8000e14 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e06d      	b.n	80025cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024f0:	4b29      	ldr	r3, [pc, #164]	; (8002598 <HAL_RCC_OscConfig+0x4c4>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d1f0      	bne.n	80024de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002504:	d108      	bne.n	8002518 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002506:	4b24      	ldr	r3, [pc, #144]	; (8002598 <HAL_RCC_OscConfig+0x4c4>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	4921      	ldr	r1, [pc, #132]	; (8002598 <HAL_RCC_OscConfig+0x4c4>)
 8002514:	4313      	orrs	r3, r2
 8002516:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002518:	4b1f      	ldr	r3, [pc, #124]	; (8002598 <HAL_RCC_OscConfig+0x4c4>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a19      	ldr	r1, [r3, #32]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002528:	430b      	orrs	r3, r1
 800252a:	491b      	ldr	r1, [pc, #108]	; (8002598 <HAL_RCC_OscConfig+0x4c4>)
 800252c:	4313      	orrs	r3, r2
 800252e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002530:	4b1b      	ldr	r3, [pc, #108]	; (80025a0 <HAL_RCC_OscConfig+0x4cc>)
 8002532:	2201      	movs	r2, #1
 8002534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002536:	f7fe fc6d 	bl	8000e14 <HAL_GetTick>
 800253a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800253c:	e008      	b.n	8002550 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800253e:	f7fe fc69 	bl	8000e14 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e03d      	b.n	80025cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002550:	4b11      	ldr	r3, [pc, #68]	; (8002598 <HAL_RCC_OscConfig+0x4c4>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0f0      	beq.n	800253e <HAL_RCC_OscConfig+0x46a>
 800255c:	e035      	b.n	80025ca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800255e:	4b10      	ldr	r3, [pc, #64]	; (80025a0 <HAL_RCC_OscConfig+0x4cc>)
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002564:	f7fe fc56 	bl	8000e14 <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800256c:	f7fe fc52 	bl	8000e14 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e026      	b.n	80025cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800257e:	4b06      	ldr	r3, [pc, #24]	; (8002598 <HAL_RCC_OscConfig+0x4c4>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1f0      	bne.n	800256c <HAL_RCC_OscConfig+0x498>
 800258a:	e01e      	b.n	80025ca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	69db      	ldr	r3, [r3, #28]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d107      	bne.n	80025a4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e019      	b.n	80025cc <HAL_RCC_OscConfig+0x4f8>
 8002598:	40021000 	.word	0x40021000
 800259c:	40007000 	.word	0x40007000
 80025a0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025a4:	4b0b      	ldr	r3, [pc, #44]	; (80025d4 <HAL_RCC_OscConfig+0x500>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a1b      	ldr	r3, [r3, #32]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d106      	bne.n	80025c6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d001      	beq.n	80025ca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e000      	b.n	80025cc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3718      	adds	r7, #24
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	40021000 	.word	0x40021000

080025d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d101      	bne.n	80025ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e0d0      	b.n	800278e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025ec:	4b6a      	ldr	r3, [pc, #424]	; (8002798 <HAL_RCC_ClockConfig+0x1c0>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0307 	and.w	r3, r3, #7
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d910      	bls.n	800261c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025fa:	4b67      	ldr	r3, [pc, #412]	; (8002798 <HAL_RCC_ClockConfig+0x1c0>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f023 0207 	bic.w	r2, r3, #7
 8002602:	4965      	ldr	r1, [pc, #404]	; (8002798 <HAL_RCC_ClockConfig+0x1c0>)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	4313      	orrs	r3, r2
 8002608:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800260a:	4b63      	ldr	r3, [pc, #396]	; (8002798 <HAL_RCC_ClockConfig+0x1c0>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0307 	and.w	r3, r3, #7
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	429a      	cmp	r2, r3
 8002616:	d001      	beq.n	800261c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e0b8      	b.n	800278e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d020      	beq.n	800266a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0304 	and.w	r3, r3, #4
 8002630:	2b00      	cmp	r3, #0
 8002632:	d005      	beq.n	8002640 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002634:	4b59      	ldr	r3, [pc, #356]	; (800279c <HAL_RCC_ClockConfig+0x1c4>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	4a58      	ldr	r2, [pc, #352]	; (800279c <HAL_RCC_ClockConfig+0x1c4>)
 800263a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800263e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0308 	and.w	r3, r3, #8
 8002648:	2b00      	cmp	r3, #0
 800264a:	d005      	beq.n	8002658 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800264c:	4b53      	ldr	r3, [pc, #332]	; (800279c <HAL_RCC_ClockConfig+0x1c4>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	4a52      	ldr	r2, [pc, #328]	; (800279c <HAL_RCC_ClockConfig+0x1c4>)
 8002652:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002656:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002658:	4b50      	ldr	r3, [pc, #320]	; (800279c <HAL_RCC_ClockConfig+0x1c4>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	494d      	ldr	r1, [pc, #308]	; (800279c <HAL_RCC_ClockConfig+0x1c4>)
 8002666:	4313      	orrs	r3, r2
 8002668:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	2b00      	cmp	r3, #0
 8002674:	d040      	beq.n	80026f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d107      	bne.n	800268e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800267e:	4b47      	ldr	r3, [pc, #284]	; (800279c <HAL_RCC_ClockConfig+0x1c4>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d115      	bne.n	80026b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e07f      	b.n	800278e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2b02      	cmp	r3, #2
 8002694:	d107      	bne.n	80026a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002696:	4b41      	ldr	r3, [pc, #260]	; (800279c <HAL_RCC_ClockConfig+0x1c4>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d109      	bne.n	80026b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e073      	b.n	800278e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a6:	4b3d      	ldr	r3, [pc, #244]	; (800279c <HAL_RCC_ClockConfig+0x1c4>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e06b      	b.n	800278e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026b6:	4b39      	ldr	r3, [pc, #228]	; (800279c <HAL_RCC_ClockConfig+0x1c4>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f023 0203 	bic.w	r2, r3, #3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	4936      	ldr	r1, [pc, #216]	; (800279c <HAL_RCC_ClockConfig+0x1c4>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026c8:	f7fe fba4 	bl	8000e14 <HAL_GetTick>
 80026cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ce:	e00a      	b.n	80026e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026d0:	f7fe fba0 	bl	8000e14 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	f241 3288 	movw	r2, #5000	; 0x1388
 80026de:	4293      	cmp	r3, r2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e053      	b.n	800278e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e6:	4b2d      	ldr	r3, [pc, #180]	; (800279c <HAL_RCC_ClockConfig+0x1c4>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f003 020c 	and.w	r2, r3, #12
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d1eb      	bne.n	80026d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026f8:	4b27      	ldr	r3, [pc, #156]	; (8002798 <HAL_RCC_ClockConfig+0x1c0>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	429a      	cmp	r2, r3
 8002704:	d210      	bcs.n	8002728 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002706:	4b24      	ldr	r3, [pc, #144]	; (8002798 <HAL_RCC_ClockConfig+0x1c0>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f023 0207 	bic.w	r2, r3, #7
 800270e:	4922      	ldr	r1, [pc, #136]	; (8002798 <HAL_RCC_ClockConfig+0x1c0>)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	4313      	orrs	r3, r2
 8002714:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002716:	4b20      	ldr	r3, [pc, #128]	; (8002798 <HAL_RCC_ClockConfig+0x1c0>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0307 	and.w	r3, r3, #7
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	429a      	cmp	r2, r3
 8002722:	d001      	beq.n	8002728 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e032      	b.n	800278e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0304 	and.w	r3, r3, #4
 8002730:	2b00      	cmp	r3, #0
 8002732:	d008      	beq.n	8002746 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002734:	4b19      	ldr	r3, [pc, #100]	; (800279c <HAL_RCC_ClockConfig+0x1c4>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	4916      	ldr	r1, [pc, #88]	; (800279c <HAL_RCC_ClockConfig+0x1c4>)
 8002742:	4313      	orrs	r3, r2
 8002744:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0308 	and.w	r3, r3, #8
 800274e:	2b00      	cmp	r3, #0
 8002750:	d009      	beq.n	8002766 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002752:	4b12      	ldr	r3, [pc, #72]	; (800279c <HAL_RCC_ClockConfig+0x1c4>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	490e      	ldr	r1, [pc, #56]	; (800279c <HAL_RCC_ClockConfig+0x1c4>)
 8002762:	4313      	orrs	r3, r2
 8002764:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002766:	f000 f821 	bl	80027ac <HAL_RCC_GetSysClockFreq>
 800276a:	4602      	mov	r2, r0
 800276c:	4b0b      	ldr	r3, [pc, #44]	; (800279c <HAL_RCC_ClockConfig+0x1c4>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	091b      	lsrs	r3, r3, #4
 8002772:	f003 030f 	and.w	r3, r3, #15
 8002776:	490a      	ldr	r1, [pc, #40]	; (80027a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002778:	5ccb      	ldrb	r3, [r1, r3]
 800277a:	fa22 f303 	lsr.w	r3, r2, r3
 800277e:	4a09      	ldr	r2, [pc, #36]	; (80027a4 <HAL_RCC_ClockConfig+0x1cc>)
 8002780:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002782:	4b09      	ldr	r3, [pc, #36]	; (80027a8 <HAL_RCC_ClockConfig+0x1d0>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4618      	mov	r0, r3
 8002788:	f7fe fb02 	bl	8000d90 <HAL_InitTick>

  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3710      	adds	r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	40022000 	.word	0x40022000
 800279c:	40021000 	.word	0x40021000
 80027a0:	08002b3c 	.word	0x08002b3c
 80027a4:	20000000 	.word	0x20000000
 80027a8:	20000004 	.word	0x20000004

080027ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b087      	sub	sp, #28
 80027b0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027b2:	2300      	movs	r3, #0
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	2300      	movs	r3, #0
 80027b8:	60bb      	str	r3, [r7, #8]
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]
 80027be:	2300      	movs	r3, #0
 80027c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80027c2:	2300      	movs	r3, #0
 80027c4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027c6:	4b1e      	ldr	r3, [pc, #120]	; (8002840 <HAL_RCC_GetSysClockFreq+0x94>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f003 030c 	and.w	r3, r3, #12
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	d002      	beq.n	80027dc <HAL_RCC_GetSysClockFreq+0x30>
 80027d6:	2b08      	cmp	r3, #8
 80027d8:	d003      	beq.n	80027e2 <HAL_RCC_GetSysClockFreq+0x36>
 80027da:	e027      	b.n	800282c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027dc:	4b19      	ldr	r3, [pc, #100]	; (8002844 <HAL_RCC_GetSysClockFreq+0x98>)
 80027de:	613b      	str	r3, [r7, #16]
      break;
 80027e0:	e027      	b.n	8002832 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	0c9b      	lsrs	r3, r3, #18
 80027e6:	f003 030f 	and.w	r3, r3, #15
 80027ea:	4a17      	ldr	r2, [pc, #92]	; (8002848 <HAL_RCC_GetSysClockFreq+0x9c>)
 80027ec:	5cd3      	ldrb	r3, [r2, r3]
 80027ee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d010      	beq.n	800281c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027fa:	4b11      	ldr	r3, [pc, #68]	; (8002840 <HAL_RCC_GetSysClockFreq+0x94>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	0c5b      	lsrs	r3, r3, #17
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	4a11      	ldr	r2, [pc, #68]	; (800284c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002806:	5cd3      	ldrb	r3, [r2, r3]
 8002808:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a0d      	ldr	r2, [pc, #52]	; (8002844 <HAL_RCC_GetSysClockFreq+0x98>)
 800280e:	fb03 f202 	mul.w	r2, r3, r2
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	fbb2 f3f3 	udiv	r3, r2, r3
 8002818:	617b      	str	r3, [r7, #20]
 800281a:	e004      	b.n	8002826 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4a0c      	ldr	r2, [pc, #48]	; (8002850 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002820:	fb02 f303 	mul.w	r3, r2, r3
 8002824:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	613b      	str	r3, [r7, #16]
      break;
 800282a:	e002      	b.n	8002832 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800282c:	4b05      	ldr	r3, [pc, #20]	; (8002844 <HAL_RCC_GetSysClockFreq+0x98>)
 800282e:	613b      	str	r3, [r7, #16]
      break;
 8002830:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002832:	693b      	ldr	r3, [r7, #16]
}
 8002834:	4618      	mov	r0, r3
 8002836:	371c      	adds	r7, #28
 8002838:	46bd      	mov	sp, r7
 800283a:	bc80      	pop	{r7}
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	40021000 	.word	0x40021000
 8002844:	007a1200 	.word	0x007a1200
 8002848:	08002b54 	.word	0x08002b54
 800284c:	08002b64 	.word	0x08002b64
 8002850:	003d0900 	.word	0x003d0900

08002854 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002858:	4b02      	ldr	r3, [pc, #8]	; (8002864 <HAL_RCC_GetHCLKFreq+0x10>)
 800285a:	681b      	ldr	r3, [r3, #0]
}
 800285c:	4618      	mov	r0, r3
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr
 8002864:	20000000 	.word	0x20000000

08002868 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800286c:	f7ff fff2 	bl	8002854 <HAL_RCC_GetHCLKFreq>
 8002870:	4602      	mov	r2, r0
 8002872:	4b05      	ldr	r3, [pc, #20]	; (8002888 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	0a1b      	lsrs	r3, r3, #8
 8002878:	f003 0307 	and.w	r3, r3, #7
 800287c:	4903      	ldr	r1, [pc, #12]	; (800288c <HAL_RCC_GetPCLK1Freq+0x24>)
 800287e:	5ccb      	ldrb	r3, [r1, r3]
 8002880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002884:	4618      	mov	r0, r3
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40021000 	.word	0x40021000
 800288c:	08002b4c 	.word	0x08002b4c

08002890 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002894:	f7ff ffde 	bl	8002854 <HAL_RCC_GetHCLKFreq>
 8002898:	4602      	mov	r2, r0
 800289a:	4b05      	ldr	r3, [pc, #20]	; (80028b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	0adb      	lsrs	r3, r3, #11
 80028a0:	f003 0307 	and.w	r3, r3, #7
 80028a4:	4903      	ldr	r1, [pc, #12]	; (80028b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028a6:	5ccb      	ldrb	r3, [r1, r3]
 80028a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40021000 	.word	0x40021000
 80028b4:	08002b4c 	.word	0x08002b4c

080028b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028c0:	4b0a      	ldr	r3, [pc, #40]	; (80028ec <RCC_Delay+0x34>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a0a      	ldr	r2, [pc, #40]	; (80028f0 <RCC_Delay+0x38>)
 80028c6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ca:	0a5b      	lsrs	r3, r3, #9
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	fb02 f303 	mul.w	r3, r2, r3
 80028d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028d4:	bf00      	nop
  }
  while (Delay --);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	1e5a      	subs	r2, r3, #1
 80028da:	60fa      	str	r2, [r7, #12]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d1f9      	bne.n	80028d4 <RCC_Delay+0x1c>
}
 80028e0:	bf00      	nop
 80028e2:	bf00      	nop
 80028e4:	3714      	adds	r7, #20
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr
 80028ec:	20000000 	.word	0x20000000
 80028f0:	10624dd3 	.word	0x10624dd3

080028f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e042      	b.n	800298c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d106      	bne.n	8002920 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7fe f95a 	bl	8000bd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2224      	movs	r2, #36	; 0x24
 8002924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68da      	ldr	r2, [r3, #12]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002936:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f000 f82b 	bl	8002994 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	691a      	ldr	r2, [r3, #16]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800294c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	695a      	ldr	r2, [r3, #20]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800295c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68da      	ldr	r2, [r3, #12]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800296c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2220      	movs	r2, #32
 8002978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2220      	movs	r2, #32
 8002980:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68da      	ldr	r2, [r3, #12]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	430a      	orrs	r2, r1
 80029b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	689a      	ldr	r2, [r3, #8]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	431a      	orrs	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	695b      	ldr	r3, [r3, #20]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80029ce:	f023 030c 	bic.w	r3, r3, #12
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	6812      	ldr	r2, [r2, #0]
 80029d6:	68b9      	ldr	r1, [r7, #8]
 80029d8:	430b      	orrs	r3, r1
 80029da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	699a      	ldr	r2, [r3, #24]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	430a      	orrs	r2, r1
 80029f0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a2c      	ldr	r2, [pc, #176]	; (8002aa8 <UART_SetConfig+0x114>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d103      	bne.n	8002a04 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80029fc:	f7ff ff48 	bl	8002890 <HAL_RCC_GetPCLK2Freq>
 8002a00:	60f8      	str	r0, [r7, #12]
 8002a02:	e002      	b.n	8002a0a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002a04:	f7ff ff30 	bl	8002868 <HAL_RCC_GetPCLK1Freq>
 8002a08:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	009a      	lsls	r2, r3, #2
 8002a14:	441a      	add	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a20:	4a22      	ldr	r2, [pc, #136]	; (8002aac <UART_SetConfig+0x118>)
 8002a22:	fba2 2303 	umull	r2, r3, r2, r3
 8002a26:	095b      	lsrs	r3, r3, #5
 8002a28:	0119      	lsls	r1, r3, #4
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	4413      	add	r3, r2
 8002a32:	009a      	lsls	r2, r3, #2
 8002a34:	441a      	add	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a40:	4b1a      	ldr	r3, [pc, #104]	; (8002aac <UART_SetConfig+0x118>)
 8002a42:	fba3 0302 	umull	r0, r3, r3, r2
 8002a46:	095b      	lsrs	r3, r3, #5
 8002a48:	2064      	movs	r0, #100	; 0x64
 8002a4a:	fb00 f303 	mul.w	r3, r0, r3
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	011b      	lsls	r3, r3, #4
 8002a52:	3332      	adds	r3, #50	; 0x32
 8002a54:	4a15      	ldr	r2, [pc, #84]	; (8002aac <UART_SetConfig+0x118>)
 8002a56:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5a:	095b      	lsrs	r3, r3, #5
 8002a5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a60:	4419      	add	r1, r3
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	4613      	mov	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4413      	add	r3, r2
 8002a6a:	009a      	lsls	r2, r3, #2
 8002a6c:	441a      	add	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a78:	4b0c      	ldr	r3, [pc, #48]	; (8002aac <UART_SetConfig+0x118>)
 8002a7a:	fba3 0302 	umull	r0, r3, r3, r2
 8002a7e:	095b      	lsrs	r3, r3, #5
 8002a80:	2064      	movs	r0, #100	; 0x64
 8002a82:	fb00 f303 	mul.w	r3, r0, r3
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	011b      	lsls	r3, r3, #4
 8002a8a:	3332      	adds	r3, #50	; 0x32
 8002a8c:	4a07      	ldr	r2, [pc, #28]	; (8002aac <UART_SetConfig+0x118>)
 8002a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a92:	095b      	lsrs	r3, r3, #5
 8002a94:	f003 020f 	and.w	r2, r3, #15
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	440a      	add	r2, r1
 8002a9e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002aa0:	bf00      	nop
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40013800 	.word	0x40013800
 8002aac:	51eb851f 	.word	0x51eb851f

08002ab0 <memset>:
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	4402      	add	r2, r0
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d100      	bne.n	8002aba <memset+0xa>
 8002ab8:	4770      	bx	lr
 8002aba:	f803 1b01 	strb.w	r1, [r3], #1
 8002abe:	e7f9      	b.n	8002ab4 <memset+0x4>

08002ac0 <__libc_init_array>:
 8002ac0:	b570      	push	{r4, r5, r6, lr}
 8002ac2:	2600      	movs	r6, #0
 8002ac4:	4d0c      	ldr	r5, [pc, #48]	; (8002af8 <__libc_init_array+0x38>)
 8002ac6:	4c0d      	ldr	r4, [pc, #52]	; (8002afc <__libc_init_array+0x3c>)
 8002ac8:	1b64      	subs	r4, r4, r5
 8002aca:	10a4      	asrs	r4, r4, #2
 8002acc:	42a6      	cmp	r6, r4
 8002ace:	d109      	bne.n	8002ae4 <__libc_init_array+0x24>
 8002ad0:	f000 f828 	bl	8002b24 <_init>
 8002ad4:	2600      	movs	r6, #0
 8002ad6:	4d0a      	ldr	r5, [pc, #40]	; (8002b00 <__libc_init_array+0x40>)
 8002ad8:	4c0a      	ldr	r4, [pc, #40]	; (8002b04 <__libc_init_array+0x44>)
 8002ada:	1b64      	subs	r4, r4, r5
 8002adc:	10a4      	asrs	r4, r4, #2
 8002ade:	42a6      	cmp	r6, r4
 8002ae0:	d105      	bne.n	8002aee <__libc_init_array+0x2e>
 8002ae2:	bd70      	pop	{r4, r5, r6, pc}
 8002ae4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ae8:	4798      	blx	r3
 8002aea:	3601      	adds	r6, #1
 8002aec:	e7ee      	b.n	8002acc <__libc_init_array+0xc>
 8002aee:	f855 3b04 	ldr.w	r3, [r5], #4
 8002af2:	4798      	blx	r3
 8002af4:	3601      	adds	r6, #1
 8002af6:	e7f2      	b.n	8002ade <__libc_init_array+0x1e>
 8002af8:	08002b68 	.word	0x08002b68
 8002afc:	08002b68 	.word	0x08002b68
 8002b00:	08002b68 	.word	0x08002b68
 8002b04:	08002b6c 	.word	0x08002b6c

08002b08 <memcpy>:
 8002b08:	440a      	add	r2, r1
 8002b0a:	4291      	cmp	r1, r2
 8002b0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002b10:	d100      	bne.n	8002b14 <memcpy+0xc>
 8002b12:	4770      	bx	lr
 8002b14:	b510      	push	{r4, lr}
 8002b16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002b1a:	4291      	cmp	r1, r2
 8002b1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002b20:	d1f9      	bne.n	8002b16 <memcpy+0xe>
 8002b22:	bd10      	pop	{r4, pc}

08002b24 <_init>:
 8002b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b26:	bf00      	nop
 8002b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b2a:	bc08      	pop	{r3}
 8002b2c:	469e      	mov	lr, r3
 8002b2e:	4770      	bx	lr

08002b30 <_fini>:
 8002b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b32:	bf00      	nop
 8002b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b36:	bc08      	pop	{r3}
 8002b38:	469e      	mov	lr, r3
 8002b3a:	4770      	bx	lr
