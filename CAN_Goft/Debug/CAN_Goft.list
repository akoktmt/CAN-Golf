
CAN_Goft.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a74  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002b80  08002b80  00012b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bac  08002bac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002bac  08002bac  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bac  08002bac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bac  08002bac  00012bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bb0  08002bb0  00012bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002bb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  2000000c  08002bc0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08002bc0  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000984c  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b02  00000000  00000000  000298c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007f0  00000000  00000000  0002b3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000060d  00000000  00000000  0002bbb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017172  00000000  00000000  0002c1c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009bc5  00000000  00000000  00043337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084309  00000000  00000000  0004cefc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001f58  00000000  00000000  000d1208  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000d3160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b68 	.word	0x08002b68

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002b68 	.word	0x08002b68

0800014c <CANBufferHandleStruct_Init>:
 *      Author: win 10
 */
#include <CAN_OSI.h>
#include <string.h>
#include "CAN_Flag.h"
void CANBufferHandleStruct_Init(CANBufferHandleStruct *Buffer) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b096      	sub	sp, #88	; 0x58
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	NodeBufferHandle defaultNodeHandle = {0};
 8000154:	f107 030c 	add.w	r3, r7, #12
 8000158:	2247      	movs	r2, #71	; 0x47
 800015a:	2100      	movs	r1, #0
 800015c:	4618      	mov	r0, r3
 800015e:	f002 fcc9 	bl	8002af4 <memset>
	Buffer->Buffer_Index = 0;
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2200      	movs	r2, #0
 8000166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	Buffer->SenderID = 0;
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	2200      	movs	r2, #0
 800016e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	Buffer->RecvID = 0;
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	2200      	movs	r2, #0
 8000176:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	Buffer->FrameType_Index = SET_UP_FRAME;
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	2200      	movs	r2, #0
 800017e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	Buffer->PacketDataLength = 0;
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	2200      	movs	r2, #0
 8000186:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	Buffer->CRCValue = 0;
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2200      	movs	r2, #0
 800018e:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	Buffer->NumberOfFrame=0;
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	2200      	movs	r2, #0
 8000196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	memset(Buffer->NetworkBuffer, 0, sizeof(Buffer->NetworkBuffer));
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	2240      	movs	r2, #64	; 0x40
 800019e:	2100      	movs	r1, #0
 80001a0:	4618      	mov	r0, r3
 80001a2:	f002 fca7 	bl	8002af4 <memset>
	memset(Buffer->Buffer, 0x55, sizeof(Buffer->Buffer));
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	3348      	adds	r3, #72	; 0x48
 80001aa:	2240      	movs	r2, #64	; 0x40
 80001ac:	2155      	movs	r1, #85	; 0x55
 80001ae:	4618      	mov	r0, r3
 80001b0:	f002 fca0 	bl	8002af4 <memset>
	memset(Buffer->StoreData, 0, sizeof(Buffer->StoreData));
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	3388      	adds	r3, #136	; 0x88
 80001b8:	2240      	movs	r2, #64	; 0x40
 80001ba:	2100      	movs	r1, #0
 80001bc:	4618      	mov	r0, r3
 80001be:	f002 fc99 	bl	8002af4 <memset>
	for (int i = 0; i < 16; i++) {
 80001c2:	2300      	movs	r3, #0
 80001c4:	657b      	str	r3, [r7, #84]	; 0x54
 80001c6:	e012      	b.n	80001ee <CANBufferHandleStruct_Init+0xa2>
		Buffer->NodeHandle[i] = defaultNodeHandle;
 80001c8:	6879      	ldr	r1, [r7, #4]
 80001ca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80001cc:	4613      	mov	r3, r2
 80001ce:	00db      	lsls	r3, r3, #3
 80001d0:	4413      	add	r3, r2
 80001d2:	00db      	lsls	r3, r3, #3
 80001d4:	1a9b      	subs	r3, r3, r2
 80001d6:	440b      	add	r3, r1
 80001d8:	33c8      	adds	r3, #200	; 0xc8
 80001da:	3302      	adds	r3, #2
 80001dc:	f107 010c 	add.w	r1, r7, #12
 80001e0:	2247      	movs	r2, #71	; 0x47
 80001e2:	4618      	mov	r0, r3
 80001e4:	f002 fcb2 	bl	8002b4c <memcpy>
	for (int i = 0; i < 16; i++) {
 80001e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80001ea:	3301      	adds	r3, #1
 80001ec:	657b      	str	r3, [r7, #84]	; 0x54
 80001ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80001f0:	2b0f      	cmp	r3, #15
 80001f2:	dde9      	ble.n	80001c8 <CANBufferHandleStruct_Init+0x7c>
	}
}
 80001f4:	bf00      	nop
 80001f6:	bf00      	nop
 80001f8:	3758      	adds	r7, #88	; 0x58
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bd80      	pop	{r7, pc}

080001fe <FlagFrameHandle_Init>:
void FlagFrameHandle_Init(FlagFrameHandle *FlagInit) {
 80001fe:	b480      	push	{r7}
 8000200:	b087      	sub	sp, #28
 8000202:	af00      	add	r7, sp, #0
 8000204:	6078      	str	r0, [r7, #4]
	FlagIdHandle DefaultFlagID= {0};
 8000206:	f107 0308 	add.w	r3, r7, #8
 800020a:	2200      	movs	r2, #0
 800020c:	601a      	str	r2, [r3, #0]
 800020e:	605a      	str	r2, [r3, #4]
 8000210:	721a      	strb	r2, [r3, #8]
	FlagInit->FrameBits.Flag_Frame_0 = 0;
 8000212:	687a      	ldr	r2, [r7, #4]
 8000214:	f892 3090 	ldrb.w	r3, [r2, #144]	; 0x90
 8000218:	f36f 0300 	bfc	r3, #0, #1
 800021c:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
	FlagInit->FrameBits.Flag_Frame_1 = 0;
 8000220:	687a      	ldr	r2, [r7, #4]
 8000222:	f892 3090 	ldrb.w	r3, [r2, #144]	; 0x90
 8000226:	f36f 0341 	bfc	r3, #1, #1
 800022a:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
	FlagInit->FrameBits.Flag_Frame_2 = 0;
 800022e:	687a      	ldr	r2, [r7, #4]
 8000230:	f892 3090 	ldrb.w	r3, [r2, #144]	; 0x90
 8000234:	f36f 0382 	bfc	r3, #2, #1
 8000238:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
	FlagInit->FrameBits.Flag_Frame_3 = 0;
 800023c:	687a      	ldr	r2, [r7, #4]
 800023e:	f892 3090 	ldrb.w	r3, [r2, #144]	; 0x90
 8000242:	f36f 03c3 	bfc	r3, #3, #1
 8000246:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
	FlagInit->FrameBits.Flag_Frame_4 = 0;
 800024a:	687a      	ldr	r2, [r7, #4]
 800024c:	f892 3090 	ldrb.w	r3, [r2, #144]	; 0x90
 8000250:	f36f 1304 	bfc	r3, #4, #1
 8000254:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
	FlagInit->FrameBits.Flag_Frame_5 = 0;
 8000258:	687a      	ldr	r2, [r7, #4]
 800025a:	f892 3090 	ldrb.w	r3, [r2, #144]	; 0x90
 800025e:	f36f 1345 	bfc	r3, #5, #1
 8000262:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
	FlagInit->FrameBits.Flag_Frame_6 = 0;
 8000266:	687a      	ldr	r2, [r7, #4]
 8000268:	f892 3090 	ldrb.w	r3, [r2, #144]	; 0x90
 800026c:	f36f 1386 	bfc	r3, #6, #1
 8000270:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
	FlagInit->FrameBits.Flag_Frame_7 = 0;
 8000274:	687a      	ldr	r2, [r7, #4]
 8000276:	f892 3090 	ldrb.w	r3, [r2, #144]	; 0x90
 800027a:	f36f 13c7 	bfc	r3, #7, #1
 800027e:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
	for(int i=0; i<16;i++)
 8000282:	2300      	movs	r3, #0
 8000284:	617b      	str	r3, [r7, #20]
 8000286:	e010      	b.n	80002aa <FlagFrameHandle_Init+0xac>
	{
		FlagInit->FlagID[i]=DefaultFlagID;
 8000288:	6879      	ldr	r1, [r7, #4]
 800028a:	697a      	ldr	r2, [r7, #20]
 800028c:	4613      	mov	r3, r2
 800028e:	00db      	lsls	r3, r3, #3
 8000290:	4413      	add	r3, r2
 8000292:	440b      	add	r3, r1
 8000294:	461a      	mov	r2, r3
 8000296:	f107 0308 	add.w	r3, r7, #8
 800029a:	cb03      	ldmia	r3!, {r0, r1}
 800029c:	6010      	str	r0, [r2, #0]
 800029e:	6051      	str	r1, [r2, #4]
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	7213      	strb	r3, [r2, #8]
	for(int i=0; i<16;i++)
 80002a4:	697b      	ldr	r3, [r7, #20]
 80002a6:	3301      	adds	r3, #1
 80002a8:	617b      	str	r3, [r7, #20]
 80002aa:	697b      	ldr	r3, [r7, #20]
 80002ac:	2b0f      	cmp	r3, #15
 80002ae:	ddeb      	ble.n	8000288 <FlagFrameHandle_Init+0x8a>
	}
}
 80002b0:	bf00      	nop
 80002b2:	bf00      	nop
 80002b4:	371c      	adds	r7, #28
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bc80      	pop	{r7}
 80002ba:	4770      	bx	lr

080002bc <CAN_TXHeaderConfig>:
void CAN_TXHeaderConfig(CAN_TxHeaderTypeDef *Txheader, uint32_t StdId) {
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
 80002c4:	6039      	str	r1, [r7, #0]
	Txheader->DLC = 8;
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	2208      	movs	r2, #8
 80002ca:	611a      	str	r2, [r3, #16]
	Txheader->RTR = CAN_RTR_DATA;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	2200      	movs	r2, #0
 80002d0:	60da      	str	r2, [r3, #12]
	Txheader->IDE = CAN_ID_STD;
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	2200      	movs	r2, #0
 80002d6:	609a      	str	r2, [r3, #8]
	Txheader->StdId = StdId;
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	683a      	ldr	r2, [r7, #0]
 80002dc:	601a      	str	r2, [r3, #0]
}
 80002de:	bf00      	nop
 80002e0:	370c      	adds	r7, #12
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bc80      	pop	{r7}
 80002e6:	4770      	bx	lr

080002e8 <CAN_Send_Response>:
#include <string.h>
#include "CRC.h"
#include "CAN_Flag.h"
extern CAN_HandleTypeDef hcan;

uint16_t CAN_Send_Response(uint8_t ID, uint8_t Opcode, uint8_t FrameType) {
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b08c      	sub	sp, #48	; 0x30
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	4603      	mov	r3, r0
 80002f0:	71fb      	strb	r3, [r7, #7]
 80002f2:	460b      	mov	r3, r1
 80002f4:	71bb      	strb	r3, [r7, #6]
 80002f6:	4613      	mov	r3, r2
 80002f8:	717b      	strb	r3, [r7, #5]
	CAN_TxHeaderTypeDef TxHeader;
	uint32_t Txmailbox;
	uint8_t OpcodeData[8] = { Opcode, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55 };
 80002fa:	79bb      	ldrb	r3, [r7, #6]
 80002fc:	723b      	strb	r3, [r7, #8]
 80002fe:	2355      	movs	r3, #85	; 0x55
 8000300:	727b      	strb	r3, [r7, #9]
 8000302:	2355      	movs	r3, #85	; 0x55
 8000304:	72bb      	strb	r3, [r7, #10]
 8000306:	2355      	movs	r3, #85	; 0x55
 8000308:	72fb      	strb	r3, [r7, #11]
 800030a:	2355      	movs	r3, #85	; 0x55
 800030c:	733b      	strb	r3, [r7, #12]
 800030e:	2355      	movs	r3, #85	; 0x55
 8000310:	737b      	strb	r3, [r7, #13]
 8000312:	2355      	movs	r3, #85	; 0x55
 8000314:	73bb      	strb	r3, [r7, #14]
 8000316:	2355      	movs	r3, #85	; 0x55
 8000318:	73fb      	strb	r3, [r7, #15]
	uint8_t StID = 0x00;
 800031a:	2300      	movs	r3, #0
 800031c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	StID |= ID;
 8000320:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000324:	79fb      	ldrb	r3, [r7, #7]
 8000326:	4313      	orrs	r3, r2
 8000328:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	StID = (StID << 3) | FrameType;
 800032c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000330:	00db      	lsls	r3, r3, #3
 8000332:	b25a      	sxtb	r2, r3
 8000334:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000338:	4313      	orrs	r3, r2
 800033a:	b25b      	sxtb	r3, r3
 800033c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	CAN_TXHeaderConfig(&TxHeader, StID);
 8000340:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000344:	f107 0314 	add.w	r3, r7, #20
 8000348:	4611      	mov	r1, r2
 800034a:	4618      	mov	r0, r3
 800034c:	f7ff ffb6 	bl	80002bc <CAN_TXHeaderConfig>
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, OpcodeData, &Txmailbox)
 8000350:	f107 0310 	add.w	r3, r7, #16
 8000354:	f107 0208 	add.w	r2, r7, #8
 8000358:	f107 0114 	add.w	r1, r7, #20
 800035c:	480a      	ldr	r0, [pc, #40]	; (8000388 <CAN_Send_Response+0xa0>)
 800035e:	f000 ffb1 	bl	80012c4 <HAL_CAN_AddTxMessage>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <CAN_Send_Response+0x84>
			!= HAL_OK) {
		Error_Handler();
 8000368:	f000 fbb2 	bl	8000ad0 <Error_Handler>
	}
	while (HAL_CAN_IsTxMessagePending(&hcan, Txmailbox))
 800036c:	bf00      	nop
 800036e:	693b      	ldr	r3, [r7, #16]
 8000370:	4619      	mov	r1, r3
 8000372:	4805      	ldr	r0, [pc, #20]	; (8000388 <CAN_Send_Response+0xa0>)
 8000374:	f001 f875 	bl	8001462 <HAL_CAN_IsTxMessagePending>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d1f7      	bne.n	800036e <CAN_Send_Response+0x86>
		;
	return HAL_OK;
 800037e:	2300      	movs	r3, #0
}
 8000380:	4618      	mov	r0, r3
 8000382:	3730      	adds	r7, #48	; 0x30
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}
 8000388:	20000028 	.word	0x20000028

0800038c <CAN_ProcessFrame>:
void CAN_ProcessFrame(FlagFrameHandle *FlagHandle, uint8_t ID,
		CANBufferHandleStruct *RxBuffer, uint8_t FrameType, uint8_t *Data) {
 800038c:	b590      	push	{r4, r7, lr}
 800038e:	b085      	sub	sp, #20
 8000390:	af00      	add	r7, sp, #0
 8000392:	60f8      	str	r0, [r7, #12]
 8000394:	607a      	str	r2, [r7, #4]
 8000396:	461a      	mov	r2, r3
 8000398:	460b      	mov	r3, r1
 800039a:	72fb      	strb	r3, [r7, #11]
 800039c:	4613      	mov	r3, r2
 800039e:	72bb      	strb	r3, [r7, #10]
	if (RxBuffer->NodeHandle[ID].FrameType == FrameType
 80003a0:	7afa      	ldrb	r2, [r7, #11]
 80003a2:	6879      	ldr	r1, [r7, #4]
 80003a4:	4613      	mov	r3, r2
 80003a6:	00db      	lsls	r3, r3, #3
 80003a8:	4413      	add	r3, r2
 80003aa:	00db      	lsls	r3, r3, #3
 80003ac:	1a9b      	subs	r3, r3, r2
 80003ae:	440b      	add	r3, r1
 80003b0:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	7aba      	ldrb	r2, [r7, #10]
 80003b8:	429a      	cmp	r2, r3
 80003ba:	d14c      	bne.n	8000456 <CAN_ProcessFrame+0xca>
			&& FlagHandle->FlagID[ID].FlagFrameFull[FrameType] == 0) {
 80003bc:	7afa      	ldrb	r2, [r7, #11]
 80003be:	7ab9      	ldrb	r1, [r7, #10]
 80003c0:	68f8      	ldr	r0, [r7, #12]
 80003c2:	4613      	mov	r3, r2
 80003c4:	00db      	lsls	r3, r3, #3
 80003c6:	4413      	add	r3, r2
 80003c8:	4403      	add	r3, r0
 80003ca:	440b      	add	r3, r1
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d141      	bne.n	8000456 <CAN_ProcessFrame+0xca>
		memcpy(
				RxBuffer->NodeHandle[ID].NodeBuffer[RxBuffer->NodeHandle[ID].FrameType],
 80003d2:	7afa      	ldrb	r2, [r7, #11]
 80003d4:	7af9      	ldrb	r1, [r7, #11]
 80003d6:	6878      	ldr	r0, [r7, #4]
 80003d8:	460b      	mov	r3, r1
 80003da:	00db      	lsls	r3, r3, #3
 80003dc:	440b      	add	r3, r1
 80003de:	00db      	lsls	r3, r3, #3
 80003e0:	1a5b      	subs	r3, r3, r1
 80003e2:	4403      	add	r3, r0
 80003e4:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	00d9      	lsls	r1, r3, #3
 80003ec:	4613      	mov	r3, r2
 80003ee:	00db      	lsls	r3, r3, #3
 80003f0:	4413      	add	r3, r2
 80003f2:	00db      	lsls	r3, r3, #3
 80003f4:	1a9b      	subs	r3, r3, r2
 80003f6:	440b      	add	r3, r1
 80003f8:	33c8      	adds	r3, #200	; 0xc8
 80003fa:	687a      	ldr	r2, [r7, #4]
 80003fc:	4413      	add	r3, r2
 80003fe:	3303      	adds	r3, #3
		memcpy(
 8000400:	2208      	movs	r2, #8
 8000402:	6a39      	ldr	r1, [r7, #32]
 8000404:	4618      	mov	r0, r3
 8000406:	f002 fba1 	bl	8002b4c <memcpy>
				Data, CAN_MAX_DATA);
		FlagHandle->FlagID[ID].FlagFrameFull[FrameType] = 1;
 800040a:	7afa      	ldrb	r2, [r7, #11]
 800040c:	7ab9      	ldrb	r1, [r7, #10]
 800040e:	68f8      	ldr	r0, [r7, #12]
 8000410:	4613      	mov	r3, r2
 8000412:	00db      	lsls	r3, r3, #3
 8000414:	4413      	add	r3, r2
 8000416:	4403      	add	r3, r0
 8000418:	440b      	add	r3, r1
 800041a:	2201      	movs	r2, #1
 800041c:	701a      	strb	r2, [r3, #0]
		FlagHandle->FlagID[ID].SumOfFlag += FlagHandle->FlagID[ID].FlagFrameFull[FrameType];
 800041e:	7afa      	ldrb	r2, [r7, #11]
 8000420:	68f9      	ldr	r1, [r7, #12]
 8000422:	4613      	mov	r3, r2
 8000424:	00db      	lsls	r3, r3, #3
 8000426:	4413      	add	r3, r2
 8000428:	440b      	add	r3, r1
 800042a:	3308      	adds	r3, #8
 800042c:	7819      	ldrb	r1, [r3, #0]
 800042e:	7afa      	ldrb	r2, [r7, #11]
 8000430:	7ab8      	ldrb	r0, [r7, #10]
 8000432:	68fc      	ldr	r4, [r7, #12]
 8000434:	4613      	mov	r3, r2
 8000436:	00db      	lsls	r3, r3, #3
 8000438:	4413      	add	r3, r2
 800043a:	4423      	add	r3, r4
 800043c:	4403      	add	r3, r0
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	7afa      	ldrb	r2, [r7, #11]
 8000442:	440b      	add	r3, r1
 8000444:	b2d8      	uxtb	r0, r3
 8000446:	68f9      	ldr	r1, [r7, #12]
 8000448:	4613      	mov	r3, r2
 800044a:	00db      	lsls	r3, r3, #3
 800044c:	4413      	add	r3, r2
 800044e:	440b      	add	r3, r1
 8000450:	3308      	adds	r3, #8
 8000452:	4602      	mov	r2, r0
 8000454:	701a      	strb	r2, [r3, #0]
	}
}
 8000456:	bf00      	nop
 8000458:	3714      	adds	r7, #20
 800045a:	46bd      	mov	sp, r7
 800045c:	bd90      	pop	{r4, r7, pc}
	...

08000460 <CAN_Recieve_Physical>:
		BufferIndex = 0;
	}
	return HAL_OK;
}

uint8_t CAN_Recieve_Physical(CAN_RxHeaderTypeDef *RxHeader, uint8_t *Data) {
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
 8000468:	6039      	str	r1, [r7, #0]

	while (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) == 0)
 800046a:	bf00      	nop
 800046c:	2100      	movs	r1, #0
 800046e:	480b      	ldr	r0, [pc, #44]	; (800049c <CAN_Recieve_Physical+0x3c>)
 8000470:	f001 f93b 	bl	80016ea <HAL_CAN_GetRxFifoFillLevel>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d0f8      	beq.n	800046c <CAN_Recieve_Physical+0xc>
		;
	if (HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, RxHeader, Data) != HAL_OK) {
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	687a      	ldr	r2, [r7, #4]
 800047e:	2100      	movs	r1, #0
 8000480:	4806      	ldr	r0, [pc, #24]	; (800049c <CAN_Recieve_Physical+0x3c>)
 8000482:	f001 f811 	bl	80014a8 <HAL_CAN_GetRxMessage>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <CAN_Recieve_Physical+0x30>
		Error_Handler();
 800048c:	f000 fb20 	bl	8000ad0 <Error_Handler>
	}
	return HAL_OK;
 8000490:	2300      	movs	r3, #0
}
 8000492:	4618      	mov	r0, r3
 8000494:	3708      	adds	r7, #8
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	20000028 	.word	0x20000028

080004a0 <CAN_Receive_DataLink>:

uint8_t CAN_Receive_DataLink(CAN_RxHeaderTypeDef *RxHeader,
		FlagFrameHandle *FlagHandle, CANBufferHandleStruct *RxBuffer,
		FlagRecDataEnum *FlagRecHandle) {
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b08a      	sub	sp, #40	; 0x28
 80004a4:	af02      	add	r7, sp, #8
 80004a6:	60f8      	str	r0, [r7, #12]
 80004a8:	60b9      	str	r1, [r7, #8]
 80004aa:	607a      	str	r2, [r7, #4]
 80004ac:	603b      	str	r3, [r7, #0]

	uint8_t DataPhysical[CAN_MAX_DATA] = { 0 };
 80004ae:	2300      	movs	r3, #0
 80004b0:	613b      	str	r3, [r7, #16]
 80004b2:	2300      	movs	r3, #0
 80004b4:	617b      	str	r3, [r7, #20]
	uint16_t StdID = 0;
 80004b6:	2300      	movs	r3, #0
 80004b8:	83bb      	strh	r3, [r7, #28]
	uint8_t ID = 0;
 80004ba:	2300      	movs	r3, #0
 80004bc:	76fb      	strb	r3, [r7, #27]
	uint8_t FrameType = 0;
 80004be:	2300      	movs	r3, #0
 80004c0:	77fb      	strb	r3, [r7, #31]

	CAN_Recieve_Physical(RxHeader, DataPhysical);
 80004c2:	f107 0310 	add.w	r3, r7, #16
 80004c6:	4619      	mov	r1, r3
 80004c8:	68f8      	ldr	r0, [r7, #12]
 80004ca:	f7ff ffc9 	bl	8000460 <CAN_Recieve_Physical>

	StdID = RxHeader->StdId;
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	83bb      	strh	r3, [r7, #28]
	ID = (StdID >> 3) & 15;
 80004d4:	8bbb      	ldrh	r3, [r7, #28]
 80004d6:	08db      	lsrs	r3, r3, #3
 80004d8:	b29b      	uxth	r3, r3
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	f003 030f 	and.w	r3, r3, #15
 80004e0:	76fb      	strb	r3, [r7, #27]
	RxBuffer->NodeHandle[ID].FrameType = StdID & 7;
 80004e2:	8bbb      	ldrh	r3, [r7, #28]
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	7efa      	ldrb	r2, [r7, #27]
 80004e8:	f003 0307 	and.w	r3, r3, #7
 80004ec:	b2d8      	uxtb	r0, r3
 80004ee:	6879      	ldr	r1, [r7, #4]
 80004f0:	4613      	mov	r3, r2
 80004f2:	00db      	lsls	r3, r3, #3
 80004f4:	4413      	add	r3, r2
 80004f6:	00db      	lsls	r3, r3, #3
 80004f8:	1a9b      	subs	r3, r3, r2
 80004fa:	440b      	add	r3, r1
 80004fc:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8000500:	4602      	mov	r2, r0
 8000502:	701a      	strb	r2, [r3, #0]
	if (RxBuffer->NodeHandle[ID].FrameType == SET_UP_FRAME
 8000504:	7efa      	ldrb	r2, [r7, #27]
 8000506:	6879      	ldr	r1, [r7, #4]
 8000508:	4613      	mov	r3, r2
 800050a:	00db      	lsls	r3, r3, #3
 800050c:	4413      	add	r3, r2
 800050e:	00db      	lsls	r3, r3, #3
 8000510:	1a9b      	subs	r3, r3, r2
 8000512:	440b      	add	r3, r1
 8000514:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	2b00      	cmp	r3, #0
 800051c:	d177      	bne.n	800060e <CAN_Receive_DataLink+0x16e>
			&& RxBuffer->NodeHandle[ID].DuplicateFrame != 1) {
 800051e:	7efa      	ldrb	r2, [r7, #27]
 8000520:	6879      	ldr	r1, [r7, #4]
 8000522:	4613      	mov	r3, r2
 8000524:	00db      	lsls	r3, r3, #3
 8000526:	4413      	add	r3, r2
 8000528:	00db      	lsls	r3, r3, #3
 800052a:	1a9b      	subs	r3, r3, r2
 800052c:	440b      	add	r3, r1
 800052e:	f203 130b 	addw	r3, r3, #267	; 0x10b
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	2b01      	cmp	r3, #1
 8000536:	d06a      	beq.n	800060e <CAN_Receive_DataLink+0x16e>
		RxBuffer->NodeHandle[ID].DuplicateFrame = 1;
 8000538:	7efa      	ldrb	r2, [r7, #27]
 800053a:	6879      	ldr	r1, [r7, #4]
 800053c:	4613      	mov	r3, r2
 800053e:	00db      	lsls	r3, r3, #3
 8000540:	4413      	add	r3, r2
 8000542:	00db      	lsls	r3, r3, #3
 8000544:	1a9b      	subs	r3, r3, r2
 8000546:	440b      	add	r3, r1
 8000548:	f203 130b 	addw	r3, r3, #267	; 0x10b
 800054c:	2201      	movs	r2, #1
 800054e:	701a      	strb	r2, [r3, #0]
		RxBuffer->NodeHandle[ID].PacketLength = DataPhysical[6];
 8000550:	7efa      	ldrb	r2, [r7, #27]
 8000552:	7db8      	ldrb	r0, [r7, #22]
 8000554:	6879      	ldr	r1, [r7, #4]
 8000556:	4613      	mov	r3, r2
 8000558:	00db      	lsls	r3, r3, #3
 800055a:	4413      	add	r3, r2
 800055c:	00db      	lsls	r3, r3, #3
 800055e:	1a9b      	subs	r3, r3, r2
 8000560:	440b      	add	r3, r1
 8000562:	f203 130d 	addw	r3, r3, #269	; 0x10d
 8000566:	4602      	mov	r2, r0
 8000568:	701a      	strb	r2, [r3, #0]
		RxBuffer->NodeHandle[ID].CRCValue = DataPhysical[7];
 800056a:	7efa      	ldrb	r2, [r7, #27]
 800056c:	7df8      	ldrb	r0, [r7, #23]
 800056e:	6879      	ldr	r1, [r7, #4]
 8000570:	4613      	mov	r3, r2
 8000572:	00db      	lsls	r3, r3, #3
 8000574:	4413      	add	r3, r2
 8000576:	00db      	lsls	r3, r3, #3
 8000578:	1a9b      	subs	r3, r3, r2
 800057a:	440b      	add	r3, r1
 800057c:	f203 130f 	addw	r3, r3, #271	; 0x10f
 8000580:	4602      	mov	r2, r0
 8000582:	701a      	strb	r2, [r3, #0]
		if (RxBuffer->NodeHandle[ID].PacketLength % 8 == 0) {
 8000584:	7efa      	ldrb	r2, [r7, #27]
 8000586:	6879      	ldr	r1, [r7, #4]
 8000588:	4613      	mov	r3, r2
 800058a:	00db      	lsls	r3, r3, #3
 800058c:	4413      	add	r3, r2
 800058e:	00db      	lsls	r3, r3, #3
 8000590:	1a9b      	subs	r3, r3, r2
 8000592:	440b      	add	r3, r1
 8000594:	f203 130d 	addw	r3, r3, #269	; 0x10d
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	f003 0307 	and.w	r3, r3, #7
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d119      	bne.n	80005d8 <CAN_Receive_DataLink+0x138>
			RxBuffer->NodeHandle[ID].NumberOfFrame =
					(RxBuffer->NodeHandle[ID].PacketLength / 8);
 80005a4:	7efa      	ldrb	r2, [r7, #27]
 80005a6:	6879      	ldr	r1, [r7, #4]
 80005a8:	4613      	mov	r3, r2
 80005aa:	00db      	lsls	r3, r3, #3
 80005ac:	4413      	add	r3, r2
 80005ae:	00db      	lsls	r3, r3, #3
 80005b0:	1a9b      	subs	r3, r3, r2
 80005b2:	440b      	add	r3, r1
 80005b4:	f203 130d 	addw	r3, r3, #269	; 0x10d
 80005b8:	781b      	ldrb	r3, [r3, #0]
			RxBuffer->NodeHandle[ID].NumberOfFrame =
 80005ba:	7efa      	ldrb	r2, [r7, #27]
 80005bc:	08db      	lsrs	r3, r3, #3
 80005be:	b2d8      	uxtb	r0, r3
 80005c0:	6879      	ldr	r1, [r7, #4]
 80005c2:	4613      	mov	r3, r2
 80005c4:	00db      	lsls	r3, r3, #3
 80005c6:	4413      	add	r3, r2
 80005c8:	00db      	lsls	r3, r3, #3
 80005ca:	1a9b      	subs	r3, r3, r2
 80005cc:	440b      	add	r3, r1
 80005ce:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80005d2:	4602      	mov	r2, r0
 80005d4:	701a      	strb	r2, [r3, #0]
 80005d6:	e01a      	b.n	800060e <CAN_Receive_DataLink+0x16e>
		} else {
			RxBuffer->NodeHandle[ID].NumberOfFrame =
					(RxBuffer->NodeHandle[ID].PacketLength / 8) + 1;
 80005d8:	7efa      	ldrb	r2, [r7, #27]
 80005da:	6879      	ldr	r1, [r7, #4]
 80005dc:	4613      	mov	r3, r2
 80005de:	00db      	lsls	r3, r3, #3
 80005e0:	4413      	add	r3, r2
 80005e2:	00db      	lsls	r3, r3, #3
 80005e4:	1a9b      	subs	r3, r3, r2
 80005e6:	440b      	add	r3, r1
 80005e8:	f203 130d 	addw	r3, r3, #269	; 0x10d
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	08db      	lsrs	r3, r3, #3
 80005f0:	b2db      	uxtb	r3, r3
			RxBuffer->NodeHandle[ID].NumberOfFrame =
 80005f2:	7efa      	ldrb	r2, [r7, #27]
					(RxBuffer->NodeHandle[ID].PacketLength / 8) + 1;
 80005f4:	3301      	adds	r3, #1
 80005f6:	b2d8      	uxtb	r0, r3
			RxBuffer->NodeHandle[ID].NumberOfFrame =
 80005f8:	6879      	ldr	r1, [r7, #4]
 80005fa:	4613      	mov	r3, r2
 80005fc:	00db      	lsls	r3, r3, #3
 80005fe:	4413      	add	r3, r2
 8000600:	00db      	lsls	r3, r3, #3
 8000602:	1a9b      	subs	r3, r3, r2
 8000604:	440b      	add	r3, r1
 8000606:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800060a:	4602      	mov	r2, r0
 800060c:	701a      	strb	r2, [r3, #0]
	} else {
		if (RxBuffer->NodeHandle[ID].FrameType == SET_UP_FRAME) {
			//FlagFrameError
		}
	}
	switch (ID) {
 800060e:	7efb      	ldrb	r3, [r7, #27]
 8000610:	2b0f      	cmp	r3, #15
 8000612:	f200 80c5 	bhi.w	80007a0 <CAN_Receive_DataLink+0x300>
 8000616:	a201      	add	r2, pc, #4	; (adr r2, 800061c <CAN_Receive_DataLink+0x17c>)
 8000618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800061c:	080007a1 	.word	0x080007a1
 8000620:	080007a1 	.word	0x080007a1
 8000624:	080007a1 	.word	0x080007a1
 8000628:	080007a1 	.word	0x080007a1
 800062c:	080007a1 	.word	0x080007a1
 8000630:	080007a1 	.word	0x080007a1
 8000634:	080007a1 	.word	0x080007a1
 8000638:	080007a1 	.word	0x080007a1
 800063c:	080007a1 	.word	0x080007a1
 8000640:	080007a1 	.word	0x080007a1
 8000644:	080007a1 	.word	0x080007a1
 8000648:	080007a1 	.word	0x080007a1
 800064c:	080007a1 	.word	0x080007a1
 8000650:	080007a1 	.word	0x080007a1
 8000654:	08000777 	.word	0x08000777
 8000658:	0800065d 	.word	0x0800065d
	case OBSTALCE8:
		RxBuffer->NodeHandle[ID].NodeIndex++;
 800065c:	7efa      	ldrb	r2, [r7, #27]
 800065e:	6879      	ldr	r1, [r7, #4]
 8000660:	4613      	mov	r3, r2
 8000662:	00db      	lsls	r3, r3, #3
 8000664:	4413      	add	r3, r2
 8000666:	00db      	lsls	r3, r3, #3
 8000668:	1a9b      	subs	r3, r3, r2
 800066a:	440b      	add	r3, r1
 800066c:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	3301      	adds	r3, #1
 8000674:	b2d8      	uxtb	r0, r3
 8000676:	6879      	ldr	r1, [r7, #4]
 8000678:	4613      	mov	r3, r2
 800067a:	00db      	lsls	r3, r3, #3
 800067c:	4413      	add	r3, r2
 800067e:	00db      	lsls	r3, r3, #3
 8000680:	1a9b      	subs	r3, r3, r2
 8000682:	440b      	add	r3, r1
 8000684:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8000688:	4602      	mov	r2, r0
 800068a:	701a      	strb	r2, [r3, #0]
		for (FrameType = 0; FrameType < RxBuffer->NodeHandle[ID].NumberOfFrame;
 800068c:	2300      	movs	r3, #0
 800068e:	77fb      	strb	r3, [r7, #31]
 8000690:	e00c      	b.n	80006ac <CAN_Receive_DataLink+0x20c>
				FrameType++) {
			CAN_ProcessFrame(FlagHandle, ID, RxBuffer, FrameType, DataPhysical);
 8000692:	7ffa      	ldrb	r2, [r7, #31]
 8000694:	7ef9      	ldrb	r1, [r7, #27]
 8000696:	f107 0310 	add.w	r3, r7, #16
 800069a:	9300      	str	r3, [sp, #0]
 800069c:	4613      	mov	r3, r2
 800069e:	687a      	ldr	r2, [r7, #4]
 80006a0:	68b8      	ldr	r0, [r7, #8]
 80006a2:	f7ff fe73 	bl	800038c <CAN_ProcessFrame>
				FrameType++) {
 80006a6:	7ffb      	ldrb	r3, [r7, #31]
 80006a8:	3301      	adds	r3, #1
 80006aa:	77fb      	strb	r3, [r7, #31]
		for (FrameType = 0; FrameType < RxBuffer->NodeHandle[ID].NumberOfFrame;
 80006ac:	7efa      	ldrb	r2, [r7, #27]
 80006ae:	6879      	ldr	r1, [r7, #4]
 80006b0:	4613      	mov	r3, r2
 80006b2:	00db      	lsls	r3, r3, #3
 80006b4:	4413      	add	r3, r2
 80006b6:	00db      	lsls	r3, r3, #3
 80006b8:	1a9b      	subs	r3, r3, r2
 80006ba:	440b      	add	r3, r1
 80006bc:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	7ffa      	ldrb	r2, [r7, #31]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	d3e4      	bcc.n	8000692 <CAN_Receive_DataLink+0x1f2>
		}
		if (RxBuffer->NodeHandle[ID].NodeIndex
 80006c8:	7efa      	ldrb	r2, [r7, #27]
 80006ca:	6879      	ldr	r1, [r7, #4]
 80006cc:	4613      	mov	r3, r2
 80006ce:	00db      	lsls	r3, r3, #3
 80006d0:	4413      	add	r3, r2
 80006d2:	00db      	lsls	r3, r3, #3
 80006d4:	1a9b      	subs	r3, r3, r2
 80006d6:	440b      	add	r3, r1
 80006d8:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80006dc:	7819      	ldrb	r1, [r3, #0]
				== RxBuffer->NodeHandle[ID].NumberOfFrame) {
 80006de:	7efa      	ldrb	r2, [r7, #27]
 80006e0:	6878      	ldr	r0, [r7, #4]
 80006e2:	4613      	mov	r3, r2
 80006e4:	00db      	lsls	r3, r3, #3
 80006e6:	4413      	add	r3, r2
 80006e8:	00db      	lsls	r3, r3, #3
 80006ea:	1a9b      	subs	r3, r3, r2
 80006ec:	4403      	add	r3, r0
 80006ee:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80006f2:	781b      	ldrb	r3, [r3, #0]
		if (RxBuffer->NodeHandle[ID].NodeIndex
 80006f4:	4299      	cmp	r1, r3
 80006f6:	d152      	bne.n	800079e <CAN_Receive_DataLink+0x2fe>
			if (FlagHandle->FlagID[ID].SumOfFlag
 80006f8:	7efa      	ldrb	r2, [r7, #27]
 80006fa:	68b9      	ldr	r1, [r7, #8]
 80006fc:	4613      	mov	r3, r2
 80006fe:	00db      	lsls	r3, r3, #3
 8000700:	4413      	add	r3, r2
 8000702:	440b      	add	r3, r1
 8000704:	3308      	adds	r3, #8
 8000706:	7819      	ldrb	r1, [r3, #0]
					== RxBuffer->NodeHandle[ID].NumberOfFrame) {
 8000708:	7efa      	ldrb	r2, [r7, #27]
 800070a:	6878      	ldr	r0, [r7, #4]
 800070c:	4613      	mov	r3, r2
 800070e:	00db      	lsls	r3, r3, #3
 8000710:	4413      	add	r3, r2
 8000712:	00db      	lsls	r3, r3, #3
 8000714:	1a9b      	subs	r3, r3, r2
 8000716:	4403      	add	r3, r0
 8000718:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800071c:	781b      	ldrb	r3, [r3, #0]
			if (FlagHandle->FlagID[ID].SumOfFlag
 800071e:	4299      	cmp	r1, r3
 8000720:	d103      	bne.n	800072a <CAN_Receive_DataLink+0x28a>
				*FlagRecHandle = REC_SUCCESS;
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	2203      	movs	r2, #3
 8000726:	701a      	strb	r2, [r3, #0]
						CAN_Send_Response(OBSTALCE8, FRAME_ERROR, FrameType);
					}
				}
			}
		}
		break;
 8000728:	e039      	b.n	800079e <CAN_Receive_DataLink+0x2fe>
				for (FrameType = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	77fb      	strb	r3, [r7, #31]
 800072e:	e013      	b.n	8000758 <CAN_Receive_DataLink+0x2b8>
					if (FlagHandle->FlagID[ID].FlagFrameFull[FrameType] == 0) {
 8000730:	7efa      	ldrb	r2, [r7, #27]
 8000732:	7ff9      	ldrb	r1, [r7, #31]
 8000734:	68b8      	ldr	r0, [r7, #8]
 8000736:	4613      	mov	r3, r2
 8000738:	00db      	lsls	r3, r3, #3
 800073a:	4413      	add	r3, r2
 800073c:	4403      	add	r3, r0
 800073e:	440b      	add	r3, r1
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d105      	bne.n	8000752 <CAN_Receive_DataLink+0x2b2>
						CAN_Send_Response(OBSTALCE8, FRAME_ERROR, FrameType);
 8000746:	7ffb      	ldrb	r3, [r7, #31]
 8000748:	461a      	mov	r2, r3
 800074a:	2103      	movs	r1, #3
 800074c:	200f      	movs	r0, #15
 800074e:	f7ff fdcb 	bl	80002e8 <CAN_Send_Response>
						FrameType++) {
 8000752:	7ffb      	ldrb	r3, [r7, #31]
 8000754:	3301      	adds	r3, #1
 8000756:	77fb      	strb	r3, [r7, #31]
						FrameType <= RxBuffer->NodeHandle[ID].NumberOfFrame;
 8000758:	7efa      	ldrb	r2, [r7, #27]
 800075a:	6879      	ldr	r1, [r7, #4]
 800075c:	4613      	mov	r3, r2
 800075e:	00db      	lsls	r3, r3, #3
 8000760:	4413      	add	r3, r2
 8000762:	00db      	lsls	r3, r3, #3
 8000764:	1a9b      	subs	r3, r3, r2
 8000766:	440b      	add	r3, r1
 8000768:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	7ffa      	ldrb	r2, [r7, #31]
 8000770:	429a      	cmp	r2, r3
 8000772:	d9dd      	bls.n	8000730 <CAN_Receive_DataLink+0x290>
		break;
 8000774:	e013      	b.n	800079e <CAN_Receive_DataLink+0x2fe>
	case OBSTALCE7:
		for (FrameType = 0; FrameType < SIZE_FRAME_DATA; FrameType++) {
 8000776:	2300      	movs	r3, #0
 8000778:	77fb      	strb	r3, [r7, #31]
 800077a:	e00c      	b.n	8000796 <CAN_Receive_DataLink+0x2f6>
			CAN_ProcessFrame(FlagHandle, ID, RxBuffer, FrameType, DataPhysical);
 800077c:	7ffa      	ldrb	r2, [r7, #31]
 800077e:	7ef9      	ldrb	r1, [r7, #27]
 8000780:	f107 0310 	add.w	r3, r7, #16
 8000784:	9300      	str	r3, [sp, #0]
 8000786:	4613      	mov	r3, r2
 8000788:	687a      	ldr	r2, [r7, #4]
 800078a:	68b8      	ldr	r0, [r7, #8]
 800078c:	f7ff fdfe 	bl	800038c <CAN_ProcessFrame>
		for (FrameType = 0; FrameType < SIZE_FRAME_DATA; FrameType++) {
 8000790:	7ffb      	ldrb	r3, [r7, #31]
 8000792:	3301      	adds	r3, #1
 8000794:	77fb      	strb	r3, [r7, #31]
 8000796:	7ffb      	ldrb	r3, [r7, #31]
 8000798:	2b07      	cmp	r3, #7
 800079a:	d9ef      	bls.n	800077c <CAN_Receive_DataLink+0x2dc>
		}
		break;
 800079c:	e000      	b.n	80007a0 <CAN_Receive_DataLink+0x300>
		break;
 800079e:	bf00      	nop
	case ALL_NODE:

		break;

	}
	return HAL_OK;
 80007a0:	2300      	movs	r3, #0
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3720      	adds	r7, #32
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop

080007ac <CAN_Config_filtering>:
//	FlagsDataHandle Flag;
////CAN_Receive_NetWork(Data,&Flag);
//
//	return HAL_OK;
//}
uint32_t CAN_Config_filtering(void) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08a      	sub	sp, #40	; 0x28
 80007b0:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef Can_filter_init;
	Can_filter_init.FilterActivation = ENABLE;
 80007b2:	2301      	movs	r3, #1
 80007b4:	623b      	str	r3, [r7, #32]
	Can_filter_init.FilterBank = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	617b      	str	r3, [r7, #20]
	Can_filter_init.FilterFIFOAssignment = CAN_RX_FIFO0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	613b      	str	r3, [r7, #16]
	Can_filter_init.FilterIdHigh = 0x0000;
 80007be:	2300      	movs	r3, #0
 80007c0:	603b      	str	r3, [r7, #0]
	Can_filter_init.FilterIdLow = 0x0000;
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]
	Can_filter_init.FilterMaskIdHigh = 0x0000;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
	Can_filter_init.FilterMaskIdLow = 0x0000;
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
	Can_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61bb      	str	r3, [r7, #24]
	Can_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 80007d2:	2301      	movs	r3, #1
 80007d4:	61fb      	str	r3, [r7, #28]
	if (HAL_CAN_ConfigFilter(&hcan, &Can_filter_init) != HAL_OK) {
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <CAN_Config_filtering+0x48>)
 80007dc:	f000 fc65 	bl	80010aa <HAL_CAN_ConfigFilter>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <CAN_Config_filtering+0x3e>
		Error_Handler();
 80007e6:	f000 f973 	bl	8000ad0 <Error_Handler>
	}
	return HAL_OK;
 80007ea:	2300      	movs	r3, #0
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3728      	adds	r7, #40	; 0x28
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	20000028 	.word	0x20000028

080007f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	f5ad 6dcd 	sub.w	sp, sp, #1640	; 0x668
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000800:	f000 fad2 	bl	8000da8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000804:	f000 f872 	bl	80008ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000808:	f000 f916 	bl	8000a38 <MX_GPIO_Init>
  MX_CAN_Init();
 800080c:	f000 f8b4 	bl	8000978 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000810:	f000 f8e8 	bl	80009e4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  CAN_Config_filtering();
 8000814:	f7ff ffca 	bl	80007ac <CAN_Config_filtering>
  if(HAL_CAN_Start(&hcan)!=HAL_OK)
 8000818:	4832      	ldr	r0, [pc, #200]	; (80008e4 <main+0xec>)
 800081a:	f000 fd0f 	bl	800123c <HAL_CAN_Start>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <main+0x30>
     {
     	Error_Handler();
 8000824:	f000 f954 	bl	8000ad0 <Error_Handler>
     }
  uint32_t Txmailbox;
  CANConfigIDTxtypedef pIDtype;
  pIDtype.MessageType=COMMAND_FRAME;
 8000828:	2301      	movs	r3, #1
 800082a:	f8a7 365c 	strh.w	r3, [r7, #1628]	; 0x65c
  pIDtype.SenderID=OBSTALCE8;
 800082e:	230f      	movs	r3, #15
 8000830:	f8a7 365e 	strh.w	r3, [r7, #1630]	; 0x65e
  CANBufferHandleStruct Buffer;
  CANBufferHandleStruct_Init(&Buffer);
 8000834:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff fc87 	bl	800014c <CANBufferHandleStruct_Init>
  CAN_RxHeaderTypeDef RxHeader;
  FlagRecDataEnum FlagRec;
  FlagFrameHandle Flag;
  FlagFrameHandle_Init(&Flag);
 800083e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff fcdb 	bl	80001fe <FlagFrameHandle_Init>
  uint8_t DataRec[16];
  char Data[64]={0};
 8000848:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800084c:	f5a3 63c9 	sub.w	r3, r3, #1608	; 0x648
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	3304      	adds	r3, #4
 8000856:	223c      	movs	r2, #60	; 0x3c
 8000858:	2100      	movs	r1, #0
 800085a:	4618      	mov	r0, r3
 800085c:	f002 f94a 	bl	8002af4 <memset>
  uint8_t mess[30]={0};
 8000860:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 8000864:	f5a3 63cd 	sub.w	r3, r3, #1640	; 0x668
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	3304      	adds	r3, #4
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
 8000878:	611a      	str	r2, [r3, #16]
 800087a:	615a      	str	r2, [r3, #20]
 800087c:	831a      	strh	r2, [r3, #24]
  uint8_t k=0;
 800087e:	2300      	movs	r3, #0
 8000880:	f887 3667 	strb.w	r3, [r7, #1639]	; 0x667
  for (int i=0; i<DATA_TEST;i++)
 8000884:	2300      	movs	r3, #0
 8000886:	f8c7 3660 	str.w	r3, [r7, #1632]	; 0x660
 800088a:	e013      	b.n	80008b4 <main+0xbc>
  {
	  Data[i]=k;
 800088c:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 8000890:	f5a3 62c9 	sub.w	r2, r3, #1608	; 0x648
 8000894:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 8000898:	4413      	add	r3, r2
 800089a:	f897 2667 	ldrb.w	r2, [r7, #1639]	; 0x667
 800089e:	701a      	strb	r2, [r3, #0]
	  k=k+1;
 80008a0:	f897 3667 	ldrb.w	r3, [r7, #1639]	; 0x667
 80008a4:	3301      	adds	r3, #1
 80008a6:	f887 3667 	strb.w	r3, [r7, #1639]	; 0x667
  for (int i=0; i<DATA_TEST;i++)
 80008aa:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 80008ae:	3301      	adds	r3, #1
 80008b0:	f8c7 3660 	str.w	r3, [r7, #1632]	; 0x660
 80008b4:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 80008b8:	2b0f      	cmp	r3, #15
 80008ba:	dde7      	ble.n	800088c <main+0x94>
    /* USER CODE BEGIN 3 */
	  //CAN_Send_Dataframe(pIDtype, Data, Txmailbox, TxBufferSend)
	  //CAN_Send_DataLink_Separate(&Buffer, Data);
	 // CAN_DataLink_Separate(&Buffer,Data,9);
	//	CAN_Network_Packet(&Buffer,Data,62);
	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80008bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008c0:	4809      	ldr	r0, [pc, #36]	; (80008e8 <main+0xf0>)
 80008c2:	f001 fc0f 	bl	80020e4 <HAL_GPIO_TogglePin>
	 //CAN_Send_Physical_Send(&Buffer, Data , DATA_TEST , &pIDtype, Txmailbox);
	// CAN_Recieve_Physical(&RxBuffer,DataRec);
	 //HAL_UART_Transmit( &huart1, DataRec, sizeof(DataRec), HAL_MAX_DELAY);
	 CAN_Receive_DataLink(&RxHeader,&Flag,&Buffer,&FlagRec);
 80008c6:	f207 1303 	addw	r3, r7, #259	; 0x103
 80008ca:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80008ce:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80008d2:	f507 7082 	add.w	r0, r7, #260	; 0x104
 80008d6:	f7ff fde3 	bl	80004a0 <CAN_Receive_DataLink>
	//CAN_Send_Response(0b1111, ACK, 0b010);
	 HAL_Delay(500);
 80008da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008de:	f000 fac5 	bl	8000e6c <HAL_Delay>
	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80008e2:	e7eb      	b.n	80008bc <main+0xc4>
 80008e4:	20000028 	.word	0x20000028
 80008e8:	40011000 	.word	0x40011000

080008ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b090      	sub	sp, #64	; 0x40
 80008f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f2:	f107 0318 	add.w	r3, r7, #24
 80008f6:	2228      	movs	r2, #40	; 0x28
 80008f8:	2100      	movs	r1, #0
 80008fa:	4618      	mov	r0, r3
 80008fc:	f002 f8fa 	bl	8002af4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000900:	1d3b      	adds	r3, r7, #4
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	605a      	str	r2, [r3, #4]
 8000908:	609a      	str	r2, [r3, #8]
 800090a:	60da      	str	r2, [r3, #12]
 800090c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800090e:	2301      	movs	r3, #1
 8000910:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000912:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000916:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000918:	2300      	movs	r3, #0
 800091a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800091c:	2301      	movs	r3, #1
 800091e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000920:	2302      	movs	r3, #2
 8000922:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000924:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000928:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800092a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800092e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000930:	f107 0318 	add.w	r3, r7, #24
 8000934:	4618      	mov	r0, r3
 8000936:	f001 fbef 	bl	8002118 <HAL_RCC_OscConfig>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000940:	f000 f8c6 	bl	8000ad0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000944:	230f      	movs	r3, #15
 8000946:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000948:	2302      	movs	r3, #2
 800094a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800094c:	2300      	movs	r3, #0
 800094e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000950:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000954:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000956:	2300      	movs	r3, #0
 8000958:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800095a:	1d3b      	adds	r3, r7, #4
 800095c:	2102      	movs	r1, #2
 800095e:	4618      	mov	r0, r3
 8000960:	f001 fe5c 	bl	800261c <HAL_RCC_ClockConfig>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800096a:	f000 f8b1 	bl	8000ad0 <Error_Handler>
  }
}
 800096e:	bf00      	nop
 8000970:	3740      	adds	r7, #64	; 0x40
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
	...

08000978 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800097c:	4b17      	ldr	r3, [pc, #92]	; (80009dc <MX_CAN_Init+0x64>)
 800097e:	4a18      	ldr	r2, [pc, #96]	; (80009e0 <MX_CAN_Init+0x68>)
 8000980:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000982:	4b16      	ldr	r3, [pc, #88]	; (80009dc <MX_CAN_Init+0x64>)
 8000984:	2204      	movs	r2, #4
 8000986:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000988:	4b14      	ldr	r3, [pc, #80]	; (80009dc <MX_CAN_Init+0x64>)
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800098e:	4b13      	ldr	r3, [pc, #76]	; (80009dc <MX_CAN_Init+0x64>)
 8000990:	2200      	movs	r2, #0
 8000992:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000994:	4b11      	ldr	r3, [pc, #68]	; (80009dc <MX_CAN_Init+0x64>)
 8000996:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800099a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800099c:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <MX_CAN_Init+0x64>)
 800099e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80009a2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80009a4:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <MX_CAN_Init+0x64>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80009aa:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <MX_CAN_Init+0x64>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80009b0:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <MX_CAN_Init+0x64>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80009b6:	4b09      	ldr	r3, [pc, #36]	; (80009dc <MX_CAN_Init+0x64>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80009bc:	4b07      	ldr	r3, [pc, #28]	; (80009dc <MX_CAN_Init+0x64>)
 80009be:	2200      	movs	r2, #0
 80009c0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80009c2:	4b06      	ldr	r3, [pc, #24]	; (80009dc <MX_CAN_Init+0x64>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80009c8:	4804      	ldr	r0, [pc, #16]	; (80009dc <MX_CAN_Init+0x64>)
 80009ca:	f000 fa73 	bl	8000eb4 <HAL_CAN_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80009d4:	f000 f87c 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20000028 	.word	0x20000028
 80009e0:	40006400 	.word	0x40006400

080009e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009e8:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MX_USART1_UART_Init+0x4c>)
 80009ea:	4a12      	ldr	r2, [pc, #72]	; (8000a34 <MX_USART1_UART_Init+0x50>)
 80009ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009ee:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <MX_USART1_UART_Init+0x4c>)
 80009f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <MX_USART1_UART_Init+0x4c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <MX_USART1_UART_Init+0x4c>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <MX_USART1_UART_Init+0x4c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a08:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <MX_USART1_UART_Init+0x4c>)
 8000a0a:	220c      	movs	r2, #12
 8000a0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0e:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <MX_USART1_UART_Init+0x4c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <MX_USART1_UART_Init+0x4c>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a1a:	4805      	ldr	r0, [pc, #20]	; (8000a30 <MX_USART1_UART_Init+0x4c>)
 8000a1c:	f001 ff8c 	bl	8002938 <HAL_UART_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a26:	f000 f853 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000050 	.word	0x20000050
 8000a34:	40013800 	.word	0x40013800

08000a38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b088      	sub	sp, #32
 8000a3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3e:	f107 0310 	add.w	r3, r7, #16
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4c:	4b1e      	ldr	r3, [pc, #120]	; (8000ac8 <MX_GPIO_Init+0x90>)
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	4a1d      	ldr	r2, [pc, #116]	; (8000ac8 <MX_GPIO_Init+0x90>)
 8000a52:	f043 0310 	orr.w	r3, r3, #16
 8000a56:	6193      	str	r3, [r2, #24]
 8000a58:	4b1b      	ldr	r3, [pc, #108]	; (8000ac8 <MX_GPIO_Init+0x90>)
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	f003 0310 	and.w	r3, r3, #16
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a64:	4b18      	ldr	r3, [pc, #96]	; (8000ac8 <MX_GPIO_Init+0x90>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	4a17      	ldr	r2, [pc, #92]	; (8000ac8 <MX_GPIO_Init+0x90>)
 8000a6a:	f043 0320 	orr.w	r3, r3, #32
 8000a6e:	6193      	str	r3, [r2, #24]
 8000a70:	4b15      	ldr	r3, [pc, #84]	; (8000ac8 <MX_GPIO_Init+0x90>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	f003 0320 	and.w	r3, r3, #32
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7c:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <MX_GPIO_Init+0x90>)
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	4a11      	ldr	r2, [pc, #68]	; (8000ac8 <MX_GPIO_Init+0x90>)
 8000a82:	f043 0304 	orr.w	r3, r3, #4
 8000a86:	6193      	str	r3, [r2, #24]
 8000a88:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <MX_GPIO_Init+0x90>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	f003 0304 	and.w	r3, r3, #4
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a94:	2200      	movs	r2, #0
 8000a96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a9a:	480c      	ldr	r0, [pc, #48]	; (8000acc <MX_GPIO_Init+0x94>)
 8000a9c:	f001 fb0a 	bl	80020b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000aa0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aa4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab2:	f107 0310 	add.w	r3, r7, #16
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4804      	ldr	r0, [pc, #16]	; (8000acc <MX_GPIO_Init+0x94>)
 8000aba:	f001 f977 	bl	8001dac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000abe:	bf00      	nop
 8000ac0:	3720      	adds	r7, #32
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	40011000 	.word	0x40011000

08000ad0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad4:	b672      	cpsid	i
}
 8000ad6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <Error_Handler+0x8>
	...

08000adc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ae2:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <HAL_MspInit+0x5c>)
 8000ae4:	699b      	ldr	r3, [r3, #24]
 8000ae6:	4a14      	ldr	r2, [pc, #80]	; (8000b38 <HAL_MspInit+0x5c>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	6193      	str	r3, [r2, #24]
 8000aee:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <HAL_MspInit+0x5c>)
 8000af0:	699b      	ldr	r3, [r3, #24]
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	60bb      	str	r3, [r7, #8]
 8000af8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afa:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <HAL_MspInit+0x5c>)
 8000afc:	69db      	ldr	r3, [r3, #28]
 8000afe:	4a0e      	ldr	r2, [pc, #56]	; (8000b38 <HAL_MspInit+0x5c>)
 8000b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b04:	61d3      	str	r3, [r2, #28]
 8000b06:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <HAL_MspInit+0x5c>)
 8000b08:	69db      	ldr	r3, [r3, #28]
 8000b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b12:	4b0a      	ldr	r3, [pc, #40]	; (8000b3c <HAL_MspInit+0x60>)
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	4a04      	ldr	r2, [pc, #16]	; (8000b3c <HAL_MspInit+0x60>)
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	3714      	adds	r7, #20
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	40010000 	.word	0x40010000

08000b40 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b088      	sub	sp, #32
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	f107 0310 	add.w	r3, r7, #16
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a2c      	ldr	r2, [pc, #176]	; (8000c0c <HAL_CAN_MspInit+0xcc>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d151      	bne.n	8000c04 <HAL_CAN_MspInit+0xc4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000b60:	4b2b      	ldr	r3, [pc, #172]	; (8000c10 <HAL_CAN_MspInit+0xd0>)
 8000b62:	69db      	ldr	r3, [r3, #28]
 8000b64:	4a2a      	ldr	r2, [pc, #168]	; (8000c10 <HAL_CAN_MspInit+0xd0>)
 8000b66:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b6a:	61d3      	str	r3, [r2, #28]
 8000b6c:	4b28      	ldr	r3, [pc, #160]	; (8000c10 <HAL_CAN_MspInit+0xd0>)
 8000b6e:	69db      	ldr	r3, [r3, #28]
 8000b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b78:	4b25      	ldr	r3, [pc, #148]	; (8000c10 <HAL_CAN_MspInit+0xd0>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	4a24      	ldr	r2, [pc, #144]	; (8000c10 <HAL_CAN_MspInit+0xd0>)
 8000b7e:	f043 0304 	orr.w	r3, r3, #4
 8000b82:	6193      	str	r3, [r2, #24]
 8000b84:	4b22      	ldr	r3, [pc, #136]	; (8000c10 <HAL_CAN_MspInit+0xd0>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	f003 0304 	and.w	r3, r3, #4
 8000b8c:	60bb      	str	r3, [r7, #8]
 8000b8e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000b90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b94:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b96:	2300      	movs	r3, #0
 8000b98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9e:	f107 0310 	add.w	r3, r7, #16
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	481b      	ldr	r0, [pc, #108]	; (8000c14 <HAL_CAN_MspInit+0xd4>)
 8000ba6:	f001 f901 	bl	8001dac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000baa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb8:	f107 0310 	add.w	r3, r7, #16
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4815      	ldr	r0, [pc, #84]	; (8000c14 <HAL_CAN_MspInit+0xd4>)
 8000bc0:	f001 f8f4 	bl	8001dac <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	2013      	movs	r0, #19
 8000bca:	f001 f8b8 	bl	8001d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8000bce:	2013      	movs	r0, #19
 8000bd0:	f001 f8d1 	bl	8001d76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	2014      	movs	r0, #20
 8000bda:	f001 f8b0 	bl	8001d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000bde:	2014      	movs	r0, #20
 8000be0:	f001 f8c9 	bl	8001d76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000be4:	2200      	movs	r2, #0
 8000be6:	2100      	movs	r1, #0
 8000be8:	2015      	movs	r0, #21
 8000bea:	f001 f8a8 	bl	8001d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000bee:	2015      	movs	r0, #21
 8000bf0:	f001 f8c1 	bl	8001d76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	2016      	movs	r0, #22
 8000bfa:	f001 f8a0 	bl	8001d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000bfe:	2016      	movs	r0, #22
 8000c00:	f001 f8b9 	bl	8001d76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000c04:	bf00      	nop
 8000c06:	3720      	adds	r7, #32
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40006400 	.word	0x40006400
 8000c10:	40021000 	.word	0x40021000
 8000c14:	40010800 	.word	0x40010800

08000c18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b088      	sub	sp, #32
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 0310 	add.w	r3, r7, #16
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a1c      	ldr	r2, [pc, #112]	; (8000ca4 <HAL_UART_MspInit+0x8c>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d131      	bne.n	8000c9c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c38:	4b1b      	ldr	r3, [pc, #108]	; (8000ca8 <HAL_UART_MspInit+0x90>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	4a1a      	ldr	r2, [pc, #104]	; (8000ca8 <HAL_UART_MspInit+0x90>)
 8000c3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c42:	6193      	str	r3, [r2, #24]
 8000c44:	4b18      	ldr	r3, [pc, #96]	; (8000ca8 <HAL_UART_MspInit+0x90>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c50:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <HAL_UART_MspInit+0x90>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	4a14      	ldr	r2, [pc, #80]	; (8000ca8 <HAL_UART_MspInit+0x90>)
 8000c56:	f043 0304 	orr.w	r3, r3, #4
 8000c5a:	6193      	str	r3, [r2, #24]
 8000c5c:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <HAL_UART_MspInit+0x90>)
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	f003 0304 	and.w	r3, r3, #4
 8000c64:	60bb      	str	r3, [r7, #8]
 8000c66:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c6c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c72:	2303      	movs	r3, #3
 8000c74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c76:	f107 0310 	add.w	r3, r7, #16
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	480b      	ldr	r0, [pc, #44]	; (8000cac <HAL_UART_MspInit+0x94>)
 8000c7e:	f001 f895 	bl	8001dac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c90:	f107 0310 	add.w	r3, r7, #16
 8000c94:	4619      	mov	r1, r3
 8000c96:	4805      	ldr	r0, [pc, #20]	; (8000cac <HAL_UART_MspInit+0x94>)
 8000c98:	f001 f888 	bl	8001dac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c9c:	bf00      	nop
 8000c9e:	3720      	adds	r7, #32
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40013800 	.word	0x40013800
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	40010800 	.word	0x40010800

08000cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cb4:	e7fe      	b.n	8000cb4 <NMI_Handler+0x4>

08000cb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cba:	e7fe      	b.n	8000cba <HardFault_Handler+0x4>

08000cbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <MemManage_Handler+0x4>

08000cc2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cc6:	e7fe      	b.n	8000cc6 <BusFault_Handler+0x4>

08000cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <UsageFault_Handler+0x4>

08000cce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bc80      	pop	{r7}
 8000cd8:	4770      	bx	lr

08000cda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bc80      	pop	{r7}
 8000ce4:	4770      	bx	lr

08000ce6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bc80      	pop	{r7}
 8000cf0:	4770      	bx	lr

08000cf2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cf6:	f000 f89d 	bl	8000e34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
	...

08000d00 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000d04:	4802      	ldr	r0, [pc, #8]	; (8000d10 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8000d06:	f000 fd17 	bl	8001738 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000028 	.word	0x20000028

08000d14 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000d18:	4802      	ldr	r0, [pc, #8]	; (8000d24 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000d1a:	f000 fd0d 	bl	8001738 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000028 	.word	0x20000028

08000d28 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000d2c:	4802      	ldr	r0, [pc, #8]	; (8000d38 <CAN1_RX1_IRQHandler+0x10>)
 8000d2e:	f000 fd03 	bl	8001738 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000028 	.word	0x20000028

08000d3c <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000d40:	4802      	ldr	r0, [pc, #8]	; (8000d4c <CAN1_SCE_IRQHandler+0x10>)
 8000d42:	f000 fcf9 	bl	8001738 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000028 	.word	0x20000028

08000d50 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bc80      	pop	{r7}
 8000d5a:	4770      	bx	lr

08000d5c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d5c:	f7ff fff8 	bl	8000d50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d60:	480b      	ldr	r0, [pc, #44]	; (8000d90 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d62:	490c      	ldr	r1, [pc, #48]	; (8000d94 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d64:	4a0c      	ldr	r2, [pc, #48]	; (8000d98 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d68:	e002      	b.n	8000d70 <LoopCopyDataInit>

08000d6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d6e:	3304      	adds	r3, #4

08000d70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d74:	d3f9      	bcc.n	8000d6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d76:	4a09      	ldr	r2, [pc, #36]	; (8000d9c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d78:	4c09      	ldr	r4, [pc, #36]	; (8000da0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d7c:	e001      	b.n	8000d82 <LoopFillZerobss>

08000d7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d80:	3204      	adds	r2, #4

08000d82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d84:	d3fb      	bcc.n	8000d7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d86:	f001 febd 	bl	8002b04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d8a:	f7ff fd35 	bl	80007f8 <main>
  bx lr
 8000d8e:	4770      	bx	lr
  ldr r0, =_sdata
 8000d90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d94:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d98:	08002bb4 	.word	0x08002bb4
  ldr r2, =_sbss
 8000d9c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000da0:	2000009c 	.word	0x2000009c

08000da4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000da4:	e7fe      	b.n	8000da4 <ADC1_2_IRQHandler>
	...

08000da8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dac:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <HAL_Init+0x28>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a07      	ldr	r2, [pc, #28]	; (8000dd0 <HAL_Init+0x28>)
 8000db2:	f043 0310 	orr.w	r3, r3, #16
 8000db6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db8:	2003      	movs	r0, #3
 8000dba:	f000 ffb5 	bl	8001d28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dbe:	200f      	movs	r0, #15
 8000dc0:	f000 f808 	bl	8000dd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc4:	f7ff fe8a 	bl	8000adc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40022000 	.word	0x40022000

08000dd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ddc:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <HAL_InitTick+0x54>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <HAL_InitTick+0x58>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	4619      	mov	r1, r3
 8000de6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 ffcd 	bl	8001d92 <HAL_SYSTICK_Config>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e00e      	b.n	8000e20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2b0f      	cmp	r3, #15
 8000e06:	d80a      	bhi.n	8000e1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	6879      	ldr	r1, [r7, #4]
 8000e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e10:	f000 ff95 	bl	8001d3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e14:	4a06      	ldr	r2, [pc, #24]	; (8000e30 <HAL_InitTick+0x5c>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	e000      	b.n	8000e20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20000000 	.word	0x20000000
 8000e2c:	20000008 	.word	0x20000008
 8000e30:	20000004 	.word	0x20000004

08000e34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e38:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <HAL_IncTick+0x1c>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <HAL_IncTick+0x20>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4413      	add	r3, r2
 8000e44:	4a03      	ldr	r2, [pc, #12]	; (8000e54 <HAL_IncTick+0x20>)
 8000e46:	6013      	str	r3, [r2, #0]
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr
 8000e50:	20000008 	.word	0x20000008
 8000e54:	20000098 	.word	0x20000098

08000e58 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e5c:	4b02      	ldr	r3, [pc, #8]	; (8000e68 <HAL_GetTick+0x10>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr
 8000e68:	20000098 	.word	0x20000098

08000e6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e74:	f7ff fff0 	bl	8000e58 <HAL_GetTick>
 8000e78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e84:	d005      	beq.n	8000e92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e86:	4b0a      	ldr	r3, [pc, #40]	; (8000eb0 <HAL_Delay+0x44>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	4413      	add	r3, r2
 8000e90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e92:	bf00      	nop
 8000e94:	f7ff ffe0 	bl	8000e58 <HAL_GetTick>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	68fa      	ldr	r2, [r7, #12]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d8f7      	bhi.n	8000e94 <HAL_Delay+0x28>
  {
  }
}
 8000ea4:	bf00      	nop
 8000ea6:	bf00      	nop
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000008 	.word	0x20000008

08000eb4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d101      	bne.n	8000ec6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e0ed      	b.n	80010a2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d102      	bne.n	8000ed8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f7ff fe34 	bl	8000b40 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f042 0201 	orr.w	r2, r2, #1
 8000ee6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ee8:	f7ff ffb6 	bl	8000e58 <HAL_GetTick>
 8000eec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000eee:	e012      	b.n	8000f16 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ef0:	f7ff ffb2 	bl	8000e58 <HAL_GetTick>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	2b0a      	cmp	r3, #10
 8000efc:	d90b      	bls.n	8000f16 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f02:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2205      	movs	r2, #5
 8000f0e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e0c5      	b.n	80010a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f003 0301 	and.w	r3, r3, #1
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d0e5      	beq.n	8000ef0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f022 0202 	bic.w	r2, r2, #2
 8000f32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f34:	f7ff ff90 	bl	8000e58 <HAL_GetTick>
 8000f38:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f3a:	e012      	b.n	8000f62 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f3c:	f7ff ff8c 	bl	8000e58 <HAL_GetTick>
 8000f40:	4602      	mov	r2, r0
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	2b0a      	cmp	r3, #10
 8000f48:	d90b      	bls.n	8000f62 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f4e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2205      	movs	r2, #5
 8000f5a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e09f      	b.n	80010a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f003 0302 	and.w	r3, r3, #2
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d1e5      	bne.n	8000f3c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	7e1b      	ldrb	r3, [r3, #24]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d108      	bne.n	8000f8a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	e007      	b.n	8000f9a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f98:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	7e5b      	ldrb	r3, [r3, #25]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d108      	bne.n	8000fb4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	e007      	b.n	8000fc4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000fc2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	7e9b      	ldrb	r3, [r3, #26]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d108      	bne.n	8000fde <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f042 0220 	orr.w	r2, r2, #32
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	e007      	b.n	8000fee <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f022 0220 	bic.w	r2, r2, #32
 8000fec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	7edb      	ldrb	r3, [r3, #27]
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d108      	bne.n	8001008 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f022 0210 	bic.w	r2, r2, #16
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	e007      	b.n	8001018 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f042 0210 	orr.w	r2, r2, #16
 8001016:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	7f1b      	ldrb	r3, [r3, #28]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d108      	bne.n	8001032 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f042 0208 	orr.w	r2, r2, #8
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	e007      	b.n	8001042 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f022 0208 	bic.w	r2, r2, #8
 8001040:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	7f5b      	ldrb	r3, [r3, #29]
 8001046:	2b01      	cmp	r3, #1
 8001048:	d108      	bne.n	800105c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f042 0204 	orr.w	r2, r2, #4
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	e007      	b.n	800106c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f022 0204 	bic.w	r2, r2, #4
 800106a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	689a      	ldr	r2, [r3, #8]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	431a      	orrs	r2, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	691b      	ldr	r3, [r3, #16]
 800107a:	431a      	orrs	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	695b      	ldr	r3, [r3, #20]
 8001080:	ea42 0103 	orr.w	r1, r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	1e5a      	subs	r2, r3, #1
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	430a      	orrs	r2, r1
 8001090:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2201      	movs	r2, #1
 800109c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80010aa:	b480      	push	{r7}
 80010ac:	b087      	sub	sp, #28
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
 80010b2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010c0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80010c2:	7cfb      	ldrb	r3, [r7, #19]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d003      	beq.n	80010d0 <HAL_CAN_ConfigFilter+0x26>
 80010c8:	7cfb      	ldrb	r3, [r7, #19]
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	f040 80aa 	bne.w	8001224 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80010d6:	f043 0201 	orr.w	r2, r3, #1
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	695b      	ldr	r3, [r3, #20]
 80010e4:	f003 031f 	and.w	r3, r3, #31
 80010e8:	2201      	movs	r2, #1
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	43db      	mvns	r3, r3
 80010fa:	401a      	ands	r2, r3
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	69db      	ldr	r3, [r3, #28]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d123      	bne.n	8001152 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	43db      	mvns	r3, r3
 8001114:	401a      	ands	r2, r3
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001128:	683a      	ldr	r2, [r7, #0]
 800112a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800112c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	3248      	adds	r2, #72	; 0x48
 8001132:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001146:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001148:	6979      	ldr	r1, [r7, #20]
 800114a:	3348      	adds	r3, #72	; 0x48
 800114c:	00db      	lsls	r3, r3, #3
 800114e:	440b      	add	r3, r1
 8001150:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	2b01      	cmp	r3, #1
 8001158:	d122      	bne.n	80011a0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	431a      	orrs	r2, r3
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001176:	683a      	ldr	r2, [r7, #0]
 8001178:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800117a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	3248      	adds	r2, #72	; 0x48
 8001180:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001194:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001196:	6979      	ldr	r1, [r7, #20]
 8001198:	3348      	adds	r3, #72	; 0x48
 800119a:	00db      	lsls	r3, r3, #3
 800119c:	440b      	add	r3, r1
 800119e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d109      	bne.n	80011bc <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	43db      	mvns	r3, r3
 80011b2:	401a      	ands	r2, r3
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80011ba:	e007      	b.n	80011cc <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	431a      	orrs	r2, r3
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	691b      	ldr	r3, [r3, #16]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d109      	bne.n	80011e8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	43db      	mvns	r3, r3
 80011de:	401a      	ands	r2, r3
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80011e6:	e007      	b.n	80011f8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	431a      	orrs	r2, r3
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	6a1b      	ldr	r3, [r3, #32]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d107      	bne.n	8001210 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	431a      	orrs	r2, r3
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001216:	f023 0201 	bic.w	r2, r3, #1
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001220:	2300      	movs	r3, #0
 8001222:	e006      	b.n	8001232 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001228:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
  }
}
 8001232:	4618      	mov	r0, r3
 8001234:	371c      	adds	r7, #28
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr

0800123c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f893 3020 	ldrb.w	r3, [r3, #32]
 800124a:	b2db      	uxtb	r3, r3
 800124c:	2b01      	cmp	r3, #1
 800124e:	d12e      	bne.n	80012ae <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2202      	movs	r2, #2
 8001254:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f022 0201 	bic.w	r2, r2, #1
 8001266:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001268:	f7ff fdf6 	bl	8000e58 <HAL_GetTick>
 800126c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800126e:	e012      	b.n	8001296 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001270:	f7ff fdf2 	bl	8000e58 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b0a      	cmp	r3, #10
 800127c:	d90b      	bls.n	8001296 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001282:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2205      	movs	r2, #5
 800128e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e012      	b.n	80012bc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f003 0301 	and.w	r3, r3, #1
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d1e5      	bne.n	8001270 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2200      	movs	r2, #0
 80012a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80012aa:	2300      	movs	r3, #0
 80012ac:	e006      	b.n	80012bc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
  }
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3710      	adds	r7, #16
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b089      	sub	sp, #36	; 0x24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
 80012d0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012d8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80012e2:	7ffb      	ldrb	r3, [r7, #31]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d003      	beq.n	80012f0 <HAL_CAN_AddTxMessage+0x2c>
 80012e8:	7ffb      	ldrb	r3, [r7, #31]
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	f040 80ad 	bne.w	800144a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d10a      	bne.n	8001310 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001300:	2b00      	cmp	r3, #0
 8001302:	d105      	bne.n	8001310 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800130a:	2b00      	cmp	r3, #0
 800130c:	f000 8095 	beq.w	800143a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	0e1b      	lsrs	r3, r3, #24
 8001314:	f003 0303 	and.w	r3, r3, #3
 8001318:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800131a:	2201      	movs	r2, #1
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	409a      	lsls	r2, r3
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d10d      	bne.n	8001348 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001336:	68f9      	ldr	r1, [r7, #12]
 8001338:	6809      	ldr	r1, [r1, #0]
 800133a:	431a      	orrs	r2, r3
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	3318      	adds	r3, #24
 8001340:	011b      	lsls	r3, r3, #4
 8001342:	440b      	add	r3, r1
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	e00f      	b.n	8001368 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001352:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001358:	68f9      	ldr	r1, [r7, #12]
 800135a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800135c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	3318      	adds	r3, #24
 8001362:	011b      	lsls	r3, r3, #4
 8001364:	440b      	add	r3, r1
 8001366:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	6819      	ldr	r1, [r3, #0]
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	691a      	ldr	r2, [r3, #16]
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	3318      	adds	r3, #24
 8001374:	011b      	lsls	r3, r3, #4
 8001376:	440b      	add	r3, r1
 8001378:	3304      	adds	r3, #4
 800137a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	7d1b      	ldrb	r3, [r3, #20]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d111      	bne.n	80013a8 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	3318      	adds	r3, #24
 800138c:	011b      	lsls	r3, r3, #4
 800138e:	4413      	add	r3, r2
 8001390:	3304      	adds	r3, #4
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	68fa      	ldr	r2, [r7, #12]
 8001396:	6811      	ldr	r1, [r2, #0]
 8001398:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	3318      	adds	r3, #24
 80013a0:	011b      	lsls	r3, r3, #4
 80013a2:	440b      	add	r3, r1
 80013a4:	3304      	adds	r3, #4
 80013a6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3307      	adds	r3, #7
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	061a      	lsls	r2, r3, #24
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3306      	adds	r3, #6
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	041b      	lsls	r3, r3, #16
 80013b8:	431a      	orrs	r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3305      	adds	r3, #5
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	021b      	lsls	r3, r3, #8
 80013c2:	4313      	orrs	r3, r2
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	3204      	adds	r2, #4
 80013c8:	7812      	ldrb	r2, [r2, #0]
 80013ca:	4610      	mov	r0, r2
 80013cc:	68fa      	ldr	r2, [r7, #12]
 80013ce:	6811      	ldr	r1, [r2, #0]
 80013d0:	ea43 0200 	orr.w	r2, r3, r0
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	011b      	lsls	r3, r3, #4
 80013d8:	440b      	add	r3, r1
 80013da:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80013de:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3303      	adds	r3, #3
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	061a      	lsls	r2, r3, #24
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3302      	adds	r3, #2
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	041b      	lsls	r3, r3, #16
 80013f0:	431a      	orrs	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	3301      	adds	r3, #1
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	021b      	lsls	r3, r3, #8
 80013fa:	4313      	orrs	r3, r2
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	7812      	ldrb	r2, [r2, #0]
 8001400:	4610      	mov	r0, r2
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	6811      	ldr	r1, [r2, #0]
 8001406:	ea43 0200 	orr.w	r2, r3, r0
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	011b      	lsls	r3, r3, #4
 800140e:	440b      	add	r3, r1
 8001410:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001414:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	3318      	adds	r3, #24
 800141e:	011b      	lsls	r3, r3, #4
 8001420:	4413      	add	r3, r2
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	68fa      	ldr	r2, [r7, #12]
 8001426:	6811      	ldr	r1, [r2, #0]
 8001428:	f043 0201 	orr.w	r2, r3, #1
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	3318      	adds	r3, #24
 8001430:	011b      	lsls	r3, r3, #4
 8001432:	440b      	add	r3, r1
 8001434:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001436:	2300      	movs	r3, #0
 8001438:	e00e      	b.n	8001458 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800143e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e006      	b.n	8001458 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
  }
}
 8001458:	4618      	mov	r0, r3
 800145a:	3724      	adds	r7, #36	; 0x24
 800145c:	46bd      	mov	sp, r7
 800145e:	bc80      	pop	{r7}
 8001460:	4770      	bx	lr

08001462 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8001462:	b480      	push	{r7}
 8001464:	b085      	sub	sp, #20
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
 800146a:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 800146c:	2300      	movs	r3, #0
 800146e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001476:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8001478:	7afb      	ldrb	r3, [r7, #11]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d002      	beq.n	8001484 <HAL_CAN_IsTxMessagePending+0x22>
 800147e:	7afb      	ldrb	r3, [r7, #11]
 8001480:	2b02      	cmp	r3, #2
 8001482:	d10b      	bne.n	800149c <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	689a      	ldr	r2, [r3, #8]
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	069b      	lsls	r3, r3, #26
 800148e:	401a      	ands	r2, r3
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	069b      	lsls	r3, r3, #26
 8001494:	429a      	cmp	r2, r3
 8001496:	d001      	beq.n	800149c <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8001498:	2301      	movs	r3, #1
 800149a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 800149c:	68fb      	ldr	r3, [r7, #12]
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3714      	adds	r7, #20
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr

080014a8 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80014a8:	b480      	push	{r7}
 80014aa:	b087      	sub	sp, #28
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
 80014b4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014bc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80014be:	7dfb      	ldrb	r3, [r7, #23]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d003      	beq.n	80014cc <HAL_CAN_GetRxMessage+0x24>
 80014c4:	7dfb      	ldrb	r3, [r7, #23]
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	f040 8103 	bne.w	80016d2 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d10e      	bne.n	80014f0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	f003 0303 	and.w	r3, r3, #3
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d116      	bne.n	800150e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e0f7      	b.n	80016e0 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	691b      	ldr	r3, [r3, #16]
 80014f6:	f003 0303 	and.w	r3, r3, #3
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d107      	bne.n	800150e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001502:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e0e8      	b.n	80016e0 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	331b      	adds	r3, #27
 8001516:	011b      	lsls	r3, r3, #4
 8001518:	4413      	add	r3, r2
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0204 	and.w	r2, r3, #4
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d10c      	bne.n	8001546 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	331b      	adds	r3, #27
 8001534:	011b      	lsls	r3, r3, #4
 8001536:	4413      	add	r3, r2
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	0d5b      	lsrs	r3, r3, #21
 800153c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	e00b      	b.n	800155e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	331b      	adds	r3, #27
 800154e:	011b      	lsls	r3, r3, #4
 8001550:	4413      	add	r3, r2
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	08db      	lsrs	r3, r3, #3
 8001556:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	331b      	adds	r3, #27
 8001566:	011b      	lsls	r3, r3, #4
 8001568:	4413      	add	r3, r2
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0202 	and.w	r2, r3, #2
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	331b      	adds	r3, #27
 800157c:	011b      	lsls	r3, r3, #4
 800157e:	4413      	add	r3, r2
 8001580:	3304      	adds	r3, #4
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0308 	and.w	r3, r3, #8
 8001588:	2b00      	cmp	r3, #0
 800158a:	d003      	beq.n	8001594 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2208      	movs	r2, #8
 8001590:	611a      	str	r2, [r3, #16]
 8001592:	e00b      	b.n	80015ac <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	331b      	adds	r3, #27
 800159c:	011b      	lsls	r3, r3, #4
 800159e:	4413      	add	r3, r2
 80015a0:	3304      	adds	r3, #4
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 020f 	and.w	r2, r3, #15
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	331b      	adds	r3, #27
 80015b4:	011b      	lsls	r3, r3, #4
 80015b6:	4413      	add	r3, r2
 80015b8:	3304      	adds	r3, #4
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	0a1b      	lsrs	r3, r3, #8
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	331b      	adds	r3, #27
 80015cc:	011b      	lsls	r3, r3, #4
 80015ce:	4413      	add	r3, r2
 80015d0:	3304      	adds	r3, #4
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	0c1b      	lsrs	r3, r3, #16
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	011b      	lsls	r3, r3, #4
 80015e4:	4413      	add	r3, r2
 80015e6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	011b      	lsls	r3, r3, #4
 80015fa:	4413      	add	r3, r2
 80015fc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	0a1a      	lsrs	r2, r3, #8
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	3301      	adds	r3, #1
 8001608:	b2d2      	uxtb	r2, r2
 800160a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	011b      	lsls	r3, r3, #4
 8001614:	4413      	add	r3, r2
 8001616:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	0c1a      	lsrs	r2, r3, #16
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	3302      	adds	r3, #2
 8001622:	b2d2      	uxtb	r2, r2
 8001624:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	011b      	lsls	r3, r3, #4
 800162e:	4413      	add	r3, r2
 8001630:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	0e1a      	lsrs	r2, r3, #24
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	3303      	adds	r3, #3
 800163c:	b2d2      	uxtb	r2, r2
 800163e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	011b      	lsls	r3, r3, #4
 8001648:	4413      	add	r3, r2
 800164a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	3304      	adds	r3, #4
 8001654:	b2d2      	uxtb	r2, r2
 8001656:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	011b      	lsls	r3, r3, #4
 8001660:	4413      	add	r3, r2
 8001662:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	0a1a      	lsrs	r2, r3, #8
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	3305      	adds	r3, #5
 800166e:	b2d2      	uxtb	r2, r2
 8001670:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	011b      	lsls	r3, r3, #4
 800167a:	4413      	add	r3, r2
 800167c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	0c1a      	lsrs	r2, r3, #16
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	3306      	adds	r3, #6
 8001688:	b2d2      	uxtb	r2, r2
 800168a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	011b      	lsls	r3, r3, #4
 8001694:	4413      	add	r3, r2
 8001696:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	0e1a      	lsrs	r2, r3, #24
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	3307      	adds	r3, #7
 80016a2:	b2d2      	uxtb	r2, r2
 80016a4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d108      	bne.n	80016be <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	68da      	ldr	r2, [r3, #12]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f042 0220 	orr.w	r2, r2, #32
 80016ba:	60da      	str	r2, [r3, #12]
 80016bc:	e007      	b.n	80016ce <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	691a      	ldr	r2, [r3, #16]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f042 0220 	orr.w	r2, r2, #32
 80016cc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80016ce:	2300      	movs	r3, #0
 80016d0:	e006      	b.n	80016e0 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
  }
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	371c      	adds	r7, #28
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bc80      	pop	{r7}
 80016e8:	4770      	bx	lr

080016ea <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b085      	sub	sp, #20
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
 80016f2:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80016f4:	2300      	movs	r3, #0
 80016f6:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016fe:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001700:	7afb      	ldrb	r3, [r7, #11]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d002      	beq.n	800170c <HAL_CAN_GetRxFifoFillLevel+0x22>
 8001706:	7afb      	ldrb	r3, [r7, #11]
 8001708:	2b02      	cmp	r3, #2
 800170a:	d10f      	bne.n	800172c <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d106      	bne.n	8001720 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	f003 0303 	and.w	r3, r3, #3
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	e005      	b.n	800172c <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	f003 0303 	and.w	r3, r3, #3
 800172a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 800172c:	68fb      	ldr	r3, [r7, #12]
}
 800172e:	4618      	mov	r0, r3
 8001730:	3714      	adds	r7, #20
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr

08001738 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08a      	sub	sp, #40	; 0x28
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001740:	2300      	movs	r3, #0
 8001742:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	691b      	ldr	r3, [r3, #16]
 800176a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001774:	6a3b      	ldr	r3, [r7, #32]
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	2b00      	cmp	r3, #0
 800177c:	d07c      	beq.n	8001878 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	f003 0301 	and.w	r3, r3, #1
 8001784:	2b00      	cmp	r3, #0
 8001786:	d023      	beq.n	80017d0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2201      	movs	r2, #1
 800178e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d003      	beq.n	80017a2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f000 f983 	bl	8001aa6 <HAL_CAN_TxMailbox0CompleteCallback>
 80017a0:	e016      	b.n	80017d0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	f003 0304 	and.w	r3, r3, #4
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d004      	beq.n	80017b6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80017ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017b2:	627b      	str	r3, [r7, #36]	; 0x24
 80017b4:	e00c      	b.n	80017d0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	f003 0308 	and.w	r3, r3, #8
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d004      	beq.n	80017ca <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80017c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017c6:	627b      	str	r3, [r7, #36]	; 0x24
 80017c8:	e002      	b.n	80017d0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f000 f986 	bl	8001adc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d024      	beq.n	8001824 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017e2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d003      	beq.n	80017f6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f000 f962 	bl	8001ab8 <HAL_CAN_TxMailbox1CompleteCallback>
 80017f4:	e016      	b.n	8001824 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d004      	beq.n	800180a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001802:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001806:	627b      	str	r3, [r7, #36]	; 0x24
 8001808:	e00c      	b.n	8001824 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001810:	2b00      	cmp	r3, #0
 8001812:	d004      	beq.n	800181e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001816:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800181a:	627b      	str	r3, [r7, #36]	; 0x24
 800181c:	e002      	b.n	8001824 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f000 f965 	bl	8001aee <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d024      	beq.n	8001878 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001836:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d003      	beq.n	800184a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f000 f941 	bl	8001aca <HAL_CAN_TxMailbox2CompleteCallback>
 8001848:	e016      	b.n	8001878 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d004      	beq.n	800185e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001856:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800185a:	627b      	str	r3, [r7, #36]	; 0x24
 800185c:	e00c      	b.n	8001878 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d004      	beq.n	8001872 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800186e:	627b      	str	r3, [r7, #36]	; 0x24
 8001870:	e002      	b.n	8001878 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f000 f944 	bl	8001b00 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001878:	6a3b      	ldr	r3, [r7, #32]
 800187a:	f003 0308 	and.w	r3, r3, #8
 800187e:	2b00      	cmp	r3, #0
 8001880:	d00c      	beq.n	800189c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	f003 0310 	and.w	r3, r3, #16
 8001888:	2b00      	cmp	r3, #0
 800188a:	d007      	beq.n	800189c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800188c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001892:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2210      	movs	r2, #16
 800189a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800189c:	6a3b      	ldr	r3, [r7, #32]
 800189e:	f003 0304 	and.w	r3, r3, #4
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d00b      	beq.n	80018be <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	f003 0308 	and.w	r3, r3, #8
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d006      	beq.n	80018be <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2208      	movs	r2, #8
 80018b6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f000 f933 	bl	8001b24 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80018be:	6a3b      	ldr	r3, [r7, #32]
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d009      	beq.n	80018dc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	f003 0303 	and.w	r3, r3, #3
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d002      	beq.n	80018dc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f000 f91b 	bl	8001b12 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80018dc:	6a3b      	ldr	r3, [r7, #32]
 80018de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d00c      	beq.n	8001900 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	f003 0310 	and.w	r3, r3, #16
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d007      	beq.n	8001900 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80018f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018f6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2210      	movs	r2, #16
 80018fe:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001900:	6a3b      	ldr	r3, [r7, #32]
 8001902:	f003 0320 	and.w	r3, r3, #32
 8001906:	2b00      	cmp	r3, #0
 8001908:	d00b      	beq.n	8001922 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	f003 0308 	and.w	r3, r3, #8
 8001910:	2b00      	cmp	r3, #0
 8001912:	d006      	beq.n	8001922 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2208      	movs	r2, #8
 800191a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f000 f913 	bl	8001b48 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001922:	6a3b      	ldr	r3, [r7, #32]
 8001924:	f003 0310 	and.w	r3, r3, #16
 8001928:	2b00      	cmp	r3, #0
 800192a:	d009      	beq.n	8001940 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	691b      	ldr	r3, [r3, #16]
 8001932:	f003 0303 	and.w	r3, r3, #3
 8001936:	2b00      	cmp	r3, #0
 8001938:	d002      	beq.n	8001940 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f000 f8fb 	bl	8001b36 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001940:	6a3b      	ldr	r3, [r7, #32]
 8001942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d00b      	beq.n	8001962 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	f003 0310 	and.w	r3, r3, #16
 8001950:	2b00      	cmp	r3, #0
 8001952:	d006      	beq.n	8001962 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2210      	movs	r2, #16
 800195a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f000 f8fc 	bl	8001b5a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001962:	6a3b      	ldr	r3, [r7, #32]
 8001964:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d00b      	beq.n	8001984 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	f003 0308 	and.w	r3, r3, #8
 8001972:	2b00      	cmp	r3, #0
 8001974:	d006      	beq.n	8001984 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2208      	movs	r2, #8
 800197c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f000 f8f4 	bl	8001b6c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001984:	6a3b      	ldr	r3, [r7, #32]
 8001986:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d07b      	beq.n	8001a86 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	f003 0304 	and.w	r3, r3, #4
 8001994:	2b00      	cmp	r3, #0
 8001996:	d072      	beq.n	8001a7e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001998:	6a3b      	ldr	r3, [r7, #32]
 800199a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d008      	beq.n	80019b4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d003      	beq.n	80019b4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80019ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ae:	f043 0301 	orr.w	r3, r3, #1
 80019b2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80019b4:	6a3b      	ldr	r3, [r7, #32]
 80019b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d008      	beq.n	80019d0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d003      	beq.n	80019d0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80019c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ca:	f043 0302 	orr.w	r3, r3, #2
 80019ce:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80019d0:	6a3b      	ldr	r3, [r7, #32]
 80019d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d008      	beq.n	80019ec <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d003      	beq.n	80019ec <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80019e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e6:	f043 0304 	orr.w	r3, r3, #4
 80019ea:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80019ec:	6a3b      	ldr	r3, [r7, #32]
 80019ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d043      	beq.n	8001a7e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d03e      	beq.n	8001a7e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a06:	2b60      	cmp	r3, #96	; 0x60
 8001a08:	d02b      	beq.n	8001a62 <HAL_CAN_IRQHandler+0x32a>
 8001a0a:	2b60      	cmp	r3, #96	; 0x60
 8001a0c:	d82e      	bhi.n	8001a6c <HAL_CAN_IRQHandler+0x334>
 8001a0e:	2b50      	cmp	r3, #80	; 0x50
 8001a10:	d022      	beq.n	8001a58 <HAL_CAN_IRQHandler+0x320>
 8001a12:	2b50      	cmp	r3, #80	; 0x50
 8001a14:	d82a      	bhi.n	8001a6c <HAL_CAN_IRQHandler+0x334>
 8001a16:	2b40      	cmp	r3, #64	; 0x40
 8001a18:	d019      	beq.n	8001a4e <HAL_CAN_IRQHandler+0x316>
 8001a1a:	2b40      	cmp	r3, #64	; 0x40
 8001a1c:	d826      	bhi.n	8001a6c <HAL_CAN_IRQHandler+0x334>
 8001a1e:	2b30      	cmp	r3, #48	; 0x30
 8001a20:	d010      	beq.n	8001a44 <HAL_CAN_IRQHandler+0x30c>
 8001a22:	2b30      	cmp	r3, #48	; 0x30
 8001a24:	d822      	bhi.n	8001a6c <HAL_CAN_IRQHandler+0x334>
 8001a26:	2b10      	cmp	r3, #16
 8001a28:	d002      	beq.n	8001a30 <HAL_CAN_IRQHandler+0x2f8>
 8001a2a:	2b20      	cmp	r3, #32
 8001a2c:	d005      	beq.n	8001a3a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001a2e:	e01d      	b.n	8001a6c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a32:	f043 0308 	orr.w	r3, r3, #8
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a38:	e019      	b.n	8001a6e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3c:	f043 0310 	orr.w	r3, r3, #16
 8001a40:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a42:	e014      	b.n	8001a6e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a46:	f043 0320 	orr.w	r3, r3, #32
 8001a4a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a4c:	e00f      	b.n	8001a6e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a54:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a56:	e00a      	b.n	8001a6e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a5e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a60:	e005      	b.n	8001a6e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a6a:	e000      	b.n	8001a6e <HAL_CAN_IRQHandler+0x336>
            break;
 8001a6c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	699a      	ldr	r2, [r3, #24]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001a7c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2204      	movs	r2, #4
 8001a84:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d008      	beq.n	8001a9e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a92:	431a      	orrs	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f000 f870 	bl	8001b7e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001a9e:	bf00      	nop
 8001aa0:	3728      	adds	r7, #40	; 0x28
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b083      	sub	sp, #12
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr

08001ab8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bc80      	pop	{r7}
 8001ac8:	4770      	bx	lr

08001aca <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b083      	sub	sp, #12
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001ad2:	bf00      	nop
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr

08001adc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr

08001aee <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b083      	sub	sp, #12
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc80      	pop	{r7}
 8001afe:	4770      	bx	lr

08001b00 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bc80      	pop	{r7}
 8001b10:	4770      	bx	lr

08001b12 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001b12:	b480      	push	{r7}
 8001b14:	b083      	sub	sp, #12
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr

08001b24 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bc80      	pop	{r7}
 8001b34:	4770      	bx	lr

08001b36 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr

08001b48 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc80      	pop	{r7}
 8001b58:	4770      	bx	lr

08001b5a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr

08001b6c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bc80      	pop	{r7}
 8001b7c:	4770      	bx	lr

08001b7e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr

08001b90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ba6:	68ba      	ldr	r2, [r7, #8]
 8001ba8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bac:	4013      	ands	r3, r2
 8001bae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bc2:	4a04      	ldr	r2, [pc, #16]	; (8001bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	60d3      	str	r3, [r2, #12]
}
 8001bc8:	bf00      	nop
 8001bca:	3714      	adds	r7, #20
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bc80      	pop	{r7}
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bdc:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <__NVIC_GetPriorityGrouping+0x18>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	0a1b      	lsrs	r3, r3, #8
 8001be2:	f003 0307 	and.w	r3, r3, #7
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bc80      	pop	{r7}
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	db0b      	blt.n	8001c1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c06:	79fb      	ldrb	r3, [r7, #7]
 8001c08:	f003 021f 	and.w	r2, r3, #31
 8001c0c:	4906      	ldr	r1, [pc, #24]	; (8001c28 <__NVIC_EnableIRQ+0x34>)
 8001c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c12:	095b      	lsrs	r3, r3, #5
 8001c14:	2001      	movs	r0, #1
 8001c16:	fa00 f202 	lsl.w	r2, r0, r2
 8001c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc80      	pop	{r7}
 8001c26:	4770      	bx	lr
 8001c28:	e000e100 	.word	0xe000e100

08001c2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	6039      	str	r1, [r7, #0]
 8001c36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	db0a      	blt.n	8001c56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	490c      	ldr	r1, [pc, #48]	; (8001c78 <__NVIC_SetPriority+0x4c>)
 8001c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4a:	0112      	lsls	r2, r2, #4
 8001c4c:	b2d2      	uxtb	r2, r2
 8001c4e:	440b      	add	r3, r1
 8001c50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c54:	e00a      	b.n	8001c6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	4908      	ldr	r1, [pc, #32]	; (8001c7c <__NVIC_SetPriority+0x50>)
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	f003 030f 	and.w	r3, r3, #15
 8001c62:	3b04      	subs	r3, #4
 8001c64:	0112      	lsls	r2, r2, #4
 8001c66:	b2d2      	uxtb	r2, r2
 8001c68:	440b      	add	r3, r1
 8001c6a:	761a      	strb	r2, [r3, #24]
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bc80      	pop	{r7}
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	e000e100 	.word	0xe000e100
 8001c7c:	e000ed00 	.word	0xe000ed00

08001c80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b089      	sub	sp, #36	; 0x24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	f1c3 0307 	rsb	r3, r3, #7
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	bf28      	it	cs
 8001c9e:	2304      	movcs	r3, #4
 8001ca0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	3304      	adds	r3, #4
 8001ca6:	2b06      	cmp	r3, #6
 8001ca8:	d902      	bls.n	8001cb0 <NVIC_EncodePriority+0x30>
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	3b03      	subs	r3, #3
 8001cae:	e000      	b.n	8001cb2 <NVIC_EncodePriority+0x32>
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43da      	mvns	r2, r3
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	401a      	ands	r2, r3
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd2:	43d9      	mvns	r1, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd8:	4313      	orrs	r3, r2
         );
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3724      	adds	r7, #36	; 0x24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr

08001ce4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cf4:	d301      	bcc.n	8001cfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e00f      	b.n	8001d1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cfa:	4a0a      	ldr	r2, [pc, #40]	; (8001d24 <SysTick_Config+0x40>)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d02:	210f      	movs	r1, #15
 8001d04:	f04f 30ff 	mov.w	r0, #4294967295
 8001d08:	f7ff ff90 	bl	8001c2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d0c:	4b05      	ldr	r3, [pc, #20]	; (8001d24 <SysTick_Config+0x40>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d12:	4b04      	ldr	r3, [pc, #16]	; (8001d24 <SysTick_Config+0x40>)
 8001d14:	2207      	movs	r2, #7
 8001d16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	e000e010 	.word	0xe000e010

08001d28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f7ff ff2d 	bl	8001b90 <__NVIC_SetPriorityGrouping>
}
 8001d36:	bf00      	nop
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b086      	sub	sp, #24
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	4603      	mov	r3, r0
 8001d46:	60b9      	str	r1, [r7, #8]
 8001d48:	607a      	str	r2, [r7, #4]
 8001d4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d50:	f7ff ff42 	bl	8001bd8 <__NVIC_GetPriorityGrouping>
 8001d54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	68b9      	ldr	r1, [r7, #8]
 8001d5a:	6978      	ldr	r0, [r7, #20]
 8001d5c:	f7ff ff90 	bl	8001c80 <NVIC_EncodePriority>
 8001d60:	4602      	mov	r2, r0
 8001d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d66:	4611      	mov	r1, r2
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff ff5f 	bl	8001c2c <__NVIC_SetPriority>
}
 8001d6e:	bf00      	nop
 8001d70:	3718      	adds	r7, #24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b082      	sub	sp, #8
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff ff35 	bl	8001bf4 <__NVIC_EnableIRQ>
}
 8001d8a:	bf00      	nop
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b082      	sub	sp, #8
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7ff ffa2 	bl	8001ce4 <SysTick_Config>
 8001da0:	4603      	mov	r3, r0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
	...

08001dac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b08b      	sub	sp, #44	; 0x2c
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001db6:	2300      	movs	r3, #0
 8001db8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dbe:	e169      	b.n	8002094 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	69fa      	ldr	r2, [r7, #28]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	f040 8158 	bne.w	800208e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	4a9a      	ldr	r2, [pc, #616]	; (800204c <HAL_GPIO_Init+0x2a0>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d05e      	beq.n	8001ea6 <HAL_GPIO_Init+0xfa>
 8001de8:	4a98      	ldr	r2, [pc, #608]	; (800204c <HAL_GPIO_Init+0x2a0>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d875      	bhi.n	8001eda <HAL_GPIO_Init+0x12e>
 8001dee:	4a98      	ldr	r2, [pc, #608]	; (8002050 <HAL_GPIO_Init+0x2a4>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d058      	beq.n	8001ea6 <HAL_GPIO_Init+0xfa>
 8001df4:	4a96      	ldr	r2, [pc, #600]	; (8002050 <HAL_GPIO_Init+0x2a4>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d86f      	bhi.n	8001eda <HAL_GPIO_Init+0x12e>
 8001dfa:	4a96      	ldr	r2, [pc, #600]	; (8002054 <HAL_GPIO_Init+0x2a8>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d052      	beq.n	8001ea6 <HAL_GPIO_Init+0xfa>
 8001e00:	4a94      	ldr	r2, [pc, #592]	; (8002054 <HAL_GPIO_Init+0x2a8>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d869      	bhi.n	8001eda <HAL_GPIO_Init+0x12e>
 8001e06:	4a94      	ldr	r2, [pc, #592]	; (8002058 <HAL_GPIO_Init+0x2ac>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d04c      	beq.n	8001ea6 <HAL_GPIO_Init+0xfa>
 8001e0c:	4a92      	ldr	r2, [pc, #584]	; (8002058 <HAL_GPIO_Init+0x2ac>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d863      	bhi.n	8001eda <HAL_GPIO_Init+0x12e>
 8001e12:	4a92      	ldr	r2, [pc, #584]	; (800205c <HAL_GPIO_Init+0x2b0>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d046      	beq.n	8001ea6 <HAL_GPIO_Init+0xfa>
 8001e18:	4a90      	ldr	r2, [pc, #576]	; (800205c <HAL_GPIO_Init+0x2b0>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d85d      	bhi.n	8001eda <HAL_GPIO_Init+0x12e>
 8001e1e:	2b12      	cmp	r3, #18
 8001e20:	d82a      	bhi.n	8001e78 <HAL_GPIO_Init+0xcc>
 8001e22:	2b12      	cmp	r3, #18
 8001e24:	d859      	bhi.n	8001eda <HAL_GPIO_Init+0x12e>
 8001e26:	a201      	add	r2, pc, #4	; (adr r2, 8001e2c <HAL_GPIO_Init+0x80>)
 8001e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e2c:	08001ea7 	.word	0x08001ea7
 8001e30:	08001e81 	.word	0x08001e81
 8001e34:	08001e93 	.word	0x08001e93
 8001e38:	08001ed5 	.word	0x08001ed5
 8001e3c:	08001edb 	.word	0x08001edb
 8001e40:	08001edb 	.word	0x08001edb
 8001e44:	08001edb 	.word	0x08001edb
 8001e48:	08001edb 	.word	0x08001edb
 8001e4c:	08001edb 	.word	0x08001edb
 8001e50:	08001edb 	.word	0x08001edb
 8001e54:	08001edb 	.word	0x08001edb
 8001e58:	08001edb 	.word	0x08001edb
 8001e5c:	08001edb 	.word	0x08001edb
 8001e60:	08001edb 	.word	0x08001edb
 8001e64:	08001edb 	.word	0x08001edb
 8001e68:	08001edb 	.word	0x08001edb
 8001e6c:	08001edb 	.word	0x08001edb
 8001e70:	08001e89 	.word	0x08001e89
 8001e74:	08001e9d 	.word	0x08001e9d
 8001e78:	4a79      	ldr	r2, [pc, #484]	; (8002060 <HAL_GPIO_Init+0x2b4>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d013      	beq.n	8001ea6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e7e:	e02c      	b.n	8001eda <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	623b      	str	r3, [r7, #32]
          break;
 8001e86:	e029      	b.n	8001edc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	3304      	adds	r3, #4
 8001e8e:	623b      	str	r3, [r7, #32]
          break;
 8001e90:	e024      	b.n	8001edc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	3308      	adds	r3, #8
 8001e98:	623b      	str	r3, [r7, #32]
          break;
 8001e9a:	e01f      	b.n	8001edc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	330c      	adds	r3, #12
 8001ea2:	623b      	str	r3, [r7, #32]
          break;
 8001ea4:	e01a      	b.n	8001edc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d102      	bne.n	8001eb4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001eae:	2304      	movs	r3, #4
 8001eb0:	623b      	str	r3, [r7, #32]
          break;
 8001eb2:	e013      	b.n	8001edc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d105      	bne.n	8001ec8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ebc:	2308      	movs	r3, #8
 8001ebe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	69fa      	ldr	r2, [r7, #28]
 8001ec4:	611a      	str	r2, [r3, #16]
          break;
 8001ec6:	e009      	b.n	8001edc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ec8:	2308      	movs	r3, #8
 8001eca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	69fa      	ldr	r2, [r7, #28]
 8001ed0:	615a      	str	r2, [r3, #20]
          break;
 8001ed2:	e003      	b.n	8001edc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	623b      	str	r3, [r7, #32]
          break;
 8001ed8:	e000      	b.n	8001edc <HAL_GPIO_Init+0x130>
          break;
 8001eda:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	2bff      	cmp	r3, #255	; 0xff
 8001ee0:	d801      	bhi.n	8001ee6 <HAL_GPIO_Init+0x13a>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	e001      	b.n	8001eea <HAL_GPIO_Init+0x13e>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	3304      	adds	r3, #4
 8001eea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	2bff      	cmp	r3, #255	; 0xff
 8001ef0:	d802      	bhi.n	8001ef8 <HAL_GPIO_Init+0x14c>
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	e002      	b.n	8001efe <HAL_GPIO_Init+0x152>
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efa:	3b08      	subs	r3, #8
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	210f      	movs	r1, #15
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	401a      	ands	r2, r3
 8001f10:	6a39      	ldr	r1, [r7, #32]
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	fa01 f303 	lsl.w	r3, r1, r3
 8001f18:	431a      	orrs	r2, r3
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f000 80b1 	beq.w	800208e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f2c:	4b4d      	ldr	r3, [pc, #308]	; (8002064 <HAL_GPIO_Init+0x2b8>)
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	4a4c      	ldr	r2, [pc, #304]	; (8002064 <HAL_GPIO_Init+0x2b8>)
 8001f32:	f043 0301 	orr.w	r3, r3, #1
 8001f36:	6193      	str	r3, [r2, #24]
 8001f38:	4b4a      	ldr	r3, [pc, #296]	; (8002064 <HAL_GPIO_Init+0x2b8>)
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	60bb      	str	r3, [r7, #8]
 8001f42:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f44:	4a48      	ldr	r2, [pc, #288]	; (8002068 <HAL_GPIO_Init+0x2bc>)
 8001f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f48:	089b      	lsrs	r3, r3, #2
 8001f4a:	3302      	adds	r3, #2
 8001f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f50:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	f003 0303 	and.w	r3, r3, #3
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	220f      	movs	r2, #15
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	43db      	mvns	r3, r3
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	4013      	ands	r3, r2
 8001f66:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a40      	ldr	r2, [pc, #256]	; (800206c <HAL_GPIO_Init+0x2c0>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d013      	beq.n	8001f98 <HAL_GPIO_Init+0x1ec>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a3f      	ldr	r2, [pc, #252]	; (8002070 <HAL_GPIO_Init+0x2c4>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d00d      	beq.n	8001f94 <HAL_GPIO_Init+0x1e8>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a3e      	ldr	r2, [pc, #248]	; (8002074 <HAL_GPIO_Init+0x2c8>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d007      	beq.n	8001f90 <HAL_GPIO_Init+0x1e4>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a3d      	ldr	r2, [pc, #244]	; (8002078 <HAL_GPIO_Init+0x2cc>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d101      	bne.n	8001f8c <HAL_GPIO_Init+0x1e0>
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e006      	b.n	8001f9a <HAL_GPIO_Init+0x1ee>
 8001f8c:	2304      	movs	r3, #4
 8001f8e:	e004      	b.n	8001f9a <HAL_GPIO_Init+0x1ee>
 8001f90:	2302      	movs	r3, #2
 8001f92:	e002      	b.n	8001f9a <HAL_GPIO_Init+0x1ee>
 8001f94:	2301      	movs	r3, #1
 8001f96:	e000      	b.n	8001f9a <HAL_GPIO_Init+0x1ee>
 8001f98:	2300      	movs	r3, #0
 8001f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f9c:	f002 0203 	and.w	r2, r2, #3
 8001fa0:	0092      	lsls	r2, r2, #2
 8001fa2:	4093      	lsls	r3, r2
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001faa:	492f      	ldr	r1, [pc, #188]	; (8002068 <HAL_GPIO_Init+0x2bc>)
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fae:	089b      	lsrs	r3, r3, #2
 8001fb0:	3302      	adds	r3, #2
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d006      	beq.n	8001fd2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fc4:	4b2d      	ldr	r3, [pc, #180]	; (800207c <HAL_GPIO_Init+0x2d0>)
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	492c      	ldr	r1, [pc, #176]	; (800207c <HAL_GPIO_Init+0x2d0>)
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	608b      	str	r3, [r1, #8]
 8001fd0:	e006      	b.n	8001fe0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fd2:	4b2a      	ldr	r3, [pc, #168]	; (800207c <HAL_GPIO_Init+0x2d0>)
 8001fd4:	689a      	ldr	r2, [r3, #8]
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	4928      	ldr	r1, [pc, #160]	; (800207c <HAL_GPIO_Init+0x2d0>)
 8001fdc:	4013      	ands	r3, r2
 8001fde:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d006      	beq.n	8001ffa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fec:	4b23      	ldr	r3, [pc, #140]	; (800207c <HAL_GPIO_Init+0x2d0>)
 8001fee:	68da      	ldr	r2, [r3, #12]
 8001ff0:	4922      	ldr	r1, [pc, #136]	; (800207c <HAL_GPIO_Init+0x2d0>)
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	60cb      	str	r3, [r1, #12]
 8001ff8:	e006      	b.n	8002008 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ffa:	4b20      	ldr	r3, [pc, #128]	; (800207c <HAL_GPIO_Init+0x2d0>)
 8001ffc:	68da      	ldr	r2, [r3, #12]
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	43db      	mvns	r3, r3
 8002002:	491e      	ldr	r1, [pc, #120]	; (800207c <HAL_GPIO_Init+0x2d0>)
 8002004:	4013      	ands	r3, r2
 8002006:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d006      	beq.n	8002022 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002014:	4b19      	ldr	r3, [pc, #100]	; (800207c <HAL_GPIO_Init+0x2d0>)
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	4918      	ldr	r1, [pc, #96]	; (800207c <HAL_GPIO_Init+0x2d0>)
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	4313      	orrs	r3, r2
 800201e:	604b      	str	r3, [r1, #4]
 8002020:	e006      	b.n	8002030 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002022:	4b16      	ldr	r3, [pc, #88]	; (800207c <HAL_GPIO_Init+0x2d0>)
 8002024:	685a      	ldr	r2, [r3, #4]
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	43db      	mvns	r3, r3
 800202a:	4914      	ldr	r1, [pc, #80]	; (800207c <HAL_GPIO_Init+0x2d0>)
 800202c:	4013      	ands	r3, r2
 800202e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d021      	beq.n	8002080 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800203c:	4b0f      	ldr	r3, [pc, #60]	; (800207c <HAL_GPIO_Init+0x2d0>)
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	490e      	ldr	r1, [pc, #56]	; (800207c <HAL_GPIO_Init+0x2d0>)
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	4313      	orrs	r3, r2
 8002046:	600b      	str	r3, [r1, #0]
 8002048:	e021      	b.n	800208e <HAL_GPIO_Init+0x2e2>
 800204a:	bf00      	nop
 800204c:	10320000 	.word	0x10320000
 8002050:	10310000 	.word	0x10310000
 8002054:	10220000 	.word	0x10220000
 8002058:	10210000 	.word	0x10210000
 800205c:	10120000 	.word	0x10120000
 8002060:	10110000 	.word	0x10110000
 8002064:	40021000 	.word	0x40021000
 8002068:	40010000 	.word	0x40010000
 800206c:	40010800 	.word	0x40010800
 8002070:	40010c00 	.word	0x40010c00
 8002074:	40011000 	.word	0x40011000
 8002078:	40011400 	.word	0x40011400
 800207c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002080:	4b0b      	ldr	r3, [pc, #44]	; (80020b0 <HAL_GPIO_Init+0x304>)
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	43db      	mvns	r3, r3
 8002088:	4909      	ldr	r1, [pc, #36]	; (80020b0 <HAL_GPIO_Init+0x304>)
 800208a:	4013      	ands	r3, r2
 800208c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800208e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002090:	3301      	adds	r3, #1
 8002092:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209a:	fa22 f303 	lsr.w	r3, r2, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f47f ae8e 	bne.w	8001dc0 <HAL_GPIO_Init+0x14>
  }
}
 80020a4:	bf00      	nop
 80020a6:	bf00      	nop
 80020a8:	372c      	adds	r7, #44	; 0x2c
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr
 80020b0:	40010400 	.word	0x40010400

080020b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	460b      	mov	r3, r1
 80020be:	807b      	strh	r3, [r7, #2]
 80020c0:	4613      	mov	r3, r2
 80020c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020c4:	787b      	ldrb	r3, [r7, #1]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020ca:	887a      	ldrh	r2, [r7, #2]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020d0:	e003      	b.n	80020da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020d2:	887b      	ldrh	r3, [r7, #2]
 80020d4:	041a      	lsls	r2, r3, #16
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	611a      	str	r2, [r3, #16]
}
 80020da:	bf00      	nop
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	bc80      	pop	{r7}
 80020e2:	4770      	bx	lr

080020e4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	460b      	mov	r3, r1
 80020ee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020f6:	887a      	ldrh	r2, [r7, #2]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	4013      	ands	r3, r2
 80020fc:	041a      	lsls	r2, r3, #16
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	43d9      	mvns	r1, r3
 8002102:	887b      	ldrh	r3, [r7, #2]
 8002104:	400b      	ands	r3, r1
 8002106:	431a      	orrs	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	611a      	str	r2, [r3, #16]
}
 800210c:	bf00      	nop
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	bc80      	pop	{r7}
 8002114:	4770      	bx	lr
	...

08002118 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e272      	b.n	8002610 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b00      	cmp	r3, #0
 8002134:	f000 8087 	beq.w	8002246 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002138:	4b92      	ldr	r3, [pc, #584]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f003 030c 	and.w	r3, r3, #12
 8002140:	2b04      	cmp	r3, #4
 8002142:	d00c      	beq.n	800215e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002144:	4b8f      	ldr	r3, [pc, #572]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 030c 	and.w	r3, r3, #12
 800214c:	2b08      	cmp	r3, #8
 800214e:	d112      	bne.n	8002176 <HAL_RCC_OscConfig+0x5e>
 8002150:	4b8c      	ldr	r3, [pc, #560]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800215c:	d10b      	bne.n	8002176 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800215e:	4b89      	ldr	r3, [pc, #548]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d06c      	beq.n	8002244 <HAL_RCC_OscConfig+0x12c>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d168      	bne.n	8002244 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e24c      	b.n	8002610 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800217e:	d106      	bne.n	800218e <HAL_RCC_OscConfig+0x76>
 8002180:	4b80      	ldr	r3, [pc, #512]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a7f      	ldr	r2, [pc, #508]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 8002186:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800218a:	6013      	str	r3, [r2, #0]
 800218c:	e02e      	b.n	80021ec <HAL_RCC_OscConfig+0xd4>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10c      	bne.n	80021b0 <HAL_RCC_OscConfig+0x98>
 8002196:	4b7b      	ldr	r3, [pc, #492]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a7a      	ldr	r2, [pc, #488]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 800219c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021a0:	6013      	str	r3, [r2, #0]
 80021a2:	4b78      	ldr	r3, [pc, #480]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a77      	ldr	r2, [pc, #476]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 80021a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ac:	6013      	str	r3, [r2, #0]
 80021ae:	e01d      	b.n	80021ec <HAL_RCC_OscConfig+0xd4>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021b8:	d10c      	bne.n	80021d4 <HAL_RCC_OscConfig+0xbc>
 80021ba:	4b72      	ldr	r3, [pc, #456]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a71      	ldr	r2, [pc, #452]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 80021c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021c4:	6013      	str	r3, [r2, #0]
 80021c6:	4b6f      	ldr	r3, [pc, #444]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a6e      	ldr	r2, [pc, #440]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 80021cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d0:	6013      	str	r3, [r2, #0]
 80021d2:	e00b      	b.n	80021ec <HAL_RCC_OscConfig+0xd4>
 80021d4:	4b6b      	ldr	r3, [pc, #428]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a6a      	ldr	r2, [pc, #424]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 80021da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021de:	6013      	str	r3, [r2, #0]
 80021e0:	4b68      	ldr	r3, [pc, #416]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a67      	ldr	r2, [pc, #412]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 80021e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d013      	beq.n	800221c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f4:	f7fe fe30 	bl	8000e58 <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021fc:	f7fe fe2c 	bl	8000e58 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b64      	cmp	r3, #100	; 0x64
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e200      	b.n	8002610 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800220e:	4b5d      	ldr	r3, [pc, #372]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d0f0      	beq.n	80021fc <HAL_RCC_OscConfig+0xe4>
 800221a:	e014      	b.n	8002246 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221c:	f7fe fe1c 	bl	8000e58 <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002224:	f7fe fe18 	bl	8000e58 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b64      	cmp	r3, #100	; 0x64
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e1ec      	b.n	8002610 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002236:	4b53      	ldr	r3, [pc, #332]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1f0      	bne.n	8002224 <HAL_RCC_OscConfig+0x10c>
 8002242:	e000      	b.n	8002246 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002244:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d063      	beq.n	800231a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002252:	4b4c      	ldr	r3, [pc, #304]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f003 030c 	and.w	r3, r3, #12
 800225a:	2b00      	cmp	r3, #0
 800225c:	d00b      	beq.n	8002276 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800225e:	4b49      	ldr	r3, [pc, #292]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f003 030c 	and.w	r3, r3, #12
 8002266:	2b08      	cmp	r3, #8
 8002268:	d11c      	bne.n	80022a4 <HAL_RCC_OscConfig+0x18c>
 800226a:	4b46      	ldr	r3, [pc, #280]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d116      	bne.n	80022a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002276:	4b43      	ldr	r3, [pc, #268]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d005      	beq.n	800228e <HAL_RCC_OscConfig+0x176>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d001      	beq.n	800228e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e1c0      	b.n	8002610 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800228e:	4b3d      	ldr	r3, [pc, #244]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	4939      	ldr	r1, [pc, #228]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022a2:	e03a      	b.n	800231a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	691b      	ldr	r3, [r3, #16]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d020      	beq.n	80022ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022ac:	4b36      	ldr	r3, [pc, #216]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 80022ae:	2201      	movs	r2, #1
 80022b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b2:	f7fe fdd1 	bl	8000e58 <HAL_GetTick>
 80022b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b8:	e008      	b.n	80022cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ba:	f7fe fdcd 	bl	8000e58 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e1a1      	b.n	8002610 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022cc:	4b2d      	ldr	r3, [pc, #180]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d0f0      	beq.n	80022ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d8:	4b2a      	ldr	r3, [pc, #168]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	695b      	ldr	r3, [r3, #20]
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	4927      	ldr	r1, [pc, #156]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	600b      	str	r3, [r1, #0]
 80022ec:	e015      	b.n	800231a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ee:	4b26      	ldr	r3, [pc, #152]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f4:	f7fe fdb0 	bl	8000e58 <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022fc:	f7fe fdac 	bl	8000e58 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e180      	b.n	8002610 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800230e:	4b1d      	ldr	r3, [pc, #116]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1f0      	bne.n	80022fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0308 	and.w	r3, r3, #8
 8002322:	2b00      	cmp	r3, #0
 8002324:	d03a      	beq.n	800239c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d019      	beq.n	8002362 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800232e:	4b17      	ldr	r3, [pc, #92]	; (800238c <HAL_RCC_OscConfig+0x274>)
 8002330:	2201      	movs	r2, #1
 8002332:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002334:	f7fe fd90 	bl	8000e58 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800233c:	f7fe fd8c 	bl	8000e58 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e160      	b.n	8002610 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800234e:	4b0d      	ldr	r3, [pc, #52]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 8002350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d0f0      	beq.n	800233c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800235a:	2001      	movs	r0, #1
 800235c:	f000 face 	bl	80028fc <RCC_Delay>
 8002360:	e01c      	b.n	800239c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002362:	4b0a      	ldr	r3, [pc, #40]	; (800238c <HAL_RCC_OscConfig+0x274>)
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002368:	f7fe fd76 	bl	8000e58 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800236e:	e00f      	b.n	8002390 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002370:	f7fe fd72 	bl	8000e58 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d908      	bls.n	8002390 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e146      	b.n	8002610 <HAL_RCC_OscConfig+0x4f8>
 8002382:	bf00      	nop
 8002384:	40021000 	.word	0x40021000
 8002388:	42420000 	.word	0x42420000
 800238c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002390:	4b92      	ldr	r3, [pc, #584]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 8002392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1e9      	bne.n	8002370 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f000 80a6 	beq.w	80024f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023aa:	2300      	movs	r3, #0
 80023ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ae:	4b8b      	ldr	r3, [pc, #556]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 80023b0:	69db      	ldr	r3, [r3, #28]
 80023b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10d      	bne.n	80023d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ba:	4b88      	ldr	r3, [pc, #544]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 80023bc:	69db      	ldr	r3, [r3, #28]
 80023be:	4a87      	ldr	r2, [pc, #540]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 80023c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023c4:	61d3      	str	r3, [r2, #28]
 80023c6:	4b85      	ldr	r3, [pc, #532]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 80023c8:	69db      	ldr	r3, [r3, #28]
 80023ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ce:	60bb      	str	r3, [r7, #8]
 80023d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023d2:	2301      	movs	r3, #1
 80023d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d6:	4b82      	ldr	r3, [pc, #520]	; (80025e0 <HAL_RCC_OscConfig+0x4c8>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d118      	bne.n	8002414 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023e2:	4b7f      	ldr	r3, [pc, #508]	; (80025e0 <HAL_RCC_OscConfig+0x4c8>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a7e      	ldr	r2, [pc, #504]	; (80025e0 <HAL_RCC_OscConfig+0x4c8>)
 80023e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ee:	f7fe fd33 	bl	8000e58 <HAL_GetTick>
 80023f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f4:	e008      	b.n	8002408 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023f6:	f7fe fd2f 	bl	8000e58 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b64      	cmp	r3, #100	; 0x64
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e103      	b.n	8002610 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002408:	4b75      	ldr	r3, [pc, #468]	; (80025e0 <HAL_RCC_OscConfig+0x4c8>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0f0      	beq.n	80023f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d106      	bne.n	800242a <HAL_RCC_OscConfig+0x312>
 800241c:	4b6f      	ldr	r3, [pc, #444]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	4a6e      	ldr	r2, [pc, #440]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 8002422:	f043 0301 	orr.w	r3, r3, #1
 8002426:	6213      	str	r3, [r2, #32]
 8002428:	e02d      	b.n	8002486 <HAL_RCC_OscConfig+0x36e>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10c      	bne.n	800244c <HAL_RCC_OscConfig+0x334>
 8002432:	4b6a      	ldr	r3, [pc, #424]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	4a69      	ldr	r2, [pc, #420]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 8002438:	f023 0301 	bic.w	r3, r3, #1
 800243c:	6213      	str	r3, [r2, #32]
 800243e:	4b67      	ldr	r3, [pc, #412]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 8002440:	6a1b      	ldr	r3, [r3, #32]
 8002442:	4a66      	ldr	r2, [pc, #408]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 8002444:	f023 0304 	bic.w	r3, r3, #4
 8002448:	6213      	str	r3, [r2, #32]
 800244a:	e01c      	b.n	8002486 <HAL_RCC_OscConfig+0x36e>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	2b05      	cmp	r3, #5
 8002452:	d10c      	bne.n	800246e <HAL_RCC_OscConfig+0x356>
 8002454:	4b61      	ldr	r3, [pc, #388]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	4a60      	ldr	r2, [pc, #384]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 800245a:	f043 0304 	orr.w	r3, r3, #4
 800245e:	6213      	str	r3, [r2, #32]
 8002460:	4b5e      	ldr	r3, [pc, #376]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	4a5d      	ldr	r2, [pc, #372]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 8002466:	f043 0301 	orr.w	r3, r3, #1
 800246a:	6213      	str	r3, [r2, #32]
 800246c:	e00b      	b.n	8002486 <HAL_RCC_OscConfig+0x36e>
 800246e:	4b5b      	ldr	r3, [pc, #364]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	4a5a      	ldr	r2, [pc, #360]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 8002474:	f023 0301 	bic.w	r3, r3, #1
 8002478:	6213      	str	r3, [r2, #32]
 800247a:	4b58      	ldr	r3, [pc, #352]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 800247c:	6a1b      	ldr	r3, [r3, #32]
 800247e:	4a57      	ldr	r2, [pc, #348]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 8002480:	f023 0304 	bic.w	r3, r3, #4
 8002484:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d015      	beq.n	80024ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800248e:	f7fe fce3 	bl	8000e58 <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002494:	e00a      	b.n	80024ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002496:	f7fe fcdf 	bl	8000e58 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e0b1      	b.n	8002610 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ac:	4b4b      	ldr	r3, [pc, #300]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d0ee      	beq.n	8002496 <HAL_RCC_OscConfig+0x37e>
 80024b8:	e014      	b.n	80024e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ba:	f7fe fccd 	bl	8000e58 <HAL_GetTick>
 80024be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024c0:	e00a      	b.n	80024d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c2:	f7fe fcc9 	bl	8000e58 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e09b      	b.n	8002610 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024d8:	4b40      	ldr	r3, [pc, #256]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1ee      	bne.n	80024c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024e4:	7dfb      	ldrb	r3, [r7, #23]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d105      	bne.n	80024f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ea:	4b3c      	ldr	r3, [pc, #240]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 80024ec:	69db      	ldr	r3, [r3, #28]
 80024ee:	4a3b      	ldr	r2, [pc, #236]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 80024f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f000 8087 	beq.w	800260e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002500:	4b36      	ldr	r3, [pc, #216]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f003 030c 	and.w	r3, r3, #12
 8002508:	2b08      	cmp	r3, #8
 800250a:	d061      	beq.n	80025d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	69db      	ldr	r3, [r3, #28]
 8002510:	2b02      	cmp	r3, #2
 8002512:	d146      	bne.n	80025a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002514:	4b33      	ldr	r3, [pc, #204]	; (80025e4 <HAL_RCC_OscConfig+0x4cc>)
 8002516:	2200      	movs	r2, #0
 8002518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251a:	f7fe fc9d 	bl	8000e58 <HAL_GetTick>
 800251e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002520:	e008      	b.n	8002534 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002522:	f7fe fc99 	bl	8000e58 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d901      	bls.n	8002534 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e06d      	b.n	8002610 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002534:	4b29      	ldr	r3, [pc, #164]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d1f0      	bne.n	8002522 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002548:	d108      	bne.n	800255c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800254a:	4b24      	ldr	r3, [pc, #144]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	4921      	ldr	r1, [pc, #132]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 8002558:	4313      	orrs	r3, r2
 800255a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800255c:	4b1f      	ldr	r3, [pc, #124]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a19      	ldr	r1, [r3, #32]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256c:	430b      	orrs	r3, r1
 800256e:	491b      	ldr	r1, [pc, #108]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 8002570:	4313      	orrs	r3, r2
 8002572:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002574:	4b1b      	ldr	r3, [pc, #108]	; (80025e4 <HAL_RCC_OscConfig+0x4cc>)
 8002576:	2201      	movs	r2, #1
 8002578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257a:	f7fe fc6d 	bl	8000e58 <HAL_GetTick>
 800257e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002580:	e008      	b.n	8002594 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002582:	f7fe fc69 	bl	8000e58 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d901      	bls.n	8002594 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e03d      	b.n	8002610 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002594:	4b11      	ldr	r3, [pc, #68]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d0f0      	beq.n	8002582 <HAL_RCC_OscConfig+0x46a>
 80025a0:	e035      	b.n	800260e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025a2:	4b10      	ldr	r3, [pc, #64]	; (80025e4 <HAL_RCC_OscConfig+0x4cc>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a8:	f7fe fc56 	bl	8000e58 <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025b0:	f7fe fc52 	bl	8000e58 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e026      	b.n	8002610 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c2:	4b06      	ldr	r3, [pc, #24]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1f0      	bne.n	80025b0 <HAL_RCC_OscConfig+0x498>
 80025ce:	e01e      	b.n	800260e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	69db      	ldr	r3, [r3, #28]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d107      	bne.n	80025e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e019      	b.n	8002610 <HAL_RCC_OscConfig+0x4f8>
 80025dc:	40021000 	.word	0x40021000
 80025e0:	40007000 	.word	0x40007000
 80025e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025e8:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <HAL_RCC_OscConfig+0x500>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d106      	bne.n	800260a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002606:	429a      	cmp	r2, r3
 8002608:	d001      	beq.n	800260e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e000      	b.n	8002610 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	3718      	adds	r7, #24
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	40021000 	.word	0x40021000

0800261c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e0d0      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002630:	4b6a      	ldr	r3, [pc, #424]	; (80027dc <HAL_RCC_ClockConfig+0x1c0>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	429a      	cmp	r2, r3
 800263c:	d910      	bls.n	8002660 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263e:	4b67      	ldr	r3, [pc, #412]	; (80027dc <HAL_RCC_ClockConfig+0x1c0>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f023 0207 	bic.w	r2, r3, #7
 8002646:	4965      	ldr	r1, [pc, #404]	; (80027dc <HAL_RCC_ClockConfig+0x1c0>)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	4313      	orrs	r3, r2
 800264c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800264e:	4b63      	ldr	r3, [pc, #396]	; (80027dc <HAL_RCC_ClockConfig+0x1c0>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	429a      	cmp	r2, r3
 800265a:	d001      	beq.n	8002660 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e0b8      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d020      	beq.n	80026ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	2b00      	cmp	r3, #0
 8002676:	d005      	beq.n	8002684 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002678:	4b59      	ldr	r3, [pc, #356]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	4a58      	ldr	r2, [pc, #352]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 800267e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002682:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0308 	and.w	r3, r3, #8
 800268c:	2b00      	cmp	r3, #0
 800268e:	d005      	beq.n	800269c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002690:	4b53      	ldr	r3, [pc, #332]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	4a52      	ldr	r2, [pc, #328]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002696:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800269a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800269c:	4b50      	ldr	r3, [pc, #320]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	494d      	ldr	r1, [pc, #308]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d040      	beq.n	800273c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d107      	bne.n	80026d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c2:	4b47      	ldr	r3, [pc, #284]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d115      	bne.n	80026fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e07f      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d107      	bne.n	80026ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026da:	4b41      	ldr	r3, [pc, #260]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d109      	bne.n	80026fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e073      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ea:	4b3d      	ldr	r3, [pc, #244]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e06b      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026fa:	4b39      	ldr	r3, [pc, #228]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f023 0203 	bic.w	r2, r3, #3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	4936      	ldr	r1, [pc, #216]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002708:	4313      	orrs	r3, r2
 800270a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800270c:	f7fe fba4 	bl	8000e58 <HAL_GetTick>
 8002710:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002712:	e00a      	b.n	800272a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002714:	f7fe fba0 	bl	8000e58 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002722:	4293      	cmp	r3, r2
 8002724:	d901      	bls.n	800272a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e053      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800272a:	4b2d      	ldr	r3, [pc, #180]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f003 020c 	and.w	r2, r3, #12
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	429a      	cmp	r2, r3
 800273a:	d1eb      	bne.n	8002714 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800273c:	4b27      	ldr	r3, [pc, #156]	; (80027dc <HAL_RCC_ClockConfig+0x1c0>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	429a      	cmp	r2, r3
 8002748:	d210      	bcs.n	800276c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800274a:	4b24      	ldr	r3, [pc, #144]	; (80027dc <HAL_RCC_ClockConfig+0x1c0>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f023 0207 	bic.w	r2, r3, #7
 8002752:	4922      	ldr	r1, [pc, #136]	; (80027dc <HAL_RCC_ClockConfig+0x1c0>)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	4313      	orrs	r3, r2
 8002758:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800275a:	4b20      	ldr	r3, [pc, #128]	; (80027dc <HAL_RCC_ClockConfig+0x1c0>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0307 	and.w	r3, r3, #7
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	429a      	cmp	r2, r3
 8002766:	d001      	beq.n	800276c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e032      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0304 	and.w	r3, r3, #4
 8002774:	2b00      	cmp	r3, #0
 8002776:	d008      	beq.n	800278a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002778:	4b19      	ldr	r3, [pc, #100]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	4916      	ldr	r1, [pc, #88]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002786:	4313      	orrs	r3, r2
 8002788:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0308 	and.w	r3, r3, #8
 8002792:	2b00      	cmp	r3, #0
 8002794:	d009      	beq.n	80027aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002796:	4b12      	ldr	r3, [pc, #72]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	490e      	ldr	r1, [pc, #56]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027aa:	f000 f821 	bl	80027f0 <HAL_RCC_GetSysClockFreq>
 80027ae:	4602      	mov	r2, r0
 80027b0:	4b0b      	ldr	r3, [pc, #44]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	091b      	lsrs	r3, r3, #4
 80027b6:	f003 030f 	and.w	r3, r3, #15
 80027ba:	490a      	ldr	r1, [pc, #40]	; (80027e4 <HAL_RCC_ClockConfig+0x1c8>)
 80027bc:	5ccb      	ldrb	r3, [r1, r3]
 80027be:	fa22 f303 	lsr.w	r3, r2, r3
 80027c2:	4a09      	ldr	r2, [pc, #36]	; (80027e8 <HAL_RCC_ClockConfig+0x1cc>)
 80027c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027c6:	4b09      	ldr	r3, [pc, #36]	; (80027ec <HAL_RCC_ClockConfig+0x1d0>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7fe fb02 	bl	8000dd4 <HAL_InitTick>

  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40022000 	.word	0x40022000
 80027e0:	40021000 	.word	0x40021000
 80027e4:	08002b80 	.word	0x08002b80
 80027e8:	20000000 	.word	0x20000000
 80027ec:	20000004 	.word	0x20000004

080027f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b087      	sub	sp, #28
 80027f4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	60fb      	str	r3, [r7, #12]
 80027fa:	2300      	movs	r3, #0
 80027fc:	60bb      	str	r3, [r7, #8]
 80027fe:	2300      	movs	r3, #0
 8002800:	617b      	str	r3, [r7, #20]
 8002802:	2300      	movs	r3, #0
 8002804:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002806:	2300      	movs	r3, #0
 8002808:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800280a:	4b1e      	ldr	r3, [pc, #120]	; (8002884 <HAL_RCC_GetSysClockFreq+0x94>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f003 030c 	and.w	r3, r3, #12
 8002816:	2b04      	cmp	r3, #4
 8002818:	d002      	beq.n	8002820 <HAL_RCC_GetSysClockFreq+0x30>
 800281a:	2b08      	cmp	r3, #8
 800281c:	d003      	beq.n	8002826 <HAL_RCC_GetSysClockFreq+0x36>
 800281e:	e027      	b.n	8002870 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002820:	4b19      	ldr	r3, [pc, #100]	; (8002888 <HAL_RCC_GetSysClockFreq+0x98>)
 8002822:	613b      	str	r3, [r7, #16]
      break;
 8002824:	e027      	b.n	8002876 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	0c9b      	lsrs	r3, r3, #18
 800282a:	f003 030f 	and.w	r3, r3, #15
 800282e:	4a17      	ldr	r2, [pc, #92]	; (800288c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002830:	5cd3      	ldrb	r3, [r2, r3]
 8002832:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d010      	beq.n	8002860 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800283e:	4b11      	ldr	r3, [pc, #68]	; (8002884 <HAL_RCC_GetSysClockFreq+0x94>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	0c5b      	lsrs	r3, r3, #17
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	4a11      	ldr	r2, [pc, #68]	; (8002890 <HAL_RCC_GetSysClockFreq+0xa0>)
 800284a:	5cd3      	ldrb	r3, [r2, r3]
 800284c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a0d      	ldr	r2, [pc, #52]	; (8002888 <HAL_RCC_GetSysClockFreq+0x98>)
 8002852:	fb03 f202 	mul.w	r2, r3, r2
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	fbb2 f3f3 	udiv	r3, r2, r3
 800285c:	617b      	str	r3, [r7, #20]
 800285e:	e004      	b.n	800286a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4a0c      	ldr	r2, [pc, #48]	; (8002894 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002864:	fb02 f303 	mul.w	r3, r2, r3
 8002868:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	613b      	str	r3, [r7, #16]
      break;
 800286e:	e002      	b.n	8002876 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002870:	4b05      	ldr	r3, [pc, #20]	; (8002888 <HAL_RCC_GetSysClockFreq+0x98>)
 8002872:	613b      	str	r3, [r7, #16]
      break;
 8002874:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002876:	693b      	ldr	r3, [r7, #16]
}
 8002878:	4618      	mov	r0, r3
 800287a:	371c      	adds	r7, #28
 800287c:	46bd      	mov	sp, r7
 800287e:	bc80      	pop	{r7}
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	40021000 	.word	0x40021000
 8002888:	007a1200 	.word	0x007a1200
 800288c:	08002b98 	.word	0x08002b98
 8002890:	08002ba8 	.word	0x08002ba8
 8002894:	003d0900 	.word	0x003d0900

08002898 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800289c:	4b02      	ldr	r3, [pc, #8]	; (80028a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800289e:	681b      	ldr	r3, [r3, #0]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr
 80028a8:	20000000 	.word	0x20000000

080028ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028b0:	f7ff fff2 	bl	8002898 <HAL_RCC_GetHCLKFreq>
 80028b4:	4602      	mov	r2, r0
 80028b6:	4b05      	ldr	r3, [pc, #20]	; (80028cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	0a1b      	lsrs	r3, r3, #8
 80028bc:	f003 0307 	and.w	r3, r3, #7
 80028c0:	4903      	ldr	r1, [pc, #12]	; (80028d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028c2:	5ccb      	ldrb	r3, [r1, r3]
 80028c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40021000 	.word	0x40021000
 80028d0:	08002b90 	.word	0x08002b90

080028d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028d8:	f7ff ffde 	bl	8002898 <HAL_RCC_GetHCLKFreq>
 80028dc:	4602      	mov	r2, r0
 80028de:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	0adb      	lsrs	r3, r3, #11
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	4903      	ldr	r1, [pc, #12]	; (80028f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028ea:	5ccb      	ldrb	r3, [r1, r3]
 80028ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40021000 	.word	0x40021000
 80028f8:	08002b90 	.word	0x08002b90

080028fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002904:	4b0a      	ldr	r3, [pc, #40]	; (8002930 <RCC_Delay+0x34>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a0a      	ldr	r2, [pc, #40]	; (8002934 <RCC_Delay+0x38>)
 800290a:	fba2 2303 	umull	r2, r3, r2, r3
 800290e:	0a5b      	lsrs	r3, r3, #9
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	fb02 f303 	mul.w	r3, r2, r3
 8002916:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002918:	bf00      	nop
  }
  while (Delay --);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	1e5a      	subs	r2, r3, #1
 800291e:	60fa      	str	r2, [r7, #12]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1f9      	bne.n	8002918 <RCC_Delay+0x1c>
}
 8002924:	bf00      	nop
 8002926:	bf00      	nop
 8002928:	3714      	adds	r7, #20
 800292a:	46bd      	mov	sp, r7
 800292c:	bc80      	pop	{r7}
 800292e:	4770      	bx	lr
 8002930:	20000000 	.word	0x20000000
 8002934:	10624dd3 	.word	0x10624dd3

08002938 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e042      	b.n	80029d0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d106      	bne.n	8002964 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f7fe f95a 	bl	8000c18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2224      	movs	r2, #36	; 0x24
 8002968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68da      	ldr	r2, [r3, #12]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800297a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 f82b 	bl	80029d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	691a      	ldr	r2, [r3, #16]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002990:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	695a      	ldr	r2, [r3, #20]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68da      	ldr	r2, [r3, #12]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2220      	movs	r2, #32
 80029bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2220      	movs	r2, #32
 80029c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3708      	adds	r7, #8
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68da      	ldr	r2, [r3, #12]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689a      	ldr	r2, [r3, #8]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	431a      	orrs	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002a12:	f023 030c 	bic.w	r3, r3, #12
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	6812      	ldr	r2, [r2, #0]
 8002a1a:	68b9      	ldr	r1, [r7, #8]
 8002a1c:	430b      	orrs	r3, r1
 8002a1e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	699a      	ldr	r2, [r3, #24]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	430a      	orrs	r2, r1
 8002a34:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a2c      	ldr	r2, [pc, #176]	; (8002aec <UART_SetConfig+0x114>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d103      	bne.n	8002a48 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a40:	f7ff ff48 	bl	80028d4 <HAL_RCC_GetPCLK2Freq>
 8002a44:	60f8      	str	r0, [r7, #12]
 8002a46:	e002      	b.n	8002a4e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002a48:	f7ff ff30 	bl	80028ac <HAL_RCC_GetPCLK1Freq>
 8002a4c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	4613      	mov	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	4413      	add	r3, r2
 8002a56:	009a      	lsls	r2, r3, #2
 8002a58:	441a      	add	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a64:	4a22      	ldr	r2, [pc, #136]	; (8002af0 <UART_SetConfig+0x118>)
 8002a66:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6a:	095b      	lsrs	r3, r3, #5
 8002a6c:	0119      	lsls	r1, r3, #4
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	4613      	mov	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	009a      	lsls	r2, r3, #2
 8002a78:	441a      	add	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a84:	4b1a      	ldr	r3, [pc, #104]	; (8002af0 <UART_SetConfig+0x118>)
 8002a86:	fba3 0302 	umull	r0, r3, r3, r2
 8002a8a:	095b      	lsrs	r3, r3, #5
 8002a8c:	2064      	movs	r0, #100	; 0x64
 8002a8e:	fb00 f303 	mul.w	r3, r0, r3
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	011b      	lsls	r3, r3, #4
 8002a96:	3332      	adds	r3, #50	; 0x32
 8002a98:	4a15      	ldr	r2, [pc, #84]	; (8002af0 <UART_SetConfig+0x118>)
 8002a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9e:	095b      	lsrs	r3, r3, #5
 8002aa0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002aa4:	4419      	add	r1, r3
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	009a      	lsls	r2, r3, #2
 8002ab0:	441a      	add	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002abc:	4b0c      	ldr	r3, [pc, #48]	; (8002af0 <UART_SetConfig+0x118>)
 8002abe:	fba3 0302 	umull	r0, r3, r3, r2
 8002ac2:	095b      	lsrs	r3, r3, #5
 8002ac4:	2064      	movs	r0, #100	; 0x64
 8002ac6:	fb00 f303 	mul.w	r3, r0, r3
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	011b      	lsls	r3, r3, #4
 8002ace:	3332      	adds	r3, #50	; 0x32
 8002ad0:	4a07      	ldr	r2, [pc, #28]	; (8002af0 <UART_SetConfig+0x118>)
 8002ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad6:	095b      	lsrs	r3, r3, #5
 8002ad8:	f003 020f 	and.w	r2, r3, #15
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	440a      	add	r2, r1
 8002ae2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002ae4:	bf00      	nop
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40013800 	.word	0x40013800
 8002af0:	51eb851f 	.word	0x51eb851f

08002af4 <memset>:
 8002af4:	4603      	mov	r3, r0
 8002af6:	4402      	add	r2, r0
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d100      	bne.n	8002afe <memset+0xa>
 8002afc:	4770      	bx	lr
 8002afe:	f803 1b01 	strb.w	r1, [r3], #1
 8002b02:	e7f9      	b.n	8002af8 <memset+0x4>

08002b04 <__libc_init_array>:
 8002b04:	b570      	push	{r4, r5, r6, lr}
 8002b06:	2600      	movs	r6, #0
 8002b08:	4d0c      	ldr	r5, [pc, #48]	; (8002b3c <__libc_init_array+0x38>)
 8002b0a:	4c0d      	ldr	r4, [pc, #52]	; (8002b40 <__libc_init_array+0x3c>)
 8002b0c:	1b64      	subs	r4, r4, r5
 8002b0e:	10a4      	asrs	r4, r4, #2
 8002b10:	42a6      	cmp	r6, r4
 8002b12:	d109      	bne.n	8002b28 <__libc_init_array+0x24>
 8002b14:	f000 f828 	bl	8002b68 <_init>
 8002b18:	2600      	movs	r6, #0
 8002b1a:	4d0a      	ldr	r5, [pc, #40]	; (8002b44 <__libc_init_array+0x40>)
 8002b1c:	4c0a      	ldr	r4, [pc, #40]	; (8002b48 <__libc_init_array+0x44>)
 8002b1e:	1b64      	subs	r4, r4, r5
 8002b20:	10a4      	asrs	r4, r4, #2
 8002b22:	42a6      	cmp	r6, r4
 8002b24:	d105      	bne.n	8002b32 <__libc_init_array+0x2e>
 8002b26:	bd70      	pop	{r4, r5, r6, pc}
 8002b28:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b2c:	4798      	blx	r3
 8002b2e:	3601      	adds	r6, #1
 8002b30:	e7ee      	b.n	8002b10 <__libc_init_array+0xc>
 8002b32:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b36:	4798      	blx	r3
 8002b38:	3601      	adds	r6, #1
 8002b3a:	e7f2      	b.n	8002b22 <__libc_init_array+0x1e>
 8002b3c:	08002bac 	.word	0x08002bac
 8002b40:	08002bac 	.word	0x08002bac
 8002b44:	08002bac 	.word	0x08002bac
 8002b48:	08002bb0 	.word	0x08002bb0

08002b4c <memcpy>:
 8002b4c:	440a      	add	r2, r1
 8002b4e:	4291      	cmp	r1, r2
 8002b50:	f100 33ff 	add.w	r3, r0, #4294967295
 8002b54:	d100      	bne.n	8002b58 <memcpy+0xc>
 8002b56:	4770      	bx	lr
 8002b58:	b510      	push	{r4, lr}
 8002b5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002b5e:	4291      	cmp	r1, r2
 8002b60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002b64:	d1f9      	bne.n	8002b5a <memcpy+0xe>
 8002b66:	bd10      	pop	{r4, pc}

08002b68 <_init>:
 8002b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b6a:	bf00      	nop
 8002b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b6e:	bc08      	pop	{r3}
 8002b70:	469e      	mov	lr, r3
 8002b72:	4770      	bx	lr

08002b74 <_fini>:
 8002b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b76:	bf00      	nop
 8002b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b7a:	bc08      	pop	{r3}
 8002b7c:	469e      	mov	lr, r3
 8002b7e:	4770      	bx	lr
