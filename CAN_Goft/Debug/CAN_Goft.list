
CAN_Goft.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000296c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002a78  08002a78  00012a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002aa4  08002aa4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002aa4  08002aa4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002aa4  08002aa4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002aa4  08002aa4  00012aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002aa8  08002aa8  00012aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002aac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  2000000c  08002ab8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08002ab8  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   000098cd  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b05  00000000  00000000  00029945  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007f8  00000000  00000000  0002b450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000614  00000000  00000000  0002bc48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017172  00000000  00000000  0002c25c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009c0e  00000000  00000000  000433ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084320  00000000  00000000  0004cfdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001f84  00000000  00000000  000d12fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000d3280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002a60 	.word	0x08002a60

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002a60 	.word	0x08002a60

0800014c <CANBufferHandleStruct_Init>:
 *      Author: win 10
 */
#include <CAN_OSI.h>
#include <string.h>
#include "CAN_Flag.h"
void CANBufferHandleStruct_Init(CANBufferHandleStruct *Buffer) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b096      	sub	sp, #88	; 0x58
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	NodeBufferHandle defaultNodeHandle = {0};
 8000154:	f107 030c 	add.w	r3, r7, #12
 8000158:	2247      	movs	r2, #71	; 0x47
 800015a:	2100      	movs	r1, #0
 800015c:	4618      	mov	r0, r3
 800015e:	f002 fc45 	bl	80029ec <memset>
	Buffer->Buffer_Index = 0;
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2200      	movs	r2, #0
 8000166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	Buffer->SenderID = 0;
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	2200      	movs	r2, #0
 800016e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	Buffer->RecvID = 0;
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	2200      	movs	r2, #0
 8000176:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	Buffer->FrameType_Index = SET_UP_FRAME;
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	2200      	movs	r2, #0
 800017e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	Buffer->PacketDataLength = 0;
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	2200      	movs	r2, #0
 8000186:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	Buffer->CRCValue = 0;
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2200      	movs	r2, #0
 800018e:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	Buffer->NumberOfFrame=0;
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	2200      	movs	r2, #0
 8000196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	memset(Buffer->NetworkBuffer, 0, sizeof(Buffer->NetworkBuffer));
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	2240      	movs	r2, #64	; 0x40
 800019e:	2100      	movs	r1, #0
 80001a0:	4618      	mov	r0, r3
 80001a2:	f002 fc23 	bl	80029ec <memset>
	memset(Buffer->Buffer, 0x55, sizeof(Buffer->Buffer));
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	3348      	adds	r3, #72	; 0x48
 80001aa:	2240      	movs	r2, #64	; 0x40
 80001ac:	2155      	movs	r1, #85	; 0x55
 80001ae:	4618      	mov	r0, r3
 80001b0:	f002 fc1c 	bl	80029ec <memset>
	memset(Buffer->StoreData, 0, sizeof(Buffer->StoreData));
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	3388      	adds	r3, #136	; 0x88
 80001b8:	2240      	movs	r2, #64	; 0x40
 80001ba:	2100      	movs	r1, #0
 80001bc:	4618      	mov	r0, r3
 80001be:	f002 fc15 	bl	80029ec <memset>
	for (int i = 0; i < 16; i++) {
 80001c2:	2300      	movs	r3, #0
 80001c4:	657b      	str	r3, [r7, #84]	; 0x54
 80001c6:	e012      	b.n	80001ee <CANBufferHandleStruct_Init+0xa2>
		Buffer->NodeHandle[i] = defaultNodeHandle;
 80001c8:	6879      	ldr	r1, [r7, #4]
 80001ca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80001cc:	4613      	mov	r3, r2
 80001ce:	00db      	lsls	r3, r3, #3
 80001d0:	4413      	add	r3, r2
 80001d2:	00db      	lsls	r3, r3, #3
 80001d4:	1a9b      	subs	r3, r3, r2
 80001d6:	440b      	add	r3, r1
 80001d8:	33c8      	adds	r3, #200	; 0xc8
 80001da:	3302      	adds	r3, #2
 80001dc:	f107 010c 	add.w	r1, r7, #12
 80001e0:	2247      	movs	r2, #71	; 0x47
 80001e2:	4618      	mov	r0, r3
 80001e4:	f002 fc2e 	bl	8002a44 <memcpy>
	for (int i = 0; i < 16; i++) {
 80001e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80001ea:	3301      	adds	r3, #1
 80001ec:	657b      	str	r3, [r7, #84]	; 0x54
 80001ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80001f0:	2b0f      	cmp	r3, #15
 80001f2:	dde9      	ble.n	80001c8 <CANBufferHandleStruct_Init+0x7c>
	}
}
 80001f4:	bf00      	nop
 80001f6:	bf00      	nop
 80001f8:	3758      	adds	r7, #88	; 0x58
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bd80      	pop	{r7, pc}

080001fe <FlagsFrameHandle_Init>:
void FlagsFrameHandle_Init(FlagFrameHandle *FlagInit) {
 80001fe:	b4b0      	push	{r4, r5, r7}
 8000200:	b089      	sub	sp, #36	; 0x24
 8000202:	af00      	add	r7, sp, #0
 8000204:	6078      	str	r0, [r7, #4]
	FlagIdHandle DefaultFlagID= {0};
 8000206:	f107 0308 	add.w	r3, r7, #8
 800020a:	2200      	movs	r2, #0
 800020c:	601a      	str	r2, [r3, #0]
 800020e:	605a      	str	r2, [r3, #4]
 8000210:	609a      	str	r2, [r3, #8]
 8000212:	60da      	str	r2, [r3, #12]
 8000214:	741a      	strb	r2, [r3, #16]
	FlagInit->FrameBits.Flag_Frame_0 = 0;
 8000216:	687a      	ldr	r2, [r7, #4]
 8000218:	f892 3110 	ldrb.w	r3, [r2, #272]	; 0x110
 800021c:	f36f 0300 	bfc	r3, #0, #1
 8000220:	f882 3110 	strb.w	r3, [r2, #272]	; 0x110
	FlagInit->FrameBits.Flag_Frame_1 = 0;
 8000224:	687a      	ldr	r2, [r7, #4]
 8000226:	f892 3110 	ldrb.w	r3, [r2, #272]	; 0x110
 800022a:	f36f 0341 	bfc	r3, #1, #1
 800022e:	f882 3110 	strb.w	r3, [r2, #272]	; 0x110
	FlagInit->FrameBits.Flag_Frame_2 = 0;
 8000232:	687a      	ldr	r2, [r7, #4]
 8000234:	f892 3110 	ldrb.w	r3, [r2, #272]	; 0x110
 8000238:	f36f 0382 	bfc	r3, #2, #1
 800023c:	f882 3110 	strb.w	r3, [r2, #272]	; 0x110
	FlagInit->FrameBits.Flag_Frame_3 = 0;
 8000240:	687a      	ldr	r2, [r7, #4]
 8000242:	f892 3110 	ldrb.w	r3, [r2, #272]	; 0x110
 8000246:	f36f 03c3 	bfc	r3, #3, #1
 800024a:	f882 3110 	strb.w	r3, [r2, #272]	; 0x110
	FlagInit->FrameBits.Flag_Frame_4 = 0;
 800024e:	687a      	ldr	r2, [r7, #4]
 8000250:	f892 3110 	ldrb.w	r3, [r2, #272]	; 0x110
 8000254:	f36f 1304 	bfc	r3, #4, #1
 8000258:	f882 3110 	strb.w	r3, [r2, #272]	; 0x110
	FlagInit->FrameBits.Flag_Frame_5 = 0;
 800025c:	687a      	ldr	r2, [r7, #4]
 800025e:	f892 3110 	ldrb.w	r3, [r2, #272]	; 0x110
 8000262:	f36f 1345 	bfc	r3, #5, #1
 8000266:	f882 3110 	strb.w	r3, [r2, #272]	; 0x110
	FlagInit->FrameBits.Flag_Frame_6 = 0;
 800026a:	687a      	ldr	r2, [r7, #4]
 800026c:	f892 3110 	ldrb.w	r3, [r2, #272]	; 0x110
 8000270:	f36f 1386 	bfc	r3, #6, #1
 8000274:	f882 3110 	strb.w	r3, [r2, #272]	; 0x110
	FlagInit->FrameBits.Flag_Frame_7 = 0;
 8000278:	687a      	ldr	r2, [r7, #4]
 800027a:	f892 3110 	ldrb.w	r3, [r2, #272]	; 0x110
 800027e:	f36f 13c7 	bfc	r3, #7, #1
 8000282:	f882 3110 	strb.w	r3, [r2, #272]	; 0x110
	for(int i=0; i<16;i++)
 8000286:	2300      	movs	r3, #0
 8000288:	61fb      	str	r3, [r7, #28]
 800028a:	e012      	b.n	80002b2 <FlagsFrameHandle_Init+0xb4>
	{
		FlagInit->FlagID[i]=DefaultFlagID;
 800028c:	6879      	ldr	r1, [r7, #4]
 800028e:	69fa      	ldr	r2, [r7, #28]
 8000290:	4613      	mov	r3, r2
 8000292:	011b      	lsls	r3, r3, #4
 8000294:	4413      	add	r3, r2
 8000296:	440b      	add	r3, r1
 8000298:	461d      	mov	r5, r3
 800029a:	f107 0408 	add.w	r4, r7, #8
 800029e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80002a0:	6028      	str	r0, [r5, #0]
 80002a2:	6069      	str	r1, [r5, #4]
 80002a4:	60aa      	str	r2, [r5, #8]
 80002a6:	60eb      	str	r3, [r5, #12]
 80002a8:	7823      	ldrb	r3, [r4, #0]
 80002aa:	742b      	strb	r3, [r5, #16]
	for(int i=0; i<16;i++)
 80002ac:	69fb      	ldr	r3, [r7, #28]
 80002ae:	3301      	adds	r3, #1
 80002b0:	61fb      	str	r3, [r7, #28]
 80002b2:	69fb      	ldr	r3, [r7, #28]
 80002b4:	2b0f      	cmp	r3, #15
 80002b6:	dde9      	ble.n	800028c <FlagsFrameHandle_Init+0x8e>
	}
}
 80002b8:	bf00      	nop
 80002ba:	bf00      	nop
 80002bc:	3724      	adds	r7, #36	; 0x24
 80002be:	46bd      	mov	sp, r7
 80002c0:	bcb0      	pop	{r4, r5, r7}
 80002c2:	4770      	bx	lr

080002c4 <CAN_ProcessRxBuffer>:
	while (HAL_CAN_IsTxMessagePending(&hcan, Txmailbox))
		;
	return HAL_OK;
}

void CAN_ProcessRxBuffer(FlagFrameHandle *FlagHandle, uint8_t ID ,CANBufferHandleStruct *RxBuffer, uint8_t *DataPhysical, FlagRecDataEnum *FlagRecHandle){
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b088      	sub	sp, #32
 80002c8:	af02      	add	r7, sp, #8
 80002ca:	60f8      	str	r0, [r7, #12]
 80002cc:	607a      	str	r2, [r7, #4]
 80002ce:	603b      	str	r3, [r7, #0]
 80002d0:	460b      	mov	r3, r1
 80002d2:	72fb      	strb	r3, [r7, #11]
	uint8_t FrameType = 0;
 80002d4:	2300      	movs	r3, #0
 80002d6:	75fb      	strb	r3, [r7, #23]
	RxBuffer->NodeHandle[ID].NodeIndex++;
 80002d8:	7afa      	ldrb	r2, [r7, #11]
 80002da:	6879      	ldr	r1, [r7, #4]
 80002dc:	4613      	mov	r3, r2
 80002de:	00db      	lsls	r3, r3, #3
 80002e0:	4413      	add	r3, r2
 80002e2:	00db      	lsls	r3, r3, #3
 80002e4:	1a9b      	subs	r3, r3, r2
 80002e6:	440b      	add	r3, r1
 80002e8:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	3301      	adds	r3, #1
 80002f0:	b2d8      	uxtb	r0, r3
 80002f2:	6879      	ldr	r1, [r7, #4]
 80002f4:	4613      	mov	r3, r2
 80002f6:	00db      	lsls	r3, r3, #3
 80002f8:	4413      	add	r3, r2
 80002fa:	00db      	lsls	r3, r3, #3
 80002fc:	1a9b      	subs	r3, r3, r2
 80002fe:	440b      	add	r3, r1
 8000300:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8000304:	4602      	mov	r2, r0
 8000306:	701a      	strb	r2, [r3, #0]
		for (; FrameType < RxBuffer->NodeHandle[ID].NumberOfFrame;
 8000308:	e00b      	b.n	8000322 <CAN_ProcessRxBuffer+0x5e>
				FrameType++) {
			CAN_ProcessFrame(FlagHandle, ID, RxBuffer, FrameType, DataPhysical);
 800030a:	7dfa      	ldrb	r2, [r7, #23]
 800030c:	7af9      	ldrb	r1, [r7, #11]
 800030e:	683b      	ldr	r3, [r7, #0]
 8000310:	9300      	str	r3, [sp, #0]
 8000312:	4613      	mov	r3, r2
 8000314:	687a      	ldr	r2, [r7, #4]
 8000316:	68f8      	ldr	r0, [r7, #12]
 8000318:	f000 f8b1 	bl	800047e <CAN_ProcessFrame>
				FrameType++) {
 800031c:	7dfb      	ldrb	r3, [r7, #23]
 800031e:	3301      	adds	r3, #1
 8000320:	75fb      	strb	r3, [r7, #23]
		for (; FrameType < RxBuffer->NodeHandle[ID].NumberOfFrame;
 8000322:	7afa      	ldrb	r2, [r7, #11]
 8000324:	6879      	ldr	r1, [r7, #4]
 8000326:	4613      	mov	r3, r2
 8000328:	00db      	lsls	r3, r3, #3
 800032a:	4413      	add	r3, r2
 800032c:	00db      	lsls	r3, r3, #3
 800032e:	1a9b      	subs	r3, r3, r2
 8000330:	440b      	add	r3, r1
 8000332:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	7dfa      	ldrb	r2, [r7, #23]
 800033a:	429a      	cmp	r2, r3
 800033c:	d3e5      	bcc.n	800030a <CAN_ProcessRxBuffer+0x46>
		}
		if (RxBuffer->NodeHandle[ID].NodeIndex
 800033e:	7afa      	ldrb	r2, [r7, #11]
 8000340:	6879      	ldr	r1, [r7, #4]
 8000342:	4613      	mov	r3, r2
 8000344:	00db      	lsls	r3, r3, #3
 8000346:	4413      	add	r3, r2
 8000348:	00db      	lsls	r3, r3, #3
 800034a:	1a9b      	subs	r3, r3, r2
 800034c:	440b      	add	r3, r1
 800034e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8000352:	7819      	ldrb	r1, [r3, #0]
				== RxBuffer->NodeHandle[ID].NumberOfFrame) {
 8000354:	7afa      	ldrb	r2, [r7, #11]
 8000356:	6878      	ldr	r0, [r7, #4]
 8000358:	4613      	mov	r3, r2
 800035a:	00db      	lsls	r3, r3, #3
 800035c:	4413      	add	r3, r2
 800035e:	00db      	lsls	r3, r3, #3
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4403      	add	r3, r0
 8000364:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8000368:	781b      	ldrb	r3, [r3, #0]
		if (RxBuffer->NodeHandle[ID].NodeIndex
 800036a:	4299      	cmp	r1, r3
 800036c:	f040 8083 	bne.w	8000476 <CAN_ProcessRxBuffer+0x1b2>
			if (FlagHandle->FlagID[ID].SumOfFlag
 8000370:	7afa      	ldrb	r2, [r7, #11]
 8000372:	68f9      	ldr	r1, [r7, #12]
 8000374:	4613      	mov	r3, r2
 8000376:	011b      	lsls	r3, r3, #4
 8000378:	4413      	add	r3, r2
 800037a:	440b      	add	r3, r1
 800037c:	3308      	adds	r3, #8
 800037e:	7819      	ldrb	r1, [r3, #0]
					== RxBuffer->NodeHandle[ID].NumberOfFrame) {
 8000380:	7afa      	ldrb	r2, [r7, #11]
 8000382:	6878      	ldr	r0, [r7, #4]
 8000384:	4613      	mov	r3, r2
 8000386:	00db      	lsls	r3, r3, #3
 8000388:	4413      	add	r3, r2
 800038a:	00db      	lsls	r3, r3, #3
 800038c:	1a9b      	subs	r3, r3, r2
 800038e:	4403      	add	r3, r0
 8000390:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8000394:	781b      	ldrb	r3, [r3, #0]
			if (FlagHandle->FlagID[ID].SumOfFlag
 8000396:	4299      	cmp	r1, r3
 8000398:	d143      	bne.n	8000422 <CAN_ProcessRxBuffer+0x15e>
				if(*FlagRecHandle == REC_SUCCESS){
 800039a:	6a3b      	ldr	r3, [r7, #32]
 800039c:	781b      	ldrb	r3, [r3, #0]
 800039e:	2b03      	cmp	r3, #3
 80003a0:	d169      	bne.n	8000476 <CAN_ProcessRxBuffer+0x1b2>
				RxBuffer->NodeHandle[ID].NodeIndex=0;
 80003a2:	7afa      	ldrb	r2, [r7, #11]
 80003a4:	6879      	ldr	r1, [r7, #4]
 80003a6:	4613      	mov	r3, r2
 80003a8:	00db      	lsls	r3, r3, #3
 80003aa:	4413      	add	r3, r2
 80003ac:	00db      	lsls	r3, r3, #3
 80003ae:	1a9b      	subs	r3, r3, r2
 80003b0:	440b      	add	r3, r1
 80003b2:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80003b6:	2200      	movs	r2, #0
 80003b8:	701a      	strb	r2, [r3, #0]
				RxBuffer->NodeHandle[ID].DuplicateFrame = 0;
 80003ba:	7afa      	ldrb	r2, [r7, #11]
 80003bc:	6879      	ldr	r1, [r7, #4]
 80003be:	4613      	mov	r3, r2
 80003c0:	00db      	lsls	r3, r3, #3
 80003c2:	4413      	add	r3, r2
 80003c4:	00db      	lsls	r3, r3, #3
 80003c6:	1a9b      	subs	r3, r3, r2
 80003c8:	440b      	add	r3, r1
 80003ca:	f203 130b 	addw	r3, r3, #267	; 0x10b
 80003ce:	2200      	movs	r2, #0
 80003d0:	701a      	strb	r2, [r3, #0]
				FlagHandle->FlagID[ID].SumOfFlag=0;
 80003d2:	7afa      	ldrb	r2, [r7, #11]
 80003d4:	68f9      	ldr	r1, [r7, #12]
 80003d6:	4613      	mov	r3, r2
 80003d8:	011b      	lsls	r3, r3, #4
 80003da:	4413      	add	r3, r2
 80003dc:	440b      	add	r3, r1
 80003de:	3308      	adds	r3, #8
 80003e0:	2200      	movs	r2, #0
 80003e2:	701a      	strb	r2, [r3, #0]
				for(FrameType=0;FrameType<RxBuffer->NodeHandle[ID].NumberOfFrame;FrameType++){
 80003e4:	2300      	movs	r3, #0
 80003e6:	75fb      	strb	r3, [r7, #23]
 80003e8:	e00c      	b.n	8000404 <CAN_ProcessRxBuffer+0x140>
					FlagHandle->FlagID[ID].FlagFrameFull[FrameType]=0;
 80003ea:	7afa      	ldrb	r2, [r7, #11]
 80003ec:	7df9      	ldrb	r1, [r7, #23]
 80003ee:	68f8      	ldr	r0, [r7, #12]
 80003f0:	4613      	mov	r3, r2
 80003f2:	011b      	lsls	r3, r3, #4
 80003f4:	4413      	add	r3, r2
 80003f6:	4403      	add	r3, r0
 80003f8:	440b      	add	r3, r1
 80003fa:	2200      	movs	r2, #0
 80003fc:	701a      	strb	r2, [r3, #0]
				for(FrameType=0;FrameType<RxBuffer->NodeHandle[ID].NumberOfFrame;FrameType++){
 80003fe:	7dfb      	ldrb	r3, [r7, #23]
 8000400:	3301      	adds	r3, #1
 8000402:	75fb      	strb	r3, [r7, #23]
 8000404:	7afa      	ldrb	r2, [r7, #11]
 8000406:	6879      	ldr	r1, [r7, #4]
 8000408:	4613      	mov	r3, r2
 800040a:	00db      	lsls	r3, r3, #3
 800040c:	4413      	add	r3, r2
 800040e:	00db      	lsls	r3, r3, #3
 8000410:	1a9b      	subs	r3, r3, r2
 8000412:	440b      	add	r3, r1
 8000414:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	7dfa      	ldrb	r2, [r7, #23]
 800041c:	429a      	cmp	r2, r3
 800041e:	d3e4      	bcc.n	80003ea <CAN_ProcessRxBuffer+0x126>
						FlagHandle->FlagID[ID].FrameError[FrameType]=1;
					}
				}
			}
		}
}
 8000420:	e029      	b.n	8000476 <CAN_ProcessRxBuffer+0x1b2>
				for (FrameType = 0;
 8000422:	2300      	movs	r3, #0
 8000424:	75fb      	strb	r3, [r7, #23]
 8000426:	e018      	b.n	800045a <CAN_ProcessRxBuffer+0x196>
					if (FlagHandle->FlagID[ID].FlagFrameFull[FrameType] == 0) {
 8000428:	7afa      	ldrb	r2, [r7, #11]
 800042a:	7df9      	ldrb	r1, [r7, #23]
 800042c:	68f8      	ldr	r0, [r7, #12]
 800042e:	4613      	mov	r3, r2
 8000430:	011b      	lsls	r3, r3, #4
 8000432:	4413      	add	r3, r2
 8000434:	4403      	add	r3, r0
 8000436:	440b      	add	r3, r1
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b00      	cmp	r3, #0
 800043c:	d10a      	bne.n	8000454 <CAN_ProcessRxBuffer+0x190>
						FlagHandle->FlagID[ID].FrameError[FrameType]=1;
 800043e:	7afa      	ldrb	r2, [r7, #11]
 8000440:	7df9      	ldrb	r1, [r7, #23]
 8000442:	68f8      	ldr	r0, [r7, #12]
 8000444:	4613      	mov	r3, r2
 8000446:	011b      	lsls	r3, r3, #4
 8000448:	4413      	add	r3, r2
 800044a:	4403      	add	r3, r0
 800044c:	440b      	add	r3, r1
 800044e:	3309      	adds	r3, #9
 8000450:	2201      	movs	r2, #1
 8000452:	701a      	strb	r2, [r3, #0]
						FrameType++) {
 8000454:	7dfb      	ldrb	r3, [r7, #23]
 8000456:	3301      	adds	r3, #1
 8000458:	75fb      	strb	r3, [r7, #23]
						FrameType <= RxBuffer->NodeHandle[ID].NumberOfFrame;
 800045a:	7afa      	ldrb	r2, [r7, #11]
 800045c:	6879      	ldr	r1, [r7, #4]
 800045e:	4613      	mov	r3, r2
 8000460:	00db      	lsls	r3, r3, #3
 8000462:	4413      	add	r3, r2
 8000464:	00db      	lsls	r3, r3, #3
 8000466:	1a9b      	subs	r3, r3, r2
 8000468:	440b      	add	r3, r1
 800046a:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	7dfa      	ldrb	r2, [r7, #23]
 8000472:	429a      	cmp	r2, r3
 8000474:	d9d8      	bls.n	8000428 <CAN_ProcessRxBuffer+0x164>
}
 8000476:	bf00      	nop
 8000478:	3718      	adds	r7, #24
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}

0800047e <CAN_ProcessFrame>:

void CAN_ProcessFrame(FlagFrameHandle *FlagHandle, uint8_t ID,
		CANBufferHandleStruct *RxBuffer, uint8_t FrameType, uint8_t *Data) {
 800047e:	b590      	push	{r4, r7, lr}
 8000480:	b085      	sub	sp, #20
 8000482:	af00      	add	r7, sp, #0
 8000484:	60f8      	str	r0, [r7, #12]
 8000486:	607a      	str	r2, [r7, #4]
 8000488:	461a      	mov	r2, r3
 800048a:	460b      	mov	r3, r1
 800048c:	72fb      	strb	r3, [r7, #11]
 800048e:	4613      	mov	r3, r2
 8000490:	72bb      	strb	r3, [r7, #10]
	if (RxBuffer->NodeHandle[ID].FrameType == FrameType
 8000492:	7afa      	ldrb	r2, [r7, #11]
 8000494:	6879      	ldr	r1, [r7, #4]
 8000496:	4613      	mov	r3, r2
 8000498:	00db      	lsls	r3, r3, #3
 800049a:	4413      	add	r3, r2
 800049c:	00db      	lsls	r3, r3, #3
 800049e:	1a9b      	subs	r3, r3, r2
 80004a0:	440b      	add	r3, r1
 80004a2:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	7aba      	ldrb	r2, [r7, #10]
 80004aa:	429a      	cmp	r2, r3
 80004ac:	d14c      	bne.n	8000548 <CAN_ProcessFrame+0xca>
			&& FlagHandle->FlagID[ID].FlagFrameFull[FrameType] == 0) {
 80004ae:	7afa      	ldrb	r2, [r7, #11]
 80004b0:	7ab9      	ldrb	r1, [r7, #10]
 80004b2:	68f8      	ldr	r0, [r7, #12]
 80004b4:	4613      	mov	r3, r2
 80004b6:	011b      	lsls	r3, r3, #4
 80004b8:	4413      	add	r3, r2
 80004ba:	4403      	add	r3, r0
 80004bc:	440b      	add	r3, r1
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d141      	bne.n	8000548 <CAN_ProcessFrame+0xca>
		memcpy(
				RxBuffer->NodeHandle[ID].NodeBuffer[RxBuffer->NodeHandle[ID].FrameType],
 80004c4:	7afa      	ldrb	r2, [r7, #11]
 80004c6:	7af9      	ldrb	r1, [r7, #11]
 80004c8:	6878      	ldr	r0, [r7, #4]
 80004ca:	460b      	mov	r3, r1
 80004cc:	00db      	lsls	r3, r3, #3
 80004ce:	440b      	add	r3, r1
 80004d0:	00db      	lsls	r3, r3, #3
 80004d2:	1a5b      	subs	r3, r3, r1
 80004d4:	4403      	add	r3, r0
 80004d6:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	00d9      	lsls	r1, r3, #3
 80004de:	4613      	mov	r3, r2
 80004e0:	00db      	lsls	r3, r3, #3
 80004e2:	4413      	add	r3, r2
 80004e4:	00db      	lsls	r3, r3, #3
 80004e6:	1a9b      	subs	r3, r3, r2
 80004e8:	440b      	add	r3, r1
 80004ea:	33c8      	adds	r3, #200	; 0xc8
 80004ec:	687a      	ldr	r2, [r7, #4]
 80004ee:	4413      	add	r3, r2
 80004f0:	3303      	adds	r3, #3
		memcpy(
 80004f2:	2208      	movs	r2, #8
 80004f4:	6a39      	ldr	r1, [r7, #32]
 80004f6:	4618      	mov	r0, r3
 80004f8:	f002 faa4 	bl	8002a44 <memcpy>
				Data, CAN_MAX_DATA);
		FlagHandle->FlagID[ID].FlagFrameFull[FrameType] = 1;
 80004fc:	7afa      	ldrb	r2, [r7, #11]
 80004fe:	7ab9      	ldrb	r1, [r7, #10]
 8000500:	68f8      	ldr	r0, [r7, #12]
 8000502:	4613      	mov	r3, r2
 8000504:	011b      	lsls	r3, r3, #4
 8000506:	4413      	add	r3, r2
 8000508:	4403      	add	r3, r0
 800050a:	440b      	add	r3, r1
 800050c:	2201      	movs	r2, #1
 800050e:	701a      	strb	r2, [r3, #0]
		FlagHandle->FlagID[ID].SumOfFlag += FlagHandle->FlagID[ID].FlagFrameFull[FrameType];
 8000510:	7afa      	ldrb	r2, [r7, #11]
 8000512:	68f9      	ldr	r1, [r7, #12]
 8000514:	4613      	mov	r3, r2
 8000516:	011b      	lsls	r3, r3, #4
 8000518:	4413      	add	r3, r2
 800051a:	440b      	add	r3, r1
 800051c:	3308      	adds	r3, #8
 800051e:	7819      	ldrb	r1, [r3, #0]
 8000520:	7afa      	ldrb	r2, [r7, #11]
 8000522:	7ab8      	ldrb	r0, [r7, #10]
 8000524:	68fc      	ldr	r4, [r7, #12]
 8000526:	4613      	mov	r3, r2
 8000528:	011b      	lsls	r3, r3, #4
 800052a:	4413      	add	r3, r2
 800052c:	4423      	add	r3, r4
 800052e:	4403      	add	r3, r0
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	7afa      	ldrb	r2, [r7, #11]
 8000534:	440b      	add	r3, r1
 8000536:	b2d8      	uxtb	r0, r3
 8000538:	68f9      	ldr	r1, [r7, #12]
 800053a:	4613      	mov	r3, r2
 800053c:	011b      	lsls	r3, r3, #4
 800053e:	4413      	add	r3, r2
 8000540:	440b      	add	r3, r1
 8000542:	3308      	adds	r3, #8
 8000544:	4602      	mov	r2, r0
 8000546:	701a      	strb	r2, [r3, #0]
	}
}
 8000548:	bf00      	nop
 800054a:	3714      	adds	r7, #20
 800054c:	46bd      	mov	sp, r7
 800054e:	bd90      	pop	{r4, r7, pc}

08000550 <CAN_Recieve_Physical>:
		BufferIndex = 0;
	}
	return HAL_OK;
}

uint8_t CAN_Recieve_Physical(CAN_RxHeaderTypeDef *RxHeader, uint8_t *Data) {
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
 8000558:	6039      	str	r1, [r7, #0]

	while (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) == 0)
 800055a:	bf00      	nop
 800055c:	2100      	movs	r1, #0
 800055e:	480b      	ldr	r0, [pc, #44]	; (800058c <CAN_Recieve_Physical+0x3c>)
 8000560:	f001 f83f 	bl	80015e2 <HAL_CAN_GetRxFifoFillLevel>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d0f8      	beq.n	800055c <CAN_Recieve_Physical+0xc>
		;
	if (HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, RxHeader, Data) != HAL_OK) {
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	687a      	ldr	r2, [r7, #4]
 800056e:	2100      	movs	r1, #0
 8000570:	4806      	ldr	r0, [pc, #24]	; (800058c <CAN_Recieve_Physical+0x3c>)
 8000572:	f000 ff15 	bl	80013a0 <HAL_CAN_GetRxMessage>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <CAN_Recieve_Physical+0x30>
		Error_Handler(); //get message from RAM;
 800057c:	f000 fb16 	bl	8000bac <Error_Handler>
	}
	return HAL_OK;
 8000580:	2300      	movs	r3, #0
}
 8000582:	4618      	mov	r0, r3
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	20000028 	.word	0x20000028

08000590 <CAN_Receive_DataLink>:

uint8_t CAN_Receive_DataLink(CAN_RxHeaderTypeDef *RxHeader,
		FlagFrameHandle *FlagHandle, CANBufferHandleStruct *RxBuffer,
		FlagRecDataEnum *FlagRecHandle) {
 8000590:	b580      	push	{r7, lr}
 8000592:	b08a      	sub	sp, #40	; 0x28
 8000594:	af02      	add	r7, sp, #8
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
 800059c:	603b      	str	r3, [r7, #0]

	uint8_t DataPhysical[CAN_MAX_DATA] = { 0 }; // init local DataPhysical get data from receive
 800059e:	2300      	movs	r3, #0
 80005a0:	617b      	str	r3, [r7, #20]
 80005a2:	2300      	movs	r3, #0
 80005a4:	61bb      	str	r3, [r7, #24]
	uint16_t StdID = 0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	83fb      	strh	r3, [r7, #30]
	uint8_t ID = 0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	777b      	strb	r3, [r7, #29]

	CAN_Recieve_Physical(RxHeader, DataPhysical); // get Data
 80005ae:	f107 0314 	add.w	r3, r7, #20
 80005b2:	4619      	mov	r1, r3
 80005b4:	68f8      	ldr	r0, [r7, #12]
 80005b6:	f7ff ffcb 	bl	8000550 <CAN_Recieve_Physical>

	StdID = RxHeader->StdId;
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	83fb      	strh	r3, [r7, #30]
	ID = (StdID >> 3) & 15;
 80005c0:	8bfb      	ldrh	r3, [r7, #30]
 80005c2:	08db      	lsrs	r3, r3, #3
 80005c4:	b29b      	uxth	r3, r3
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	f003 030f 	and.w	r3, r3, #15
 80005cc:	777b      	strb	r3, [r7, #29]
	RxBuffer->NodeHandle[ID].FrameType = StdID & 7; // get frame type store into Rxbuffer struct with Node ID manage frame type
 80005ce:	8bfb      	ldrh	r3, [r7, #30]
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	7f7a      	ldrb	r2, [r7, #29]
 80005d4:	f003 0307 	and.w	r3, r3, #7
 80005d8:	b2d8      	uxtb	r0, r3
 80005da:	6879      	ldr	r1, [r7, #4]
 80005dc:	4613      	mov	r3, r2
 80005de:	00db      	lsls	r3, r3, #3
 80005e0:	4413      	add	r3, r2
 80005e2:	00db      	lsls	r3, r3, #3
 80005e4:	1a9b      	subs	r3, r3, r2
 80005e6:	440b      	add	r3, r1
 80005e8:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80005ec:	4602      	mov	r2, r0
 80005ee:	701a      	strb	r2, [r3, #0]
	if (RxBuffer->NodeHandle[ID].FrameType == SET_UP_FRAME
 80005f0:	7f7a      	ldrb	r2, [r7, #29]
 80005f2:	6879      	ldr	r1, [r7, #4]
 80005f4:	4613      	mov	r3, r2
 80005f6:	00db      	lsls	r3, r3, #3
 80005f8:	4413      	add	r3, r2
 80005fa:	00db      	lsls	r3, r3, #3
 80005fc:	1a9b      	subs	r3, r3, r2
 80005fe:	440b      	add	r3, r1
 8000600:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d177      	bne.n	80006fa <CAN_Receive_DataLink+0x16a>
			&& RxBuffer->NodeHandle[ID].DuplicateFrame != 1) { // check if frame type = SET_UP_FRAME
 800060a:	7f7a      	ldrb	r2, [r7, #29]
 800060c:	6879      	ldr	r1, [r7, #4]
 800060e:	4613      	mov	r3, r2
 8000610:	00db      	lsls	r3, r3, #3
 8000612:	4413      	add	r3, r2
 8000614:	00db      	lsls	r3, r3, #3
 8000616:	1a9b      	subs	r3, r3, r2
 8000618:	440b      	add	r3, r1
 800061a:	f203 130b 	addw	r3, r3, #267	; 0x10b
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b01      	cmp	r3, #1
 8000622:	d06a      	beq.n	80006fa <CAN_Receive_DataLink+0x16a>
		RxBuffer->NodeHandle[ID].DuplicateFrame = 1; 			// check send multiple SET_UP_frame
 8000624:	7f7a      	ldrb	r2, [r7, #29]
 8000626:	6879      	ldr	r1, [r7, #4]
 8000628:	4613      	mov	r3, r2
 800062a:	00db      	lsls	r3, r3, #3
 800062c:	4413      	add	r3, r2
 800062e:	00db      	lsls	r3, r3, #3
 8000630:	1a9b      	subs	r3, r3, r2
 8000632:	440b      	add	r3, r1
 8000634:	f203 130b 	addw	r3, r3, #267	; 0x10b
 8000638:	2201      	movs	r2, #1
 800063a:	701a      	strb	r2, [r3, #0]
		RxBuffer->NodeHandle[ID].PacketLength = DataPhysical[6];
 800063c:	7f7a      	ldrb	r2, [r7, #29]
 800063e:	7eb8      	ldrb	r0, [r7, #26]
 8000640:	6879      	ldr	r1, [r7, #4]
 8000642:	4613      	mov	r3, r2
 8000644:	00db      	lsls	r3, r3, #3
 8000646:	4413      	add	r3, r2
 8000648:	00db      	lsls	r3, r3, #3
 800064a:	1a9b      	subs	r3, r3, r2
 800064c:	440b      	add	r3, r1
 800064e:	f203 130d 	addw	r3, r3, #269	; 0x10d
 8000652:	4602      	mov	r2, r0
 8000654:	701a      	strb	r2, [r3, #0]
		RxBuffer->NodeHandle[ID].CRCValue = DataPhysical[7];
 8000656:	7f7a      	ldrb	r2, [r7, #29]
 8000658:	7ef8      	ldrb	r0, [r7, #27]
 800065a:	6879      	ldr	r1, [r7, #4]
 800065c:	4613      	mov	r3, r2
 800065e:	00db      	lsls	r3, r3, #3
 8000660:	4413      	add	r3, r2
 8000662:	00db      	lsls	r3, r3, #3
 8000664:	1a9b      	subs	r3, r3, r2
 8000666:	440b      	add	r3, r1
 8000668:	f203 130f 	addw	r3, r3, #271	; 0x10f
 800066c:	4602      	mov	r2, r0
 800066e:	701a      	strb	r2, [r3, #0]
		if (RxBuffer->NodeHandle[ID].PacketLength % 8 == 0) {
 8000670:	7f7a      	ldrb	r2, [r7, #29]
 8000672:	6879      	ldr	r1, [r7, #4]
 8000674:	4613      	mov	r3, r2
 8000676:	00db      	lsls	r3, r3, #3
 8000678:	4413      	add	r3, r2
 800067a:	00db      	lsls	r3, r3, #3
 800067c:	1a9b      	subs	r3, r3, r2
 800067e:	440b      	add	r3, r1
 8000680:	f203 130d 	addw	r3, r3, #269	; 0x10d
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	f003 0307 	and.w	r3, r3, #7
 800068a:	b2db      	uxtb	r3, r3
 800068c:	2b00      	cmp	r3, #0
 800068e:	d119      	bne.n	80006c4 <CAN_Receive_DataLink+0x134>
			RxBuffer->NodeHandle[ID].NumberOfFrame =
					(RxBuffer->NodeHandle[ID].PacketLength / 8);
 8000690:	7f7a      	ldrb	r2, [r7, #29]
 8000692:	6879      	ldr	r1, [r7, #4]
 8000694:	4613      	mov	r3, r2
 8000696:	00db      	lsls	r3, r3, #3
 8000698:	4413      	add	r3, r2
 800069a:	00db      	lsls	r3, r3, #3
 800069c:	1a9b      	subs	r3, r3, r2
 800069e:	440b      	add	r3, r1
 80006a0:	f203 130d 	addw	r3, r3, #269	; 0x10d
 80006a4:	781b      	ldrb	r3, [r3, #0]
			RxBuffer->NodeHandle[ID].NumberOfFrame =
 80006a6:	7f7a      	ldrb	r2, [r7, #29]
 80006a8:	08db      	lsrs	r3, r3, #3
 80006aa:	b2d8      	uxtb	r0, r3
 80006ac:	6879      	ldr	r1, [r7, #4]
 80006ae:	4613      	mov	r3, r2
 80006b0:	00db      	lsls	r3, r3, #3
 80006b2:	4413      	add	r3, r2
 80006b4:	00db      	lsls	r3, r3, #3
 80006b6:	1a9b      	subs	r3, r3, r2
 80006b8:	440b      	add	r3, r1
 80006ba:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80006be:	4602      	mov	r2, r0
 80006c0:	701a      	strb	r2, [r3, #0]
 80006c2:	e01a      	b.n	80006fa <CAN_Receive_DataLink+0x16a>
		} else {
			RxBuffer->NodeHandle[ID].NumberOfFrame =
					(RxBuffer->NodeHandle[ID].PacketLength / 8) + 1;
 80006c4:	7f7a      	ldrb	r2, [r7, #29]
 80006c6:	6879      	ldr	r1, [r7, #4]
 80006c8:	4613      	mov	r3, r2
 80006ca:	00db      	lsls	r3, r3, #3
 80006cc:	4413      	add	r3, r2
 80006ce:	00db      	lsls	r3, r3, #3
 80006d0:	1a9b      	subs	r3, r3, r2
 80006d2:	440b      	add	r3, r1
 80006d4:	f203 130d 	addw	r3, r3, #269	; 0x10d
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	08db      	lsrs	r3, r3, #3
 80006dc:	b2db      	uxtb	r3, r3
			RxBuffer->NodeHandle[ID].NumberOfFrame =
 80006de:	7f7a      	ldrb	r2, [r7, #29]
					(RxBuffer->NodeHandle[ID].PacketLength / 8) + 1;
 80006e0:	3301      	adds	r3, #1
 80006e2:	b2d8      	uxtb	r0, r3
			RxBuffer->NodeHandle[ID].NumberOfFrame =
 80006e4:	6879      	ldr	r1, [r7, #4]
 80006e6:	4613      	mov	r3, r2
 80006e8:	00db      	lsls	r3, r3, #3
 80006ea:	4413      	add	r3, r2
 80006ec:	00db      	lsls	r3, r3, #3
 80006ee:	1a9b      	subs	r3, r3, r2
 80006f0:	440b      	add	r3, r1
 80006f2:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80006f6:	4602      	mov	r2, r0
 80006f8:	701a      	strb	r2, [r3, #0]
	} else {
		if (RxBuffer->NodeHandle[ID].FrameType == SET_UP_FRAME) {
			//FlagFrameError
		}
	}
	switch (ID) {
 80006fa:	7f7b      	ldrb	r3, [r7, #29]
 80006fc:	2b0f      	cmp	r3, #15
 80006fe:	f200 80bd 	bhi.w	800087c <CAN_Receive_DataLink+0x2ec>
 8000702:	a201      	add	r2, pc, #4	; (adr r2, 8000708 <CAN_Receive_DataLink+0x178>)
 8000704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000708:	08000867 	.word	0x08000867
 800070c:	0800087d 	.word	0x0800087d
 8000710:	0800087d 	.word	0x0800087d
 8000714:	08000851 	.word	0x08000851
 8000718:	0800083b 	.word	0x0800083b
 800071c:	0800080f 	.word	0x0800080f
 8000720:	080007f9 	.word	0x080007f9
 8000724:	08000825 	.word	0x08000825
 8000728:	080007e3 	.word	0x080007e3
 800072c:	080007cd 	.word	0x080007cd
 8000730:	080007b7 	.word	0x080007b7
 8000734:	080007a1 	.word	0x080007a1
 8000738:	0800078b 	.word	0x0800078b
 800073c:	08000775 	.word	0x08000775
 8000740:	0800075f 	.word	0x0800075f
 8000744:	08000749 	.word	0x08000749
	case OBSTALCE8:
		CAN_ProcessRxBuffer(FlagHandle, ID, RxBuffer, DataPhysical, FlagRecHandle);
 8000748:	f107 0214 	add.w	r2, r7, #20
 800074c:	7f79      	ldrb	r1, [r7, #29]
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	9300      	str	r3, [sp, #0]
 8000752:	4613      	mov	r3, r2
 8000754:	687a      	ldr	r2, [r7, #4]
 8000756:	68b8      	ldr	r0, [r7, #8]
 8000758:	f7ff fdb4 	bl	80002c4 <CAN_ProcessRxBuffer>
		break;
 800075c:	e08e      	b.n	800087c <CAN_Receive_DataLink+0x2ec>
	case OBSTALCE7:
		CAN_ProcessRxBuffer(FlagHandle, ID, RxBuffer, DataPhysical, FlagRecHandle);
 800075e:	f107 0214 	add.w	r2, r7, #20
 8000762:	7f79      	ldrb	r1, [r7, #29]
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	9300      	str	r3, [sp, #0]
 8000768:	4613      	mov	r3, r2
 800076a:	687a      	ldr	r2, [r7, #4]
 800076c:	68b8      	ldr	r0, [r7, #8]
 800076e:	f7ff fda9 	bl	80002c4 <CAN_ProcessRxBuffer>
		break;
 8000772:	e083      	b.n	800087c <CAN_Receive_DataLink+0x2ec>
	case OBSTALCE6:
		CAN_ProcessRxBuffer(FlagHandle, ID, RxBuffer, DataPhysical, FlagRecHandle);
 8000774:	f107 0214 	add.w	r2, r7, #20
 8000778:	7f79      	ldrb	r1, [r7, #29]
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	9300      	str	r3, [sp, #0]
 800077e:	4613      	mov	r3, r2
 8000780:	687a      	ldr	r2, [r7, #4]
 8000782:	68b8      	ldr	r0, [r7, #8]
 8000784:	f7ff fd9e 	bl	80002c4 <CAN_ProcessRxBuffer>
		break;
 8000788:	e078      	b.n	800087c <CAN_Receive_DataLink+0x2ec>
	case OBSTALCE5:
		CAN_ProcessRxBuffer(FlagHandle, ID, RxBuffer, DataPhysical, FlagRecHandle);
 800078a:	f107 0214 	add.w	r2, r7, #20
 800078e:	7f79      	ldrb	r1, [r7, #29]
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	9300      	str	r3, [sp, #0]
 8000794:	4613      	mov	r3, r2
 8000796:	687a      	ldr	r2, [r7, #4]
 8000798:	68b8      	ldr	r0, [r7, #8]
 800079a:	f7ff fd93 	bl	80002c4 <CAN_ProcessRxBuffer>
		break;
 800079e:	e06d      	b.n	800087c <CAN_Receive_DataLink+0x2ec>
	case OBSTALCE4:
		CAN_ProcessRxBuffer(FlagHandle, ID, RxBuffer, DataPhysical, FlagRecHandle);
 80007a0:	f107 0214 	add.w	r2, r7, #20
 80007a4:	7f79      	ldrb	r1, [r7, #29]
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	9300      	str	r3, [sp, #0]
 80007aa:	4613      	mov	r3, r2
 80007ac:	687a      	ldr	r2, [r7, #4]
 80007ae:	68b8      	ldr	r0, [r7, #8]
 80007b0:	f7ff fd88 	bl	80002c4 <CAN_ProcessRxBuffer>
		break;
 80007b4:	e062      	b.n	800087c <CAN_Receive_DataLink+0x2ec>
	case OBSTALCE3:
		CAN_ProcessRxBuffer(FlagHandle, ID, RxBuffer, DataPhysical, FlagRecHandle);
 80007b6:	f107 0214 	add.w	r2, r7, #20
 80007ba:	7f79      	ldrb	r1, [r7, #29]
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	9300      	str	r3, [sp, #0]
 80007c0:	4613      	mov	r3, r2
 80007c2:	687a      	ldr	r2, [r7, #4]
 80007c4:	68b8      	ldr	r0, [r7, #8]
 80007c6:	f7ff fd7d 	bl	80002c4 <CAN_ProcessRxBuffer>
		break;
 80007ca:	e057      	b.n	800087c <CAN_Receive_DataLink+0x2ec>
	case OBSTALCE2:
		CAN_ProcessRxBuffer(FlagHandle, ID, RxBuffer, DataPhysical, FlagRecHandle);
 80007cc:	f107 0214 	add.w	r2, r7, #20
 80007d0:	7f79      	ldrb	r1, [r7, #29]
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	9300      	str	r3, [sp, #0]
 80007d6:	4613      	mov	r3, r2
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	68b8      	ldr	r0, [r7, #8]
 80007dc:	f7ff fd72 	bl	80002c4 <CAN_ProcessRxBuffer>
		break;
 80007e0:	e04c      	b.n	800087c <CAN_Receive_DataLink+0x2ec>
	case OBSTALCE1:
		CAN_ProcessRxBuffer(FlagHandle, ID, RxBuffer, DataPhysical, FlagRecHandle);
 80007e2:	f107 0214 	add.w	r2, r7, #20
 80007e6:	7f79      	ldrb	r1, [r7, #29]
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	9300      	str	r3, [sp, #0]
 80007ec:	4613      	mov	r3, r2
 80007ee:	687a      	ldr	r2, [r7, #4]
 80007f0:	68b8      	ldr	r0, [r7, #8]
 80007f2:	f7ff fd67 	bl	80002c4 <CAN_ProcessRxBuffer>
		break;
 80007f6:	e041      	b.n	800087c <CAN_Receive_DataLink+0x2ec>
	case POWER:
		CAN_ProcessRxBuffer(FlagHandle, ID, RxBuffer, DataPhysical, FlagRecHandle);
 80007f8:	f107 0214 	add.w	r2, r7, #20
 80007fc:	7f79      	ldrb	r1, [r7, #29]
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	9300      	str	r3, [sp, #0]
 8000802:	4613      	mov	r3, r2
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	68b8      	ldr	r0, [r7, #8]
 8000808:	f7ff fd5c 	bl	80002c4 <CAN_ProcessRxBuffer>
		break;
 800080c:	e036      	b.n	800087c <CAN_Receive_DataLink+0x2ec>
	case STEERING:
		CAN_ProcessRxBuffer(FlagHandle, ID, RxBuffer, DataPhysical, FlagRecHandle);
 800080e:	f107 0214 	add.w	r2, r7, #20
 8000812:	7f79      	ldrb	r1, [r7, #29]
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	9300      	str	r3, [sp, #0]
 8000818:	4613      	mov	r3, r2
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	68b8      	ldr	r0, [r7, #8]
 800081e:	f7ff fd51 	bl	80002c4 <CAN_ProcessRxBuffer>
		break;
 8000822:	e02b      	b.n	800087c <CAN_Receive_DataLink+0x2ec>
	case MASTER:
		CAN_ProcessRxBuffer(FlagHandle, ID, RxBuffer, DataPhysical, FlagRecHandle);
 8000824:	f107 0214 	add.w	r2, r7, #20
 8000828:	7f79      	ldrb	r1, [r7, #29]
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	9300      	str	r3, [sp, #0]
 800082e:	4613      	mov	r3, r2
 8000830:	687a      	ldr	r2, [r7, #4]
 8000832:	68b8      	ldr	r0, [r7, #8]
 8000834:	f7ff fd46 	bl	80002c4 <CAN_ProcessRxBuffer>
		break;
 8000838:	e020      	b.n	800087c <CAN_Receive_DataLink+0x2ec>
	case LIGHT_GPS:
		CAN_ProcessRxBuffer(FlagHandle, ID, RxBuffer, DataPhysical, FlagRecHandle);
 800083a:	f107 0214 	add.w	r2, r7, #20
 800083e:	7f79      	ldrb	r1, [r7, #29]
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	9300      	str	r3, [sp, #0]
 8000844:	4613      	mov	r3, r2
 8000846:	687a      	ldr	r2, [r7, #4]
 8000848:	68b8      	ldr	r0, [r7, #8]
 800084a:	f7ff fd3b 	bl	80002c4 <CAN_ProcessRxBuffer>
		break;
 800084e:	e015      	b.n	800087c <CAN_Receive_DataLink+0x2ec>
	case ENGINE_CONTROL:
		CAN_ProcessRxBuffer(FlagHandle, ID, RxBuffer, DataPhysical, FlagRecHandle);
 8000850:	f107 0214 	add.w	r2, r7, #20
 8000854:	7f79      	ldrb	r1, [r7, #29]
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	9300      	str	r3, [sp, #0]
 800085a:	4613      	mov	r3, r2
 800085c:	687a      	ldr	r2, [r7, #4]
 800085e:	68b8      	ldr	r0, [r7, #8]
 8000860:	f7ff fd30 	bl	80002c4 <CAN_ProcessRxBuffer>
		break;
 8000864:	e00a      	b.n	800087c <CAN_Receive_DataLink+0x2ec>
	case ALL_NODE:
		CAN_ProcessRxBuffer(FlagHandle, ID, RxBuffer, DataPhysical, FlagRecHandle);
 8000866:	f107 0214 	add.w	r2, r7, #20
 800086a:	7f79      	ldrb	r1, [r7, #29]
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	9300      	str	r3, [sp, #0]
 8000870:	4613      	mov	r3, r2
 8000872:	687a      	ldr	r2, [r7, #4]
 8000874:	68b8      	ldr	r0, [r7, #8]
 8000876:	f7ff fd25 	bl	80002c4 <CAN_ProcessRxBuffer>
		break;
 800087a:	bf00      	nop

	}
	return HAL_OK;
 800087c:	2300      	movs	r3, #0
}
 800087e:	4618      	mov	r0, r3
 8000880:	3720      	adds	r7, #32
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop

08000888 <CAN_Config_filtering>:
//	FlagsDataHandle Flag;
////CAN_Receive_NetWork(Data,&Flag);
//
//	return HAL_OK;
//}
uint32_t CAN_Config_filtering(void) {
 8000888:	b580      	push	{r7, lr}
 800088a:	b08a      	sub	sp, #40	; 0x28
 800088c:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef Can_filter_init;
	Can_filter_init.FilterActivation = ENABLE;
 800088e:	2301      	movs	r3, #1
 8000890:	623b      	str	r3, [r7, #32]
	Can_filter_init.FilterBank = 0;
 8000892:	2300      	movs	r3, #0
 8000894:	617b      	str	r3, [r7, #20]
	Can_filter_init.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000896:	2300      	movs	r3, #0
 8000898:	613b      	str	r3, [r7, #16]
	Can_filter_init.FilterIdHigh = 0x0000;
 800089a:	2300      	movs	r3, #0
 800089c:	603b      	str	r3, [r7, #0]
	Can_filter_init.FilterIdLow = 0x0000;
 800089e:	2300      	movs	r3, #0
 80008a0:	607b      	str	r3, [r7, #4]
	Can_filter_init.FilterMaskIdHigh = 0x0000;
 80008a2:	2300      	movs	r3, #0
 80008a4:	60bb      	str	r3, [r7, #8]
	Can_filter_init.FilterMaskIdLow = 0x0000;
 80008a6:	2300      	movs	r3, #0
 80008a8:	60fb      	str	r3, [r7, #12]
	Can_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61bb      	str	r3, [r7, #24]
	Can_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 80008ae:	2301      	movs	r3, #1
 80008b0:	61fb      	str	r3, [r7, #28]
	if (HAL_CAN_ConfigFilter(&hcan, &Can_filter_init) != HAL_OK) {
 80008b2:	463b      	mov	r3, r7
 80008b4:	4619      	mov	r1, r3
 80008b6:	4806      	ldr	r0, [pc, #24]	; (80008d0 <CAN_Config_filtering+0x48>)
 80008b8:	f000 fc65 	bl	8001186 <HAL_CAN_ConfigFilter>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <CAN_Config_filtering+0x3e>
		Error_Handler();
 80008c2:	f000 f973 	bl	8000bac <Error_Handler>
	}
	return HAL_OK;
 80008c6:	2300      	movs	r3, #0
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3728      	adds	r7, #40	; 0x28
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000028 	.word	0x20000028

080008d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	f5ad 6ddd 	sub.w	sp, sp, #1768	; 0x6e8
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008dc:	f000 fad2 	bl	8000e84 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008e0:	f000 f872 	bl	80009c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e4:	f000 f916 	bl	8000b14 <MX_GPIO_Init>
  MX_CAN_Init();
 80008e8:	f000 f8b4 	bl	8000a54 <MX_CAN_Init>
  MX_USART1_UART_Init();
 80008ec:	f000 f8e8 	bl	8000ac0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  CAN_Config_filtering();
 80008f0:	f7ff ffca 	bl	8000888 <CAN_Config_filtering>
  if(HAL_CAN_Start(&hcan)!=HAL_OK)
 80008f4:	4832      	ldr	r0, [pc, #200]	; (80009c0 <main+0xec>)
 80008f6:	f000 fd0f 	bl	8001318 <HAL_CAN_Start>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <main+0x30>
     {
     	Error_Handler();
 8000900:	f000 f954 	bl	8000bac <Error_Handler>
     }
  uint32_t Txmailbox;
  CANConfigIDTxtypedef pIDtype;
  pIDtype.MessageType=COMMAND_FRAME;
 8000904:	2301      	movs	r3, #1
 8000906:	f8a7 36dc 	strh.w	r3, [r7, #1756]	; 0x6dc
  pIDtype.SenderID=OBSTALCE8;
 800090a:	230f      	movs	r3, #15
 800090c:	f8a7 36de 	strh.w	r3, [r7, #1758]	; 0x6de
  CANBufferHandleStruct Buffer;
  CANBufferHandleStruct_Init(&Buffer);
 8000910:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff fc19 	bl	800014c <CANBufferHandleStruct_Init>
  CAN_RxHeaderTypeDef RxHeader;
  FlagRecDataEnum FlagRec;
  FlagFrameHandle Flag;
  FlagsFrameHandle_Init(&Flag);
 800091a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff fc6d 	bl	80001fe <FlagsFrameHandle_Init>
  uint8_t DataRec[16];
  char Data[64]={0};
 8000924:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 8000928:	f5a3 63d9 	sub.w	r3, r3, #1736	; 0x6c8
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	3304      	adds	r3, #4
 8000932:	223c      	movs	r2, #60	; 0x3c
 8000934:	2100      	movs	r1, #0
 8000936:	4618      	mov	r0, r3
 8000938:	f002 f858 	bl	80029ec <memset>
  uint8_t mess[30]={0};
 800093c:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 8000940:	f5a3 63dd 	sub.w	r3, r3, #1768	; 0x6e8
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	3304      	adds	r3, #4
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
 8000954:	611a      	str	r2, [r3, #16]
 8000956:	615a      	str	r2, [r3, #20]
 8000958:	831a      	strh	r2, [r3, #24]
  uint8_t k=0;
 800095a:	2300      	movs	r3, #0
 800095c:	f887 36e7 	strb.w	r3, [r7, #1767]	; 0x6e7
  for (int i=0; i<DATA_TEST;i++)
 8000960:	2300      	movs	r3, #0
 8000962:	f8c7 36e0 	str.w	r3, [r7, #1760]	; 0x6e0
 8000966:	e013      	b.n	8000990 <main+0xbc>
  {
	  Data[i]=k;
 8000968:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 800096c:	f5a3 62d9 	sub.w	r2, r3, #1736	; 0x6c8
 8000970:	f8d7 36e0 	ldr.w	r3, [r7, #1760]	; 0x6e0
 8000974:	4413      	add	r3, r2
 8000976:	f897 26e7 	ldrb.w	r2, [r7, #1767]	; 0x6e7
 800097a:	701a      	strb	r2, [r3, #0]
	  k=k+1;
 800097c:	f897 36e7 	ldrb.w	r3, [r7, #1767]	; 0x6e7
 8000980:	3301      	adds	r3, #1
 8000982:	f887 36e7 	strb.w	r3, [r7, #1767]	; 0x6e7
  for (int i=0; i<DATA_TEST;i++)
 8000986:	f8d7 36e0 	ldr.w	r3, [r7, #1760]	; 0x6e0
 800098a:	3301      	adds	r3, #1
 800098c:	f8c7 36e0 	str.w	r3, [r7, #1760]	; 0x6e0
 8000990:	f8d7 36e0 	ldr.w	r3, [r7, #1760]	; 0x6e0
 8000994:	2b3d      	cmp	r3, #61	; 0x3d
 8000996:	dde7      	ble.n	8000968 <main+0x94>
    /* USER CODE BEGIN 3 */
	  //CAN_Send_Dataframe(pIDtype, Data, Txmailbox, TxBufferSend)
	  //CAN_Send_DataLink_Separate(&Buffer, Data);
	 // CAN_DataLink_Separate(&Buffer,Data,9);
	//	CAN_Network_Packet(&Buffer,Data,62);
	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000998:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800099c:	4809      	ldr	r0, [pc, #36]	; (80009c4 <main+0xf0>)
 800099e:	f001 fb1d 	bl	8001fdc <HAL_GPIO_TogglePin>
	 //CAN_Send_Physical_Send(&Buffer, Data , DATA_TEST , &pIDtype, Txmailbox);
	// CAN_Recieve_Physical(&RxBuffer,DataRec);
	 //HAL_UART_Transmit( &huart1, DataRec, sizeof(DataRec), HAL_MAX_DELAY);
	 CAN_Receive_DataLink(&RxHeader,&Flag,&Buffer,&FlagRec);
 80009a2:	f207 1383 	addw	r3, r7, #387	; 0x183
 80009a6:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 80009aa:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80009ae:	f507 70c2 	add.w	r0, r7, #388	; 0x184
 80009b2:	f7ff fded 	bl	8000590 <CAN_Receive_DataLink>
	//CAN_Send_Response(0b1111, ACK, 0b010);
	 HAL_Delay(500);
 80009b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009ba:	f000 fac5 	bl	8000f48 <HAL_Delay>
	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80009be:	e7eb      	b.n	8000998 <main+0xc4>
 80009c0:	20000028 	.word	0x20000028
 80009c4:	40011000 	.word	0x40011000

080009c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b090      	sub	sp, #64	; 0x40
 80009cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ce:	f107 0318 	add.w	r3, r7, #24
 80009d2:	2228      	movs	r2, #40	; 0x28
 80009d4:	2100      	movs	r1, #0
 80009d6:	4618      	mov	r0, r3
 80009d8:	f002 f808 	bl	80029ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009dc:	1d3b      	adds	r3, r7, #4
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]
 80009e6:	60da      	str	r2, [r3, #12]
 80009e8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009ea:	2301      	movs	r3, #1
 80009ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80009f4:	2300      	movs	r3, #0
 80009f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009f8:	2301      	movs	r3, #1
 80009fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009fc:	2302      	movs	r3, #2
 80009fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a04:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a06:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a0c:	f107 0318 	add.w	r3, r7, #24
 8000a10:	4618      	mov	r0, r3
 8000a12:	f001 fafd 	bl	8002010 <HAL_RCC_OscConfig>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000a1c:	f000 f8c6 	bl	8000bac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a20:	230f      	movs	r3, #15
 8000a22:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a24:	2302      	movs	r3, #2
 8000a26:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a32:	2300      	movs	r3, #0
 8000a34:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	2102      	movs	r1, #2
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f001 fd6a 	bl	8002514 <HAL_RCC_ClockConfig>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000a46:	f000 f8b1 	bl	8000bac <Error_Handler>
  }
}
 8000a4a:	bf00      	nop
 8000a4c:	3740      	adds	r7, #64	; 0x40
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
	...

08000a54 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000a58:	4b17      	ldr	r3, [pc, #92]	; (8000ab8 <MX_CAN_Init+0x64>)
 8000a5a:	4a18      	ldr	r2, [pc, #96]	; (8000abc <MX_CAN_Init+0x68>)
 8000a5c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000a5e:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <MX_CAN_Init+0x64>)
 8000a60:	2204      	movs	r2, #4
 8000a62:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000a64:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <MX_CAN_Init+0x64>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a6a:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <MX_CAN_Init+0x64>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000a70:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <MX_CAN_Init+0x64>)
 8000a72:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000a76:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000a78:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <MX_CAN_Init+0x64>)
 8000a7a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000a7e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000a80:	4b0d      	ldr	r3, [pc, #52]	; (8000ab8 <MX_CAN_Init+0x64>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000a86:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <MX_CAN_Init+0x64>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000a8c:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <MX_CAN_Init+0x64>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000a92:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <MX_CAN_Init+0x64>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000a98:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <MX_CAN_Init+0x64>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <MX_CAN_Init+0x64>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000aa4:	4804      	ldr	r0, [pc, #16]	; (8000ab8 <MX_CAN_Init+0x64>)
 8000aa6:	f000 fa73 	bl	8000f90 <HAL_CAN_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000ab0:	f000 f87c 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000028 	.word	0x20000028
 8000abc:	40006400 	.word	0x40006400

08000ac0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ac4:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <MX_USART1_UART_Init+0x4c>)
 8000ac6:	4a12      	ldr	r2, [pc, #72]	; (8000b10 <MX_USART1_UART_Init+0x50>)
 8000ac8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000aca:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <MX_USART1_UART_Init+0x4c>)
 8000acc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ad0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <MX_USART1_UART_Init+0x4c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <MX_USART1_UART_Init+0x4c>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ade:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <MX_USART1_UART_Init+0x4c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ae4:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <MX_USART1_UART_Init+0x4c>)
 8000ae6:	220c      	movs	r2, #12
 8000ae8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aea:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <MX_USART1_UART_Init+0x4c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <MX_USART1_UART_Init+0x4c>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000af6:	4805      	ldr	r0, [pc, #20]	; (8000b0c <MX_USART1_UART_Init+0x4c>)
 8000af8:	f001 fe9a 	bl	8002830 <HAL_UART_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b02:	f000 f853 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000050 	.word	0x20000050
 8000b10:	40013800 	.word	0x40013800

08000b14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b088      	sub	sp, #32
 8000b18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1a:	f107 0310 	add.w	r3, r7, #16
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b28:	4b1e      	ldr	r3, [pc, #120]	; (8000ba4 <MX_GPIO_Init+0x90>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	4a1d      	ldr	r2, [pc, #116]	; (8000ba4 <MX_GPIO_Init+0x90>)
 8000b2e:	f043 0310 	orr.w	r3, r3, #16
 8000b32:	6193      	str	r3, [r2, #24]
 8000b34:	4b1b      	ldr	r3, [pc, #108]	; (8000ba4 <MX_GPIO_Init+0x90>)
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	f003 0310 	and.w	r3, r3, #16
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b40:	4b18      	ldr	r3, [pc, #96]	; (8000ba4 <MX_GPIO_Init+0x90>)
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	4a17      	ldr	r2, [pc, #92]	; (8000ba4 <MX_GPIO_Init+0x90>)
 8000b46:	f043 0320 	orr.w	r3, r3, #32
 8000b4a:	6193      	str	r3, [r2, #24]
 8000b4c:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <MX_GPIO_Init+0x90>)
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	f003 0320 	and.w	r3, r3, #32
 8000b54:	60bb      	str	r3, [r7, #8]
 8000b56:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b58:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <MX_GPIO_Init+0x90>)
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	4a11      	ldr	r2, [pc, #68]	; (8000ba4 <MX_GPIO_Init+0x90>)
 8000b5e:	f043 0304 	orr.w	r3, r3, #4
 8000b62:	6193      	str	r3, [r2, #24]
 8000b64:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <MX_GPIO_Init+0x90>)
 8000b66:	699b      	ldr	r3, [r3, #24]
 8000b68:	f003 0304 	and.w	r3, r3, #4
 8000b6c:	607b      	str	r3, [r7, #4]
 8000b6e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000b70:	2200      	movs	r2, #0
 8000b72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b76:	480c      	ldr	r0, [pc, #48]	; (8000ba8 <MX_GPIO_Init+0x94>)
 8000b78:	f001 fa18 	bl	8001fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b82:	2301      	movs	r3, #1
 8000b84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b8e:	f107 0310 	add.w	r3, r7, #16
 8000b92:	4619      	mov	r1, r3
 8000b94:	4804      	ldr	r0, [pc, #16]	; (8000ba8 <MX_GPIO_Init+0x94>)
 8000b96:	f001 f885 	bl	8001ca4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b9a:	bf00      	nop
 8000b9c:	3720      	adds	r7, #32
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	40011000 	.word	0x40011000

08000bac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb0:	b672      	cpsid	i
}
 8000bb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <Error_Handler+0x8>
	...

08000bb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bbe:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <HAL_MspInit+0x5c>)
 8000bc0:	699b      	ldr	r3, [r3, #24]
 8000bc2:	4a14      	ldr	r2, [pc, #80]	; (8000c14 <HAL_MspInit+0x5c>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	6193      	str	r3, [r2, #24]
 8000bca:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <HAL_MspInit+0x5c>)
 8000bcc:	699b      	ldr	r3, [r3, #24]
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	60bb      	str	r3, [r7, #8]
 8000bd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd6:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <HAL_MspInit+0x5c>)
 8000bd8:	69db      	ldr	r3, [r3, #28]
 8000bda:	4a0e      	ldr	r2, [pc, #56]	; (8000c14 <HAL_MspInit+0x5c>)
 8000bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be0:	61d3      	str	r3, [r2, #28]
 8000be2:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <HAL_MspInit+0x5c>)
 8000be4:	69db      	ldr	r3, [r3, #28]
 8000be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000bee:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <HAL_MspInit+0x60>)
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	4a04      	ldr	r2, [pc, #16]	; (8000c18 <HAL_MspInit+0x60>)
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	3714      	adds	r7, #20
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr
 8000c14:	40021000 	.word	0x40021000
 8000c18:	40010000 	.word	0x40010000

08000c1c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b088      	sub	sp, #32
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 0310 	add.w	r3, r7, #16
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a2c      	ldr	r2, [pc, #176]	; (8000ce8 <HAL_CAN_MspInit+0xcc>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d151      	bne.n	8000ce0 <HAL_CAN_MspInit+0xc4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c3c:	4b2b      	ldr	r3, [pc, #172]	; (8000cec <HAL_CAN_MspInit+0xd0>)
 8000c3e:	69db      	ldr	r3, [r3, #28]
 8000c40:	4a2a      	ldr	r2, [pc, #168]	; (8000cec <HAL_CAN_MspInit+0xd0>)
 8000c42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c46:	61d3      	str	r3, [r2, #28]
 8000c48:	4b28      	ldr	r3, [pc, #160]	; (8000cec <HAL_CAN_MspInit+0xd0>)
 8000c4a:	69db      	ldr	r3, [r3, #28]
 8000c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c54:	4b25      	ldr	r3, [pc, #148]	; (8000cec <HAL_CAN_MspInit+0xd0>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	4a24      	ldr	r2, [pc, #144]	; (8000cec <HAL_CAN_MspInit+0xd0>)
 8000c5a:	f043 0304 	orr.w	r3, r3, #4
 8000c5e:	6193      	str	r3, [r2, #24]
 8000c60:	4b22      	ldr	r3, [pc, #136]	; (8000cec <HAL_CAN_MspInit+0xd0>)
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	f003 0304 	and.w	r3, r3, #4
 8000c68:	60bb      	str	r3, [r7, #8]
 8000c6a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000c6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c70:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c72:	2300      	movs	r3, #0
 8000c74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7a:	f107 0310 	add.w	r3, r7, #16
 8000c7e:	4619      	mov	r1, r3
 8000c80:	481b      	ldr	r0, [pc, #108]	; (8000cf0 <HAL_CAN_MspInit+0xd4>)
 8000c82:	f001 f80f 	bl	8001ca4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000c86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c90:	2303      	movs	r3, #3
 8000c92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c94:	f107 0310 	add.w	r3, r7, #16
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4815      	ldr	r0, [pc, #84]	; (8000cf0 <HAL_CAN_MspInit+0xd4>)
 8000c9c:	f001 f802 	bl	8001ca4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	2013      	movs	r0, #19
 8000ca6:	f000 ffc6 	bl	8001c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8000caa:	2013      	movs	r0, #19
 8000cac:	f000 ffdf 	bl	8001c6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	2014      	movs	r0, #20
 8000cb6:	f000 ffbe 	bl	8001c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000cba:	2014      	movs	r0, #20
 8000cbc:	f000 ffd7 	bl	8001c6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	2015      	movs	r0, #21
 8000cc6:	f000 ffb6 	bl	8001c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000cca:	2015      	movs	r0, #21
 8000ccc:	f000 ffcf 	bl	8001c6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	2016      	movs	r0, #22
 8000cd6:	f000 ffae 	bl	8001c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000cda:	2016      	movs	r0, #22
 8000cdc:	f000 ffc7 	bl	8001c6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000ce0:	bf00      	nop
 8000ce2:	3720      	adds	r7, #32
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40006400 	.word	0x40006400
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	40010800 	.word	0x40010800

08000cf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b088      	sub	sp, #32
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	f107 0310 	add.w	r3, r7, #16
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a1c      	ldr	r2, [pc, #112]	; (8000d80 <HAL_UART_MspInit+0x8c>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d131      	bne.n	8000d78 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d14:	4b1b      	ldr	r3, [pc, #108]	; (8000d84 <HAL_UART_MspInit+0x90>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	4a1a      	ldr	r2, [pc, #104]	; (8000d84 <HAL_UART_MspInit+0x90>)
 8000d1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d1e:	6193      	str	r3, [r2, #24]
 8000d20:	4b18      	ldr	r3, [pc, #96]	; (8000d84 <HAL_UART_MspInit+0x90>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2c:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <HAL_UART_MspInit+0x90>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	4a14      	ldr	r2, [pc, #80]	; (8000d84 <HAL_UART_MspInit+0x90>)
 8000d32:	f043 0304 	orr.w	r3, r3, #4
 8000d36:	6193      	str	r3, [r2, #24]
 8000d38:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <HAL_UART_MspInit+0x90>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	f003 0304 	and.w	r3, r3, #4
 8000d40:	60bb      	str	r3, [r7, #8]
 8000d42:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d48:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d52:	f107 0310 	add.w	r3, r7, #16
 8000d56:	4619      	mov	r1, r3
 8000d58:	480b      	ldr	r0, [pc, #44]	; (8000d88 <HAL_UART_MspInit+0x94>)
 8000d5a:	f000 ffa3 	bl	8001ca4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6c:	f107 0310 	add.w	r3, r7, #16
 8000d70:	4619      	mov	r1, r3
 8000d72:	4805      	ldr	r0, [pc, #20]	; (8000d88 <HAL_UART_MspInit+0x94>)
 8000d74:	f000 ff96 	bl	8001ca4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d78:	bf00      	nop
 8000d7a:	3720      	adds	r7, #32
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40013800 	.word	0x40013800
 8000d84:	40021000 	.word	0x40021000
 8000d88:	40010800 	.word	0x40010800

08000d8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <NMI_Handler+0x4>

08000d92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d96:	e7fe      	b.n	8000d96 <HardFault_Handler+0x4>

08000d98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <MemManage_Handler+0x4>

08000d9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da2:	e7fe      	b.n	8000da2 <BusFault_Handler+0x4>

08000da4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <UsageFault_Handler+0x4>

08000daa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc80      	pop	{r7}
 8000db4:	4770      	bx	lr

08000db6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bc80      	pop	{r7}
 8000dc0:	4770      	bx	lr

08000dc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bc80      	pop	{r7}
 8000dcc:	4770      	bx	lr

08000dce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd2:	f000 f89d 	bl	8000f10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000de0:	4802      	ldr	r0, [pc, #8]	; (8000dec <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8000de2:	f000 fc25 	bl	8001630 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000028 	.word	0x20000028

08000df0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000df4:	4802      	ldr	r0, [pc, #8]	; (8000e00 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000df6:	f000 fc1b 	bl	8001630 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000028 	.word	0x20000028

08000e04 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000e08:	4802      	ldr	r0, [pc, #8]	; (8000e14 <CAN1_RX1_IRQHandler+0x10>)
 8000e0a:	f000 fc11 	bl	8001630 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000028 	.word	0x20000028

08000e18 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000e1c:	4802      	ldr	r0, [pc, #8]	; (8000e28 <CAN1_SCE_IRQHandler+0x10>)
 8000e1e:	f000 fc07 	bl	8001630 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000028 	.word	0x20000028

08000e2c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr

08000e38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e38:	f7ff fff8 	bl	8000e2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e3c:	480b      	ldr	r0, [pc, #44]	; (8000e6c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e3e:	490c      	ldr	r1, [pc, #48]	; (8000e70 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e40:	4a0c      	ldr	r2, [pc, #48]	; (8000e74 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e44:	e002      	b.n	8000e4c <LoopCopyDataInit>

08000e46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e4a:	3304      	adds	r3, #4

08000e4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e50:	d3f9      	bcc.n	8000e46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e52:	4a09      	ldr	r2, [pc, #36]	; (8000e78 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e54:	4c09      	ldr	r4, [pc, #36]	; (8000e7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e58:	e001      	b.n	8000e5e <LoopFillZerobss>

08000e5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e5c:	3204      	adds	r2, #4

08000e5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e60:	d3fb      	bcc.n	8000e5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e62:	f001 fdcb 	bl	80029fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e66:	f7ff fd35 	bl	80008d4 <main>
  bx lr
 8000e6a:	4770      	bx	lr
  ldr r0, =_sdata
 8000e6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e70:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e74:	08002aac 	.word	0x08002aac
  ldr r2, =_sbss
 8000e78:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e7c:	2000009c 	.word	0x2000009c

08000e80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e80:	e7fe      	b.n	8000e80 <ADC1_2_IRQHandler>
	...

08000e84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e88:	4b08      	ldr	r3, [pc, #32]	; (8000eac <HAL_Init+0x28>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a07      	ldr	r2, [pc, #28]	; (8000eac <HAL_Init+0x28>)
 8000e8e:	f043 0310 	orr.w	r3, r3, #16
 8000e92:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e94:	2003      	movs	r0, #3
 8000e96:	f000 fec3 	bl	8001c20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e9a:	200f      	movs	r0, #15
 8000e9c:	f000 f808 	bl	8000eb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea0:	f7ff fe8a 	bl	8000bb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40022000 	.word	0x40022000

08000eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eb8:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <HAL_InitTick+0x54>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <HAL_InitTick+0x58>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ec6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 fedb 	bl	8001c8a <HAL_SYSTICK_Config>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e00e      	b.n	8000efc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2b0f      	cmp	r3, #15
 8000ee2:	d80a      	bhi.n	8000efa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	6879      	ldr	r1, [r7, #4]
 8000ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eec:	f000 fea3 	bl	8001c36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef0:	4a06      	ldr	r2, [pc, #24]	; (8000f0c <HAL_InitTick+0x5c>)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	e000      	b.n	8000efc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000000 	.word	0x20000000
 8000f08:	20000008 	.word	0x20000008
 8000f0c:	20000004 	.word	0x20000004

08000f10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f14:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <HAL_IncTick+0x1c>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <HAL_IncTick+0x20>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4413      	add	r3, r2
 8000f20:	4a03      	ldr	r2, [pc, #12]	; (8000f30 <HAL_IncTick+0x20>)
 8000f22:	6013      	str	r3, [r2, #0]
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr
 8000f2c:	20000008 	.word	0x20000008
 8000f30:	20000098 	.word	0x20000098

08000f34 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return uwTick;
 8000f38:	4b02      	ldr	r3, [pc, #8]	; (8000f44 <HAL_GetTick+0x10>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr
 8000f44:	20000098 	.word	0x20000098

08000f48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f50:	f7ff fff0 	bl	8000f34 <HAL_GetTick>
 8000f54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f60:	d005      	beq.n	8000f6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f62:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <HAL_Delay+0x44>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	461a      	mov	r2, r3
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f6e:	bf00      	nop
 8000f70:	f7ff ffe0 	bl	8000f34 <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d8f7      	bhi.n	8000f70 <HAL_Delay+0x28>
  {
  }
}
 8000f80:	bf00      	nop
 8000f82:	bf00      	nop
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000008 	.word	0x20000008

08000f90 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d101      	bne.n	8000fa2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e0ed      	b.n	800117e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d102      	bne.n	8000fb4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f7ff fe34 	bl	8000c1c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f042 0201 	orr.w	r2, r2, #1
 8000fc2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fc4:	f7ff ffb6 	bl	8000f34 <HAL_GetTick>
 8000fc8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000fca:	e012      	b.n	8000ff2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fcc:	f7ff ffb2 	bl	8000f34 <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	2b0a      	cmp	r3, #10
 8000fd8:	d90b      	bls.n	8000ff2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fde:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2205      	movs	r2, #5
 8000fea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e0c5      	b.n	800117e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 0301 	and.w	r3, r3, #1
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d0e5      	beq.n	8000fcc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f022 0202 	bic.w	r2, r2, #2
 800100e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001010:	f7ff ff90 	bl	8000f34 <HAL_GetTick>
 8001014:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001016:	e012      	b.n	800103e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001018:	f7ff ff8c 	bl	8000f34 <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	2b0a      	cmp	r3, #10
 8001024:	d90b      	bls.n	800103e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2205      	movs	r2, #5
 8001036:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e09f      	b.n	800117e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 0302 	and.w	r3, r3, #2
 8001048:	2b00      	cmp	r3, #0
 800104a:	d1e5      	bne.n	8001018 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	7e1b      	ldrb	r3, [r3, #24]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d108      	bne.n	8001066 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	e007      	b.n	8001076 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001074:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	7e5b      	ldrb	r3, [r3, #25]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d108      	bne.n	8001090 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	e007      	b.n	80010a0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800109e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	7e9b      	ldrb	r3, [r3, #26]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d108      	bne.n	80010ba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f042 0220 	orr.w	r2, r2, #32
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	e007      	b.n	80010ca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f022 0220 	bic.w	r2, r2, #32
 80010c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	7edb      	ldrb	r3, [r3, #27]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d108      	bne.n	80010e4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f022 0210 	bic.w	r2, r2, #16
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	e007      	b.n	80010f4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f042 0210 	orr.w	r2, r2, #16
 80010f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	7f1b      	ldrb	r3, [r3, #28]
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d108      	bne.n	800110e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f042 0208 	orr.w	r2, r2, #8
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	e007      	b.n	800111e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f022 0208 	bic.w	r2, r2, #8
 800111c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	7f5b      	ldrb	r3, [r3, #29]
 8001122:	2b01      	cmp	r3, #1
 8001124:	d108      	bne.n	8001138 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f042 0204 	orr.w	r2, r2, #4
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	e007      	b.n	8001148 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f022 0204 	bic.w	r2, r2, #4
 8001146:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	689a      	ldr	r2, [r3, #8]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	431a      	orrs	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	691b      	ldr	r3, [r3, #16]
 8001156:	431a      	orrs	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	695b      	ldr	r3, [r3, #20]
 800115c:	ea42 0103 	orr.w	r1, r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	1e5a      	subs	r2, r3, #1
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	430a      	orrs	r2, r1
 800116c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2201      	movs	r2, #1
 8001178:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001186:	b480      	push	{r7}
 8001188:	b087      	sub	sp, #28
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
 800118e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	f893 3020 	ldrb.w	r3, [r3, #32]
 800119c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800119e:	7cfb      	ldrb	r3, [r7, #19]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d003      	beq.n	80011ac <HAL_CAN_ConfigFilter+0x26>
 80011a4:	7cfb      	ldrb	r3, [r7, #19]
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	f040 80aa 	bne.w	8001300 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80011b2:	f043 0201 	orr.w	r2, r3, #1
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	695b      	ldr	r3, [r3, #20]
 80011c0:	f003 031f 	and.w	r3, r3, #31
 80011c4:	2201      	movs	r2, #1
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	43db      	mvns	r3, r3
 80011d6:	401a      	ands	r2, r3
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	69db      	ldr	r3, [r3, #28]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d123      	bne.n	800122e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	43db      	mvns	r3, r3
 80011f0:	401a      	ands	r2, r3
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001204:	683a      	ldr	r2, [r7, #0]
 8001206:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001208:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	3248      	adds	r2, #72	; 0x48
 800120e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001222:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001224:	6979      	ldr	r1, [r7, #20]
 8001226:	3348      	adds	r3, #72	; 0x48
 8001228:	00db      	lsls	r3, r3, #3
 800122a:	440b      	add	r3, r1
 800122c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d122      	bne.n	800127c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	431a      	orrs	r2, r3
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001252:	683a      	ldr	r2, [r7, #0]
 8001254:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001256:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	3248      	adds	r2, #72	; 0x48
 800125c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001270:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001272:	6979      	ldr	r1, [r7, #20]
 8001274:	3348      	adds	r3, #72	; 0x48
 8001276:	00db      	lsls	r3, r3, #3
 8001278:	440b      	add	r3, r1
 800127a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d109      	bne.n	8001298 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	43db      	mvns	r3, r3
 800128e:	401a      	ands	r2, r3
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001296:	e007      	b.n	80012a8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	431a      	orrs	r2, r3
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	691b      	ldr	r3, [r3, #16]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d109      	bne.n	80012c4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	43db      	mvns	r3, r3
 80012ba:	401a      	ands	r2, r3
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80012c2:	e007      	b.n	80012d4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	431a      	orrs	r2, r3
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	6a1b      	ldr	r3, [r3, #32]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d107      	bne.n	80012ec <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	431a      	orrs	r2, r3
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80012f2:	f023 0201 	bic.w	r2, r3, #1
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80012fc:	2300      	movs	r3, #0
 80012fe:	e006      	b.n	800130e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001304:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
  }
}
 800130e:	4618      	mov	r0, r3
 8001310:	371c      	adds	r7, #28
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr

08001318 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001326:	b2db      	uxtb	r3, r3
 8001328:	2b01      	cmp	r3, #1
 800132a:	d12e      	bne.n	800138a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2202      	movs	r2, #2
 8001330:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f022 0201 	bic.w	r2, r2, #1
 8001342:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001344:	f7ff fdf6 	bl	8000f34 <HAL_GetTick>
 8001348:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800134a:	e012      	b.n	8001372 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800134c:	f7ff fdf2 	bl	8000f34 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b0a      	cmp	r3, #10
 8001358:	d90b      	bls.n	8001372 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2205      	movs	r2, #5
 800136a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e012      	b.n	8001398 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f003 0301 	and.w	r3, r3, #1
 800137c:	2b00      	cmp	r3, #0
 800137e:	d1e5      	bne.n	800134c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001386:	2300      	movs	r3, #0
 8001388:	e006      	b.n	8001398 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
  }
}
 8001398:	4618      	mov	r0, r3
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80013a0:	b480      	push	{r7}
 80013a2:	b087      	sub	sp, #28
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
 80013ac:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013b4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80013b6:	7dfb      	ldrb	r3, [r7, #23]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d003      	beq.n	80013c4 <HAL_CAN_GetRxMessage+0x24>
 80013bc:	7dfb      	ldrb	r3, [r7, #23]
 80013be:	2b02      	cmp	r3, #2
 80013c0:	f040 8103 	bne.w	80015ca <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d10e      	bne.n	80013e8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	f003 0303 	and.w	r3, r3, #3
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d116      	bne.n	8001406 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013dc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e0f7      	b.n	80015d8 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	f003 0303 	and.w	r3, r3, #3
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d107      	bne.n	8001406 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e0e8      	b.n	80015d8 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	331b      	adds	r3, #27
 800140e:	011b      	lsls	r3, r3, #4
 8001410:	4413      	add	r3, r2
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0204 	and.w	r2, r3, #4
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d10c      	bne.n	800143e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	331b      	adds	r3, #27
 800142c:	011b      	lsls	r3, r3, #4
 800142e:	4413      	add	r3, r2
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	0d5b      	lsrs	r3, r3, #21
 8001434:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	e00b      	b.n	8001456 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	331b      	adds	r3, #27
 8001446:	011b      	lsls	r3, r3, #4
 8001448:	4413      	add	r3, r2
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	08db      	lsrs	r3, r3, #3
 800144e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	331b      	adds	r3, #27
 800145e:	011b      	lsls	r3, r3, #4
 8001460:	4413      	add	r3, r2
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0202 	and.w	r2, r3, #2
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	331b      	adds	r3, #27
 8001474:	011b      	lsls	r3, r3, #4
 8001476:	4413      	add	r3, r2
 8001478:	3304      	adds	r3, #4
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0308 	and.w	r3, r3, #8
 8001480:	2b00      	cmp	r3, #0
 8001482:	d003      	beq.n	800148c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2208      	movs	r2, #8
 8001488:	611a      	str	r2, [r3, #16]
 800148a:	e00b      	b.n	80014a4 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	331b      	adds	r3, #27
 8001494:	011b      	lsls	r3, r3, #4
 8001496:	4413      	add	r3, r2
 8001498:	3304      	adds	r3, #4
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 020f 	and.w	r2, r3, #15
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	331b      	adds	r3, #27
 80014ac:	011b      	lsls	r3, r3, #4
 80014ae:	4413      	add	r3, r2
 80014b0:	3304      	adds	r3, #4
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	0a1b      	lsrs	r3, r3, #8
 80014b6:	b2da      	uxtb	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	331b      	adds	r3, #27
 80014c4:	011b      	lsls	r3, r3, #4
 80014c6:	4413      	add	r3, r2
 80014c8:	3304      	adds	r3, #4
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	0c1b      	lsrs	r3, r3, #16
 80014ce:	b29a      	uxth	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	011b      	lsls	r3, r3, #4
 80014dc:	4413      	add	r3, r2
 80014de:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	011b      	lsls	r3, r3, #4
 80014f2:	4413      	add	r3, r2
 80014f4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	0a1a      	lsrs	r2, r3, #8
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	3301      	adds	r3, #1
 8001500:	b2d2      	uxtb	r2, r2
 8001502:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	011b      	lsls	r3, r3, #4
 800150c:	4413      	add	r3, r2
 800150e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	0c1a      	lsrs	r2, r3, #16
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	3302      	adds	r3, #2
 800151a:	b2d2      	uxtb	r2, r2
 800151c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	011b      	lsls	r3, r3, #4
 8001526:	4413      	add	r3, r2
 8001528:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	0e1a      	lsrs	r2, r3, #24
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	3303      	adds	r3, #3
 8001534:	b2d2      	uxtb	r2, r2
 8001536:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	011b      	lsls	r3, r3, #4
 8001540:	4413      	add	r3, r2
 8001542:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	3304      	adds	r3, #4
 800154c:	b2d2      	uxtb	r2, r2
 800154e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	011b      	lsls	r3, r3, #4
 8001558:	4413      	add	r3, r2
 800155a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	0a1a      	lsrs	r2, r3, #8
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	3305      	adds	r3, #5
 8001566:	b2d2      	uxtb	r2, r2
 8001568:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	011b      	lsls	r3, r3, #4
 8001572:	4413      	add	r3, r2
 8001574:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	0c1a      	lsrs	r2, r3, #16
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	3306      	adds	r3, #6
 8001580:	b2d2      	uxtb	r2, r2
 8001582:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	011b      	lsls	r3, r3, #4
 800158c:	4413      	add	r3, r2
 800158e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	0e1a      	lsrs	r2, r3, #24
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	3307      	adds	r3, #7
 800159a:	b2d2      	uxtb	r2, r2
 800159c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d108      	bne.n	80015b6 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	68da      	ldr	r2, [r3, #12]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f042 0220 	orr.w	r2, r2, #32
 80015b2:	60da      	str	r2, [r3, #12]
 80015b4:	e007      	b.n	80015c6 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	691a      	ldr	r2, [r3, #16]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f042 0220 	orr.w	r2, r2, #32
 80015c4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80015c6:	2300      	movs	r3, #0
 80015c8:	e006      	b.n	80015d8 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
  }
}
 80015d8:	4618      	mov	r0, r3
 80015da:	371c      	adds	r7, #28
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr

080015e2 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80015e2:	b480      	push	{r7}
 80015e4:	b085      	sub	sp, #20
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
 80015ea:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015f6:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80015f8:	7afb      	ldrb	r3, [r7, #11]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d002      	beq.n	8001604 <HAL_CAN_GetRxFifoFillLevel+0x22>
 80015fe:	7afb      	ldrb	r3, [r7, #11]
 8001600:	2b02      	cmp	r3, #2
 8001602:	d10f      	bne.n	8001624 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d106      	bne.n	8001618 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	f003 0303 	and.w	r3, r3, #3
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	e005      	b.n	8001624 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	691b      	ldr	r3, [r3, #16]
 800161e:	f003 0303 	and.w	r3, r3, #3
 8001622:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8001624:	68fb      	ldr	r3, [r7, #12]
}
 8001626:	4618      	mov	r0, r3
 8001628:	3714      	adds	r7, #20
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr

08001630 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08a      	sub	sp, #40	; 0x28
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001638:	2300      	movs	r3, #0
 800163a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800166c:	6a3b      	ldr	r3, [r7, #32]
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	2b00      	cmp	r3, #0
 8001674:	d07c      	beq.n	8001770 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	2b00      	cmp	r3, #0
 800167e:	d023      	beq.n	80016c8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2201      	movs	r2, #1
 8001686:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f000 f983 	bl	800199e <HAL_CAN_TxMailbox0CompleteCallback>
 8001698:	e016      	b.n	80016c8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	f003 0304 	and.w	r3, r3, #4
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d004      	beq.n	80016ae <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80016a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016aa:	627b      	str	r3, [r7, #36]	; 0x24
 80016ac:	e00c      	b.n	80016c8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	f003 0308 	and.w	r3, r3, #8
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d004      	beq.n	80016c2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80016b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016be:	627b      	str	r3, [r7, #36]	; 0x24
 80016c0:	e002      	b.n	80016c8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f000 f986 	bl	80019d4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d024      	beq.n	800171c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016da:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f000 f962 	bl	80019b0 <HAL_CAN_TxMailbox1CompleteCallback>
 80016ec:	e016      	b.n	800171c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d004      	beq.n	8001702 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80016f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016fe:	627b      	str	r3, [r7, #36]	; 0x24
 8001700:	e00c      	b.n	800171c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001708:	2b00      	cmp	r3, #0
 800170a:	d004      	beq.n	8001716 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800170c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001712:	627b      	str	r3, [r7, #36]	; 0x24
 8001714:	e002      	b.n	800171c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f000 f965 	bl	80019e6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d024      	beq.n	8001770 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800172e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d003      	beq.n	8001742 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f000 f941 	bl	80019c2 <HAL_CAN_TxMailbox2CompleteCallback>
 8001740:	e016      	b.n	8001770 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d004      	beq.n	8001756 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800174c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001752:	627b      	str	r3, [r7, #36]	; 0x24
 8001754:	e00c      	b.n	8001770 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d004      	beq.n	800176a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001762:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
 8001768:	e002      	b.n	8001770 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f000 f944 	bl	80019f8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001770:	6a3b      	ldr	r3, [r7, #32]
 8001772:	f003 0308 	and.w	r3, r3, #8
 8001776:	2b00      	cmp	r3, #0
 8001778:	d00c      	beq.n	8001794 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	f003 0310 	and.w	r3, r3, #16
 8001780:	2b00      	cmp	r3, #0
 8001782:	d007      	beq.n	8001794 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001786:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800178a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2210      	movs	r2, #16
 8001792:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001794:	6a3b      	ldr	r3, [r7, #32]
 8001796:	f003 0304 	and.w	r3, r3, #4
 800179a:	2b00      	cmp	r3, #0
 800179c:	d00b      	beq.n	80017b6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	f003 0308 	and.w	r3, r3, #8
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d006      	beq.n	80017b6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2208      	movs	r2, #8
 80017ae:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f000 f933 	bl	8001a1c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80017b6:	6a3b      	ldr	r3, [r7, #32]
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d009      	beq.n	80017d4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	f003 0303 	and.w	r3, r3, #3
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d002      	beq.n	80017d4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f000 f91b 	bl	8001a0a <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80017d4:	6a3b      	ldr	r3, [r7, #32]
 80017d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d00c      	beq.n	80017f8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	f003 0310 	and.w	r3, r3, #16
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d007      	beq.n	80017f8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80017e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017ee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2210      	movs	r2, #16
 80017f6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80017f8:	6a3b      	ldr	r3, [r7, #32]
 80017fa:	f003 0320 	and.w	r3, r3, #32
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d00b      	beq.n	800181a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	f003 0308 	and.w	r3, r3, #8
 8001808:	2b00      	cmp	r3, #0
 800180a:	d006      	beq.n	800181a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2208      	movs	r2, #8
 8001812:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f000 f913 	bl	8001a40 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800181a:	6a3b      	ldr	r3, [r7, #32]
 800181c:	f003 0310 	and.w	r3, r3, #16
 8001820:	2b00      	cmp	r3, #0
 8001822:	d009      	beq.n	8001838 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	f003 0303 	and.w	r3, r3, #3
 800182e:	2b00      	cmp	r3, #0
 8001830:	d002      	beq.n	8001838 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f000 f8fb 	bl	8001a2e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001838:	6a3b      	ldr	r3, [r7, #32]
 800183a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d00b      	beq.n	800185a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	f003 0310 	and.w	r3, r3, #16
 8001848:	2b00      	cmp	r3, #0
 800184a:	d006      	beq.n	800185a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2210      	movs	r2, #16
 8001852:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f000 f8fc 	bl	8001a52 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800185a:	6a3b      	ldr	r3, [r7, #32]
 800185c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d00b      	beq.n	800187c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	f003 0308 	and.w	r3, r3, #8
 800186a:	2b00      	cmp	r3, #0
 800186c:	d006      	beq.n	800187c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2208      	movs	r2, #8
 8001874:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 f8f4 	bl	8001a64 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800187c:	6a3b      	ldr	r3, [r7, #32]
 800187e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d07b      	beq.n	800197e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	2b00      	cmp	r3, #0
 800188e:	d072      	beq.n	8001976 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001890:	6a3b      	ldr	r3, [r7, #32]
 8001892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001896:	2b00      	cmp	r3, #0
 8001898:	d008      	beq.n	80018ac <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d003      	beq.n	80018ac <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80018a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a6:	f043 0301 	orr.w	r3, r3, #1
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80018ac:	6a3b      	ldr	r3, [r7, #32]
 80018ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d008      	beq.n	80018c8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d003      	beq.n	80018c8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80018c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c2:	f043 0302 	orr.w	r3, r3, #2
 80018c6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80018c8:	6a3b      	ldr	r3, [r7, #32]
 80018ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d008      	beq.n	80018e4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d003      	beq.n	80018e4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80018dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018de:	f043 0304 	orr.w	r3, r3, #4
 80018e2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80018e4:	6a3b      	ldr	r3, [r7, #32]
 80018e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d043      	beq.n	8001976 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d03e      	beq.n	8001976 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80018fe:	2b60      	cmp	r3, #96	; 0x60
 8001900:	d02b      	beq.n	800195a <HAL_CAN_IRQHandler+0x32a>
 8001902:	2b60      	cmp	r3, #96	; 0x60
 8001904:	d82e      	bhi.n	8001964 <HAL_CAN_IRQHandler+0x334>
 8001906:	2b50      	cmp	r3, #80	; 0x50
 8001908:	d022      	beq.n	8001950 <HAL_CAN_IRQHandler+0x320>
 800190a:	2b50      	cmp	r3, #80	; 0x50
 800190c:	d82a      	bhi.n	8001964 <HAL_CAN_IRQHandler+0x334>
 800190e:	2b40      	cmp	r3, #64	; 0x40
 8001910:	d019      	beq.n	8001946 <HAL_CAN_IRQHandler+0x316>
 8001912:	2b40      	cmp	r3, #64	; 0x40
 8001914:	d826      	bhi.n	8001964 <HAL_CAN_IRQHandler+0x334>
 8001916:	2b30      	cmp	r3, #48	; 0x30
 8001918:	d010      	beq.n	800193c <HAL_CAN_IRQHandler+0x30c>
 800191a:	2b30      	cmp	r3, #48	; 0x30
 800191c:	d822      	bhi.n	8001964 <HAL_CAN_IRQHandler+0x334>
 800191e:	2b10      	cmp	r3, #16
 8001920:	d002      	beq.n	8001928 <HAL_CAN_IRQHandler+0x2f8>
 8001922:	2b20      	cmp	r3, #32
 8001924:	d005      	beq.n	8001932 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001926:	e01d      	b.n	8001964 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192a:	f043 0308 	orr.w	r3, r3, #8
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001930:	e019      	b.n	8001966 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	f043 0310 	orr.w	r3, r3, #16
 8001938:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800193a:	e014      	b.n	8001966 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800193c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193e:	f043 0320 	orr.w	r3, r3, #32
 8001942:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001944:	e00f      	b.n	8001966 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001948:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800194e:	e00a      	b.n	8001966 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001956:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001958:	e005      	b.n	8001966 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001960:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001962:	e000      	b.n	8001966 <HAL_CAN_IRQHandler+0x336>
            break;
 8001964:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	699a      	ldr	r2, [r3, #24]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001974:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2204      	movs	r2, #4
 800197c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001980:	2b00      	cmp	r3, #0
 8001982:	d008      	beq.n	8001996 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	431a      	orrs	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f000 f870 	bl	8001a76 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001996:	bf00      	nop
 8001998:	3728      	adds	r7, #40	; 0x28
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr

080019b0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc80      	pop	{r7}
 80019c0:	4770      	bx	lr

080019c2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b083      	sub	sp, #12
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bc80      	pop	{r7}
 80019d2:	4770      	bx	lr

080019d4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr

080019e6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019e6:	b480      	push	{r7}
 80019e8:	b083      	sub	sp, #12
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr

080019f8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bc80      	pop	{r7}
 8001a08:	4770      	bx	lr

08001a0a <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	b083      	sub	sp, #12
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr

08001a1c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bc80      	pop	{r7}
 8001a2c:	4770      	bx	lr

08001a2e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b083      	sub	sp, #12
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr

08001a40 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bc80      	pop	{r7}
 8001a50:	4770      	bx	lr

08001a52 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b083      	sub	sp, #12
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr

08001a64 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr

08001a76 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001a76:	b480      	push	{r7}
 8001a78:	b083      	sub	sp, #12
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr

08001a88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a98:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <__NVIC_SetPriorityGrouping+0x44>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a9e:	68ba      	ldr	r2, [r7, #8]
 8001aa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ab0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ab8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aba:	4a04      	ldr	r2, [pc, #16]	; (8001acc <__NVIC_SetPriorityGrouping+0x44>)
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	60d3      	str	r3, [r2, #12]
}
 8001ac0:	bf00      	nop
 8001ac2:	3714      	adds	r7, #20
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bc80      	pop	{r7}
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ad4:	4b04      	ldr	r3, [pc, #16]	; (8001ae8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	0a1b      	lsrs	r3, r3, #8
 8001ada:	f003 0307 	and.w	r3, r3, #7
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bc80      	pop	{r7}
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	e000ed00 	.word	0xe000ed00

08001aec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	db0b      	blt.n	8001b16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001afe:	79fb      	ldrb	r3, [r7, #7]
 8001b00:	f003 021f 	and.w	r2, r3, #31
 8001b04:	4906      	ldr	r1, [pc, #24]	; (8001b20 <__NVIC_EnableIRQ+0x34>)
 8001b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0a:	095b      	lsrs	r3, r3, #5
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr
 8001b20:	e000e100 	.word	0xe000e100

08001b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	6039      	str	r1, [r7, #0]
 8001b2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	db0a      	blt.n	8001b4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	b2da      	uxtb	r2, r3
 8001b3c:	490c      	ldr	r1, [pc, #48]	; (8001b70 <__NVIC_SetPriority+0x4c>)
 8001b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b42:	0112      	lsls	r2, r2, #4
 8001b44:	b2d2      	uxtb	r2, r2
 8001b46:	440b      	add	r3, r1
 8001b48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b4c:	e00a      	b.n	8001b64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	b2da      	uxtb	r2, r3
 8001b52:	4908      	ldr	r1, [pc, #32]	; (8001b74 <__NVIC_SetPriority+0x50>)
 8001b54:	79fb      	ldrb	r3, [r7, #7]
 8001b56:	f003 030f 	and.w	r3, r3, #15
 8001b5a:	3b04      	subs	r3, #4
 8001b5c:	0112      	lsls	r2, r2, #4
 8001b5e:	b2d2      	uxtb	r2, r2
 8001b60:	440b      	add	r3, r1
 8001b62:	761a      	strb	r2, [r3, #24]
}
 8001b64:	bf00      	nop
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bc80      	pop	{r7}
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	e000e100 	.word	0xe000e100
 8001b74:	e000ed00 	.word	0xe000ed00

08001b78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b089      	sub	sp, #36	; 0x24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	f1c3 0307 	rsb	r3, r3, #7
 8001b92:	2b04      	cmp	r3, #4
 8001b94:	bf28      	it	cs
 8001b96:	2304      	movcs	r3, #4
 8001b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	3304      	adds	r3, #4
 8001b9e:	2b06      	cmp	r3, #6
 8001ba0:	d902      	bls.n	8001ba8 <NVIC_EncodePriority+0x30>
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	3b03      	subs	r3, #3
 8001ba6:	e000      	b.n	8001baa <NVIC_EncodePriority+0x32>
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bac:	f04f 32ff 	mov.w	r2, #4294967295
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	43da      	mvns	r2, r3
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	401a      	ands	r2, r3
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bca:	43d9      	mvns	r1, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd0:	4313      	orrs	r3, r2
         );
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3724      	adds	r7, #36	; 0x24
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr

08001bdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3b01      	subs	r3, #1
 8001be8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bec:	d301      	bcc.n	8001bf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e00f      	b.n	8001c12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bf2:	4a0a      	ldr	r2, [pc, #40]	; (8001c1c <SysTick_Config+0x40>)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bfa:	210f      	movs	r1, #15
 8001bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001c00:	f7ff ff90 	bl	8001b24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c04:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <SysTick_Config+0x40>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c0a:	4b04      	ldr	r3, [pc, #16]	; (8001c1c <SysTick_Config+0x40>)
 8001c0c:	2207      	movs	r2, #7
 8001c0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	e000e010 	.word	0xe000e010

08001c20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f7ff ff2d 	bl	8001a88 <__NVIC_SetPriorityGrouping>
}
 8001c2e:	bf00      	nop
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b086      	sub	sp, #24
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	60b9      	str	r1, [r7, #8]
 8001c40:	607a      	str	r2, [r7, #4]
 8001c42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c44:	2300      	movs	r3, #0
 8001c46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c48:	f7ff ff42 	bl	8001ad0 <__NVIC_GetPriorityGrouping>
 8001c4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	68b9      	ldr	r1, [r7, #8]
 8001c52:	6978      	ldr	r0, [r7, #20]
 8001c54:	f7ff ff90 	bl	8001b78 <NVIC_EncodePriority>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c5e:	4611      	mov	r1, r2
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff ff5f 	bl	8001b24 <__NVIC_SetPriority>
}
 8001c66:	bf00      	nop
 8001c68:	3718      	adds	r7, #24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b082      	sub	sp, #8
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	4603      	mov	r3, r0
 8001c76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff ff35 	bl	8001aec <__NVIC_EnableIRQ>
}
 8001c82:	bf00      	nop
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b082      	sub	sp, #8
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7ff ffa2 	bl	8001bdc <SysTick_Config>
 8001c98:	4603      	mov	r3, r0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
	...

08001ca4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b08b      	sub	sp, #44	; 0x2c
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cb6:	e169      	b.n	8001f8c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001cb8:	2201      	movs	r2, #1
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	69fa      	ldr	r2, [r7, #28]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	f040 8158 	bne.w	8001f86 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	4a9a      	ldr	r2, [pc, #616]	; (8001f44 <HAL_GPIO_Init+0x2a0>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d05e      	beq.n	8001d9e <HAL_GPIO_Init+0xfa>
 8001ce0:	4a98      	ldr	r2, [pc, #608]	; (8001f44 <HAL_GPIO_Init+0x2a0>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d875      	bhi.n	8001dd2 <HAL_GPIO_Init+0x12e>
 8001ce6:	4a98      	ldr	r2, [pc, #608]	; (8001f48 <HAL_GPIO_Init+0x2a4>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d058      	beq.n	8001d9e <HAL_GPIO_Init+0xfa>
 8001cec:	4a96      	ldr	r2, [pc, #600]	; (8001f48 <HAL_GPIO_Init+0x2a4>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d86f      	bhi.n	8001dd2 <HAL_GPIO_Init+0x12e>
 8001cf2:	4a96      	ldr	r2, [pc, #600]	; (8001f4c <HAL_GPIO_Init+0x2a8>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d052      	beq.n	8001d9e <HAL_GPIO_Init+0xfa>
 8001cf8:	4a94      	ldr	r2, [pc, #592]	; (8001f4c <HAL_GPIO_Init+0x2a8>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d869      	bhi.n	8001dd2 <HAL_GPIO_Init+0x12e>
 8001cfe:	4a94      	ldr	r2, [pc, #592]	; (8001f50 <HAL_GPIO_Init+0x2ac>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d04c      	beq.n	8001d9e <HAL_GPIO_Init+0xfa>
 8001d04:	4a92      	ldr	r2, [pc, #584]	; (8001f50 <HAL_GPIO_Init+0x2ac>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d863      	bhi.n	8001dd2 <HAL_GPIO_Init+0x12e>
 8001d0a:	4a92      	ldr	r2, [pc, #584]	; (8001f54 <HAL_GPIO_Init+0x2b0>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d046      	beq.n	8001d9e <HAL_GPIO_Init+0xfa>
 8001d10:	4a90      	ldr	r2, [pc, #576]	; (8001f54 <HAL_GPIO_Init+0x2b0>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d85d      	bhi.n	8001dd2 <HAL_GPIO_Init+0x12e>
 8001d16:	2b12      	cmp	r3, #18
 8001d18:	d82a      	bhi.n	8001d70 <HAL_GPIO_Init+0xcc>
 8001d1a:	2b12      	cmp	r3, #18
 8001d1c:	d859      	bhi.n	8001dd2 <HAL_GPIO_Init+0x12e>
 8001d1e:	a201      	add	r2, pc, #4	; (adr r2, 8001d24 <HAL_GPIO_Init+0x80>)
 8001d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d24:	08001d9f 	.word	0x08001d9f
 8001d28:	08001d79 	.word	0x08001d79
 8001d2c:	08001d8b 	.word	0x08001d8b
 8001d30:	08001dcd 	.word	0x08001dcd
 8001d34:	08001dd3 	.word	0x08001dd3
 8001d38:	08001dd3 	.word	0x08001dd3
 8001d3c:	08001dd3 	.word	0x08001dd3
 8001d40:	08001dd3 	.word	0x08001dd3
 8001d44:	08001dd3 	.word	0x08001dd3
 8001d48:	08001dd3 	.word	0x08001dd3
 8001d4c:	08001dd3 	.word	0x08001dd3
 8001d50:	08001dd3 	.word	0x08001dd3
 8001d54:	08001dd3 	.word	0x08001dd3
 8001d58:	08001dd3 	.word	0x08001dd3
 8001d5c:	08001dd3 	.word	0x08001dd3
 8001d60:	08001dd3 	.word	0x08001dd3
 8001d64:	08001dd3 	.word	0x08001dd3
 8001d68:	08001d81 	.word	0x08001d81
 8001d6c:	08001d95 	.word	0x08001d95
 8001d70:	4a79      	ldr	r2, [pc, #484]	; (8001f58 <HAL_GPIO_Init+0x2b4>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d013      	beq.n	8001d9e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d76:	e02c      	b.n	8001dd2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	623b      	str	r3, [r7, #32]
          break;
 8001d7e:	e029      	b.n	8001dd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	3304      	adds	r3, #4
 8001d86:	623b      	str	r3, [r7, #32]
          break;
 8001d88:	e024      	b.n	8001dd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	3308      	adds	r3, #8
 8001d90:	623b      	str	r3, [r7, #32]
          break;
 8001d92:	e01f      	b.n	8001dd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	330c      	adds	r3, #12
 8001d9a:	623b      	str	r3, [r7, #32]
          break;
 8001d9c:	e01a      	b.n	8001dd4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d102      	bne.n	8001dac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001da6:	2304      	movs	r3, #4
 8001da8:	623b      	str	r3, [r7, #32]
          break;
 8001daa:	e013      	b.n	8001dd4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d105      	bne.n	8001dc0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001db4:	2308      	movs	r3, #8
 8001db6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	69fa      	ldr	r2, [r7, #28]
 8001dbc:	611a      	str	r2, [r3, #16]
          break;
 8001dbe:	e009      	b.n	8001dd4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dc0:	2308      	movs	r3, #8
 8001dc2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	69fa      	ldr	r2, [r7, #28]
 8001dc8:	615a      	str	r2, [r3, #20]
          break;
 8001dca:	e003      	b.n	8001dd4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	623b      	str	r3, [r7, #32]
          break;
 8001dd0:	e000      	b.n	8001dd4 <HAL_GPIO_Init+0x130>
          break;
 8001dd2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	2bff      	cmp	r3, #255	; 0xff
 8001dd8:	d801      	bhi.n	8001dde <HAL_GPIO_Init+0x13a>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	e001      	b.n	8001de2 <HAL_GPIO_Init+0x13e>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	3304      	adds	r3, #4
 8001de2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	2bff      	cmp	r3, #255	; 0xff
 8001de8:	d802      	bhi.n	8001df0 <HAL_GPIO_Init+0x14c>
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	e002      	b.n	8001df6 <HAL_GPIO_Init+0x152>
 8001df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df2:	3b08      	subs	r3, #8
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	210f      	movs	r1, #15
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	fa01 f303 	lsl.w	r3, r1, r3
 8001e04:	43db      	mvns	r3, r3
 8001e06:	401a      	ands	r2, r3
 8001e08:	6a39      	ldr	r1, [r7, #32]
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e10:	431a      	orrs	r2, r3
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f000 80b1 	beq.w	8001f86 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e24:	4b4d      	ldr	r3, [pc, #308]	; (8001f5c <HAL_GPIO_Init+0x2b8>)
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	4a4c      	ldr	r2, [pc, #304]	; (8001f5c <HAL_GPIO_Init+0x2b8>)
 8001e2a:	f043 0301 	orr.w	r3, r3, #1
 8001e2e:	6193      	str	r3, [r2, #24]
 8001e30:	4b4a      	ldr	r3, [pc, #296]	; (8001f5c <HAL_GPIO_Init+0x2b8>)
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	60bb      	str	r3, [r7, #8]
 8001e3a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e3c:	4a48      	ldr	r2, [pc, #288]	; (8001f60 <HAL_GPIO_Init+0x2bc>)
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e40:	089b      	lsrs	r3, r3, #2
 8001e42:	3302      	adds	r3, #2
 8001e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e48:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4c:	f003 0303 	and.w	r3, r3, #3
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	220f      	movs	r2, #15
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a40      	ldr	r2, [pc, #256]	; (8001f64 <HAL_GPIO_Init+0x2c0>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d013      	beq.n	8001e90 <HAL_GPIO_Init+0x1ec>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a3f      	ldr	r2, [pc, #252]	; (8001f68 <HAL_GPIO_Init+0x2c4>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d00d      	beq.n	8001e8c <HAL_GPIO_Init+0x1e8>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a3e      	ldr	r2, [pc, #248]	; (8001f6c <HAL_GPIO_Init+0x2c8>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d007      	beq.n	8001e88 <HAL_GPIO_Init+0x1e4>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a3d      	ldr	r2, [pc, #244]	; (8001f70 <HAL_GPIO_Init+0x2cc>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d101      	bne.n	8001e84 <HAL_GPIO_Init+0x1e0>
 8001e80:	2303      	movs	r3, #3
 8001e82:	e006      	b.n	8001e92 <HAL_GPIO_Init+0x1ee>
 8001e84:	2304      	movs	r3, #4
 8001e86:	e004      	b.n	8001e92 <HAL_GPIO_Init+0x1ee>
 8001e88:	2302      	movs	r3, #2
 8001e8a:	e002      	b.n	8001e92 <HAL_GPIO_Init+0x1ee>
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e000      	b.n	8001e92 <HAL_GPIO_Init+0x1ee>
 8001e90:	2300      	movs	r3, #0
 8001e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e94:	f002 0203 	and.w	r2, r2, #3
 8001e98:	0092      	lsls	r2, r2, #2
 8001e9a:	4093      	lsls	r3, r2
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ea2:	492f      	ldr	r1, [pc, #188]	; (8001f60 <HAL_GPIO_Init+0x2bc>)
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea6:	089b      	lsrs	r3, r3, #2
 8001ea8:	3302      	adds	r3, #2
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d006      	beq.n	8001eca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ebc:	4b2d      	ldr	r3, [pc, #180]	; (8001f74 <HAL_GPIO_Init+0x2d0>)
 8001ebe:	689a      	ldr	r2, [r3, #8]
 8001ec0:	492c      	ldr	r1, [pc, #176]	; (8001f74 <HAL_GPIO_Init+0x2d0>)
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	608b      	str	r3, [r1, #8]
 8001ec8:	e006      	b.n	8001ed8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001eca:	4b2a      	ldr	r3, [pc, #168]	; (8001f74 <HAL_GPIO_Init+0x2d0>)
 8001ecc:	689a      	ldr	r2, [r3, #8]
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	4928      	ldr	r1, [pc, #160]	; (8001f74 <HAL_GPIO_Init+0x2d0>)
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d006      	beq.n	8001ef2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ee4:	4b23      	ldr	r3, [pc, #140]	; (8001f74 <HAL_GPIO_Init+0x2d0>)
 8001ee6:	68da      	ldr	r2, [r3, #12]
 8001ee8:	4922      	ldr	r1, [pc, #136]	; (8001f74 <HAL_GPIO_Init+0x2d0>)
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	60cb      	str	r3, [r1, #12]
 8001ef0:	e006      	b.n	8001f00 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ef2:	4b20      	ldr	r3, [pc, #128]	; (8001f74 <HAL_GPIO_Init+0x2d0>)
 8001ef4:	68da      	ldr	r2, [r3, #12]
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	491e      	ldr	r1, [pc, #120]	; (8001f74 <HAL_GPIO_Init+0x2d0>)
 8001efc:	4013      	ands	r3, r2
 8001efe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d006      	beq.n	8001f1a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f0c:	4b19      	ldr	r3, [pc, #100]	; (8001f74 <HAL_GPIO_Init+0x2d0>)
 8001f0e:	685a      	ldr	r2, [r3, #4]
 8001f10:	4918      	ldr	r1, [pc, #96]	; (8001f74 <HAL_GPIO_Init+0x2d0>)
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	604b      	str	r3, [r1, #4]
 8001f18:	e006      	b.n	8001f28 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f1a:	4b16      	ldr	r3, [pc, #88]	; (8001f74 <HAL_GPIO_Init+0x2d0>)
 8001f1c:	685a      	ldr	r2, [r3, #4]
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	43db      	mvns	r3, r3
 8001f22:	4914      	ldr	r1, [pc, #80]	; (8001f74 <HAL_GPIO_Init+0x2d0>)
 8001f24:	4013      	ands	r3, r2
 8001f26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d021      	beq.n	8001f78 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f34:	4b0f      	ldr	r3, [pc, #60]	; (8001f74 <HAL_GPIO_Init+0x2d0>)
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	490e      	ldr	r1, [pc, #56]	; (8001f74 <HAL_GPIO_Init+0x2d0>)
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	600b      	str	r3, [r1, #0]
 8001f40:	e021      	b.n	8001f86 <HAL_GPIO_Init+0x2e2>
 8001f42:	bf00      	nop
 8001f44:	10320000 	.word	0x10320000
 8001f48:	10310000 	.word	0x10310000
 8001f4c:	10220000 	.word	0x10220000
 8001f50:	10210000 	.word	0x10210000
 8001f54:	10120000 	.word	0x10120000
 8001f58:	10110000 	.word	0x10110000
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	40010000 	.word	0x40010000
 8001f64:	40010800 	.word	0x40010800
 8001f68:	40010c00 	.word	0x40010c00
 8001f6c:	40011000 	.word	0x40011000
 8001f70:	40011400 	.word	0x40011400
 8001f74:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f78:	4b0b      	ldr	r3, [pc, #44]	; (8001fa8 <HAL_GPIO_Init+0x304>)
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	4909      	ldr	r1, [pc, #36]	; (8001fa8 <HAL_GPIO_Init+0x304>)
 8001f82:	4013      	ands	r3, r2
 8001f84:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f88:	3301      	adds	r3, #1
 8001f8a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f92:	fa22 f303 	lsr.w	r3, r2, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f47f ae8e 	bne.w	8001cb8 <HAL_GPIO_Init+0x14>
  }
}
 8001f9c:	bf00      	nop
 8001f9e:	bf00      	nop
 8001fa0:	372c      	adds	r7, #44	; 0x2c
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bc80      	pop	{r7}
 8001fa6:	4770      	bx	lr
 8001fa8:	40010400 	.word	0x40010400

08001fac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	807b      	strh	r3, [r7, #2]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fbc:	787b      	ldrb	r3, [r7, #1]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fc2:	887a      	ldrh	r2, [r7, #2]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001fc8:	e003      	b.n	8001fd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fca:	887b      	ldrh	r3, [r7, #2]
 8001fcc:	041a      	lsls	r2, r3, #16
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	611a      	str	r2, [r3, #16]
}
 8001fd2:	bf00      	nop
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bc80      	pop	{r7}
 8001fda:	4770      	bx	lr

08001fdc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fee:	887a      	ldrh	r2, [r7, #2]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	041a      	lsls	r2, r3, #16
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	43d9      	mvns	r1, r3
 8001ffa:	887b      	ldrh	r3, [r7, #2]
 8001ffc:	400b      	ands	r3, r1
 8001ffe:	431a      	orrs	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	611a      	str	r2, [r3, #16]
}
 8002004:	bf00      	nop
 8002006:	3714      	adds	r7, #20
 8002008:	46bd      	mov	sp, r7
 800200a:	bc80      	pop	{r7}
 800200c:	4770      	bx	lr
	...

08002010 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e272      	b.n	8002508 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b00      	cmp	r3, #0
 800202c:	f000 8087 	beq.w	800213e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002030:	4b92      	ldr	r3, [pc, #584]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f003 030c 	and.w	r3, r3, #12
 8002038:	2b04      	cmp	r3, #4
 800203a:	d00c      	beq.n	8002056 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800203c:	4b8f      	ldr	r3, [pc, #572]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f003 030c 	and.w	r3, r3, #12
 8002044:	2b08      	cmp	r3, #8
 8002046:	d112      	bne.n	800206e <HAL_RCC_OscConfig+0x5e>
 8002048:	4b8c      	ldr	r3, [pc, #560]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002054:	d10b      	bne.n	800206e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002056:	4b89      	ldr	r3, [pc, #548]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d06c      	beq.n	800213c <HAL_RCC_OscConfig+0x12c>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d168      	bne.n	800213c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e24c      	b.n	8002508 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002076:	d106      	bne.n	8002086 <HAL_RCC_OscConfig+0x76>
 8002078:	4b80      	ldr	r3, [pc, #512]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a7f      	ldr	r2, [pc, #508]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 800207e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002082:	6013      	str	r3, [r2, #0]
 8002084:	e02e      	b.n	80020e4 <HAL_RCC_OscConfig+0xd4>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d10c      	bne.n	80020a8 <HAL_RCC_OscConfig+0x98>
 800208e:	4b7b      	ldr	r3, [pc, #492]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a7a      	ldr	r2, [pc, #488]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 8002094:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002098:	6013      	str	r3, [r2, #0]
 800209a:	4b78      	ldr	r3, [pc, #480]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a77      	ldr	r2, [pc, #476]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 80020a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020a4:	6013      	str	r3, [r2, #0]
 80020a6:	e01d      	b.n	80020e4 <HAL_RCC_OscConfig+0xd4>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020b0:	d10c      	bne.n	80020cc <HAL_RCC_OscConfig+0xbc>
 80020b2:	4b72      	ldr	r3, [pc, #456]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a71      	ldr	r2, [pc, #452]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 80020b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020bc:	6013      	str	r3, [r2, #0]
 80020be:	4b6f      	ldr	r3, [pc, #444]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a6e      	ldr	r2, [pc, #440]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 80020c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c8:	6013      	str	r3, [r2, #0]
 80020ca:	e00b      	b.n	80020e4 <HAL_RCC_OscConfig+0xd4>
 80020cc:	4b6b      	ldr	r3, [pc, #428]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a6a      	ldr	r2, [pc, #424]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 80020d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020d6:	6013      	str	r3, [r2, #0]
 80020d8:	4b68      	ldr	r3, [pc, #416]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a67      	ldr	r2, [pc, #412]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 80020de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d013      	beq.n	8002114 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ec:	f7fe ff22 	bl	8000f34 <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020f4:	f7fe ff1e 	bl	8000f34 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b64      	cmp	r3, #100	; 0x64
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e200      	b.n	8002508 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002106:	4b5d      	ldr	r3, [pc, #372]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d0f0      	beq.n	80020f4 <HAL_RCC_OscConfig+0xe4>
 8002112:	e014      	b.n	800213e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002114:	f7fe ff0e 	bl	8000f34 <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800211c:	f7fe ff0a 	bl	8000f34 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b64      	cmp	r3, #100	; 0x64
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e1ec      	b.n	8002508 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800212e:	4b53      	ldr	r3, [pc, #332]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1f0      	bne.n	800211c <HAL_RCC_OscConfig+0x10c>
 800213a:	e000      	b.n	800213e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800213c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d063      	beq.n	8002212 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800214a:	4b4c      	ldr	r3, [pc, #304]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f003 030c 	and.w	r3, r3, #12
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00b      	beq.n	800216e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002156:	4b49      	ldr	r3, [pc, #292]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f003 030c 	and.w	r3, r3, #12
 800215e:	2b08      	cmp	r3, #8
 8002160:	d11c      	bne.n	800219c <HAL_RCC_OscConfig+0x18c>
 8002162:	4b46      	ldr	r3, [pc, #280]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d116      	bne.n	800219c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800216e:	4b43      	ldr	r3, [pc, #268]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d005      	beq.n	8002186 <HAL_RCC_OscConfig+0x176>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d001      	beq.n	8002186 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e1c0      	b.n	8002508 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002186:	4b3d      	ldr	r3, [pc, #244]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	4939      	ldr	r1, [pc, #228]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 8002196:	4313      	orrs	r3, r2
 8002198:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800219a:	e03a      	b.n	8002212 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d020      	beq.n	80021e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021a4:	4b36      	ldr	r3, [pc, #216]	; (8002280 <HAL_RCC_OscConfig+0x270>)
 80021a6:	2201      	movs	r2, #1
 80021a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021aa:	f7fe fec3 	bl	8000f34 <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b0:	e008      	b.n	80021c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021b2:	f7fe febf 	bl	8000f34 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e1a1      	b.n	8002508 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c4:	4b2d      	ldr	r3, [pc, #180]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0f0      	beq.n	80021b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d0:	4b2a      	ldr	r3, [pc, #168]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	695b      	ldr	r3, [r3, #20]
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	4927      	ldr	r1, [pc, #156]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	600b      	str	r3, [r1, #0]
 80021e4:	e015      	b.n	8002212 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021e6:	4b26      	ldr	r3, [pc, #152]	; (8002280 <HAL_RCC_OscConfig+0x270>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ec:	f7fe fea2 	bl	8000f34 <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021f4:	f7fe fe9e 	bl	8000f34 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e180      	b.n	8002508 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002206:	4b1d      	ldr	r3, [pc, #116]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1f0      	bne.n	80021f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0308 	and.w	r3, r3, #8
 800221a:	2b00      	cmp	r3, #0
 800221c:	d03a      	beq.n	8002294 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d019      	beq.n	800225a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002226:	4b17      	ldr	r3, [pc, #92]	; (8002284 <HAL_RCC_OscConfig+0x274>)
 8002228:	2201      	movs	r2, #1
 800222a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800222c:	f7fe fe82 	bl	8000f34 <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002234:	f7fe fe7e 	bl	8000f34 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e160      	b.n	8002508 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002246:	4b0d      	ldr	r3, [pc, #52]	; (800227c <HAL_RCC_OscConfig+0x26c>)
 8002248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d0f0      	beq.n	8002234 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002252:	2001      	movs	r0, #1
 8002254:	f000 face 	bl	80027f4 <RCC_Delay>
 8002258:	e01c      	b.n	8002294 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800225a:	4b0a      	ldr	r3, [pc, #40]	; (8002284 <HAL_RCC_OscConfig+0x274>)
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002260:	f7fe fe68 	bl	8000f34 <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002266:	e00f      	b.n	8002288 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002268:	f7fe fe64 	bl	8000f34 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d908      	bls.n	8002288 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e146      	b.n	8002508 <HAL_RCC_OscConfig+0x4f8>
 800227a:	bf00      	nop
 800227c:	40021000 	.word	0x40021000
 8002280:	42420000 	.word	0x42420000
 8002284:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002288:	4b92      	ldr	r3, [pc, #584]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 800228a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1e9      	bne.n	8002268 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0304 	and.w	r3, r3, #4
 800229c:	2b00      	cmp	r3, #0
 800229e:	f000 80a6 	beq.w	80023ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022a2:	2300      	movs	r3, #0
 80022a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022a6:	4b8b      	ldr	r3, [pc, #556]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10d      	bne.n	80022ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022b2:	4b88      	ldr	r3, [pc, #544]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	4a87      	ldr	r2, [pc, #540]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 80022b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022bc:	61d3      	str	r3, [r2, #28]
 80022be:	4b85      	ldr	r3, [pc, #532]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 80022c0:	69db      	ldr	r3, [r3, #28]
 80022c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c6:	60bb      	str	r3, [r7, #8]
 80022c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022ca:	2301      	movs	r3, #1
 80022cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ce:	4b82      	ldr	r3, [pc, #520]	; (80024d8 <HAL_RCC_OscConfig+0x4c8>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d118      	bne.n	800230c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022da:	4b7f      	ldr	r3, [pc, #508]	; (80024d8 <HAL_RCC_OscConfig+0x4c8>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a7e      	ldr	r2, [pc, #504]	; (80024d8 <HAL_RCC_OscConfig+0x4c8>)
 80022e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022e6:	f7fe fe25 	bl	8000f34 <HAL_GetTick>
 80022ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ec:	e008      	b.n	8002300 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ee:	f7fe fe21 	bl	8000f34 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b64      	cmp	r3, #100	; 0x64
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e103      	b.n	8002508 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002300:	4b75      	ldr	r3, [pc, #468]	; (80024d8 <HAL_RCC_OscConfig+0x4c8>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002308:	2b00      	cmp	r3, #0
 800230a:	d0f0      	beq.n	80022ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d106      	bne.n	8002322 <HAL_RCC_OscConfig+0x312>
 8002314:	4b6f      	ldr	r3, [pc, #444]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	4a6e      	ldr	r2, [pc, #440]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 800231a:	f043 0301 	orr.w	r3, r3, #1
 800231e:	6213      	str	r3, [r2, #32]
 8002320:	e02d      	b.n	800237e <HAL_RCC_OscConfig+0x36e>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d10c      	bne.n	8002344 <HAL_RCC_OscConfig+0x334>
 800232a:	4b6a      	ldr	r3, [pc, #424]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	4a69      	ldr	r2, [pc, #420]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 8002330:	f023 0301 	bic.w	r3, r3, #1
 8002334:	6213      	str	r3, [r2, #32]
 8002336:	4b67      	ldr	r3, [pc, #412]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 8002338:	6a1b      	ldr	r3, [r3, #32]
 800233a:	4a66      	ldr	r2, [pc, #408]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 800233c:	f023 0304 	bic.w	r3, r3, #4
 8002340:	6213      	str	r3, [r2, #32]
 8002342:	e01c      	b.n	800237e <HAL_RCC_OscConfig+0x36e>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	2b05      	cmp	r3, #5
 800234a:	d10c      	bne.n	8002366 <HAL_RCC_OscConfig+0x356>
 800234c:	4b61      	ldr	r3, [pc, #388]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 800234e:	6a1b      	ldr	r3, [r3, #32]
 8002350:	4a60      	ldr	r2, [pc, #384]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 8002352:	f043 0304 	orr.w	r3, r3, #4
 8002356:	6213      	str	r3, [r2, #32]
 8002358:	4b5e      	ldr	r3, [pc, #376]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	4a5d      	ldr	r2, [pc, #372]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 800235e:	f043 0301 	orr.w	r3, r3, #1
 8002362:	6213      	str	r3, [r2, #32]
 8002364:	e00b      	b.n	800237e <HAL_RCC_OscConfig+0x36e>
 8002366:	4b5b      	ldr	r3, [pc, #364]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	4a5a      	ldr	r2, [pc, #360]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 800236c:	f023 0301 	bic.w	r3, r3, #1
 8002370:	6213      	str	r3, [r2, #32]
 8002372:	4b58      	ldr	r3, [pc, #352]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 8002374:	6a1b      	ldr	r3, [r3, #32]
 8002376:	4a57      	ldr	r2, [pc, #348]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 8002378:	f023 0304 	bic.w	r3, r3, #4
 800237c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d015      	beq.n	80023b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002386:	f7fe fdd5 	bl	8000f34 <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800238c:	e00a      	b.n	80023a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800238e:	f7fe fdd1 	bl	8000f34 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	f241 3288 	movw	r2, #5000	; 0x1388
 800239c:	4293      	cmp	r3, r2
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e0b1      	b.n	8002508 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023a4:	4b4b      	ldr	r3, [pc, #300]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 80023a6:	6a1b      	ldr	r3, [r3, #32]
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0ee      	beq.n	800238e <HAL_RCC_OscConfig+0x37e>
 80023b0:	e014      	b.n	80023dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b2:	f7fe fdbf 	bl	8000f34 <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b8:	e00a      	b.n	80023d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ba:	f7fe fdbb 	bl	8000f34 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e09b      	b.n	8002508 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023d0:	4b40      	ldr	r3, [pc, #256]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1ee      	bne.n	80023ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023dc:	7dfb      	ldrb	r3, [r7, #23]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d105      	bne.n	80023ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023e2:	4b3c      	ldr	r3, [pc, #240]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	4a3b      	ldr	r2, [pc, #236]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 80023e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f000 8087 	beq.w	8002506 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023f8:	4b36      	ldr	r3, [pc, #216]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f003 030c 	and.w	r3, r3, #12
 8002400:	2b08      	cmp	r3, #8
 8002402:	d061      	beq.n	80024c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	69db      	ldr	r3, [r3, #28]
 8002408:	2b02      	cmp	r3, #2
 800240a:	d146      	bne.n	800249a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800240c:	4b33      	ldr	r3, [pc, #204]	; (80024dc <HAL_RCC_OscConfig+0x4cc>)
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002412:	f7fe fd8f 	bl	8000f34 <HAL_GetTick>
 8002416:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002418:	e008      	b.n	800242c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800241a:	f7fe fd8b 	bl	8000f34 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d901      	bls.n	800242c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e06d      	b.n	8002508 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800242c:	4b29      	ldr	r3, [pc, #164]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1f0      	bne.n	800241a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002440:	d108      	bne.n	8002454 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002442:	4b24      	ldr	r3, [pc, #144]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	4921      	ldr	r1, [pc, #132]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 8002450:	4313      	orrs	r3, r2
 8002452:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002454:	4b1f      	ldr	r3, [pc, #124]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a19      	ldr	r1, [r3, #32]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002464:	430b      	orrs	r3, r1
 8002466:	491b      	ldr	r1, [pc, #108]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 8002468:	4313      	orrs	r3, r2
 800246a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800246c:	4b1b      	ldr	r3, [pc, #108]	; (80024dc <HAL_RCC_OscConfig+0x4cc>)
 800246e:	2201      	movs	r2, #1
 8002470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002472:	f7fe fd5f 	bl	8000f34 <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002478:	e008      	b.n	800248c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800247a:	f7fe fd5b 	bl	8000f34 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e03d      	b.n	8002508 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800248c:	4b11      	ldr	r3, [pc, #68]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d0f0      	beq.n	800247a <HAL_RCC_OscConfig+0x46a>
 8002498:	e035      	b.n	8002506 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800249a:	4b10      	ldr	r3, [pc, #64]	; (80024dc <HAL_RCC_OscConfig+0x4cc>)
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a0:	f7fe fd48 	bl	8000f34 <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024a8:	f7fe fd44 	bl	8000f34 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e026      	b.n	8002508 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ba:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <HAL_RCC_OscConfig+0x4c4>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1f0      	bne.n	80024a8 <HAL_RCC_OscConfig+0x498>
 80024c6:	e01e      	b.n	8002506 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	69db      	ldr	r3, [r3, #28]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d107      	bne.n	80024e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e019      	b.n	8002508 <HAL_RCC_OscConfig+0x4f8>
 80024d4:	40021000 	.word	0x40021000
 80024d8:	40007000 	.word	0x40007000
 80024dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024e0:	4b0b      	ldr	r3, [pc, #44]	; (8002510 <HAL_RCC_OscConfig+0x500>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d106      	bne.n	8002502 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024fe:	429a      	cmp	r2, r3
 8002500:	d001      	beq.n	8002506 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e000      	b.n	8002508 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	3718      	adds	r7, #24
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	40021000 	.word	0x40021000

08002514 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e0d0      	b.n	80026ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002528:	4b6a      	ldr	r3, [pc, #424]	; (80026d4 <HAL_RCC_ClockConfig+0x1c0>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	429a      	cmp	r2, r3
 8002534:	d910      	bls.n	8002558 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002536:	4b67      	ldr	r3, [pc, #412]	; (80026d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f023 0207 	bic.w	r2, r3, #7
 800253e:	4965      	ldr	r1, [pc, #404]	; (80026d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	4313      	orrs	r3, r2
 8002544:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002546:	4b63      	ldr	r3, [pc, #396]	; (80026d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0307 	and.w	r3, r3, #7
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	429a      	cmp	r2, r3
 8002552:	d001      	beq.n	8002558 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e0b8      	b.n	80026ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d020      	beq.n	80025a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0304 	and.w	r3, r3, #4
 800256c:	2b00      	cmp	r3, #0
 800256e:	d005      	beq.n	800257c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002570:	4b59      	ldr	r3, [pc, #356]	; (80026d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	4a58      	ldr	r2, [pc, #352]	; (80026d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002576:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800257a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0308 	and.w	r3, r3, #8
 8002584:	2b00      	cmp	r3, #0
 8002586:	d005      	beq.n	8002594 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002588:	4b53      	ldr	r3, [pc, #332]	; (80026d8 <HAL_RCC_ClockConfig+0x1c4>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	4a52      	ldr	r2, [pc, #328]	; (80026d8 <HAL_RCC_ClockConfig+0x1c4>)
 800258e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002592:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002594:	4b50      	ldr	r3, [pc, #320]	; (80026d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	494d      	ldr	r1, [pc, #308]	; (80026d8 <HAL_RCC_ClockConfig+0x1c4>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d040      	beq.n	8002634 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d107      	bne.n	80025ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ba:	4b47      	ldr	r3, [pc, #284]	; (80026d8 <HAL_RCC_ClockConfig+0x1c4>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d115      	bne.n	80025f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e07f      	b.n	80026ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d107      	bne.n	80025e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025d2:	4b41      	ldr	r3, [pc, #260]	; (80026d8 <HAL_RCC_ClockConfig+0x1c4>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d109      	bne.n	80025f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e073      	b.n	80026ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e2:	4b3d      	ldr	r3, [pc, #244]	; (80026d8 <HAL_RCC_ClockConfig+0x1c4>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e06b      	b.n	80026ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025f2:	4b39      	ldr	r3, [pc, #228]	; (80026d8 <HAL_RCC_ClockConfig+0x1c4>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f023 0203 	bic.w	r2, r3, #3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	4936      	ldr	r1, [pc, #216]	; (80026d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002600:	4313      	orrs	r3, r2
 8002602:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002604:	f7fe fc96 	bl	8000f34 <HAL_GetTick>
 8002608:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800260a:	e00a      	b.n	8002622 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800260c:	f7fe fc92 	bl	8000f34 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	f241 3288 	movw	r2, #5000	; 0x1388
 800261a:	4293      	cmp	r3, r2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e053      	b.n	80026ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002622:	4b2d      	ldr	r3, [pc, #180]	; (80026d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f003 020c 	and.w	r2, r3, #12
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	429a      	cmp	r2, r3
 8002632:	d1eb      	bne.n	800260c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002634:	4b27      	ldr	r3, [pc, #156]	; (80026d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0307 	and.w	r3, r3, #7
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	429a      	cmp	r2, r3
 8002640:	d210      	bcs.n	8002664 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002642:	4b24      	ldr	r3, [pc, #144]	; (80026d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f023 0207 	bic.w	r2, r3, #7
 800264a:	4922      	ldr	r1, [pc, #136]	; (80026d4 <HAL_RCC_ClockConfig+0x1c0>)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	4313      	orrs	r3, r2
 8002650:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002652:	4b20      	ldr	r3, [pc, #128]	; (80026d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	429a      	cmp	r2, r3
 800265e:	d001      	beq.n	8002664 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e032      	b.n	80026ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0304 	and.w	r3, r3, #4
 800266c:	2b00      	cmp	r3, #0
 800266e:	d008      	beq.n	8002682 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002670:	4b19      	ldr	r3, [pc, #100]	; (80026d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	4916      	ldr	r1, [pc, #88]	; (80026d8 <HAL_RCC_ClockConfig+0x1c4>)
 800267e:	4313      	orrs	r3, r2
 8002680:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0308 	and.w	r3, r3, #8
 800268a:	2b00      	cmp	r3, #0
 800268c:	d009      	beq.n	80026a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800268e:	4b12      	ldr	r3, [pc, #72]	; (80026d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	490e      	ldr	r1, [pc, #56]	; (80026d8 <HAL_RCC_ClockConfig+0x1c4>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026a2:	f000 f821 	bl	80026e8 <HAL_RCC_GetSysClockFreq>
 80026a6:	4602      	mov	r2, r0
 80026a8:	4b0b      	ldr	r3, [pc, #44]	; (80026d8 <HAL_RCC_ClockConfig+0x1c4>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	091b      	lsrs	r3, r3, #4
 80026ae:	f003 030f 	and.w	r3, r3, #15
 80026b2:	490a      	ldr	r1, [pc, #40]	; (80026dc <HAL_RCC_ClockConfig+0x1c8>)
 80026b4:	5ccb      	ldrb	r3, [r1, r3]
 80026b6:	fa22 f303 	lsr.w	r3, r2, r3
 80026ba:	4a09      	ldr	r2, [pc, #36]	; (80026e0 <HAL_RCC_ClockConfig+0x1cc>)
 80026bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026be:	4b09      	ldr	r3, [pc, #36]	; (80026e4 <HAL_RCC_ClockConfig+0x1d0>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7fe fbf4 	bl	8000eb0 <HAL_InitTick>

  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40022000 	.word	0x40022000
 80026d8:	40021000 	.word	0x40021000
 80026dc:	08002a78 	.word	0x08002a78
 80026e0:	20000000 	.word	0x20000000
 80026e4:	20000004 	.word	0x20000004

080026e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b087      	sub	sp, #28
 80026ec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026ee:	2300      	movs	r3, #0
 80026f0:	60fb      	str	r3, [r7, #12]
 80026f2:	2300      	movs	r3, #0
 80026f4:	60bb      	str	r3, [r7, #8]
 80026f6:	2300      	movs	r3, #0
 80026f8:	617b      	str	r3, [r7, #20]
 80026fa:	2300      	movs	r3, #0
 80026fc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80026fe:	2300      	movs	r3, #0
 8002700:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002702:	4b1e      	ldr	r3, [pc, #120]	; (800277c <HAL_RCC_GetSysClockFreq+0x94>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f003 030c 	and.w	r3, r3, #12
 800270e:	2b04      	cmp	r3, #4
 8002710:	d002      	beq.n	8002718 <HAL_RCC_GetSysClockFreq+0x30>
 8002712:	2b08      	cmp	r3, #8
 8002714:	d003      	beq.n	800271e <HAL_RCC_GetSysClockFreq+0x36>
 8002716:	e027      	b.n	8002768 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002718:	4b19      	ldr	r3, [pc, #100]	; (8002780 <HAL_RCC_GetSysClockFreq+0x98>)
 800271a:	613b      	str	r3, [r7, #16]
      break;
 800271c:	e027      	b.n	800276e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	0c9b      	lsrs	r3, r3, #18
 8002722:	f003 030f 	and.w	r3, r3, #15
 8002726:	4a17      	ldr	r2, [pc, #92]	; (8002784 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002728:	5cd3      	ldrb	r3, [r2, r3]
 800272a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d010      	beq.n	8002758 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002736:	4b11      	ldr	r3, [pc, #68]	; (800277c <HAL_RCC_GetSysClockFreq+0x94>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	0c5b      	lsrs	r3, r3, #17
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	4a11      	ldr	r2, [pc, #68]	; (8002788 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002742:	5cd3      	ldrb	r3, [r2, r3]
 8002744:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a0d      	ldr	r2, [pc, #52]	; (8002780 <HAL_RCC_GetSysClockFreq+0x98>)
 800274a:	fb03 f202 	mul.w	r2, r3, r2
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	fbb2 f3f3 	udiv	r3, r2, r3
 8002754:	617b      	str	r3, [r7, #20]
 8002756:	e004      	b.n	8002762 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a0c      	ldr	r2, [pc, #48]	; (800278c <HAL_RCC_GetSysClockFreq+0xa4>)
 800275c:	fb02 f303 	mul.w	r3, r2, r3
 8002760:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	613b      	str	r3, [r7, #16]
      break;
 8002766:	e002      	b.n	800276e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002768:	4b05      	ldr	r3, [pc, #20]	; (8002780 <HAL_RCC_GetSysClockFreq+0x98>)
 800276a:	613b      	str	r3, [r7, #16]
      break;
 800276c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800276e:	693b      	ldr	r3, [r7, #16]
}
 8002770:	4618      	mov	r0, r3
 8002772:	371c      	adds	r7, #28
 8002774:	46bd      	mov	sp, r7
 8002776:	bc80      	pop	{r7}
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	40021000 	.word	0x40021000
 8002780:	007a1200 	.word	0x007a1200
 8002784:	08002a90 	.word	0x08002a90
 8002788:	08002aa0 	.word	0x08002aa0
 800278c:	003d0900 	.word	0x003d0900

08002790 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002794:	4b02      	ldr	r3, [pc, #8]	; (80027a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002796:	681b      	ldr	r3, [r3, #0]
}
 8002798:	4618      	mov	r0, r3
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr
 80027a0:	20000000 	.word	0x20000000

080027a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027a8:	f7ff fff2 	bl	8002790 <HAL_RCC_GetHCLKFreq>
 80027ac:	4602      	mov	r2, r0
 80027ae:	4b05      	ldr	r3, [pc, #20]	; (80027c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	0a1b      	lsrs	r3, r3, #8
 80027b4:	f003 0307 	and.w	r3, r3, #7
 80027b8:	4903      	ldr	r1, [pc, #12]	; (80027c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027ba:	5ccb      	ldrb	r3, [r1, r3]
 80027bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40021000 	.word	0x40021000
 80027c8:	08002a88 	.word	0x08002a88

080027cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027d0:	f7ff ffde 	bl	8002790 <HAL_RCC_GetHCLKFreq>
 80027d4:	4602      	mov	r2, r0
 80027d6:	4b05      	ldr	r3, [pc, #20]	; (80027ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	0adb      	lsrs	r3, r3, #11
 80027dc:	f003 0307 	and.w	r3, r3, #7
 80027e0:	4903      	ldr	r1, [pc, #12]	; (80027f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027e2:	5ccb      	ldrb	r3, [r1, r3]
 80027e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40021000 	.word	0x40021000
 80027f0:	08002a88 	.word	0x08002a88

080027f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027fc:	4b0a      	ldr	r3, [pc, #40]	; (8002828 <RCC_Delay+0x34>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a0a      	ldr	r2, [pc, #40]	; (800282c <RCC_Delay+0x38>)
 8002802:	fba2 2303 	umull	r2, r3, r2, r3
 8002806:	0a5b      	lsrs	r3, r3, #9
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	fb02 f303 	mul.w	r3, r2, r3
 800280e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002810:	bf00      	nop
  }
  while (Delay --);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	1e5a      	subs	r2, r3, #1
 8002816:	60fa      	str	r2, [r7, #12]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1f9      	bne.n	8002810 <RCC_Delay+0x1c>
}
 800281c:	bf00      	nop
 800281e:	bf00      	nop
 8002820:	3714      	adds	r7, #20
 8002822:	46bd      	mov	sp, r7
 8002824:	bc80      	pop	{r7}
 8002826:	4770      	bx	lr
 8002828:	20000000 	.word	0x20000000
 800282c:	10624dd3 	.word	0x10624dd3

08002830 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e042      	b.n	80028c8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d106      	bne.n	800285c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7fe fa4c 	bl	8000cf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2224      	movs	r2, #36	; 0x24
 8002860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68da      	ldr	r2, [r3, #12]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002872:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f000 f82b 	bl	80028d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	691a      	ldr	r2, [r3, #16]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002888:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	695a      	ldr	r2, [r3, #20]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002898:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68da      	ldr	r2, [r3, #12]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2220      	movs	r2, #32
 80028b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2220      	movs	r2, #32
 80028bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68da      	ldr	r2, [r3, #12]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	430a      	orrs	r2, r1
 80028ec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	689a      	ldr	r2, [r3, #8]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	431a      	orrs	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	695b      	ldr	r3, [r3, #20]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800290a:	f023 030c 	bic.w	r3, r3, #12
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	6812      	ldr	r2, [r2, #0]
 8002912:	68b9      	ldr	r1, [r7, #8]
 8002914:	430b      	orrs	r3, r1
 8002916:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	699a      	ldr	r2, [r3, #24]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	430a      	orrs	r2, r1
 800292c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a2c      	ldr	r2, [pc, #176]	; (80029e4 <UART_SetConfig+0x114>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d103      	bne.n	8002940 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002938:	f7ff ff48 	bl	80027cc <HAL_RCC_GetPCLK2Freq>
 800293c:	60f8      	str	r0, [r7, #12]
 800293e:	e002      	b.n	8002946 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002940:	f7ff ff30 	bl	80027a4 <HAL_RCC_GetPCLK1Freq>
 8002944:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	4613      	mov	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4413      	add	r3, r2
 800294e:	009a      	lsls	r2, r3, #2
 8002950:	441a      	add	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	fbb2 f3f3 	udiv	r3, r2, r3
 800295c:	4a22      	ldr	r2, [pc, #136]	; (80029e8 <UART_SetConfig+0x118>)
 800295e:	fba2 2303 	umull	r2, r3, r2, r3
 8002962:	095b      	lsrs	r3, r3, #5
 8002964:	0119      	lsls	r1, r3, #4
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	4613      	mov	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4413      	add	r3, r2
 800296e:	009a      	lsls	r2, r3, #2
 8002970:	441a      	add	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	fbb2 f2f3 	udiv	r2, r2, r3
 800297c:	4b1a      	ldr	r3, [pc, #104]	; (80029e8 <UART_SetConfig+0x118>)
 800297e:	fba3 0302 	umull	r0, r3, r3, r2
 8002982:	095b      	lsrs	r3, r3, #5
 8002984:	2064      	movs	r0, #100	; 0x64
 8002986:	fb00 f303 	mul.w	r3, r0, r3
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	011b      	lsls	r3, r3, #4
 800298e:	3332      	adds	r3, #50	; 0x32
 8002990:	4a15      	ldr	r2, [pc, #84]	; (80029e8 <UART_SetConfig+0x118>)
 8002992:	fba2 2303 	umull	r2, r3, r2, r3
 8002996:	095b      	lsrs	r3, r3, #5
 8002998:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800299c:	4419      	add	r1, r3
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	4613      	mov	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4413      	add	r3, r2
 80029a6:	009a      	lsls	r2, r3, #2
 80029a8:	441a      	add	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80029b4:	4b0c      	ldr	r3, [pc, #48]	; (80029e8 <UART_SetConfig+0x118>)
 80029b6:	fba3 0302 	umull	r0, r3, r3, r2
 80029ba:	095b      	lsrs	r3, r3, #5
 80029bc:	2064      	movs	r0, #100	; 0x64
 80029be:	fb00 f303 	mul.w	r3, r0, r3
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	011b      	lsls	r3, r3, #4
 80029c6:	3332      	adds	r3, #50	; 0x32
 80029c8:	4a07      	ldr	r2, [pc, #28]	; (80029e8 <UART_SetConfig+0x118>)
 80029ca:	fba2 2303 	umull	r2, r3, r2, r3
 80029ce:	095b      	lsrs	r3, r3, #5
 80029d0:	f003 020f 	and.w	r2, r3, #15
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	440a      	add	r2, r1
 80029da:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80029dc:	bf00      	nop
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40013800 	.word	0x40013800
 80029e8:	51eb851f 	.word	0x51eb851f

080029ec <memset>:
 80029ec:	4603      	mov	r3, r0
 80029ee:	4402      	add	r2, r0
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d100      	bne.n	80029f6 <memset+0xa>
 80029f4:	4770      	bx	lr
 80029f6:	f803 1b01 	strb.w	r1, [r3], #1
 80029fa:	e7f9      	b.n	80029f0 <memset+0x4>

080029fc <__libc_init_array>:
 80029fc:	b570      	push	{r4, r5, r6, lr}
 80029fe:	2600      	movs	r6, #0
 8002a00:	4d0c      	ldr	r5, [pc, #48]	; (8002a34 <__libc_init_array+0x38>)
 8002a02:	4c0d      	ldr	r4, [pc, #52]	; (8002a38 <__libc_init_array+0x3c>)
 8002a04:	1b64      	subs	r4, r4, r5
 8002a06:	10a4      	asrs	r4, r4, #2
 8002a08:	42a6      	cmp	r6, r4
 8002a0a:	d109      	bne.n	8002a20 <__libc_init_array+0x24>
 8002a0c:	f000 f828 	bl	8002a60 <_init>
 8002a10:	2600      	movs	r6, #0
 8002a12:	4d0a      	ldr	r5, [pc, #40]	; (8002a3c <__libc_init_array+0x40>)
 8002a14:	4c0a      	ldr	r4, [pc, #40]	; (8002a40 <__libc_init_array+0x44>)
 8002a16:	1b64      	subs	r4, r4, r5
 8002a18:	10a4      	asrs	r4, r4, #2
 8002a1a:	42a6      	cmp	r6, r4
 8002a1c:	d105      	bne.n	8002a2a <__libc_init_array+0x2e>
 8002a1e:	bd70      	pop	{r4, r5, r6, pc}
 8002a20:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a24:	4798      	blx	r3
 8002a26:	3601      	adds	r6, #1
 8002a28:	e7ee      	b.n	8002a08 <__libc_init_array+0xc>
 8002a2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a2e:	4798      	blx	r3
 8002a30:	3601      	adds	r6, #1
 8002a32:	e7f2      	b.n	8002a1a <__libc_init_array+0x1e>
 8002a34:	08002aa4 	.word	0x08002aa4
 8002a38:	08002aa4 	.word	0x08002aa4
 8002a3c:	08002aa4 	.word	0x08002aa4
 8002a40:	08002aa8 	.word	0x08002aa8

08002a44 <memcpy>:
 8002a44:	440a      	add	r2, r1
 8002a46:	4291      	cmp	r1, r2
 8002a48:	f100 33ff 	add.w	r3, r0, #4294967295
 8002a4c:	d100      	bne.n	8002a50 <memcpy+0xc>
 8002a4e:	4770      	bx	lr
 8002a50:	b510      	push	{r4, lr}
 8002a52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002a56:	4291      	cmp	r1, r2
 8002a58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002a5c:	d1f9      	bne.n	8002a52 <memcpy+0xe>
 8002a5e:	bd10      	pop	{r4, pc}

08002a60 <_init>:
 8002a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a62:	bf00      	nop
 8002a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a66:	bc08      	pop	{r3}
 8002a68:	469e      	mov	lr, r3
 8002a6a:	4770      	bx	lr

08002a6c <_fini>:
 8002a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a6e:	bf00      	nop
 8002a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a72:	bc08      	pop	{r3}
 8002a74:	469e      	mov	lr, r3
 8002a76:	4770      	bx	lr
