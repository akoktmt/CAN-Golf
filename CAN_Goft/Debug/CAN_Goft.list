
CAN_Goft.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003920  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08003a2c  08003a2c  00013a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003aa0  08003aa0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08003aa0  08003aa0  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003aa0  08003aa0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003aa0  08003aa0  00013aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003aa4  08003aa4  00013aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003aa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  2000005c  08003b04  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  08003b04  00020238  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009d88  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c7e  00000000  00000000  00029e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000860  00000000  00000000  0002bad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000659  00000000  00000000  0002c330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001781d  00000000  00000000  0002c989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a8bf  00000000  00000000  000441a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00085086  00000000  00000000  0004ea65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002600  00000000  00000000  000d3aec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000d60ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003a14 	.word	0x08003a14

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003a14 	.word	0x08003a14

0800014c <CANBufferHandleStruct_Init>:
 *      Author: win 10
 */
#include <CAN_OSI.h>
#include <string.h>
#include "CAN_Flag.h"
void CANBufferHandleStruct_Init(CANBufferHandleStruct *Buffer) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b096      	sub	sp, #88	; 0x58
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	NodeBufferHandle defaultNodeHandle = {0};
 8000154:	f107 030c 	add.w	r3, r7, #12
 8000158:	2247      	movs	r2, #71	; 0x47
 800015a:	2100      	movs	r1, #0
 800015c:	4618      	mov	r0, r3
 800015e:	f003 f873 	bl	8003248 <memset>
	Buffer->StdID=0;
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2200      	movs	r2, #0
 8000166:	721a      	strb	r2, [r3, #8]
	Buffer->Buffer_Index = 0;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2200      	movs	r2, #0
 800016c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	Buffer->SenderID = 0;
 8000170:	687b      	ldr	r3, [r7, #4]
 8000172:	2200      	movs	r2, #0
 8000174:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	Buffer->RecvID = 0;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2200      	movs	r2, #0
 800017c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
	Buffer->FrameType_Index = SET_UP_FRAME;
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	2200      	movs	r2, #0
 8000184:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	Buffer->PacketDataLength = 0;
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	2200      	movs	r2, #0
 800018c:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	Buffer->CRCValue = 0;
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	2200      	movs	r2, #0
 8000194:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
	Buffer->NumberOfFrame=0;
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	2200      	movs	r2, #0
 800019c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	memset(Buffer->Data,0,sizeof(Buffer->Data));
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	2208      	movs	r2, #8
 80001a4:	2100      	movs	r1, #0
 80001a6:	4618      	mov	r0, r3
 80001a8:	f003 f84e 	bl	8003248 <memset>
	memset(Buffer->NetworkBuffer, 0, sizeof(Buffer->NetworkBuffer));
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	3309      	adds	r3, #9
 80001b0:	2240      	movs	r2, #64	; 0x40
 80001b2:	2100      	movs	r1, #0
 80001b4:	4618      	mov	r0, r3
 80001b6:	f003 f847 	bl	8003248 <memset>
	memset(Buffer->Buffer, 0x55, sizeof(Buffer->Buffer));
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	3350      	adds	r3, #80	; 0x50
 80001be:	2240      	movs	r2, #64	; 0x40
 80001c0:	2155      	movs	r1, #85	; 0x55
 80001c2:	4618      	mov	r0, r3
 80001c4:	f003 f840 	bl	8003248 <memset>
	memset(Buffer->StoreData, 0, sizeof(Buffer->StoreData));
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	3390      	adds	r3, #144	; 0x90
 80001cc:	2240      	movs	r2, #64	; 0x40
 80001ce:	2100      	movs	r1, #0
 80001d0:	4618      	mov	r0, r3
 80001d2:	f003 f839 	bl	8003248 <memset>
	for (int i = 0; i < 16; i++) {
 80001d6:	2300      	movs	r3, #0
 80001d8:	657b      	str	r3, [r7, #84]	; 0x54
 80001da:	e012      	b.n	8000202 <CANBufferHandleStruct_Init+0xb6>
		Buffer->NodeHandle[i] = defaultNodeHandle;
 80001dc:	6879      	ldr	r1, [r7, #4]
 80001de:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80001e0:	4613      	mov	r3, r2
 80001e2:	00db      	lsls	r3, r3, #3
 80001e4:	4413      	add	r3, r2
 80001e6:	00db      	lsls	r3, r3, #3
 80001e8:	1a9b      	subs	r3, r3, r2
 80001ea:	440b      	add	r3, r1
 80001ec:	33d0      	adds	r3, #208	; 0xd0
 80001ee:	3302      	adds	r3, #2
 80001f0:	f107 010c 	add.w	r1, r7, #12
 80001f4:	2247      	movs	r2, #71	; 0x47
 80001f6:	4618      	mov	r0, r3
 80001f8:	f003 f86a 	bl	80032d0 <memcpy>
	for (int i = 0; i < 16; i++) {
 80001fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80001fe:	3301      	adds	r3, #1
 8000200:	657b      	str	r3, [r7, #84]	; 0x54
 8000202:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000204:	2b0f      	cmp	r3, #15
 8000206:	dde9      	ble.n	80001dc <CANBufferHandleStruct_Init+0x90>
	}
}
 8000208:	bf00      	nop
 800020a:	bf00      	nop
 800020c:	3758      	adds	r7, #88	; 0x58
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}

08000212 <FlagsFrameHandle_Init>:
void FlagsFrameHandle_Init(FlagFrameHandle *FlagInit) {
 8000212:	b4b0      	push	{r4, r5, r7}
 8000214:	b089      	sub	sp, #36	; 0x24
 8000216:	af00      	add	r7, sp, #0
 8000218:	6078      	str	r0, [r7, #4]
	FlagIdHandle DefaultFlagID= {0};
 800021a:	f107 0308 	add.w	r3, r7, #8
 800021e:	2200      	movs	r2, #0
 8000220:	601a      	str	r2, [r3, #0]
 8000222:	605a      	str	r2, [r3, #4]
 8000224:	609a      	str	r2, [r3, #8]
 8000226:	60da      	str	r2, [r3, #12]
 8000228:	741a      	strb	r2, [r3, #16]
	FlagInit->FrameBits.Flag_Frame_0 = 0;
 800022a:	687a      	ldr	r2, [r7, #4]
 800022c:	f892 3112 	ldrb.w	r3, [r2, #274]	; 0x112
 8000230:	f36f 0300 	bfc	r3, #0, #1
 8000234:	f882 3112 	strb.w	r3, [r2, #274]	; 0x112
	FlagInit->FrameBits.Flag_Frame_1 = 0;
 8000238:	687a      	ldr	r2, [r7, #4]
 800023a:	f892 3112 	ldrb.w	r3, [r2, #274]	; 0x112
 800023e:	f36f 0341 	bfc	r3, #1, #1
 8000242:	f882 3112 	strb.w	r3, [r2, #274]	; 0x112
	FlagInit->FrameBits.Flag_Frame_2 = 0;
 8000246:	687a      	ldr	r2, [r7, #4]
 8000248:	f892 3112 	ldrb.w	r3, [r2, #274]	; 0x112
 800024c:	f36f 0382 	bfc	r3, #2, #1
 8000250:	f882 3112 	strb.w	r3, [r2, #274]	; 0x112
	FlagInit->FrameBits.Flag_Frame_3 = 0;
 8000254:	687a      	ldr	r2, [r7, #4]
 8000256:	f892 3112 	ldrb.w	r3, [r2, #274]	; 0x112
 800025a:	f36f 03c3 	bfc	r3, #3, #1
 800025e:	f882 3112 	strb.w	r3, [r2, #274]	; 0x112
	FlagInit->FrameBits.Flag_Frame_4 = 0;
 8000262:	687a      	ldr	r2, [r7, #4]
 8000264:	f892 3112 	ldrb.w	r3, [r2, #274]	; 0x112
 8000268:	f36f 1304 	bfc	r3, #4, #1
 800026c:	f882 3112 	strb.w	r3, [r2, #274]	; 0x112
	FlagInit->FrameBits.Flag_Frame_5 = 0;
 8000270:	687a      	ldr	r2, [r7, #4]
 8000272:	f892 3112 	ldrb.w	r3, [r2, #274]	; 0x112
 8000276:	f36f 1345 	bfc	r3, #5, #1
 800027a:	f882 3112 	strb.w	r3, [r2, #274]	; 0x112
	FlagInit->FrameBits.Flag_Frame_6 = 0;
 800027e:	687a      	ldr	r2, [r7, #4]
 8000280:	f892 3112 	ldrb.w	r3, [r2, #274]	; 0x112
 8000284:	f36f 1386 	bfc	r3, #6, #1
 8000288:	f882 3112 	strb.w	r3, [r2, #274]	; 0x112
	FlagInit->FrameBits.Flag_Frame_7 = 0;
 800028c:	687a      	ldr	r2, [r7, #4]
 800028e:	f892 3112 	ldrb.w	r3, [r2, #274]	; 0x112
 8000292:	f36f 13c7 	bfc	r3, #7, #1
 8000296:	f882 3112 	strb.w	r3, [r2, #274]	; 0x112
	for(int i=0; i<16;i++)
 800029a:	2300      	movs	r3, #0
 800029c:	61fb      	str	r3, [r7, #28]
 800029e:	e012      	b.n	80002c6 <FlagsFrameHandle_Init+0xb4>
	{
		FlagInit->FlagID[i]=DefaultFlagID;
 80002a0:	6879      	ldr	r1, [r7, #4]
 80002a2:	69fa      	ldr	r2, [r7, #28]
 80002a4:	4613      	mov	r3, r2
 80002a6:	011b      	lsls	r3, r3, #4
 80002a8:	4413      	add	r3, r2
 80002aa:	440b      	add	r3, r1
 80002ac:	461d      	mov	r5, r3
 80002ae:	f107 0408 	add.w	r4, r7, #8
 80002b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80002b4:	6028      	str	r0, [r5, #0]
 80002b6:	6069      	str	r1, [r5, #4]
 80002b8:	60aa      	str	r2, [r5, #8]
 80002ba:	60eb      	str	r3, [r5, #12]
 80002bc:	7823      	ldrb	r3, [r4, #0]
 80002be:	742b      	strb	r3, [r5, #16]
	for(int i=0; i<16;i++)
 80002c0:	69fb      	ldr	r3, [r7, #28]
 80002c2:	3301      	adds	r3, #1
 80002c4:	61fb      	str	r3, [r7, #28]
 80002c6:	69fb      	ldr	r3, [r7, #28]
 80002c8:	2b0f      	cmp	r3, #15
 80002ca:	dde9      	ble.n	80002a0 <FlagsFrameHandle_Init+0x8e>
	}
}
 80002cc:	bf00      	nop
 80002ce:	bf00      	nop
 80002d0:	3724      	adds	r7, #36	; 0x24
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bcb0      	pop	{r4, r5, r7}
 80002d6:	4770      	bx	lr

080002d8 <CAN_TXHeaderConfig>:
void CAN_TXHeaderConfig(CAN_TxHeaderTypeDef *Txheader, uint32_t StdId) {
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
 80002e0:	6039      	str	r1, [r7, #0]
	Txheader->DLC = 8;
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	2208      	movs	r2, #8
 80002e6:	611a      	str	r2, [r3, #16]
	Txheader->RTR = CAN_RTR_DATA;
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	2200      	movs	r2, #0
 80002ec:	60da      	str	r2, [r3, #12]
	Txheader->IDE = CAN_ID_STD;
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	2200      	movs	r2, #0
 80002f2:	609a      	str	r2, [r3, #8]
	Txheader->StdId = StdId;
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	683a      	ldr	r2, [r7, #0]
 80002f8:	601a      	str	r2, [r3, #0]
}
 80002fa:	bf00      	nop
 80002fc:	370c      	adds	r7, #12
 80002fe:	46bd      	mov	sp, r7
 8000300:	bc80      	pop	{r7}
 8000302:	4770      	bx	lr

08000304 <CAN_Receive_Error_Handle>:
#include "CAN_Flag.h"
#include <stdlib.h>
extern CAN_HandleTypeDef hcan;

void CAN_Receive_Error_Handle(FlagRecNotification *FlagNoti,
		FlagFrameHandle *FlagHandle) {
 8000304:	b580      	push	{r7, lr}
 8000306:	b084      	sub	sp, #16
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
 800030c:	6039      	str	r1, [r7, #0]
	if (*FlagNoti == REC_FRAMEDATA_ERROR) {
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	781b      	ldrb	r3, [r3, #0]
 8000312:	2b01      	cmp	r3, #1
 8000314:	d122      	bne.n	800035c <CAN_Receive_Error_Handle+0x58>
		for (uint8_t FrameType = 0; FrameType < FlagHandle->NumberOfFrame;
 8000316:	2300      	movs	r3, #0
 8000318:	73fb      	strb	r3, [r7, #15]
 800031a:	e019      	b.n	8000350 <CAN_Receive_Error_Handle+0x4c>
				FrameType++) {
			if (FlagHandle->FlagID[FlagHandle->ID].FrameError[FrameType] == 1) {
 800031c:	683b      	ldr	r3, [r7, #0]
 800031e:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8000322:	4618      	mov	r0, r3
 8000324:	7bfa      	ldrb	r2, [r7, #15]
 8000326:	6839      	ldr	r1, [r7, #0]
 8000328:	4603      	mov	r3, r0
 800032a:	011b      	lsls	r3, r3, #4
 800032c:	4403      	add	r3, r0
 800032e:	440b      	add	r3, r1
 8000330:	4413      	add	r3, r2
 8000332:	3309      	adds	r3, #9
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	2b01      	cmp	r3, #1
 8000338:	d107      	bne.n	800034a <CAN_Receive_Error_Handle+0x46>
				CAN_Send_Response(FlagHandle->ID, FRAME_ERROR, FrameType);
 800033a:	683b      	ldr	r3, [r7, #0]
 800033c:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8000340:	7bfa      	ldrb	r2, [r7, #15]
 8000342:	2183      	movs	r1, #131	; 0x83
 8000344:	4618      	mov	r0, r3
 8000346:	f000 f819 	bl	800037c <CAN_Send_Response>
				FrameType++) {
 800034a:	7bfb      	ldrb	r3, [r7, #15]
 800034c:	3301      	adds	r3, #1
 800034e:	73fb      	strb	r3, [r7, #15]
		for (uint8_t FrameType = 0; FrameType < FlagHandle->NumberOfFrame;
 8000350:	683b      	ldr	r3, [r7, #0]
 8000352:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 8000356:	7bfa      	ldrb	r2, [r7, #15]
 8000358:	429a      	cmp	r2, r3
 800035a:	d3df      	bcc.n	800031c <CAN_Receive_Error_Handle+0x18>
			}
		}
	}
	if (*FlagNoti == REC_PACKET_ERROR) {
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	2b03      	cmp	r3, #3
 8000362:	d107      	bne.n	8000374 <CAN_Receive_Error_Handle+0x70>
		CAN_Send_Response(FlagHandle->ID, PACKET_ERROR, 0x55);
 8000364:	683b      	ldr	r3, [r7, #0]
 8000366:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800036a:	2255      	movs	r2, #85	; 0x55
 800036c:	2187      	movs	r1, #135	; 0x87
 800036e:	4618      	mov	r0, r3
 8000370:	f000 f804 	bl	800037c <CAN_Send_Response>

	}
}
 8000374:	bf00      	nop
 8000376:	3710      	adds	r7, #16
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}

0800037c <CAN_Send_Response>:
uint16_t CAN_Send_Response(uint8_t ID, uint8_t Opcode, uint8_t FrameType) {
 800037c:	b580      	push	{r7, lr}
 800037e:	b08c      	sub	sp, #48	; 0x30
 8000380:	af00      	add	r7, sp, #0
 8000382:	4603      	mov	r3, r0
 8000384:	71fb      	strb	r3, [r7, #7]
 8000386:	460b      	mov	r3, r1
 8000388:	71bb      	strb	r3, [r7, #6]
 800038a:	4613      	mov	r3, r2
 800038c:	717b      	strb	r3, [r7, #5]
	CAN_TxHeaderTypeDef TxHeader;
	uint32_t Txmailbox;
	uint8_t OpcodeData[8] = { Opcode, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55 };
 800038e:	79bb      	ldrb	r3, [r7, #6]
 8000390:	723b      	strb	r3, [r7, #8]
 8000392:	2355      	movs	r3, #85	; 0x55
 8000394:	727b      	strb	r3, [r7, #9]
 8000396:	2355      	movs	r3, #85	; 0x55
 8000398:	72bb      	strb	r3, [r7, #10]
 800039a:	2355      	movs	r3, #85	; 0x55
 800039c:	72fb      	strb	r3, [r7, #11]
 800039e:	2355      	movs	r3, #85	; 0x55
 80003a0:	733b      	strb	r3, [r7, #12]
 80003a2:	2355      	movs	r3, #85	; 0x55
 80003a4:	737b      	strb	r3, [r7, #13]
 80003a6:	2355      	movs	r3, #85	; 0x55
 80003a8:	73bb      	strb	r3, [r7, #14]
 80003aa:	2355      	movs	r3, #85	; 0x55
 80003ac:	73fb      	strb	r3, [r7, #15]
	uint8_t StID = 0x00;
 80003ae:	2300      	movs	r3, #0
 80003b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	StID |= ID;
 80003b4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80003b8:	79fb      	ldrb	r3, [r7, #7]
 80003ba:	4313      	orrs	r3, r2
 80003bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	StID = (StID << 3) | FrameType;
 80003c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80003c4:	00db      	lsls	r3, r3, #3
 80003c6:	b25a      	sxtb	r2, r3
 80003c8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80003cc:	4313      	orrs	r3, r2
 80003ce:	b25b      	sxtb	r3, r3
 80003d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	CAN_TXHeaderConfig(&TxHeader, StID);
 80003d4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80003d8:	f107 0314 	add.w	r3, r7, #20
 80003dc:	4611      	mov	r1, r2
 80003de:	4618      	mov	r0, r3
 80003e0:	f7ff ff7a 	bl	80002d8 <CAN_TXHeaderConfig>
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, OpcodeData, &Txmailbox)
 80003e4:	f107 0310 	add.w	r3, r7, #16
 80003e8:	f107 0208 	add.w	r2, r7, #8
 80003ec:	f107 0114 	add.w	r1, r7, #20
 80003f0:	480a      	ldr	r0, [pc, #40]	; (800041c <CAN_Send_Response+0xa0>)
 80003f2:	f001 f95d 	bl	80016b0 <HAL_CAN_AddTxMessage>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d001      	beq.n	8000400 <CAN_Send_Response+0x84>
			!= HAL_OK) {
		Error_Handler();
 80003fc:	f000 fd4c 	bl	8000e98 <Error_Handler>
	}
	while (HAL_CAN_IsTxMessagePending(&hcan, Txmailbox))
 8000400:	bf00      	nop
 8000402:	693b      	ldr	r3, [r7, #16]
 8000404:	4619      	mov	r1, r3
 8000406:	4805      	ldr	r0, [pc, #20]	; (800041c <CAN_Send_Response+0xa0>)
 8000408:	f001 fa21 	bl	800184e <HAL_CAN_IsTxMessagePending>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d1f7      	bne.n	8000402 <CAN_Send_Response+0x86>
		;
	return HAL_OK;
 8000412:	2300      	movs	r3, #0
}
 8000414:	4618      	mov	r0, r3
 8000416:	3730      	adds	r7, #48	; 0x30
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	20000078 	.word	0x20000078

08000420 <CAN_ProcessRxBuffer>:
		CAN_Send_Physical_Send(Buffer, Data, pIDType);
	}
}
void CAN_ProcessRxBuffer(FlagFrameHandle *FlagHandle, uint8_t ID,
		CANBufferHandleStruct *RxBuffer, uint8_t *DataPhysical,
		FlagRecNotification *FlagRecHandle) {
 8000420:	b580      	push	{r7, lr}
 8000422:	b088      	sub	sp, #32
 8000424:	af02      	add	r7, sp, #8
 8000426:	60f8      	str	r0, [r7, #12]
 8000428:	607a      	str	r2, [r7, #4]
 800042a:	603b      	str	r3, [r7, #0]
 800042c:	460b      	mov	r3, r1
 800042e:	72fb      	strb	r3, [r7, #11]
	uint8_t FrameType = 0;
 8000430:	2300      	movs	r3, #0
 8000432:	75fb      	strb	r3, [r7, #23]
	RxBuffer->NodeHandle[ID].NodeIndex++;
 8000434:	7afa      	ldrb	r2, [r7, #11]
 8000436:	6879      	ldr	r1, [r7, #4]
 8000438:	4613      	mov	r3, r2
 800043a:	00db      	lsls	r3, r3, #3
 800043c:	4413      	add	r3, r2
 800043e:	00db      	lsls	r3, r3, #3
 8000440:	1a9b      	subs	r3, r3, r2
 8000442:	440b      	add	r3, r1
 8000444:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	3301      	adds	r3, #1
 800044c:	b2d8      	uxtb	r0, r3
 800044e:	6879      	ldr	r1, [r7, #4]
 8000450:	4613      	mov	r3, r2
 8000452:	00db      	lsls	r3, r3, #3
 8000454:	4413      	add	r3, r2
 8000456:	00db      	lsls	r3, r3, #3
 8000458:	1a9b      	subs	r3, r3, r2
 800045a:	440b      	add	r3, r1
 800045c:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8000460:	4602      	mov	r2, r0
 8000462:	701a      	strb	r2, [r3, #0]
	for (; FrameType < RxBuffer->NodeHandle[ID].NumberOfFrame; FrameType++) {
 8000464:	e00b      	b.n	800047e <CAN_ProcessRxBuffer+0x5e>
		CAN_ProcessFrame(FlagHandle, ID, RxBuffer, FrameType, DataPhysical);
 8000466:	7dfa      	ldrb	r2, [r7, #23]
 8000468:	7af9      	ldrb	r1, [r7, #11]
 800046a:	683b      	ldr	r3, [r7, #0]
 800046c:	9300      	str	r3, [sp, #0]
 800046e:	4613      	mov	r3, r2
 8000470:	687a      	ldr	r2, [r7, #4]
 8000472:	68f8      	ldr	r0, [r7, #12]
 8000474:	f000 f8c9 	bl	800060a <CAN_ProcessFrame>
	for (; FrameType < RxBuffer->NodeHandle[ID].NumberOfFrame; FrameType++) {
 8000478:	7dfb      	ldrb	r3, [r7, #23]
 800047a:	3301      	adds	r3, #1
 800047c:	75fb      	strb	r3, [r7, #23]
 800047e:	7afa      	ldrb	r2, [r7, #11]
 8000480:	6879      	ldr	r1, [r7, #4]
 8000482:	4613      	mov	r3, r2
 8000484:	00db      	lsls	r3, r3, #3
 8000486:	4413      	add	r3, r2
 8000488:	00db      	lsls	r3, r3, #3
 800048a:	1a9b      	subs	r3, r3, r2
 800048c:	440b      	add	r3, r1
 800048e:	f503 738b 	add.w	r3, r3, #278	; 0x116
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	7dfa      	ldrb	r2, [r7, #23]
 8000496:	429a      	cmp	r2, r3
 8000498:	d3e5      	bcc.n	8000466 <CAN_ProcessRxBuffer+0x46>
	}
	if (RxBuffer->NodeHandle[ID].NodeIndex
 800049a:	7afa      	ldrb	r2, [r7, #11]
 800049c:	6879      	ldr	r1, [r7, #4]
 800049e:	4613      	mov	r3, r2
 80004a0:	00db      	lsls	r3, r3, #3
 80004a2:	4413      	add	r3, r2
 80004a4:	00db      	lsls	r3, r3, #3
 80004a6:	1a9b      	subs	r3, r3, r2
 80004a8:	440b      	add	r3, r1
 80004aa:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80004ae:	7819      	ldrb	r1, [r3, #0]
			== RxBuffer->NodeHandle[ID].NumberOfFrame) {
 80004b0:	7afa      	ldrb	r2, [r7, #11]
 80004b2:	6878      	ldr	r0, [r7, #4]
 80004b4:	4613      	mov	r3, r2
 80004b6:	00db      	lsls	r3, r3, #3
 80004b8:	4413      	add	r3, r2
 80004ba:	00db      	lsls	r3, r3, #3
 80004bc:	1a9b      	subs	r3, r3, r2
 80004be:	4403      	add	r3, r0
 80004c0:	f503 738b 	add.w	r3, r3, #278	; 0x116
 80004c4:	781b      	ldrb	r3, [r3, #0]
	if (RxBuffer->NodeHandle[ID].NodeIndex
 80004c6:	4299      	cmp	r1, r3
 80004c8:	f040 809b 	bne.w	8000602 <CAN_ProcessRxBuffer+0x1e2>
		if (FlagHandle->FlagID[ID].SumOfFlag
 80004cc:	7afa      	ldrb	r2, [r7, #11]
 80004ce:	68f9      	ldr	r1, [r7, #12]
 80004d0:	4613      	mov	r3, r2
 80004d2:	011b      	lsls	r3, r3, #4
 80004d4:	4413      	add	r3, r2
 80004d6:	440b      	add	r3, r1
 80004d8:	3308      	adds	r3, #8
 80004da:	7819      	ldrb	r1, [r3, #0]
				== RxBuffer->NodeHandle[ID].NumberOfFrame) {
 80004dc:	7afa      	ldrb	r2, [r7, #11]
 80004de:	6878      	ldr	r0, [r7, #4]
 80004e0:	4613      	mov	r3, r2
 80004e2:	00db      	lsls	r3, r3, #3
 80004e4:	4413      	add	r3, r2
 80004e6:	00db      	lsls	r3, r3, #3
 80004e8:	1a9b      	subs	r3, r3, r2
 80004ea:	4403      	add	r3, r0
 80004ec:	f503 738b 	add.w	r3, r3, #278	; 0x116
 80004f0:	781b      	ldrb	r3, [r3, #0]
		if (FlagHandle->FlagID[ID].SumOfFlag
 80004f2:	4299      	cmp	r1, r3
 80004f4:	d142      	bne.n	800057c <CAN_ProcessRxBuffer+0x15c>
			*FlagRecHandle = REC_FRAMEDATA_SUCCESS;
 80004f6:	6a3b      	ldr	r3, [r7, #32]
 80004f8:	2202      	movs	r2, #2
 80004fa:	701a      	strb	r2, [r3, #0]
			RxBuffer->NodeHandle[ID].NodeIndex = 0;
 80004fc:	7afa      	ldrb	r2, [r7, #11]
 80004fe:	6879      	ldr	r1, [r7, #4]
 8000500:	4613      	mov	r3, r2
 8000502:	00db      	lsls	r3, r3, #3
 8000504:	4413      	add	r3, r2
 8000506:	00db      	lsls	r3, r3, #3
 8000508:	1a9b      	subs	r3, r3, r2
 800050a:	440b      	add	r3, r1
 800050c:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8000510:	2200      	movs	r2, #0
 8000512:	701a      	strb	r2, [r3, #0]
			RxBuffer->NodeHandle[ID].DuplicateFrame = 0;
 8000514:	7afa      	ldrb	r2, [r7, #11]
 8000516:	6879      	ldr	r1, [r7, #4]
 8000518:	4613      	mov	r3, r2
 800051a:	00db      	lsls	r3, r3, #3
 800051c:	4413      	add	r3, r2
 800051e:	00db      	lsls	r3, r3, #3
 8000520:	1a9b      	subs	r3, r3, r2
 8000522:	440b      	add	r3, r1
 8000524:	f203 1313 	addw	r3, r3, #275	; 0x113
 8000528:	2200      	movs	r2, #0
 800052a:	701a      	strb	r2, [r3, #0]
			FlagHandle->FlagID[ID].SumOfFlag = 0;
 800052c:	7afa      	ldrb	r2, [r7, #11]
 800052e:	68f9      	ldr	r1, [r7, #12]
 8000530:	4613      	mov	r3, r2
 8000532:	011b      	lsls	r3, r3, #4
 8000534:	4413      	add	r3, r2
 8000536:	440b      	add	r3, r1
 8000538:	3308      	adds	r3, #8
 800053a:	2200      	movs	r2, #0
 800053c:	701a      	strb	r2, [r3, #0]
			for (FrameType = 0;
 800053e:	2300      	movs	r3, #0
 8000540:	75fb      	strb	r3, [r7, #23]
 8000542:	e00c      	b.n	800055e <CAN_ProcessRxBuffer+0x13e>
					FrameType < RxBuffer->NodeHandle[ID].NumberOfFrame;
					FrameType++) {
				FlagHandle->FlagID[ID].FlagFrameFull[FrameType] = 0;
 8000544:	7afa      	ldrb	r2, [r7, #11]
 8000546:	7df9      	ldrb	r1, [r7, #23]
 8000548:	68f8      	ldr	r0, [r7, #12]
 800054a:	4613      	mov	r3, r2
 800054c:	011b      	lsls	r3, r3, #4
 800054e:	4413      	add	r3, r2
 8000550:	4403      	add	r3, r0
 8000552:	440b      	add	r3, r1
 8000554:	2200      	movs	r2, #0
 8000556:	701a      	strb	r2, [r3, #0]
					FrameType++) {
 8000558:	7dfb      	ldrb	r3, [r7, #23]
 800055a:	3301      	adds	r3, #1
 800055c:	75fb      	strb	r3, [r7, #23]
					FrameType < RxBuffer->NodeHandle[ID].NumberOfFrame;
 800055e:	7afa      	ldrb	r2, [r7, #11]
 8000560:	6879      	ldr	r1, [r7, #4]
 8000562:	4613      	mov	r3, r2
 8000564:	00db      	lsls	r3, r3, #3
 8000566:	4413      	add	r3, r2
 8000568:	00db      	lsls	r3, r3, #3
 800056a:	1a9b      	subs	r3, r3, r2
 800056c:	440b      	add	r3, r1
 800056e:	f503 738b 	add.w	r3, r3, #278	; 0x116
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	7dfa      	ldrb	r2, [r7, #23]
 8000576:	429a      	cmp	r2, r3
 8000578:	d3e4      	bcc.n	8000544 <CAN_ProcessRxBuffer+0x124>
					CAN_Receive_Error_Handle(FlagRecHandle, FlagHandle);
				}
			}
		}
	}
}
 800057a:	e042      	b.n	8000602 <CAN_ProcessRxBuffer+0x1e2>
			*FlagRecHandle = REC_FRAMEDATA_ERROR;
 800057c:	6a3b      	ldr	r3, [r7, #32]
 800057e:	2201      	movs	r2, #1
 8000580:	701a      	strb	r2, [r3, #0]
			for (FrameType = 0;
 8000582:	2300      	movs	r3, #0
 8000584:	75fb      	strb	r3, [r7, #23]
 8000586:	e02e      	b.n	80005e6 <CAN_ProcessRxBuffer+0x1c6>
				if (FlagHandle->FlagID[ID].FlagFrameFull[FrameType] == 0) {
 8000588:	7afa      	ldrb	r2, [r7, #11]
 800058a:	7df9      	ldrb	r1, [r7, #23]
 800058c:	68f8      	ldr	r0, [r7, #12]
 800058e:	4613      	mov	r3, r2
 8000590:	011b      	lsls	r3, r3, #4
 8000592:	4413      	add	r3, r2
 8000594:	4403      	add	r3, r0
 8000596:	440b      	add	r3, r1
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d120      	bne.n	80005e0 <CAN_ProcessRxBuffer+0x1c0>
					FlagHandle->FlagID[ID].FrameError[FrameType] = 1;
 800059e:	7afa      	ldrb	r2, [r7, #11]
 80005a0:	7df9      	ldrb	r1, [r7, #23]
 80005a2:	68f8      	ldr	r0, [r7, #12]
 80005a4:	4613      	mov	r3, r2
 80005a6:	011b      	lsls	r3, r3, #4
 80005a8:	4413      	add	r3, r2
 80005aa:	4403      	add	r3, r0
 80005ac:	440b      	add	r3, r1
 80005ae:	3309      	adds	r3, #9
 80005b0:	2201      	movs	r2, #1
 80005b2:	701a      	strb	r2, [r3, #0]
					FlagHandle->ID = ID;
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	7afa      	ldrb	r2, [r7, #11]
 80005b8:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
							RxBuffer->NodeHandle[ID].NumberOfFrame;
 80005bc:	7afa      	ldrb	r2, [r7, #11]
 80005be:	6879      	ldr	r1, [r7, #4]
 80005c0:	4613      	mov	r3, r2
 80005c2:	00db      	lsls	r3, r3, #3
 80005c4:	4413      	add	r3, r2
 80005c6:	00db      	lsls	r3, r3, #3
 80005c8:	1a9b      	subs	r3, r3, r2
 80005ca:	440b      	add	r3, r1
 80005cc:	f503 738b 	add.w	r3, r3, #278	; 0x116
 80005d0:	781a      	ldrb	r2, [r3, #0]
					FlagHandle->NumberOfFrame =
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
					CAN_Receive_Error_Handle(FlagRecHandle, FlagHandle);
 80005d8:	68f9      	ldr	r1, [r7, #12]
 80005da:	6a38      	ldr	r0, [r7, #32]
 80005dc:	f7ff fe92 	bl	8000304 <CAN_Receive_Error_Handle>
					FrameType++) {
 80005e0:	7dfb      	ldrb	r3, [r7, #23]
 80005e2:	3301      	adds	r3, #1
 80005e4:	75fb      	strb	r3, [r7, #23]
					FrameType <= RxBuffer->NodeHandle[ID].NumberOfFrame;
 80005e6:	7afa      	ldrb	r2, [r7, #11]
 80005e8:	6879      	ldr	r1, [r7, #4]
 80005ea:	4613      	mov	r3, r2
 80005ec:	00db      	lsls	r3, r3, #3
 80005ee:	4413      	add	r3, r2
 80005f0:	00db      	lsls	r3, r3, #3
 80005f2:	1a9b      	subs	r3, r3, r2
 80005f4:	440b      	add	r3, r1
 80005f6:	f503 738b 	add.w	r3, r3, #278	; 0x116
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	7dfa      	ldrb	r2, [r7, #23]
 80005fe:	429a      	cmp	r2, r3
 8000600:	d9c2      	bls.n	8000588 <CAN_ProcessRxBuffer+0x168>
}
 8000602:	bf00      	nop
 8000604:	3718      	adds	r7, #24
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}

0800060a <CAN_ProcessFrame>:

void CAN_ProcessFrame(FlagFrameHandle *FlagHandle, uint8_t ID,
		CANBufferHandleStruct *RxBuffer, uint8_t FrameType, uint8_t *Data) {
 800060a:	b590      	push	{r4, r7, lr}
 800060c:	b085      	sub	sp, #20
 800060e:	af00      	add	r7, sp, #0
 8000610:	60f8      	str	r0, [r7, #12]
 8000612:	607a      	str	r2, [r7, #4]
 8000614:	461a      	mov	r2, r3
 8000616:	460b      	mov	r3, r1
 8000618:	72fb      	strb	r3, [r7, #11]
 800061a:	4613      	mov	r3, r2
 800061c:	72bb      	strb	r3, [r7, #10]
	if (RxBuffer->NodeHandle[ID].FrameType == FrameType
 800061e:	7afa      	ldrb	r2, [r7, #11]
 8000620:	6879      	ldr	r1, [r7, #4]
 8000622:	4613      	mov	r3, r2
 8000624:	00db      	lsls	r3, r3, #3
 8000626:	4413      	add	r3, r2
 8000628:	00db      	lsls	r3, r3, #3
 800062a:	1a9b      	subs	r3, r3, r2
 800062c:	440b      	add	r3, r1
 800062e:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	7aba      	ldrb	r2, [r7, #10]
 8000636:	429a      	cmp	r2, r3
 8000638:	d14c      	bne.n	80006d4 <CAN_ProcessFrame+0xca>
			&& FlagHandle->FlagID[ID].FlagFrameFull[FrameType] == 0) {
 800063a:	7afa      	ldrb	r2, [r7, #11]
 800063c:	7ab9      	ldrb	r1, [r7, #10]
 800063e:	68f8      	ldr	r0, [r7, #12]
 8000640:	4613      	mov	r3, r2
 8000642:	011b      	lsls	r3, r3, #4
 8000644:	4413      	add	r3, r2
 8000646:	4403      	add	r3, r0
 8000648:	440b      	add	r3, r1
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d141      	bne.n	80006d4 <CAN_ProcessFrame+0xca>
		memcpy(
				RxBuffer->NodeHandle[ID].NodeBuffer[RxBuffer->NodeHandle[ID].FrameType],
 8000650:	7afa      	ldrb	r2, [r7, #11]
 8000652:	7af9      	ldrb	r1, [r7, #11]
 8000654:	6878      	ldr	r0, [r7, #4]
 8000656:	460b      	mov	r3, r1
 8000658:	00db      	lsls	r3, r3, #3
 800065a:	440b      	add	r3, r1
 800065c:	00db      	lsls	r3, r3, #3
 800065e:	1a5b      	subs	r3, r3, r1
 8000660:	4403      	add	r3, r0
 8000662:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	00d9      	lsls	r1, r3, #3
 800066a:	4613      	mov	r3, r2
 800066c:	00db      	lsls	r3, r3, #3
 800066e:	4413      	add	r3, r2
 8000670:	00db      	lsls	r3, r3, #3
 8000672:	1a9b      	subs	r3, r3, r2
 8000674:	440b      	add	r3, r1
 8000676:	33d0      	adds	r3, #208	; 0xd0
 8000678:	687a      	ldr	r2, [r7, #4]
 800067a:	4413      	add	r3, r2
 800067c:	3303      	adds	r3, #3
		memcpy(
 800067e:	2208      	movs	r2, #8
 8000680:	6a39      	ldr	r1, [r7, #32]
 8000682:	4618      	mov	r0, r3
 8000684:	f002 fe24 	bl	80032d0 <memcpy>
				Data, CAN_MAX_DATA);

		FlagHandle->FlagID[ID].FlagFrameFull[FrameType] = 1;
 8000688:	7afa      	ldrb	r2, [r7, #11]
 800068a:	7ab9      	ldrb	r1, [r7, #10]
 800068c:	68f8      	ldr	r0, [r7, #12]
 800068e:	4613      	mov	r3, r2
 8000690:	011b      	lsls	r3, r3, #4
 8000692:	4413      	add	r3, r2
 8000694:	4403      	add	r3, r0
 8000696:	440b      	add	r3, r1
 8000698:	2201      	movs	r2, #1
 800069a:	701a      	strb	r2, [r3, #0]
		FlagHandle->FlagID[ID].SumOfFlag +=
 800069c:	7afa      	ldrb	r2, [r7, #11]
 800069e:	68f9      	ldr	r1, [r7, #12]
 80006a0:	4613      	mov	r3, r2
 80006a2:	011b      	lsls	r3, r3, #4
 80006a4:	4413      	add	r3, r2
 80006a6:	440b      	add	r3, r1
 80006a8:	3308      	adds	r3, #8
 80006aa:	7819      	ldrb	r1, [r3, #0]
				FlagHandle->FlagID[ID].FlagFrameFull[FrameType];
 80006ac:	7afa      	ldrb	r2, [r7, #11]
 80006ae:	7ab8      	ldrb	r0, [r7, #10]
 80006b0:	68fc      	ldr	r4, [r7, #12]
 80006b2:	4613      	mov	r3, r2
 80006b4:	011b      	lsls	r3, r3, #4
 80006b6:	4413      	add	r3, r2
 80006b8:	4423      	add	r3, r4
 80006ba:	4403      	add	r3, r0
 80006bc:	781b      	ldrb	r3, [r3, #0]
		FlagHandle->FlagID[ID].SumOfFlag +=
 80006be:	7afa      	ldrb	r2, [r7, #11]
 80006c0:	440b      	add	r3, r1
 80006c2:	b2d8      	uxtb	r0, r3
 80006c4:	68f9      	ldr	r1, [r7, #12]
 80006c6:	4613      	mov	r3, r2
 80006c8:	011b      	lsls	r3, r3, #4
 80006ca:	4413      	add	r3, r2
 80006cc:	440b      	add	r3, r1
 80006ce:	3308      	adds	r3, #8
 80006d0:	4602      	mov	r2, r0
 80006d2:	701a      	strb	r2, [r3, #0]
	}
}
 80006d4:	bf00      	nop
 80006d6:	3714      	adds	r7, #20
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd90      	pop	{r4, r7, pc}

080006dc <CAN_Recieve_Physical_FIFO0>:

	}
	return HAL_OK;
}

void CAN_Recieve_Physical_FIFO0(CAN_RxHeaderTypeDef *RxHeader, uint8_t *Data) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	6039      	str	r1, [r7, #0]

	while (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) == 0)
 80006e6:	bf00      	nop
 80006e8:	2100      	movs	r1, #0
 80006ea:	480a      	ldr	r0, [pc, #40]	; (8000714 <CAN_Recieve_Physical_FIFO0+0x38>)
 80006ec:	f001 f9f3 	bl	8001ad6 <HAL_CAN_GetRxFifoFillLevel>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0f8      	beq.n	80006e8 <CAN_Recieve_Physical_FIFO0+0xc>
		;
	if (HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, RxHeader, Data) != HAL_OK) {
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	687a      	ldr	r2, [r7, #4]
 80006fa:	2100      	movs	r1, #0
 80006fc:	4805      	ldr	r0, [pc, #20]	; (8000714 <CAN_Recieve_Physical_FIFO0+0x38>)
 80006fe:	f001 f8c9 	bl	8001894 <HAL_CAN_GetRxMessage>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <CAN_Recieve_Physical_FIFO0+0x30>
		Error_Handler(); //get message from RAM;
 8000708:	f000 fbc6 	bl	8000e98 <Error_Handler>
	}
}
 800070c:	bf00      	nop
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20000078 	.word	0x20000078

08000718 <CAN_Receive_DataLink>:

uint8_t CAN_Receive_DataLink(FlagFrameHandle *FlagHandle,
		CANBufferHandleStruct *RxBuffer, FlagRecNotification *FlagNotiHandle) {
 8000718:	b580      	push	{r7, lr}
 800071a:	b090      	sub	sp, #64	; 0x40
 800071c:	af02      	add	r7, sp, #8
 800071e:	60f8      	str	r0, [r7, #12]
 8000720:	60b9      	str	r1, [r7, #8]
 8000722:	607a      	str	r2, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	*FlagNotiHandle = REC_DATA;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2200      	movs	r2, #0
 8000728:	701a      	strb	r2, [r3, #0]
	uint8_t DataPhysical[CAN_MAX_DATA] = { 0 }; // init local DataPhysical for get data from receive
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]
 800072e:	2300      	movs	r3, #0
 8000730:	617b      	str	r3, [r7, #20]
	uint16_t StdID = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint8_t ID = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	CAN_Recieve_Physical_FIFO0(&RxHeader, DataPhysical);
 800073c:	f107 0210 	add.w	r2, r7, #16
 8000740:	f107 0318 	add.w	r3, r7, #24
 8000744:	4611      	mov	r1, r2
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff ffc8 	bl	80006dc <CAN_Recieve_Physical_FIFO0>
	//CAN_Recieve_Physical_FIFO1(&RxHeader,DataPhysical);
	StdID = RxHeader.StdId;
 800074c:	69bb      	ldr	r3, [r7, #24]
 800074e:	86fb      	strh	r3, [r7, #54]	; 0x36
	ID = (StdID >> 3) & 15;
 8000750:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000752:	08db      	lsrs	r3, r3, #3
 8000754:	b29b      	uxth	r3, r3
 8000756:	b2db      	uxtb	r3, r3
 8000758:	f003 030f 	and.w	r3, r3, #15
 800075c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	RxBuffer->RecvID = ID;
 8000760:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000764:	b29a      	uxth	r2, r3
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
	RxBuffer->NodeHandle[ID].FrameType = StdID & 7; // get frame type store into Rxbuffer struct with Node ID manage frame type
 800076c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800076e:	b2db      	uxtb	r3, r3
 8000770:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8000774:	f003 0307 	and.w	r3, r3, #7
 8000778:	b2d8      	uxtb	r0, r3
 800077a:	68b9      	ldr	r1, [r7, #8]
 800077c:	4613      	mov	r3, r2
 800077e:	00db      	lsls	r3, r3, #3
 8000780:	4413      	add	r3, r2
 8000782:	00db      	lsls	r3, r3, #3
 8000784:	1a9b      	subs	r3, r3, r2
 8000786:	440b      	add	r3, r1
 8000788:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800078c:	4602      	mov	r2, r0
 800078e:	701a      	strb	r2, [r3, #0]
	if (RxBuffer->NodeHandle[ID].FrameType == SET_UP_FRAME
 8000790:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8000794:	68b9      	ldr	r1, [r7, #8]
 8000796:	4613      	mov	r3, r2
 8000798:	00db      	lsls	r3, r3, #3
 800079a:	4413      	add	r3, r2
 800079c:	00db      	lsls	r3, r3, #3
 800079e:	1a9b      	subs	r3, r3, r2
 80007a0:	440b      	add	r3, r1
 80007a2:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	f040 8082 	bne.w	80008b2 <CAN_Receive_DataLink+0x19a>
			&& RxBuffer->NodeHandle[ID].DuplicateFrame != 1) { // check if frame type = SET_UP_FRAME
 80007ae:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80007b2:	68b9      	ldr	r1, [r7, #8]
 80007b4:	4613      	mov	r3, r2
 80007b6:	00db      	lsls	r3, r3, #3
 80007b8:	4413      	add	r3, r2
 80007ba:	00db      	lsls	r3, r3, #3
 80007bc:	1a9b      	subs	r3, r3, r2
 80007be:	440b      	add	r3, r1
 80007c0:	f203 1313 	addw	r3, r3, #275	; 0x113
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d073      	beq.n	80008b2 <CAN_Receive_DataLink+0x19a>
		RxBuffer->NodeHandle[ID].DuplicateFrame = 1; // check send multiple SET_UP_frame
 80007ca:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80007ce:	68b9      	ldr	r1, [r7, #8]
 80007d0:	4613      	mov	r3, r2
 80007d2:	00db      	lsls	r3, r3, #3
 80007d4:	4413      	add	r3, r2
 80007d6:	00db      	lsls	r3, r3, #3
 80007d8:	1a9b      	subs	r3, r3, r2
 80007da:	440b      	add	r3, r1
 80007dc:	f203 1313 	addw	r3, r3, #275	; 0x113
 80007e0:	2201      	movs	r2, #1
 80007e2:	701a      	strb	r2, [r3, #0]
		RxBuffer->NodeHandle[ID].PacketLength = DataPhysical[6];
 80007e4:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80007e8:	7db8      	ldrb	r0, [r7, #22]
 80007ea:	68b9      	ldr	r1, [r7, #8]
 80007ec:	4613      	mov	r3, r2
 80007ee:	00db      	lsls	r3, r3, #3
 80007f0:	4413      	add	r3, r2
 80007f2:	00db      	lsls	r3, r3, #3
 80007f4:	1a9b      	subs	r3, r3, r2
 80007f6:	440b      	add	r3, r1
 80007f8:	f203 1315 	addw	r3, r3, #277	; 0x115
 80007fc:	4602      	mov	r2, r0
 80007fe:	701a      	strb	r2, [r3, #0]
		RxBuffer->NodeHandle[ID].CRCValue = DataPhysical[7];
 8000800:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8000804:	7df8      	ldrb	r0, [r7, #23]
 8000806:	68b9      	ldr	r1, [r7, #8]
 8000808:	4613      	mov	r3, r2
 800080a:	00db      	lsls	r3, r3, #3
 800080c:	4413      	add	r3, r2
 800080e:	00db      	lsls	r3, r3, #3
 8000810:	1a9b      	subs	r3, r3, r2
 8000812:	440b      	add	r3, r1
 8000814:	f203 1317 	addw	r3, r3, #279	; 0x117
 8000818:	4602      	mov	r2, r0
 800081a:	701a      	strb	r2, [r3, #0]
		if (RxBuffer->NodeHandle[ID].PacketLength % 8 == 0) {
 800081c:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8000820:	68b9      	ldr	r1, [r7, #8]
 8000822:	4613      	mov	r3, r2
 8000824:	00db      	lsls	r3, r3, #3
 8000826:	4413      	add	r3, r2
 8000828:	00db      	lsls	r3, r3, #3
 800082a:	1a9b      	subs	r3, r3, r2
 800082c:	440b      	add	r3, r1
 800082e:	f203 1315 	addw	r3, r3, #277	; 0x115
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	f003 0307 	and.w	r3, r3, #7
 8000838:	b2db      	uxtb	r3, r3
 800083a:	2b00      	cmp	r3, #0
 800083c:	d11b      	bne.n	8000876 <CAN_Receive_DataLink+0x15e>
			RxBuffer->NodeHandle[ID].NumberOfFrame =
					(RxBuffer->NodeHandle[ID].PacketLength / 8);
 800083e:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8000842:	68b9      	ldr	r1, [r7, #8]
 8000844:	4613      	mov	r3, r2
 8000846:	00db      	lsls	r3, r3, #3
 8000848:	4413      	add	r3, r2
 800084a:	00db      	lsls	r3, r3, #3
 800084c:	1a9b      	subs	r3, r3, r2
 800084e:	440b      	add	r3, r1
 8000850:	f203 1315 	addw	r3, r3, #277	; 0x115
 8000854:	781b      	ldrb	r3, [r3, #0]
			RxBuffer->NodeHandle[ID].NumberOfFrame =
 8000856:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800085a:	08db      	lsrs	r3, r3, #3
 800085c:	b2d8      	uxtb	r0, r3
 800085e:	68b9      	ldr	r1, [r7, #8]
 8000860:	4613      	mov	r3, r2
 8000862:	00db      	lsls	r3, r3, #3
 8000864:	4413      	add	r3, r2
 8000866:	00db      	lsls	r3, r3, #3
 8000868:	1a9b      	subs	r3, r3, r2
 800086a:	440b      	add	r3, r1
 800086c:	f503 738b 	add.w	r3, r3, #278	; 0x116
 8000870:	4602      	mov	r2, r0
 8000872:	701a      	strb	r2, [r3, #0]
		if (RxBuffer->NodeHandle[ID].PacketLength % 8 == 0) {
 8000874:	e04a      	b.n	800090c <CAN_Receive_DataLink+0x1f4>
		} else {
			RxBuffer->NodeHandle[ID].NumberOfFrame =
					(RxBuffer->NodeHandle[ID].PacketLength / 8) + 1;
 8000876:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800087a:	68b9      	ldr	r1, [r7, #8]
 800087c:	4613      	mov	r3, r2
 800087e:	00db      	lsls	r3, r3, #3
 8000880:	4413      	add	r3, r2
 8000882:	00db      	lsls	r3, r3, #3
 8000884:	1a9b      	subs	r3, r3, r2
 8000886:	440b      	add	r3, r1
 8000888:	f203 1315 	addw	r3, r3, #277	; 0x115
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	08db      	lsrs	r3, r3, #3
 8000890:	b2db      	uxtb	r3, r3
			RxBuffer->NodeHandle[ID].NumberOfFrame =
 8000892:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
					(RxBuffer->NodeHandle[ID].PacketLength / 8) + 1;
 8000896:	3301      	adds	r3, #1
 8000898:	b2d8      	uxtb	r0, r3
			RxBuffer->NodeHandle[ID].NumberOfFrame =
 800089a:	68b9      	ldr	r1, [r7, #8]
 800089c:	4613      	mov	r3, r2
 800089e:	00db      	lsls	r3, r3, #3
 80008a0:	4413      	add	r3, r2
 80008a2:	00db      	lsls	r3, r3, #3
 80008a4:	1a9b      	subs	r3, r3, r2
 80008a6:	440b      	add	r3, r1
 80008a8:	f503 738b 	add.w	r3, r3, #278	; 0x116
 80008ac:	4602      	mov	r2, r0
 80008ae:	701a      	strb	r2, [r3, #0]
		if (RxBuffer->NodeHandle[ID].PacketLength % 8 == 0) {
 80008b0:	e02c      	b.n	800090c <CAN_Receive_DataLink+0x1f4>
		}
	} else {
		if (RxBuffer->NodeHandle[ID].FrameType == SET_UP_FRAME) {
 80008b2:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80008b6:	68b9      	ldr	r1, [r7, #8]
 80008b8:	4613      	mov	r3, r2
 80008ba:	00db      	lsls	r3, r3, #3
 80008bc:	4413      	add	r3, r2
 80008be:	00db      	lsls	r3, r3, #3
 80008c0:	1a9b      	subs	r3, r3, r2
 80008c2:	440b      	add	r3, r1
 80008c4:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d11e      	bne.n	800090c <CAN_Receive_DataLink+0x1f4>
			*FlagNotiHandle = REC_FRAMEDATA_ERROR;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2201      	movs	r2, #1
 80008d2:	701a      	strb	r2, [r3, #0]
			FlagHandle->FlagID[ID].FrameError[RxBuffer->NodeHandle[ID].FrameType] =
 80008d4:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80008d8:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80008dc:	68b8      	ldr	r0, [r7, #8]
 80008de:	4613      	mov	r3, r2
 80008e0:	00db      	lsls	r3, r3, #3
 80008e2:	4413      	add	r3, r2
 80008e4:	00db      	lsls	r3, r3, #3
 80008e6:	1a9b      	subs	r3, r3, r2
 80008e8:	4403      	add	r3, r0
 80008ea:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	4618      	mov	r0, r3
 80008f2:	68fa      	ldr	r2, [r7, #12]
 80008f4:	460b      	mov	r3, r1
 80008f6:	011b      	lsls	r3, r3, #4
 80008f8:	440b      	add	r3, r1
 80008fa:	4413      	add	r3, r2
 80008fc:	4403      	add	r3, r0
 80008fe:	3309      	adds	r3, #9
 8000900:	2201      	movs	r2, #1
 8000902:	701a      	strb	r2, [r3, #0]
					1;
			CAN_Receive_Error_Handle(FlagNotiHandle, FlagHandle);
 8000904:	68f9      	ldr	r1, [r7, #12]
 8000906:	6878      	ldr	r0, [r7, #4]
 8000908:	f7ff fcfc 	bl	8000304 <CAN_Receive_Error_Handle>
		}
	}
	CAN_ProcessRxBuffer(FlagHandle, ID, RxBuffer, DataPhysical, FlagNotiHandle);
 800090c:	f107 0210 	add.w	r2, r7, #16
 8000910:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	9300      	str	r3, [sp, #0]
 8000918:	4613      	mov	r3, r2
 800091a:	68ba      	ldr	r2, [r7, #8]
 800091c:	68f8      	ldr	r0, [r7, #12]
 800091e:	f7ff fd7f 	bl	8000420 <CAN_ProcessRxBuffer>
	return HAL_OK;
 8000922:	2300      	movs	r3, #0
}
 8000924:	4618      	mov	r0, r3
 8000926:	3738      	adds	r7, #56	; 0x38
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}

0800092c <CAN_Receive_Network>:
uint8_t CAN_Receive_Network(CANBufferHandleStruct *NetBuffer,
		FlagFrameHandle *NetworkFlag, FlagRecNotification *FlagNotiHandle) {
 800092c:	b580      	push	{r7, lr}
 800092e:	b088      	sub	sp, #32
 8000930:	af00      	add	r7, sp, #0
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	60b9      	str	r1, [r7, #8]
 8000936:	607a      	str	r2, [r7, #4]
	CAN_Receive_DataLink(NetworkFlag, NetBuffer, FlagNotiHandle);
 8000938:	687a      	ldr	r2, [r7, #4]
 800093a:	68f9      	ldr	r1, [r7, #12]
 800093c:	68b8      	ldr	r0, [r7, #8]
 800093e:	f7ff feeb 	bl	8000718 <CAN_Receive_DataLink>
	uint8_t FrameLength = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	77fb      	strb	r3, [r7, #31]
	uint8_t FrameType = 0;
 8000946:	2300      	movs	r3, #0
 8000948:	77bb      	strb	r3, [r7, #30]
	uint8_t NetBufferIndex = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	777b      	strb	r3, [r7, #29]
	uint8_t DataLength = 0;
 800094e:	2300      	movs	r3, #0
 8000950:	75fb      	strb	r3, [r7, #23]
	uint8_t CRCValue = 0;
 8000952:	2300      	movs	r3, #0
 8000954:	75bb      	strb	r3, [r7, #22]
	uint8_t *NetData;
	FrameLength = NetBuffer->NodeHandle[NetBuffer->RecvID].NumberOfFrame;
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800095c:	461a      	mov	r2, r3
 800095e:	68f9      	ldr	r1, [r7, #12]
 8000960:	4613      	mov	r3, r2
 8000962:	00db      	lsls	r3, r3, #3
 8000964:	4413      	add	r3, r2
 8000966:	00db      	lsls	r3, r3, #3
 8000968:	1a9b      	subs	r3, r3, r2
 800096a:	440b      	add	r3, r1
 800096c:	f503 738b 	add.w	r3, r3, #278	; 0x116
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	77fb      	strb	r3, [r7, #31]
	uint8_t NumberofFrame = FrameLength;
 8000974:	7ffb      	ldrb	r3, [r7, #31]
 8000976:	757b      	strb	r3, [r7, #21]
	FrameType = NetBuffer->NodeHandle[NetBuffer->RecvID].FrameType;
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800097e:	461a      	mov	r2, r3
 8000980:	68f9      	ldr	r1, [r7, #12]
 8000982:	4613      	mov	r3, r2
 8000984:	00db      	lsls	r3, r3, #3
 8000986:	4413      	add	r3, r2
 8000988:	00db      	lsls	r3, r3, #3
 800098a:	1a9b      	subs	r3, r3, r2
 800098c:	440b      	add	r3, r1
 800098e:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	77bb      	strb	r3, [r7, #30]
	if (*FlagNotiHandle == REC_FRAMEDATA_SUCCESS) {
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	2b02      	cmp	r3, #2
 800099c:	f040 808c 	bne.w	8000ab8 <CAN_Receive_Network+0x18c>
		for (; FrameLength > 0; FrameLength--) {
 80009a0:	e021      	b.n	80009e6 <CAN_Receive_Network+0xba>
			memcpy(NetBuffer->Buffer[NetBufferIndex],
 80009a2:	7f7b      	ldrb	r3, [r7, #29]
 80009a4:	330a      	adds	r3, #10
 80009a6:	00db      	lsls	r3, r3, #3
 80009a8:	68fa      	ldr	r2, [r7, #12]
 80009aa:	18d0      	adds	r0, r2, r3
					NetBuffer->NodeHandle[NetBuffer->RecvID].NodeBuffer[FrameType],
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80009b2:	461a      	mov	r2, r3
 80009b4:	7fbb      	ldrb	r3, [r7, #30]
 80009b6:	00d9      	lsls	r1, r3, #3
 80009b8:	4613      	mov	r3, r2
 80009ba:	00db      	lsls	r3, r3, #3
 80009bc:	4413      	add	r3, r2
 80009be:	00db      	lsls	r3, r3, #3
 80009c0:	1a9b      	subs	r3, r3, r2
 80009c2:	440b      	add	r3, r1
 80009c4:	33d0      	adds	r3, #208	; 0xd0
 80009c6:	68fa      	ldr	r2, [r7, #12]
 80009c8:	4413      	add	r3, r2
 80009ca:	3303      	adds	r3, #3
			memcpy(NetBuffer->Buffer[NetBufferIndex],
 80009cc:	2208      	movs	r2, #8
 80009ce:	4619      	mov	r1, r3
 80009d0:	f002 fc7e 	bl	80032d0 <memcpy>
					CAN_MAX_DATA);
			NetBufferIndex++;
 80009d4:	7f7b      	ldrb	r3, [r7, #29]
 80009d6:	3301      	adds	r3, #1
 80009d8:	777b      	strb	r3, [r7, #29]
			FrameType--;
 80009da:	7fbb      	ldrb	r3, [r7, #30]
 80009dc:	3b01      	subs	r3, #1
 80009de:	77bb      	strb	r3, [r7, #30]
		for (; FrameLength > 0; FrameLength--) {
 80009e0:	7ffb      	ldrb	r3, [r7, #31]
 80009e2:	3b01      	subs	r3, #1
 80009e4:	77fb      	strb	r3, [r7, #31]
 80009e6:	7ffb      	ldrb	r3, [r7, #31]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d1da      	bne.n	80009a2 <CAN_Receive_Network+0x76>
		}
		DataLength = NetBuffer->NodeHandle[NetBuffer->RecvID].PacketLength - 2;
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80009f2:	461a      	mov	r2, r3
 80009f4:	68f9      	ldr	r1, [r7, #12]
 80009f6:	4613      	mov	r3, r2
 80009f8:	00db      	lsls	r3, r3, #3
 80009fa:	4413      	add	r3, r2
 80009fc:	00db      	lsls	r3, r3, #3
 80009fe:	1a9b      	subs	r3, r3, r2
 8000a00:	440b      	add	r3, r1
 8000a02:	f203 1315 	addw	r3, r3, #277	; 0x115
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	3b02      	subs	r3, #2
 8000a0a:	75fb      	strb	r3, [r7, #23]
		NetData = (uint8_t*) malloc(DataLength * sizeof(uint8_t));
 8000a0c:	7dfb      	ldrb	r3, [r7, #23]
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f002 fb3e 	bl	8003090 <malloc>
 8000a14:	4603      	mov	r3, r0
 8000a16:	613b      	str	r3, [r7, #16]
		for (NetBufferIndex = 0; NetBufferIndex <= NumberofFrame;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	777b      	strb	r3, [r7, #29]
 8000a1c:	e01b      	b.n	8000a56 <CAN_Receive_Network+0x12a>
				NetBufferIndex++) {
			for (int j = 0; j < 8; j++) {
 8000a1e:	2300      	movs	r3, #0
 8000a20:	61bb      	str	r3, [r7, #24]
 8000a22:	e012      	b.n	8000a4a <CAN_Receive_Network+0x11e>
				NetData[NetBufferIndex * 8 + j] =
						NetBuffer->Buffer[NetBufferIndex][j];
 8000a24:	7f7a      	ldrb	r2, [r7, #29]
				NetData[NetBufferIndex * 8 + j] =
 8000a26:	7f7b      	ldrb	r3, [r7, #29]
 8000a28:	00d9      	lsls	r1, r3, #3
 8000a2a:	69bb      	ldr	r3, [r7, #24]
 8000a2c:	440b      	add	r3, r1
 8000a2e:	4619      	mov	r1, r3
 8000a30:	693b      	ldr	r3, [r7, #16]
 8000a32:	440b      	add	r3, r1
						NetBuffer->Buffer[NetBufferIndex][j];
 8000a34:	68f9      	ldr	r1, [r7, #12]
 8000a36:	00d2      	lsls	r2, r2, #3
 8000a38:	4411      	add	r1, r2
 8000a3a:	69ba      	ldr	r2, [r7, #24]
 8000a3c:	440a      	add	r2, r1
 8000a3e:	3250      	adds	r2, #80	; 0x50
 8000a40:	7812      	ldrb	r2, [r2, #0]
				NetData[NetBufferIndex * 8 + j] =
 8000a42:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < 8; j++) {
 8000a44:	69bb      	ldr	r3, [r7, #24]
 8000a46:	3301      	adds	r3, #1
 8000a48:	61bb      	str	r3, [r7, #24]
 8000a4a:	69bb      	ldr	r3, [r7, #24]
 8000a4c:	2b07      	cmp	r3, #7
 8000a4e:	dde9      	ble.n	8000a24 <CAN_Receive_Network+0xf8>
				NetBufferIndex++) {
 8000a50:	7f7b      	ldrb	r3, [r7, #29]
 8000a52:	3301      	adds	r3, #1
 8000a54:	777b      	strb	r3, [r7, #29]
		for (NetBufferIndex = 0; NetBufferIndex <= NumberofFrame;
 8000a56:	7f7a      	ldrb	r2, [r7, #29]
 8000a58:	7d7b      	ldrb	r3, [r7, #21]
 8000a5a:	429a      	cmp	r2, r3
 8000a5c:	d9df      	bls.n	8000a1e <CAN_Receive_Network+0xf2>
			}
		}
		CRCValue = crc_8(NetData, DataLength);
 8000a5e:	7dfb      	ldrb	r3, [r7, #23]
 8000a60:	4619      	mov	r1, r3
 8000a62:	6938      	ldr	r0, [r7, #16]
 8000a64:	f000 f886 	bl	8000b74 <crc_8>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	75bb      	strb	r3, [r7, #22]
		if (CRCValue == NetBuffer->NodeHandle[NetBuffer->RecvID].CRCValue) {
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8000a72:	461a      	mov	r2, r3
 8000a74:	68f9      	ldr	r1, [r7, #12]
 8000a76:	4613      	mov	r3, r2
 8000a78:	00db      	lsls	r3, r3, #3
 8000a7a:	4413      	add	r3, r2
 8000a7c:	00db      	lsls	r3, r3, #3
 8000a7e:	1a9b      	subs	r3, r3, r2
 8000a80:	440b      	add	r3, r1
 8000a82:	f203 1317 	addw	r3, r3, #279	; 0x117
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	7dba      	ldrb	r2, [r7, #22]
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	d10a      	bne.n	8000aa4 <CAN_Receive_Network+0x178>
			*FlagNotiHandle = REC_PACKET_SUCCESS;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2204      	movs	r2, #4
 8000a92:	701a      	strb	r2, [r3, #0]
			memcpy(NetBuffer->NetworkBuffer, NetData, DataLength);
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	3309      	adds	r3, #9
 8000a98:	7dfa      	ldrb	r2, [r7, #23]
 8000a9a:	6939      	ldr	r1, [r7, #16]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f002 fc17 	bl	80032d0 <memcpy>
 8000aa2:	e006      	b.n	8000ab2 <CAN_Receive_Network+0x186>
		} else {
			*FlagNotiHandle = REC_PACKET_ERROR;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2203      	movs	r2, #3
 8000aa8:	701a      	strb	r2, [r3, #0]
			CAN_Receive_Error_Handle(FlagNotiHandle, NetworkFlag);
 8000aaa:	68b9      	ldr	r1, [r7, #8]
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f7ff fc29 	bl	8000304 <CAN_Receive_Error_Handle>
		}
		free(NetData);
 8000ab2:	6938      	ldr	r0, [r7, #16]
 8000ab4:	f002 faf4 	bl	80030a0 <free>
	}
	return HAL_OK;
 8000ab8:	2300      	movs	r3, #0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3720      	adds	r7, #32
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <CAN_Receive_Application>:

uint8_t CAN_Receive_Application(CANBufferHandleStruct *AppBuffer, uint8_t *Data,
		FlagFrameHandle *FlagFrame, FlagRecNotification *FlagNotification) {
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b086      	sub	sp, #24
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	60f8      	str	r0, [r7, #12]
 8000aca:	60b9      	str	r1, [r7, #8]
 8000acc:	607a      	str	r2, [r7, #4]
 8000ace:	603b      	str	r3, [r7, #0]
	uint8_t AppDataLength =
			AppBuffer->NodeHandle[AppBuffer->RecvID].PacketLength - 2;
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	68f9      	ldr	r1, [r7, #12]
 8000ada:	4613      	mov	r3, r2
 8000adc:	00db      	lsls	r3, r3, #3
 8000ade:	4413      	add	r3, r2
 8000ae0:	00db      	lsls	r3, r3, #3
 8000ae2:	1a9b      	subs	r3, r3, r2
 8000ae4:	440b      	add	r3, r1
 8000ae6:	f203 1315 	addw	r3, r3, #277	; 0x115
 8000aea:	781b      	ldrb	r3, [r3, #0]
	uint8_t AppDataLength =
 8000aec:	3b02      	subs	r3, #2
 8000aee:	75fb      	strb	r3, [r7, #23]
	CAN_Receive_Network(AppBuffer, FlagFrame, FlagNotification);
 8000af0:	683a      	ldr	r2, [r7, #0]
 8000af2:	6879      	ldr	r1, [r7, #4]
 8000af4:	68f8      	ldr	r0, [r7, #12]
 8000af6:	f7ff ff19 	bl	800092c <CAN_Receive_Network>
	if (*FlagNotification == REC_PACKET_SUCCESS) {
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	2b04      	cmp	r3, #4
 8000b00:	d109      	bne.n	8000b16 <CAN_Receive_Application+0x54>
		memcpy(Data, AppBuffer->NetworkBuffer, AppDataLength);
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	3309      	adds	r3, #9
 8000b06:	7dfa      	ldrb	r2, [r7, #23]
 8000b08:	4619      	mov	r1, r3
 8000b0a:	68b8      	ldr	r0, [r7, #8]
 8000b0c:	f002 fbe0 	bl	80032d0 <memcpy>
		*FlagNotification = REC_SUCCESS;
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	2205      	movs	r2, #5
 8000b14:	701a      	strb	r2, [r3, #0]
	}
	return HAL_OK;
 8000b16:	2300      	movs	r3, #0
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3718      	adds	r7, #24
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <CAN_Config_filtering>:

uint32_t CAN_Config_filtering(uint8_t FIFO) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08c      	sub	sp, #48	; 0x30
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	71fb      	strb	r3, [r7, #7]
	CAN_FilterTypeDef Can_filter_init;
	Can_filter_init.FilterActivation = ENABLE;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	62bb      	str	r3, [r7, #40]	; 0x28
	Can_filter_init.FilterBank = 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]
	Can_filter_init.FilterFIFOAssignment = FIFO;
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	61bb      	str	r3, [r7, #24]
	Can_filter_init.FilterIdHigh = 0x0000;
 8000b36:	2300      	movs	r3, #0
 8000b38:	60bb      	str	r3, [r7, #8]
	Can_filter_init.FilterIdLow = 0x0000;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
	Can_filter_init.FilterMaskIdHigh = 0x0000;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	613b      	str	r3, [r7, #16]
	Can_filter_init.FilterMaskIdLow = 0x0000;
 8000b42:	2300      	movs	r3, #0
 8000b44:	617b      	str	r3, [r7, #20]
	Can_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 8000b46:	2300      	movs	r3, #0
 8000b48:	623b      	str	r3, [r7, #32]
	Can_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_CAN_ConfigFilter(&hcan, &Can_filter_init) != HAL_OK) {
 8000b4e:	f107 0308 	add.w	r3, r7, #8
 8000b52:	4619      	mov	r1, r3
 8000b54:	4806      	ldr	r0, [pc, #24]	; (8000b70 <CAN_Config_filtering+0x50>)
 8000b56:	f000 fc9e 	bl	8001496 <HAL_CAN_ConfigFilter>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <CAN_Config_filtering+0x44>
		Error_Handler();
 8000b60:	f000 f99a 	bl	8000e98 <Error_Handler>
	}
	return HAL_OK;
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3730      	adds	r7, #48	; 0x30
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000078 	.word	0x20000078

08000b74 <crc_8>:

#include "CRC.h"
#include "stdint.h"
unsigned char table[256] = {0};

uint8_t crc_8(uint8_t* data, uint8_t len) {
 8000b74:	b480      	push	{r7}
 8000b76:	b087      	sub	sp, #28
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	70fb      	strb	r3, [r7, #3]
  unsigned crc = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]
  int i, j;
  for (j = len; j; j--, data++) {
 8000b84:	78fb      	ldrb	r3, [r7, #3]
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	e023      	b.n	8000bd2 <crc_8+0x5e>
    crc ^= (*data << 8);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	021b      	lsls	r3, r3, #8
 8000b90:	461a      	mov	r2, r3
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	4053      	eors	r3, r2
 8000b96:	617b      	str	r3, [r7, #20]
    for(i = 8; i; i--) {
 8000b98:	2308      	movs	r3, #8
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	e010      	b.n	8000bc0 <crc_8+0x4c>
      if (crc & 0x8000)
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d005      	beq.n	8000bb4 <crc_8+0x40>
        crc ^= (0x1070 << 3);
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	f483 4303 	eor.w	r3, r3, #33536	; 0x8300
 8000bae:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 8000bb2:	617b      	str	r3, [r7, #20]
      crc <<= 1;
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	617b      	str	r3, [r7, #20]
    for(i = 8; i; i--) {
 8000bba:	693b      	ldr	r3, [r7, #16]
 8000bbc:	3b01      	subs	r3, #1
 8000bbe:	613b      	str	r3, [r7, #16]
 8000bc0:	693b      	ldr	r3, [r7, #16]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d1eb      	bne.n	8000b9e <crc_8+0x2a>
  for (j = len; j; j--, data++) {
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	3b01      	subs	r3, #1
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	607b      	str	r3, [r7, #4]
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d1d8      	bne.n	8000b8a <crc_8+0x16>
    }
  }
  return (uint8_t)(crc >> 8);
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	0a1b      	lsrs	r3, r3, #8
 8000bdc:	b2db      	uxtb	r3, r3
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	371c      	adds	r7, #28
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr

08000be8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	f5ad 6de3 	sub.w	sp, sp, #1816	; 0x718
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bf0:	f000 faf4 	bl	80011dc <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bf4:	f000 f85e 	bl	8000cb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bf8:	f000 f902 	bl	8000e00 <MX_GPIO_Init>
  MX_CAN_Init();
 8000bfc:	f000 f8a0 	bl	8000d40 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000c00:	f000 f8d4 	bl	8000dac <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  CAN_Config_filtering(CAN_FILTER_FIFO0);
 8000c04:	2000      	movs	r0, #0
 8000c06:	f7ff ff8b 	bl	8000b20 <CAN_Config_filtering>
  //CAN_Config_filtering(CAN_FILTER_FIFO1);
// if(HAL_CAN_ActivateNotification(&hcan,CAN_IT_TX_MAILBOX_EMPTY|CAN_IT_RX_FIFO0_MSG_PENDING|CAN_IT_BUSOFF)!=HAL_OK)
// {
//	 Error_Handler();
// }
  if(HAL_CAN_Start(&hcan)!=HAL_OK)
 8000c0a:	4827      	ldr	r0, [pc, #156]	; (8000ca8 <main+0xc0>)
 8000c0c:	f000 fd0c 	bl	8001628 <HAL_CAN_Start>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <main+0x32>
     {
     	Error_Handler();
 8000c16:	f000 f93f 	bl	8000e98 <Error_Handler>
     }
  CANBufferHandleStruct Buffer;
  CANBufferHandleStruct_Init(&Buffer);
 8000c1a:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff fa94 	bl	800014c <CANBufferHandleStruct_Init>
  FlagRecNotification FlagRec;
  FlagFrameHandle Flag;
  FlagsFrameHandle_Init(&Flag);
 8000c24:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff faf2 	bl	8000212 <FlagsFrameHandle_Init>
  uint8_t mess[100]={0};
 8000c2e:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 8000c32:	f2a3 63bc 	subw	r3, r3, #1724	; 0x6bc
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	3304      	adds	r3, #4
 8000c3c:	2260      	movs	r2, #96	; 0x60
 8000c3e:	2100      	movs	r1, #0
 8000c40:	4618      	mov	r0, r3
 8000c42:	f002 fb01 	bl	8003248 <memset>
  	char Print[88] = {0};
 8000c46:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 8000c4a:	f2a3 7314 	subw	r3, r3, #1812	; 0x714
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	3304      	adds	r3, #4
 8000c54:	2254      	movs	r2, #84	; 0x54
 8000c56:	2100      	movs	r1, #0
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f002 faf5 	bl	8003248 <memset>
	 // CAN_Send_Application(&Buffer, &pIDtype, sendData,len+1);
	  //CAN_Send_Error_Handle(&Buffer, &pIDtype);
	//	CAN_Network_Packet(&Buffer,Data,62);
	//  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	 //CAN_Send_Physical_Send(&Buffer, Data , DATA_TEST , &pIDtype);
	 CAN_Receive_Application(&Buffer, mess, &Flag, &FlagRec);
 8000c5e:	f207 13d3 	addw	r3, r7, #467	; 0x1d3
 8000c62:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8000c66:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8000c6a:	f507 70ea 	add.w	r0, r7, #468	; 0x1d4
 8000c6e:	f7ff ff28 	bl	8000ac2 <CAN_Receive_Application>
//	// HAL_UART_Transmit(&huart1,mess,DATA_TEST,HAL_MAX_DELAY);
	 if(FlagRec==REC_SUCCESS)
 8000c72:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 8000c76:	f2a3 5345 	subw	r3, r3, #1349	; 0x545
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	2b05      	cmp	r3, #5
 8000c7e:	d1ee      	bne.n	8000c5e <main+0x76>
	 {
		 uint8_t len = sprintf(Print, "Node 2 Rcv: %d\r\n",mess);
 8000c80:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8000c84:	1d3b      	adds	r3, r7, #4
 8000c86:	4909      	ldr	r1, [pc, #36]	; (8000cac <main+0xc4>)
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f002 fabd 	bl	8003208 <siprintf>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	f887 3717 	strb.w	r3, [r7, #1815]	; 0x717
		 HAL_UART_Transmit(&huart1,Print,len,HAL_MAX_DELAY);
 8000c94:	f897 3717 	ldrb.w	r3, [r7, #1815]	; 0x717
 8000c98:	b29a      	uxth	r2, r3
 8000c9a:	1d39      	adds	r1, r7, #4
 8000c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca0:	4803      	ldr	r0, [pc, #12]	; (8000cb0 <main+0xc8>)
 8000ca2:	f002 f875 	bl	8002d90 <HAL_UART_Transmit>
	 CAN_Receive_Application(&Buffer, mess, &Flag, &FlagRec);
 8000ca6:	e7da      	b.n	8000c5e <main+0x76>
 8000ca8:	20000078 	.word	0x20000078
 8000cac:	08003a2c 	.word	0x08003a2c
 8000cb0:	200000a0 	.word	0x200000a0

08000cb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b090      	sub	sp, #64	; 0x40
 8000cb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cba:	f107 0318 	add.w	r3, r7, #24
 8000cbe:	2228      	movs	r2, #40	; 0x28
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f002 fac0 	bl	8003248 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]
 8000cd4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cde:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cf0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000cf2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cf8:	f107 0318 	add.w	r3, r7, #24
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f001 fbe7 	bl	80024d0 <HAL_RCC_OscConfig>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000d08:	f000 f8c6 	bl	8000e98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d0c:	230f      	movs	r3, #15
 8000d0e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d10:	2302      	movs	r3, #2
 8000d12:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d14:	2300      	movs	r3, #0
 8000d16:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d22:	1d3b      	adds	r3, r7, #4
 8000d24:	2102      	movs	r1, #2
 8000d26:	4618      	mov	r0, r3
 8000d28:	f001 fe54 	bl	80029d4 <HAL_RCC_ClockConfig>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000d32:	f000 f8b1 	bl	8000e98 <Error_Handler>
  }
}
 8000d36:	bf00      	nop
 8000d38:	3740      	adds	r7, #64	; 0x40
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000d44:	4b17      	ldr	r3, [pc, #92]	; (8000da4 <MX_CAN_Init+0x64>)
 8000d46:	4a18      	ldr	r2, [pc, #96]	; (8000da8 <MX_CAN_Init+0x68>)
 8000d48:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000d4a:	4b16      	ldr	r3, [pc, #88]	; (8000da4 <MX_CAN_Init+0x64>)
 8000d4c:	2204      	movs	r2, #4
 8000d4e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000d50:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <MX_CAN_Init+0x64>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000d56:	4b13      	ldr	r3, [pc, #76]	; (8000da4 <MX_CAN_Init+0x64>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000d5c:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <MX_CAN_Init+0x64>)
 8000d5e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000d62:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000d64:	4b0f      	ldr	r3, [pc, #60]	; (8000da4 <MX_CAN_Init+0x64>)
 8000d66:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000d6a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000d6c:	4b0d      	ldr	r3, [pc, #52]	; (8000da4 <MX_CAN_Init+0x64>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000d72:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <MX_CAN_Init+0x64>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000d78:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <MX_CAN_Init+0x64>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000d7e:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <MX_CAN_Init+0x64>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000d84:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <MX_CAN_Init+0x64>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000d8a:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <MX_CAN_Init+0x64>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000d90:	4804      	ldr	r0, [pc, #16]	; (8000da4 <MX_CAN_Init+0x64>)
 8000d92:	f000 fa85 	bl	80012a0 <HAL_CAN_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000d9c:	f000 f87c 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000da0:	bf00      	nop
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20000078 	.word	0x20000078
 8000da8:	40006400 	.word	0x40006400

08000dac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000db0:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <MX_USART1_UART_Init+0x4c>)
 8000db2:	4a12      	ldr	r2, [pc, #72]	; (8000dfc <MX_USART1_UART_Init+0x50>)
 8000db4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000db6:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <MX_USART1_UART_Init+0x4c>)
 8000db8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <MX_USART1_UART_Init+0x4c>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dc4:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <MX_USART1_UART_Init+0x4c>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dca:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <MX_USART1_UART_Init+0x4c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dd0:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <MX_USART1_UART_Init+0x4c>)
 8000dd2:	220c      	movs	r2, #12
 8000dd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dd6:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <MX_USART1_UART_Init+0x4c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ddc:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <MX_USART1_UART_Init+0x4c>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000de2:	4805      	ldr	r0, [pc, #20]	; (8000df8 <MX_USART1_UART_Init+0x4c>)
 8000de4:	f001 ff84 	bl	8002cf0 <HAL_UART_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000dee:	f000 f853 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	200000a0 	.word	0x200000a0
 8000dfc:	40013800 	.word	0x40013800

08000e00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b088      	sub	sp, #32
 8000e04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e06:	f107 0310 	add.w	r3, r7, #16
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e14:	4b1e      	ldr	r3, [pc, #120]	; (8000e90 <MX_GPIO_Init+0x90>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	4a1d      	ldr	r2, [pc, #116]	; (8000e90 <MX_GPIO_Init+0x90>)
 8000e1a:	f043 0310 	orr.w	r3, r3, #16
 8000e1e:	6193      	str	r3, [r2, #24]
 8000e20:	4b1b      	ldr	r3, [pc, #108]	; (8000e90 <MX_GPIO_Init+0x90>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	f003 0310 	and.w	r3, r3, #16
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e2c:	4b18      	ldr	r3, [pc, #96]	; (8000e90 <MX_GPIO_Init+0x90>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	4a17      	ldr	r2, [pc, #92]	; (8000e90 <MX_GPIO_Init+0x90>)
 8000e32:	f043 0320 	orr.w	r3, r3, #32
 8000e36:	6193      	str	r3, [r2, #24]
 8000e38:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <MX_GPIO_Init+0x90>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	f003 0320 	and.w	r3, r3, #32
 8000e40:	60bb      	str	r3, [r7, #8]
 8000e42:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e44:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <MX_GPIO_Init+0x90>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	4a11      	ldr	r2, [pc, #68]	; (8000e90 <MX_GPIO_Init+0x90>)
 8000e4a:	f043 0304 	orr.w	r3, r3, #4
 8000e4e:	6193      	str	r3, [r2, #24]
 8000e50:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <MX_GPIO_Init+0x90>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	f003 0304 	and.w	r3, r3, #4
 8000e58:	607b      	str	r3, [r7, #4]
 8000e5a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e62:	480c      	ldr	r0, [pc, #48]	; (8000e94 <MX_GPIO_Init+0x94>)
 8000e64:	f001 fb1c 	bl	80024a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e76:	2302      	movs	r3, #2
 8000e78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e7a:	f107 0310 	add.w	r3, r7, #16
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4804      	ldr	r0, [pc, #16]	; (8000e94 <MX_GPIO_Init+0x94>)
 8000e82:	f001 f989 	bl	8002198 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e86:	bf00      	nop
 8000e88:	3720      	adds	r7, #32
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40021000 	.word	0x40021000
 8000e94:	40011000 	.word	0x40011000

08000e98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e9c:	b672      	cpsid	i
}
 8000e9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <Error_Handler+0x8>
	...

08000ea4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000eaa:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <HAL_MspInit+0x5c>)
 8000eac:	699b      	ldr	r3, [r3, #24]
 8000eae:	4a14      	ldr	r2, [pc, #80]	; (8000f00 <HAL_MspInit+0x5c>)
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	6193      	str	r3, [r2, #24]
 8000eb6:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <HAL_MspInit+0x5c>)
 8000eb8:	699b      	ldr	r3, [r3, #24]
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	60bb      	str	r3, [r7, #8]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec2:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <HAL_MspInit+0x5c>)
 8000ec4:	69db      	ldr	r3, [r3, #28]
 8000ec6:	4a0e      	ldr	r2, [pc, #56]	; (8000f00 <HAL_MspInit+0x5c>)
 8000ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ecc:	61d3      	str	r3, [r2, #28]
 8000ece:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <HAL_MspInit+0x5c>)
 8000ed0:	69db      	ldr	r3, [r3, #28]
 8000ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000eda:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <HAL_MspInit+0x60>)
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	4a04      	ldr	r2, [pc, #16]	; (8000f04 <HAL_MspInit+0x60>)
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	3714      	adds	r7, #20
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr
 8000f00:	40021000 	.word	0x40021000
 8000f04:	40010000 	.word	0x40010000

08000f08 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b088      	sub	sp, #32
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f10:	f107 0310 	add.w	r3, r7, #16
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a2c      	ldr	r2, [pc, #176]	; (8000fd4 <HAL_CAN_MspInit+0xcc>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d151      	bne.n	8000fcc <HAL_CAN_MspInit+0xc4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f28:	4b2b      	ldr	r3, [pc, #172]	; (8000fd8 <HAL_CAN_MspInit+0xd0>)
 8000f2a:	69db      	ldr	r3, [r3, #28]
 8000f2c:	4a2a      	ldr	r2, [pc, #168]	; (8000fd8 <HAL_CAN_MspInit+0xd0>)
 8000f2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f32:	61d3      	str	r3, [r2, #28]
 8000f34:	4b28      	ldr	r3, [pc, #160]	; (8000fd8 <HAL_CAN_MspInit+0xd0>)
 8000f36:	69db      	ldr	r3, [r3, #28]
 8000f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f40:	4b25      	ldr	r3, [pc, #148]	; (8000fd8 <HAL_CAN_MspInit+0xd0>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	4a24      	ldr	r2, [pc, #144]	; (8000fd8 <HAL_CAN_MspInit+0xd0>)
 8000f46:	f043 0304 	orr.w	r3, r3, #4
 8000f4a:	6193      	str	r3, [r2, #24]
 8000f4c:	4b22      	ldr	r3, [pc, #136]	; (8000fd8 <HAL_CAN_MspInit+0xd0>)
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	f003 0304 	and.w	r3, r3, #4
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f5c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f66:	f107 0310 	add.w	r3, r7, #16
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	481b      	ldr	r0, [pc, #108]	; (8000fdc <HAL_CAN_MspInit+0xd4>)
 8000f6e:	f001 f913 	bl	8002198 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f80:	f107 0310 	add.w	r3, r7, #16
 8000f84:	4619      	mov	r1, r3
 8000f86:	4815      	ldr	r0, [pc, #84]	; (8000fdc <HAL_CAN_MspInit+0xd4>)
 8000f88:	f001 f906 	bl	8002198 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2100      	movs	r1, #0
 8000f90:	2013      	movs	r0, #19
 8000f92:	f001 f8ca 	bl	800212a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8000f96:	2013      	movs	r0, #19
 8000f98:	f001 f8e3 	bl	8002162 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	2014      	movs	r0, #20
 8000fa2:	f001 f8c2 	bl	800212a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000fa6:	2014      	movs	r0, #20
 8000fa8:	f001 f8db 	bl	8002162 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000fac:	2200      	movs	r2, #0
 8000fae:	2100      	movs	r1, #0
 8000fb0:	2015      	movs	r0, #21
 8000fb2:	f001 f8ba 	bl	800212a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000fb6:	2015      	movs	r0, #21
 8000fb8:	f001 f8d3 	bl	8002162 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	2016      	movs	r0, #22
 8000fc2:	f001 f8b2 	bl	800212a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000fc6:	2016      	movs	r0, #22
 8000fc8:	f001 f8cb 	bl	8002162 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000fcc:	bf00      	nop
 8000fce:	3720      	adds	r7, #32
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40006400 	.word	0x40006400
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	40010800 	.word	0x40010800

08000fe0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b088      	sub	sp, #32
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe8:	f107 0310 	add.w	r3, r7, #16
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a1c      	ldr	r2, [pc, #112]	; (800106c <HAL_UART_MspInit+0x8c>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d131      	bne.n	8001064 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001000:	4b1b      	ldr	r3, [pc, #108]	; (8001070 <HAL_UART_MspInit+0x90>)
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	4a1a      	ldr	r2, [pc, #104]	; (8001070 <HAL_UART_MspInit+0x90>)
 8001006:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800100a:	6193      	str	r3, [r2, #24]
 800100c:	4b18      	ldr	r3, [pc, #96]	; (8001070 <HAL_UART_MspInit+0x90>)
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001018:	4b15      	ldr	r3, [pc, #84]	; (8001070 <HAL_UART_MspInit+0x90>)
 800101a:	699b      	ldr	r3, [r3, #24]
 800101c:	4a14      	ldr	r2, [pc, #80]	; (8001070 <HAL_UART_MspInit+0x90>)
 800101e:	f043 0304 	orr.w	r3, r3, #4
 8001022:	6193      	str	r3, [r2, #24]
 8001024:	4b12      	ldr	r3, [pc, #72]	; (8001070 <HAL_UART_MspInit+0x90>)
 8001026:	699b      	ldr	r3, [r3, #24]
 8001028:	f003 0304 	and.w	r3, r3, #4
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001030:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001034:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001036:	2302      	movs	r3, #2
 8001038:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800103a:	2303      	movs	r3, #3
 800103c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103e:	f107 0310 	add.w	r3, r7, #16
 8001042:	4619      	mov	r1, r3
 8001044:	480b      	ldr	r0, [pc, #44]	; (8001074 <HAL_UART_MspInit+0x94>)
 8001046:	f001 f8a7 	bl	8002198 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800104a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800104e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001058:	f107 0310 	add.w	r3, r7, #16
 800105c:	4619      	mov	r1, r3
 800105e:	4805      	ldr	r0, [pc, #20]	; (8001074 <HAL_UART_MspInit+0x94>)
 8001060:	f001 f89a 	bl	8002198 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001064:	bf00      	nop
 8001066:	3720      	adds	r7, #32
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40013800 	.word	0x40013800
 8001070:	40021000 	.word	0x40021000
 8001074:	40010800 	.word	0x40010800

08001078 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800107c:	e7fe      	b.n	800107c <NMI_Handler+0x4>

0800107e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001082:	e7fe      	b.n	8001082 <HardFault_Handler+0x4>

08001084 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001088:	e7fe      	b.n	8001088 <MemManage_Handler+0x4>

0800108a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800108e:	e7fe      	b.n	800108e <BusFault_Handler+0x4>

08001090 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001094:	e7fe      	b.n	8001094 <UsageFault_Handler+0x4>

08001096 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	4770      	bx	lr

080010a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc80      	pop	{r7}
 80010ac:	4770      	bx	lr

080010ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bc80      	pop	{r7}
 80010b8:	4770      	bx	lr

080010ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010be:	f000 f8d3 	bl	8001268 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80010cc:	4802      	ldr	r0, [pc, #8]	; (80010d8 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 80010ce:	f000 fd29 	bl	8001b24 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000078 	.word	0x20000078

080010dc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80010e0:	4802      	ldr	r0, [pc, #8]	; (80010ec <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80010e2:	f000 fd1f 	bl	8001b24 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000078 	.word	0x20000078

080010f0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80010f4:	4802      	ldr	r0, [pc, #8]	; (8001100 <CAN1_RX1_IRQHandler+0x10>)
 80010f6:	f000 fd15 	bl	8001b24 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000078 	.word	0x20000078

08001104 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001108:	4802      	ldr	r0, [pc, #8]	; (8001114 <CAN1_SCE_IRQHandler+0x10>)
 800110a:	f000 fd0b 	bl	8001b24 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000078 	.word	0x20000078

08001118 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001120:	4a14      	ldr	r2, [pc, #80]	; (8001174 <_sbrk+0x5c>)
 8001122:	4b15      	ldr	r3, [pc, #84]	; (8001178 <_sbrk+0x60>)
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800112c:	4b13      	ldr	r3, [pc, #76]	; (800117c <_sbrk+0x64>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d102      	bne.n	800113a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001134:	4b11      	ldr	r3, [pc, #68]	; (800117c <_sbrk+0x64>)
 8001136:	4a12      	ldr	r2, [pc, #72]	; (8001180 <_sbrk+0x68>)
 8001138:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800113a:	4b10      	ldr	r3, [pc, #64]	; (800117c <_sbrk+0x64>)
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4413      	add	r3, r2
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	429a      	cmp	r2, r3
 8001146:	d207      	bcs.n	8001158 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001148:	f002 f896 	bl	8003278 <__errno>
 800114c:	4603      	mov	r3, r0
 800114e:	220c      	movs	r2, #12
 8001150:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001152:	f04f 33ff 	mov.w	r3, #4294967295
 8001156:	e009      	b.n	800116c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001158:	4b08      	ldr	r3, [pc, #32]	; (800117c <_sbrk+0x64>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800115e:	4b07      	ldr	r3, [pc, #28]	; (800117c <_sbrk+0x64>)
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4413      	add	r3, r2
 8001166:	4a05      	ldr	r2, [pc, #20]	; (800117c <_sbrk+0x64>)
 8001168:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800116a:	68fb      	ldr	r3, [r7, #12]
}
 800116c:	4618      	mov	r0, r3
 800116e:	3718      	adds	r7, #24
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20005000 	.word	0x20005000
 8001178:	00000400 	.word	0x00000400
 800117c:	200000e8 	.word	0x200000e8
 8001180:	20000238 	.word	0x20000238

08001184 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	bc80      	pop	{r7}
 800118e:	4770      	bx	lr

08001190 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001190:	f7ff fff8 	bl	8001184 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001194:	480b      	ldr	r0, [pc, #44]	; (80011c4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001196:	490c      	ldr	r1, [pc, #48]	; (80011c8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001198:	4a0c      	ldr	r2, [pc, #48]	; (80011cc <LoopFillZerobss+0x16>)
  movs r3, #0
 800119a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800119c:	e002      	b.n	80011a4 <LoopCopyDataInit>

0800119e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800119e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011a2:	3304      	adds	r3, #4

080011a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011a8:	d3f9      	bcc.n	800119e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011aa:	4a09      	ldr	r2, [pc, #36]	; (80011d0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011ac:	4c09      	ldr	r4, [pc, #36]	; (80011d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011b0:	e001      	b.n	80011b6 <LoopFillZerobss>

080011b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011b4:	3204      	adds	r2, #4

080011b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011b8:	d3fb      	bcc.n	80011b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ba:	f002 f863 	bl	8003284 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011be:	f7ff fd13 	bl	8000be8 <main>
  bx lr
 80011c2:	4770      	bx	lr
  ldr r0, =_sdata
 80011c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80011cc:	08003aa8 	.word	0x08003aa8
  ldr r2, =_sbss
 80011d0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80011d4:	20000238 	.word	0x20000238

080011d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011d8:	e7fe      	b.n	80011d8 <ADC1_2_IRQHandler>
	...

080011dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011e0:	4b08      	ldr	r3, [pc, #32]	; (8001204 <HAL_Init+0x28>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a07      	ldr	r2, [pc, #28]	; (8001204 <HAL_Init+0x28>)
 80011e6:	f043 0310 	orr.w	r3, r3, #16
 80011ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ec:	2003      	movs	r0, #3
 80011ee:	f000 ff91 	bl	8002114 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011f2:	200f      	movs	r0, #15
 80011f4:	f000 f808 	bl	8001208 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011f8:	f7ff fe54 	bl	8000ea4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40022000 	.word	0x40022000

08001208 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001210:	4b12      	ldr	r3, [pc, #72]	; (800125c <HAL_InitTick+0x54>)
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	4b12      	ldr	r3, [pc, #72]	; (8001260 <HAL_InitTick+0x58>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	4619      	mov	r1, r3
 800121a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001222:	fbb2 f3f3 	udiv	r3, r2, r3
 8001226:	4618      	mov	r0, r3
 8001228:	f000 ffa9 	bl	800217e <HAL_SYSTICK_Config>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e00e      	b.n	8001254 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2b0f      	cmp	r3, #15
 800123a:	d80a      	bhi.n	8001252 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800123c:	2200      	movs	r2, #0
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	f04f 30ff 	mov.w	r0, #4294967295
 8001244:	f000 ff71 	bl	800212a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001248:	4a06      	ldr	r2, [pc, #24]	; (8001264 <HAL_InitTick+0x5c>)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800124e:	2300      	movs	r3, #0
 8001250:	e000      	b.n	8001254 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
}
 8001254:	4618      	mov	r0, r3
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000000 	.word	0x20000000
 8001260:	20000008 	.word	0x20000008
 8001264:	20000004 	.word	0x20000004

08001268 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800126c:	4b05      	ldr	r3, [pc, #20]	; (8001284 <HAL_IncTick+0x1c>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	461a      	mov	r2, r3
 8001272:	4b05      	ldr	r3, [pc, #20]	; (8001288 <HAL_IncTick+0x20>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4413      	add	r3, r2
 8001278:	4a03      	ldr	r2, [pc, #12]	; (8001288 <HAL_IncTick+0x20>)
 800127a:	6013      	str	r3, [r2, #0]
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr
 8001284:	20000008 	.word	0x20000008
 8001288:	200000ec 	.word	0x200000ec

0800128c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  return uwTick;
 8001290:	4b02      	ldr	r3, [pc, #8]	; (800129c <HAL_GetTick+0x10>)
 8001292:	681b      	ldr	r3, [r3, #0]
}
 8001294:	4618      	mov	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr
 800129c:	200000ec 	.word	0x200000ec

080012a0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d101      	bne.n	80012b2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e0ed      	b.n	800148e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d102      	bne.n	80012c4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff fe22 	bl	8000f08 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f042 0201 	orr.w	r2, r2, #1
 80012d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012d4:	f7ff ffda 	bl	800128c <HAL_GetTick>
 80012d8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80012da:	e012      	b.n	8001302 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012dc:	f7ff ffd6 	bl	800128c <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b0a      	cmp	r3, #10
 80012e8:	d90b      	bls.n	8001302 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2205      	movs	r2, #5
 80012fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e0c5      	b.n	800148e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f003 0301 	and.w	r3, r3, #1
 800130c:	2b00      	cmp	r3, #0
 800130e:	d0e5      	beq.n	80012dc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f022 0202 	bic.w	r2, r2, #2
 800131e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001320:	f7ff ffb4 	bl	800128c <HAL_GetTick>
 8001324:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001326:	e012      	b.n	800134e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001328:	f7ff ffb0 	bl	800128c <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b0a      	cmp	r3, #10
 8001334:	d90b      	bls.n	800134e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2205      	movs	r2, #5
 8001346:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e09f      	b.n	800148e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1e5      	bne.n	8001328 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	7e1b      	ldrb	r3, [r3, #24]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d108      	bne.n	8001376 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	e007      	b.n	8001386 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001384:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	7e5b      	ldrb	r3, [r3, #25]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d108      	bne.n	80013a0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	e007      	b.n	80013b0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	7e9b      	ldrb	r3, [r3, #26]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d108      	bne.n	80013ca <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f042 0220 	orr.w	r2, r2, #32
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	e007      	b.n	80013da <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f022 0220 	bic.w	r2, r2, #32
 80013d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	7edb      	ldrb	r3, [r3, #27]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d108      	bne.n	80013f4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f022 0210 	bic.w	r2, r2, #16
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	e007      	b.n	8001404 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f042 0210 	orr.w	r2, r2, #16
 8001402:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	7f1b      	ldrb	r3, [r3, #28]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d108      	bne.n	800141e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f042 0208 	orr.w	r2, r2, #8
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	e007      	b.n	800142e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f022 0208 	bic.w	r2, r2, #8
 800142c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	7f5b      	ldrb	r3, [r3, #29]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d108      	bne.n	8001448 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f042 0204 	orr.w	r2, r2, #4
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	e007      	b.n	8001458 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f022 0204 	bic.w	r2, r2, #4
 8001456:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	689a      	ldr	r2, [r3, #8]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	431a      	orrs	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	691b      	ldr	r3, [r3, #16]
 8001466:	431a      	orrs	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	695b      	ldr	r3, [r3, #20]
 800146c:	ea42 0103 	orr.w	r1, r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	1e5a      	subs	r2, r3, #1
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	430a      	orrs	r2, r1
 800147c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2201      	movs	r2, #1
 8001488:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001496:	b480      	push	{r7}
 8001498:	b087      	sub	sp, #28
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
 800149e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014ac:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80014ae:	7cfb      	ldrb	r3, [r7, #19]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d003      	beq.n	80014bc <HAL_CAN_ConfigFilter+0x26>
 80014b4:	7cfb      	ldrb	r3, [r7, #19]
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	f040 80aa 	bne.w	8001610 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80014c2:	f043 0201 	orr.w	r2, r3, #1
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	695b      	ldr	r3, [r3, #20]
 80014d0:	f003 031f 	and.w	r3, r3, #31
 80014d4:	2201      	movs	r2, #1
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	43db      	mvns	r3, r3
 80014e6:	401a      	ands	r2, r3
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	69db      	ldr	r3, [r3, #28]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d123      	bne.n	800153e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	43db      	mvns	r3, r3
 8001500:	401a      	ands	r2, r3
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001514:	683a      	ldr	r2, [r7, #0]
 8001516:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001518:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	3248      	adds	r2, #72	; 0x48
 800151e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001532:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001534:	6979      	ldr	r1, [r7, #20]
 8001536:	3348      	adds	r3, #72	; 0x48
 8001538:	00db      	lsls	r3, r3, #3
 800153a:	440b      	add	r3, r1
 800153c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	69db      	ldr	r3, [r3, #28]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d122      	bne.n	800158c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	431a      	orrs	r2, r3
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001562:	683a      	ldr	r2, [r7, #0]
 8001564:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001566:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	3248      	adds	r2, #72	; 0x48
 800156c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001580:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001582:	6979      	ldr	r1, [r7, #20]
 8001584:	3348      	adds	r3, #72	; 0x48
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	440b      	add	r3, r1
 800158a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d109      	bne.n	80015a8 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	43db      	mvns	r3, r3
 800159e:	401a      	ands	r2, r3
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80015a6:	e007      	b.n	80015b8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	431a      	orrs	r2, r3
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	691b      	ldr	r3, [r3, #16]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d109      	bne.n	80015d4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	43db      	mvns	r3, r3
 80015ca:	401a      	ands	r2, r3
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80015d2:	e007      	b.n	80015e4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	431a      	orrs	r2, r3
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	6a1b      	ldr	r3, [r3, #32]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d107      	bne.n	80015fc <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	431a      	orrs	r2, r3
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001602:	f023 0201 	bic.w	r2, r3, #1
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800160c:	2300      	movs	r3, #0
 800160e:	e006      	b.n	800161e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001614:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
  }
}
 800161e:	4618      	mov	r0, r3
 8001620:	371c      	adds	r7, #28
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr

08001628 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001636:	b2db      	uxtb	r3, r3
 8001638:	2b01      	cmp	r3, #1
 800163a:	d12e      	bne.n	800169a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2202      	movs	r2, #2
 8001640:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f022 0201 	bic.w	r2, r2, #1
 8001652:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001654:	f7ff fe1a 	bl	800128c <HAL_GetTick>
 8001658:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800165a:	e012      	b.n	8001682 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800165c:	f7ff fe16 	bl	800128c <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b0a      	cmp	r3, #10
 8001668:	d90b      	bls.n	8001682 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2205      	movs	r2, #5
 800167a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e012      	b.n	80016a8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	2b00      	cmp	r3, #0
 800168e:	d1e5      	bne.n	800165c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001696:	2300      	movs	r3, #0
 8001698:	e006      	b.n	80016a8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
  }
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b089      	sub	sp, #36	; 0x24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
 80016bc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016c4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80016ce:	7ffb      	ldrb	r3, [r7, #31]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d003      	beq.n	80016dc <HAL_CAN_AddTxMessage+0x2c>
 80016d4:	7ffb      	ldrb	r3, [r7, #31]
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	f040 80ad 	bne.w	8001836 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d10a      	bne.n	80016fc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d105      	bne.n	80016fc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f000 8095 	beq.w	8001826 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	0e1b      	lsrs	r3, r3, #24
 8001700:	f003 0303 	and.w	r3, r3, #3
 8001704:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001706:	2201      	movs	r2, #1
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	409a      	lsls	r2, r3
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d10d      	bne.n	8001734 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001722:	68f9      	ldr	r1, [r7, #12]
 8001724:	6809      	ldr	r1, [r1, #0]
 8001726:	431a      	orrs	r2, r3
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	3318      	adds	r3, #24
 800172c:	011b      	lsls	r3, r3, #4
 800172e:	440b      	add	r3, r1
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	e00f      	b.n	8001754 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800173e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001744:	68f9      	ldr	r1, [r7, #12]
 8001746:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001748:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	3318      	adds	r3, #24
 800174e:	011b      	lsls	r3, r3, #4
 8001750:	440b      	add	r3, r1
 8001752:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	6819      	ldr	r1, [r3, #0]
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	691a      	ldr	r2, [r3, #16]
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	3318      	adds	r3, #24
 8001760:	011b      	lsls	r3, r3, #4
 8001762:	440b      	add	r3, r1
 8001764:	3304      	adds	r3, #4
 8001766:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	7d1b      	ldrb	r3, [r3, #20]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d111      	bne.n	8001794 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	3318      	adds	r3, #24
 8001778:	011b      	lsls	r3, r3, #4
 800177a:	4413      	add	r3, r2
 800177c:	3304      	adds	r3, #4
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	68fa      	ldr	r2, [r7, #12]
 8001782:	6811      	ldr	r1, [r2, #0]
 8001784:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	3318      	adds	r3, #24
 800178c:	011b      	lsls	r3, r3, #4
 800178e:	440b      	add	r3, r1
 8001790:	3304      	adds	r3, #4
 8001792:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3307      	adds	r3, #7
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	061a      	lsls	r2, r3, #24
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3306      	adds	r3, #6
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	041b      	lsls	r3, r3, #16
 80017a4:	431a      	orrs	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	3305      	adds	r3, #5
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	021b      	lsls	r3, r3, #8
 80017ae:	4313      	orrs	r3, r2
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	3204      	adds	r2, #4
 80017b4:	7812      	ldrb	r2, [r2, #0]
 80017b6:	4610      	mov	r0, r2
 80017b8:	68fa      	ldr	r2, [r7, #12]
 80017ba:	6811      	ldr	r1, [r2, #0]
 80017bc:	ea43 0200 	orr.w	r2, r3, r0
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	011b      	lsls	r3, r3, #4
 80017c4:	440b      	add	r3, r1
 80017c6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80017ca:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3303      	adds	r3, #3
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	061a      	lsls	r2, r3, #24
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	3302      	adds	r3, #2
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	041b      	lsls	r3, r3, #16
 80017dc:	431a      	orrs	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	3301      	adds	r3, #1
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	021b      	lsls	r3, r3, #8
 80017e6:	4313      	orrs	r3, r2
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	7812      	ldrb	r2, [r2, #0]
 80017ec:	4610      	mov	r0, r2
 80017ee:	68fa      	ldr	r2, [r7, #12]
 80017f0:	6811      	ldr	r1, [r2, #0]
 80017f2:	ea43 0200 	orr.w	r2, r3, r0
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	011b      	lsls	r3, r3, #4
 80017fa:	440b      	add	r3, r1
 80017fc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001800:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	3318      	adds	r3, #24
 800180a:	011b      	lsls	r3, r3, #4
 800180c:	4413      	add	r3, r2
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	68fa      	ldr	r2, [r7, #12]
 8001812:	6811      	ldr	r1, [r2, #0]
 8001814:	f043 0201 	orr.w	r2, r3, #1
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	3318      	adds	r3, #24
 800181c:	011b      	lsls	r3, r3, #4
 800181e:	440b      	add	r3, r1
 8001820:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001822:	2300      	movs	r3, #0
 8001824:	e00e      	b.n	8001844 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e006      	b.n	8001844 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
  }
}
 8001844:	4618      	mov	r0, r3
 8001846:	3724      	adds	r7, #36	; 0x24
 8001848:	46bd      	mov	sp, r7
 800184a:	bc80      	pop	{r7}
 800184c:	4770      	bx	lr

0800184e <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 800184e:	b480      	push	{r7}
 8001850:	b085      	sub	sp, #20
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
 8001856:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8001858:	2300      	movs	r3, #0
 800185a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001862:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8001864:	7afb      	ldrb	r3, [r7, #11]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d002      	beq.n	8001870 <HAL_CAN_IsTxMessagePending+0x22>
 800186a:	7afb      	ldrb	r3, [r7, #11]
 800186c:	2b02      	cmp	r3, #2
 800186e:	d10b      	bne.n	8001888 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	689a      	ldr	r2, [r3, #8]
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	069b      	lsls	r3, r3, #26
 800187a:	401a      	ands	r2, r3
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	069b      	lsls	r3, r3, #26
 8001880:	429a      	cmp	r2, r3
 8001882:	d001      	beq.n	8001888 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8001884:	2301      	movs	r3, #1
 8001886:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8001888:	68fb      	ldr	r3, [r7, #12]
}
 800188a:	4618      	mov	r0, r3
 800188c:	3714      	adds	r7, #20
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr

08001894 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001894:	b480      	push	{r7}
 8001896:	b087      	sub	sp, #28
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
 80018a0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018a8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80018aa:	7dfb      	ldrb	r3, [r7, #23]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d003      	beq.n	80018b8 <HAL_CAN_GetRxMessage+0x24>
 80018b0:	7dfb      	ldrb	r3, [r7, #23]
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	f040 8103 	bne.w	8001abe <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d10e      	bne.n	80018dc <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	f003 0303 	and.w	r3, r3, #3
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d116      	bne.n	80018fa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e0f7      	b.n	8001acc <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	f003 0303 	and.w	r3, r3, #3
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d107      	bne.n	80018fa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e0e8      	b.n	8001acc <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	331b      	adds	r3, #27
 8001902:	011b      	lsls	r3, r3, #4
 8001904:	4413      	add	r3, r2
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0204 	and.w	r2, r3, #4
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d10c      	bne.n	8001932 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	331b      	adds	r3, #27
 8001920:	011b      	lsls	r3, r3, #4
 8001922:	4413      	add	r3, r2
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	0d5b      	lsrs	r3, r3, #21
 8001928:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	e00b      	b.n	800194a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	331b      	adds	r3, #27
 800193a:	011b      	lsls	r3, r3, #4
 800193c:	4413      	add	r3, r2
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	08db      	lsrs	r3, r3, #3
 8001942:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	331b      	adds	r3, #27
 8001952:	011b      	lsls	r3, r3, #4
 8001954:	4413      	add	r3, r2
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0202 	and.w	r2, r3, #2
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	331b      	adds	r3, #27
 8001968:	011b      	lsls	r3, r3, #4
 800196a:	4413      	add	r3, r2
 800196c:	3304      	adds	r3, #4
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0308 	and.w	r3, r3, #8
 8001974:	2b00      	cmp	r3, #0
 8001976:	d003      	beq.n	8001980 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2208      	movs	r2, #8
 800197c:	611a      	str	r2, [r3, #16]
 800197e:	e00b      	b.n	8001998 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	331b      	adds	r3, #27
 8001988:	011b      	lsls	r3, r3, #4
 800198a:	4413      	add	r3, r2
 800198c:	3304      	adds	r3, #4
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 020f 	and.w	r2, r3, #15
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	331b      	adds	r3, #27
 80019a0:	011b      	lsls	r3, r3, #4
 80019a2:	4413      	add	r3, r2
 80019a4:	3304      	adds	r3, #4
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	0a1b      	lsrs	r3, r3, #8
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	331b      	adds	r3, #27
 80019b8:	011b      	lsls	r3, r3, #4
 80019ba:	4413      	add	r3, r2
 80019bc:	3304      	adds	r3, #4
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	0c1b      	lsrs	r3, r3, #16
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	011b      	lsls	r3, r3, #4
 80019d0:	4413      	add	r3, r2
 80019d2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	b2da      	uxtb	r2, r3
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	011b      	lsls	r3, r3, #4
 80019e6:	4413      	add	r3, r2
 80019e8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	0a1a      	lsrs	r2, r3, #8
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	3301      	adds	r3, #1
 80019f4:	b2d2      	uxtb	r2, r2
 80019f6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	011b      	lsls	r3, r3, #4
 8001a00:	4413      	add	r3, r2
 8001a02:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	0c1a      	lsrs	r2, r3, #16
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	3302      	adds	r3, #2
 8001a0e:	b2d2      	uxtb	r2, r2
 8001a10:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	011b      	lsls	r3, r3, #4
 8001a1a:	4413      	add	r3, r2
 8001a1c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	0e1a      	lsrs	r2, r3, #24
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	3303      	adds	r3, #3
 8001a28:	b2d2      	uxtb	r2, r2
 8001a2a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	011b      	lsls	r3, r3, #4
 8001a34:	4413      	add	r3, r2
 8001a36:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	3304      	adds	r3, #4
 8001a40:	b2d2      	uxtb	r2, r2
 8001a42:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	011b      	lsls	r3, r3, #4
 8001a4c:	4413      	add	r3, r2
 8001a4e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	0a1a      	lsrs	r2, r3, #8
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	3305      	adds	r3, #5
 8001a5a:	b2d2      	uxtb	r2, r2
 8001a5c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	011b      	lsls	r3, r3, #4
 8001a66:	4413      	add	r3, r2
 8001a68:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	0c1a      	lsrs	r2, r3, #16
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	3306      	adds	r3, #6
 8001a74:	b2d2      	uxtb	r2, r2
 8001a76:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	011b      	lsls	r3, r3, #4
 8001a80:	4413      	add	r3, r2
 8001a82:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	0e1a      	lsrs	r2, r3, #24
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	3307      	adds	r3, #7
 8001a8e:	b2d2      	uxtb	r2, r2
 8001a90:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d108      	bne.n	8001aaa <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	68da      	ldr	r2, [r3, #12]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f042 0220 	orr.w	r2, r2, #32
 8001aa6:	60da      	str	r2, [r3, #12]
 8001aa8:	e007      	b.n	8001aba <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	691a      	ldr	r2, [r3, #16]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f042 0220 	orr.w	r2, r2, #32
 8001ab8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001aba:	2300      	movs	r3, #0
 8001abc:	e006      	b.n	8001acc <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
  }
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	371c      	adds	r7, #28
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc80      	pop	{r7}
 8001ad4:	4770      	bx	lr

08001ad6 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b085      	sub	sp, #20
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
 8001ade:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001aea:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001aec:	7afb      	ldrb	r3, [r7, #11]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d002      	beq.n	8001af8 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8001af2:	7afb      	ldrb	r3, [r7, #11]
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d10f      	bne.n	8001b18 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d106      	bne.n	8001b0c <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	f003 0303 	and.w	r3, r3, #3
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	e005      	b.n	8001b18 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	691b      	ldr	r3, [r3, #16]
 8001b12:	f003 0303 	and.w	r3, r3, #3
 8001b16:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8001b18:	68fb      	ldr	r3, [r7, #12]
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr

08001b24 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b08a      	sub	sp, #40	; 0x28
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	695b      	ldr	r3, [r3, #20]
 8001b36:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001b60:	6a3b      	ldr	r3, [r7, #32]
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d07c      	beq.n	8001c64 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d023      	beq.n	8001bbc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 f983 	bl	8001e92 <HAL_CAN_TxMailbox0CompleteCallback>
 8001b8c:	e016      	b.n	8001bbc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	f003 0304 	and.w	r3, r3, #4
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d004      	beq.n	8001ba2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b9e:	627b      	str	r3, [r7, #36]	; 0x24
 8001ba0:	e00c      	b.n	8001bbc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	f003 0308 	and.w	r3, r3, #8
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d004      	beq.n	8001bb6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bb2:	627b      	str	r3, [r7, #36]	; 0x24
 8001bb4:	e002      	b.n	8001bbc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 f986 	bl	8001ec8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d024      	beq.n	8001c10 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bce:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d003      	beq.n	8001be2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f000 f962 	bl	8001ea4 <HAL_CAN_TxMailbox1CompleteCallback>
 8001be0:	e016      	b.n	8001c10 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d004      	beq.n	8001bf6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001bf2:	627b      	str	r3, [r7, #36]	; 0x24
 8001bf4:	e00c      	b.n	8001c10 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d004      	beq.n	8001c0a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c06:	627b      	str	r3, [r7, #36]	; 0x24
 8001c08:	e002      	b.n	8001c10 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f000 f965 	bl	8001eda <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d024      	beq.n	8001c64 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c22:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f000 f941 	bl	8001eb6 <HAL_CAN_TxMailbox2CompleteCallback>
 8001c34:	e016      	b.n	8001c64 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d004      	beq.n	8001c4a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c46:	627b      	str	r3, [r7, #36]	; 0x24
 8001c48:	e00c      	b.n	8001c64 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d004      	beq.n	8001c5e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c5a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c5c:	e002      	b.n	8001c64 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 f944 	bl	8001eec <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001c64:	6a3b      	ldr	r3, [r7, #32]
 8001c66:	f003 0308 	and.w	r3, r3, #8
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d00c      	beq.n	8001c88 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	f003 0310 	and.w	r3, r3, #16
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d007      	beq.n	8001c88 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c7e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2210      	movs	r2, #16
 8001c86:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001c88:	6a3b      	ldr	r3, [r7, #32]
 8001c8a:	f003 0304 	and.w	r3, r3, #4
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d00b      	beq.n	8001caa <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	f003 0308 	and.w	r3, r3, #8
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d006      	beq.n	8001caa <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2208      	movs	r2, #8
 8001ca2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 f933 	bl	8001f10 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001caa:	6a3b      	ldr	r3, [r7, #32]
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d009      	beq.n	8001cc8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d002      	beq.n	8001cc8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 f91b 	bl	8001efe <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001cc8:	6a3b      	ldr	r3, [r7, #32]
 8001cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d00c      	beq.n	8001cec <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	f003 0310 	and.w	r3, r3, #16
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d007      	beq.n	8001cec <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ce2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2210      	movs	r2, #16
 8001cea:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001cec:	6a3b      	ldr	r3, [r7, #32]
 8001cee:	f003 0320 	and.w	r3, r3, #32
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d00b      	beq.n	8001d0e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	f003 0308 	and.w	r3, r3, #8
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d006      	beq.n	8001d0e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2208      	movs	r2, #8
 8001d06:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 f913 	bl	8001f34 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001d0e:	6a3b      	ldr	r3, [r7, #32]
 8001d10:	f003 0310 	and.w	r3, r3, #16
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d009      	beq.n	8001d2c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	f003 0303 	and.w	r3, r3, #3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d002      	beq.n	8001d2c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f8fb 	bl	8001f22 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001d2c:	6a3b      	ldr	r3, [r7, #32]
 8001d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d00b      	beq.n	8001d4e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	f003 0310 	and.w	r3, r3, #16
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d006      	beq.n	8001d4e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2210      	movs	r2, #16
 8001d46:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f000 f8fc 	bl	8001f46 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001d4e:	6a3b      	ldr	r3, [r7, #32]
 8001d50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d00b      	beq.n	8001d70 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	f003 0308 	and.w	r3, r3, #8
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d006      	beq.n	8001d70 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2208      	movs	r2, #8
 8001d68:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f8f4 	bl	8001f58 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001d70:	6a3b      	ldr	r3, [r7, #32]
 8001d72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d07b      	beq.n	8001e72 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	f003 0304 	and.w	r3, r3, #4
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d072      	beq.n	8001e6a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d84:	6a3b      	ldr	r3, [r7, #32]
 8001d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d008      	beq.n	8001da0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d003      	beq.n	8001da0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9a:	f043 0301 	orr.w	r3, r3, #1
 8001d9e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001da0:	6a3b      	ldr	r3, [r7, #32]
 8001da2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d008      	beq.n	8001dbc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d003      	beq.n	8001dbc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db6:	f043 0302 	orr.w	r3, r3, #2
 8001dba:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001dbc:	6a3b      	ldr	r3, [r7, #32]
 8001dbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d008      	beq.n	8001dd8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d003      	beq.n	8001dd8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd2:	f043 0304 	orr.w	r3, r3, #4
 8001dd6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001dd8:	6a3b      	ldr	r3, [r7, #32]
 8001dda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d043      	beq.n	8001e6a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d03e      	beq.n	8001e6a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001df2:	2b60      	cmp	r3, #96	; 0x60
 8001df4:	d02b      	beq.n	8001e4e <HAL_CAN_IRQHandler+0x32a>
 8001df6:	2b60      	cmp	r3, #96	; 0x60
 8001df8:	d82e      	bhi.n	8001e58 <HAL_CAN_IRQHandler+0x334>
 8001dfa:	2b50      	cmp	r3, #80	; 0x50
 8001dfc:	d022      	beq.n	8001e44 <HAL_CAN_IRQHandler+0x320>
 8001dfe:	2b50      	cmp	r3, #80	; 0x50
 8001e00:	d82a      	bhi.n	8001e58 <HAL_CAN_IRQHandler+0x334>
 8001e02:	2b40      	cmp	r3, #64	; 0x40
 8001e04:	d019      	beq.n	8001e3a <HAL_CAN_IRQHandler+0x316>
 8001e06:	2b40      	cmp	r3, #64	; 0x40
 8001e08:	d826      	bhi.n	8001e58 <HAL_CAN_IRQHandler+0x334>
 8001e0a:	2b30      	cmp	r3, #48	; 0x30
 8001e0c:	d010      	beq.n	8001e30 <HAL_CAN_IRQHandler+0x30c>
 8001e0e:	2b30      	cmp	r3, #48	; 0x30
 8001e10:	d822      	bhi.n	8001e58 <HAL_CAN_IRQHandler+0x334>
 8001e12:	2b10      	cmp	r3, #16
 8001e14:	d002      	beq.n	8001e1c <HAL_CAN_IRQHandler+0x2f8>
 8001e16:	2b20      	cmp	r3, #32
 8001e18:	d005      	beq.n	8001e26 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001e1a:	e01d      	b.n	8001e58 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1e:	f043 0308 	orr.w	r3, r3, #8
 8001e22:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e24:	e019      	b.n	8001e5a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e28:	f043 0310 	orr.w	r3, r3, #16
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e2e:	e014      	b.n	8001e5a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e32:	f043 0320 	orr.w	r3, r3, #32
 8001e36:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e38:	e00f      	b.n	8001e5a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e42:	e00a      	b.n	8001e5a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e4c:	e005      	b.n	8001e5a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e54:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e56:	e000      	b.n	8001e5a <HAL_CAN_IRQHandler+0x336>
            break;
 8001e58:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	699a      	ldr	r2, [r3, #24]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001e68:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2204      	movs	r2, #4
 8001e70:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d008      	beq.n	8001e8a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 f870 	bl	8001f6a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001e8a:	bf00      	nop
 8001e8c:	3728      	adds	r7, #40	; 0x28
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b083      	sub	sp, #12
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bc80      	pop	{r7}
 8001ea2:	4770      	bx	lr

08001ea4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bc80      	pop	{r7}
 8001eb4:	4770      	bx	lr

08001eb6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b083      	sub	sp, #12
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr

08001ec8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bc80      	pop	{r7}
 8001ed8:	4770      	bx	lr

08001eda <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr

08001eec <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bc80      	pop	{r7}
 8001efc:	4770      	bx	lr

08001efe <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001efe:	b480      	push	{r7}
 8001f00:	b083      	sub	sp, #12
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001f06:	bf00      	nop
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bc80      	pop	{r7}
 8001f0e:	4770      	bx	lr

08001f10 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bc80      	pop	{r7}
 8001f20:	4770      	bx	lr

08001f22 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001f22:	b480      	push	{r7}
 8001f24:	b083      	sub	sp, #12
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bc80      	pop	{r7}
 8001f32:	4770      	bx	lr

08001f34 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bc80      	pop	{r7}
 8001f44:	4770      	bx	lr

08001f46 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bc80      	pop	{r7}
 8001f56:	4770      	bx	lr

08001f58 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bc80      	pop	{r7}
 8001f68:	4770      	bx	lr

08001f6a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b083      	sub	sp, #12
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bc80      	pop	{r7}
 8001f7a:	4770      	bx	lr

08001f7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f8c:	4b0c      	ldr	r3, [pc, #48]	; (8001fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f92:	68ba      	ldr	r2, [r7, #8]
 8001f94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f98:	4013      	ands	r3, r2
 8001f9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fae:	4a04      	ldr	r2, [pc, #16]	; (8001fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	60d3      	str	r3, [r2, #12]
}
 8001fb4:	bf00      	nop
 8001fb6:	3714      	adds	r7, #20
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bc80      	pop	{r7}
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	e000ed00 	.word	0xe000ed00

08001fc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fc8:	4b04      	ldr	r3, [pc, #16]	; (8001fdc <__NVIC_GetPriorityGrouping+0x18>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	0a1b      	lsrs	r3, r3, #8
 8001fce:	f003 0307 	and.w	r3, r3, #7
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bc80      	pop	{r7}
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	e000ed00 	.word	0xe000ed00

08001fe0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	db0b      	blt.n	800200a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ff2:	79fb      	ldrb	r3, [r7, #7]
 8001ff4:	f003 021f 	and.w	r2, r3, #31
 8001ff8:	4906      	ldr	r1, [pc, #24]	; (8002014 <__NVIC_EnableIRQ+0x34>)
 8001ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffe:	095b      	lsrs	r3, r3, #5
 8002000:	2001      	movs	r0, #1
 8002002:	fa00 f202 	lsl.w	r2, r0, r2
 8002006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr
 8002014:	e000e100 	.word	0xe000e100

08002018 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	4603      	mov	r3, r0
 8002020:	6039      	str	r1, [r7, #0]
 8002022:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002028:	2b00      	cmp	r3, #0
 800202a:	db0a      	blt.n	8002042 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	b2da      	uxtb	r2, r3
 8002030:	490c      	ldr	r1, [pc, #48]	; (8002064 <__NVIC_SetPriority+0x4c>)
 8002032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002036:	0112      	lsls	r2, r2, #4
 8002038:	b2d2      	uxtb	r2, r2
 800203a:	440b      	add	r3, r1
 800203c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002040:	e00a      	b.n	8002058 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	b2da      	uxtb	r2, r3
 8002046:	4908      	ldr	r1, [pc, #32]	; (8002068 <__NVIC_SetPriority+0x50>)
 8002048:	79fb      	ldrb	r3, [r7, #7]
 800204a:	f003 030f 	and.w	r3, r3, #15
 800204e:	3b04      	subs	r3, #4
 8002050:	0112      	lsls	r2, r2, #4
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	440b      	add	r3, r1
 8002056:	761a      	strb	r2, [r3, #24]
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	bc80      	pop	{r7}
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	e000e100 	.word	0xe000e100
 8002068:	e000ed00 	.word	0xe000ed00

0800206c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800206c:	b480      	push	{r7}
 800206e:	b089      	sub	sp, #36	; 0x24
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	f1c3 0307 	rsb	r3, r3, #7
 8002086:	2b04      	cmp	r3, #4
 8002088:	bf28      	it	cs
 800208a:	2304      	movcs	r3, #4
 800208c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	3304      	adds	r3, #4
 8002092:	2b06      	cmp	r3, #6
 8002094:	d902      	bls.n	800209c <NVIC_EncodePriority+0x30>
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	3b03      	subs	r3, #3
 800209a:	e000      	b.n	800209e <NVIC_EncodePriority+0x32>
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a0:	f04f 32ff 	mov.w	r2, #4294967295
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	43da      	mvns	r2, r3
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	401a      	ands	r2, r3
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020b4:	f04f 31ff 	mov.w	r1, #4294967295
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	fa01 f303 	lsl.w	r3, r1, r3
 80020be:	43d9      	mvns	r1, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c4:	4313      	orrs	r3, r2
         );
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3724      	adds	r7, #36	; 0x24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr

080020d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3b01      	subs	r3, #1
 80020dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020e0:	d301      	bcc.n	80020e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020e2:	2301      	movs	r3, #1
 80020e4:	e00f      	b.n	8002106 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020e6:	4a0a      	ldr	r2, [pc, #40]	; (8002110 <SysTick_Config+0x40>)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3b01      	subs	r3, #1
 80020ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ee:	210f      	movs	r1, #15
 80020f0:	f04f 30ff 	mov.w	r0, #4294967295
 80020f4:	f7ff ff90 	bl	8002018 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020f8:	4b05      	ldr	r3, [pc, #20]	; (8002110 <SysTick_Config+0x40>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020fe:	4b04      	ldr	r3, [pc, #16]	; (8002110 <SysTick_Config+0x40>)
 8002100:	2207      	movs	r2, #7
 8002102:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	e000e010 	.word	0xe000e010

08002114 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f7ff ff2d 	bl	8001f7c <__NVIC_SetPriorityGrouping>
}
 8002122:	bf00      	nop
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800212a:	b580      	push	{r7, lr}
 800212c:	b086      	sub	sp, #24
 800212e:	af00      	add	r7, sp, #0
 8002130:	4603      	mov	r3, r0
 8002132:	60b9      	str	r1, [r7, #8]
 8002134:	607a      	str	r2, [r7, #4]
 8002136:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002138:	2300      	movs	r3, #0
 800213a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800213c:	f7ff ff42 	bl	8001fc4 <__NVIC_GetPriorityGrouping>
 8002140:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	68b9      	ldr	r1, [r7, #8]
 8002146:	6978      	ldr	r0, [r7, #20]
 8002148:	f7ff ff90 	bl	800206c <NVIC_EncodePriority>
 800214c:	4602      	mov	r2, r0
 800214e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002152:	4611      	mov	r1, r2
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff ff5f 	bl	8002018 <__NVIC_SetPriority>
}
 800215a:	bf00      	nop
 800215c:	3718      	adds	r7, #24
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b082      	sub	sp, #8
 8002166:	af00      	add	r7, sp, #0
 8002168:	4603      	mov	r3, r0
 800216a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800216c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff ff35 	bl	8001fe0 <__NVIC_EnableIRQ>
}
 8002176:	bf00      	nop
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b082      	sub	sp, #8
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7ff ffa2 	bl	80020d0 <SysTick_Config>
 800218c:	4603      	mov	r3, r0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
	...

08002198 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002198:	b480      	push	{r7}
 800219a:	b08b      	sub	sp, #44	; 0x2c
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021a2:	2300      	movs	r3, #0
 80021a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021a6:	2300      	movs	r3, #0
 80021a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021aa:	e169      	b.n	8002480 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021ac:	2201      	movs	r2, #1
 80021ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	69fa      	ldr	r2, [r7, #28]
 80021bc:	4013      	ands	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	f040 8158 	bne.w	800247a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	4a9a      	ldr	r2, [pc, #616]	; (8002438 <HAL_GPIO_Init+0x2a0>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d05e      	beq.n	8002292 <HAL_GPIO_Init+0xfa>
 80021d4:	4a98      	ldr	r2, [pc, #608]	; (8002438 <HAL_GPIO_Init+0x2a0>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d875      	bhi.n	80022c6 <HAL_GPIO_Init+0x12e>
 80021da:	4a98      	ldr	r2, [pc, #608]	; (800243c <HAL_GPIO_Init+0x2a4>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d058      	beq.n	8002292 <HAL_GPIO_Init+0xfa>
 80021e0:	4a96      	ldr	r2, [pc, #600]	; (800243c <HAL_GPIO_Init+0x2a4>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d86f      	bhi.n	80022c6 <HAL_GPIO_Init+0x12e>
 80021e6:	4a96      	ldr	r2, [pc, #600]	; (8002440 <HAL_GPIO_Init+0x2a8>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d052      	beq.n	8002292 <HAL_GPIO_Init+0xfa>
 80021ec:	4a94      	ldr	r2, [pc, #592]	; (8002440 <HAL_GPIO_Init+0x2a8>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d869      	bhi.n	80022c6 <HAL_GPIO_Init+0x12e>
 80021f2:	4a94      	ldr	r2, [pc, #592]	; (8002444 <HAL_GPIO_Init+0x2ac>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d04c      	beq.n	8002292 <HAL_GPIO_Init+0xfa>
 80021f8:	4a92      	ldr	r2, [pc, #584]	; (8002444 <HAL_GPIO_Init+0x2ac>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d863      	bhi.n	80022c6 <HAL_GPIO_Init+0x12e>
 80021fe:	4a92      	ldr	r2, [pc, #584]	; (8002448 <HAL_GPIO_Init+0x2b0>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d046      	beq.n	8002292 <HAL_GPIO_Init+0xfa>
 8002204:	4a90      	ldr	r2, [pc, #576]	; (8002448 <HAL_GPIO_Init+0x2b0>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d85d      	bhi.n	80022c6 <HAL_GPIO_Init+0x12e>
 800220a:	2b12      	cmp	r3, #18
 800220c:	d82a      	bhi.n	8002264 <HAL_GPIO_Init+0xcc>
 800220e:	2b12      	cmp	r3, #18
 8002210:	d859      	bhi.n	80022c6 <HAL_GPIO_Init+0x12e>
 8002212:	a201      	add	r2, pc, #4	; (adr r2, 8002218 <HAL_GPIO_Init+0x80>)
 8002214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002218:	08002293 	.word	0x08002293
 800221c:	0800226d 	.word	0x0800226d
 8002220:	0800227f 	.word	0x0800227f
 8002224:	080022c1 	.word	0x080022c1
 8002228:	080022c7 	.word	0x080022c7
 800222c:	080022c7 	.word	0x080022c7
 8002230:	080022c7 	.word	0x080022c7
 8002234:	080022c7 	.word	0x080022c7
 8002238:	080022c7 	.word	0x080022c7
 800223c:	080022c7 	.word	0x080022c7
 8002240:	080022c7 	.word	0x080022c7
 8002244:	080022c7 	.word	0x080022c7
 8002248:	080022c7 	.word	0x080022c7
 800224c:	080022c7 	.word	0x080022c7
 8002250:	080022c7 	.word	0x080022c7
 8002254:	080022c7 	.word	0x080022c7
 8002258:	080022c7 	.word	0x080022c7
 800225c:	08002275 	.word	0x08002275
 8002260:	08002289 	.word	0x08002289
 8002264:	4a79      	ldr	r2, [pc, #484]	; (800244c <HAL_GPIO_Init+0x2b4>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d013      	beq.n	8002292 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800226a:	e02c      	b.n	80022c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	623b      	str	r3, [r7, #32]
          break;
 8002272:	e029      	b.n	80022c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	3304      	adds	r3, #4
 800227a:	623b      	str	r3, [r7, #32]
          break;
 800227c:	e024      	b.n	80022c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	3308      	adds	r3, #8
 8002284:	623b      	str	r3, [r7, #32]
          break;
 8002286:	e01f      	b.n	80022c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	330c      	adds	r3, #12
 800228e:	623b      	str	r3, [r7, #32]
          break;
 8002290:	e01a      	b.n	80022c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d102      	bne.n	80022a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800229a:	2304      	movs	r3, #4
 800229c:	623b      	str	r3, [r7, #32]
          break;
 800229e:	e013      	b.n	80022c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d105      	bne.n	80022b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022a8:	2308      	movs	r3, #8
 80022aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	69fa      	ldr	r2, [r7, #28]
 80022b0:	611a      	str	r2, [r3, #16]
          break;
 80022b2:	e009      	b.n	80022c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022b4:	2308      	movs	r3, #8
 80022b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	69fa      	ldr	r2, [r7, #28]
 80022bc:	615a      	str	r2, [r3, #20]
          break;
 80022be:	e003      	b.n	80022c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022c0:	2300      	movs	r3, #0
 80022c2:	623b      	str	r3, [r7, #32]
          break;
 80022c4:	e000      	b.n	80022c8 <HAL_GPIO_Init+0x130>
          break;
 80022c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	2bff      	cmp	r3, #255	; 0xff
 80022cc:	d801      	bhi.n	80022d2 <HAL_GPIO_Init+0x13a>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	e001      	b.n	80022d6 <HAL_GPIO_Init+0x13e>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	3304      	adds	r3, #4
 80022d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	2bff      	cmp	r3, #255	; 0xff
 80022dc:	d802      	bhi.n	80022e4 <HAL_GPIO_Init+0x14c>
 80022de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	e002      	b.n	80022ea <HAL_GPIO_Init+0x152>
 80022e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e6:	3b08      	subs	r3, #8
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	210f      	movs	r1, #15
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	fa01 f303 	lsl.w	r3, r1, r3
 80022f8:	43db      	mvns	r3, r3
 80022fa:	401a      	ands	r2, r3
 80022fc:	6a39      	ldr	r1, [r7, #32]
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	fa01 f303 	lsl.w	r3, r1, r3
 8002304:	431a      	orrs	r2, r3
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002312:	2b00      	cmp	r3, #0
 8002314:	f000 80b1 	beq.w	800247a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002318:	4b4d      	ldr	r3, [pc, #308]	; (8002450 <HAL_GPIO_Init+0x2b8>)
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	4a4c      	ldr	r2, [pc, #304]	; (8002450 <HAL_GPIO_Init+0x2b8>)
 800231e:	f043 0301 	orr.w	r3, r3, #1
 8002322:	6193      	str	r3, [r2, #24]
 8002324:	4b4a      	ldr	r3, [pc, #296]	; (8002450 <HAL_GPIO_Init+0x2b8>)
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	60bb      	str	r3, [r7, #8]
 800232e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002330:	4a48      	ldr	r2, [pc, #288]	; (8002454 <HAL_GPIO_Init+0x2bc>)
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	089b      	lsrs	r3, r3, #2
 8002336:	3302      	adds	r3, #2
 8002338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800233c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	f003 0303 	and.w	r3, r3, #3
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	220f      	movs	r2, #15
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	43db      	mvns	r3, r3
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	4013      	ands	r3, r2
 8002352:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4a40      	ldr	r2, [pc, #256]	; (8002458 <HAL_GPIO_Init+0x2c0>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d013      	beq.n	8002384 <HAL_GPIO_Init+0x1ec>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a3f      	ldr	r2, [pc, #252]	; (800245c <HAL_GPIO_Init+0x2c4>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d00d      	beq.n	8002380 <HAL_GPIO_Init+0x1e8>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a3e      	ldr	r2, [pc, #248]	; (8002460 <HAL_GPIO_Init+0x2c8>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d007      	beq.n	800237c <HAL_GPIO_Init+0x1e4>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a3d      	ldr	r2, [pc, #244]	; (8002464 <HAL_GPIO_Init+0x2cc>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d101      	bne.n	8002378 <HAL_GPIO_Init+0x1e0>
 8002374:	2303      	movs	r3, #3
 8002376:	e006      	b.n	8002386 <HAL_GPIO_Init+0x1ee>
 8002378:	2304      	movs	r3, #4
 800237a:	e004      	b.n	8002386 <HAL_GPIO_Init+0x1ee>
 800237c:	2302      	movs	r3, #2
 800237e:	e002      	b.n	8002386 <HAL_GPIO_Init+0x1ee>
 8002380:	2301      	movs	r3, #1
 8002382:	e000      	b.n	8002386 <HAL_GPIO_Init+0x1ee>
 8002384:	2300      	movs	r3, #0
 8002386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002388:	f002 0203 	and.w	r2, r2, #3
 800238c:	0092      	lsls	r2, r2, #2
 800238e:	4093      	lsls	r3, r2
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	4313      	orrs	r3, r2
 8002394:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002396:	492f      	ldr	r1, [pc, #188]	; (8002454 <HAL_GPIO_Init+0x2bc>)
 8002398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239a:	089b      	lsrs	r3, r3, #2
 800239c:	3302      	adds	r3, #2
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d006      	beq.n	80023be <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023b0:	4b2d      	ldr	r3, [pc, #180]	; (8002468 <HAL_GPIO_Init+0x2d0>)
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	492c      	ldr	r1, [pc, #176]	; (8002468 <HAL_GPIO_Init+0x2d0>)
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	608b      	str	r3, [r1, #8]
 80023bc:	e006      	b.n	80023cc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023be:	4b2a      	ldr	r3, [pc, #168]	; (8002468 <HAL_GPIO_Init+0x2d0>)
 80023c0:	689a      	ldr	r2, [r3, #8]
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	43db      	mvns	r3, r3
 80023c6:	4928      	ldr	r1, [pc, #160]	; (8002468 <HAL_GPIO_Init+0x2d0>)
 80023c8:	4013      	ands	r3, r2
 80023ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d006      	beq.n	80023e6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023d8:	4b23      	ldr	r3, [pc, #140]	; (8002468 <HAL_GPIO_Init+0x2d0>)
 80023da:	68da      	ldr	r2, [r3, #12]
 80023dc:	4922      	ldr	r1, [pc, #136]	; (8002468 <HAL_GPIO_Init+0x2d0>)
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	60cb      	str	r3, [r1, #12]
 80023e4:	e006      	b.n	80023f4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023e6:	4b20      	ldr	r3, [pc, #128]	; (8002468 <HAL_GPIO_Init+0x2d0>)
 80023e8:	68da      	ldr	r2, [r3, #12]
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	43db      	mvns	r3, r3
 80023ee:	491e      	ldr	r1, [pc, #120]	; (8002468 <HAL_GPIO_Init+0x2d0>)
 80023f0:	4013      	ands	r3, r2
 80023f2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d006      	beq.n	800240e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002400:	4b19      	ldr	r3, [pc, #100]	; (8002468 <HAL_GPIO_Init+0x2d0>)
 8002402:	685a      	ldr	r2, [r3, #4]
 8002404:	4918      	ldr	r1, [pc, #96]	; (8002468 <HAL_GPIO_Init+0x2d0>)
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	4313      	orrs	r3, r2
 800240a:	604b      	str	r3, [r1, #4]
 800240c:	e006      	b.n	800241c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800240e:	4b16      	ldr	r3, [pc, #88]	; (8002468 <HAL_GPIO_Init+0x2d0>)
 8002410:	685a      	ldr	r2, [r3, #4]
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	43db      	mvns	r3, r3
 8002416:	4914      	ldr	r1, [pc, #80]	; (8002468 <HAL_GPIO_Init+0x2d0>)
 8002418:	4013      	ands	r3, r2
 800241a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d021      	beq.n	800246c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002428:	4b0f      	ldr	r3, [pc, #60]	; (8002468 <HAL_GPIO_Init+0x2d0>)
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	490e      	ldr	r1, [pc, #56]	; (8002468 <HAL_GPIO_Init+0x2d0>)
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	4313      	orrs	r3, r2
 8002432:	600b      	str	r3, [r1, #0]
 8002434:	e021      	b.n	800247a <HAL_GPIO_Init+0x2e2>
 8002436:	bf00      	nop
 8002438:	10320000 	.word	0x10320000
 800243c:	10310000 	.word	0x10310000
 8002440:	10220000 	.word	0x10220000
 8002444:	10210000 	.word	0x10210000
 8002448:	10120000 	.word	0x10120000
 800244c:	10110000 	.word	0x10110000
 8002450:	40021000 	.word	0x40021000
 8002454:	40010000 	.word	0x40010000
 8002458:	40010800 	.word	0x40010800
 800245c:	40010c00 	.word	0x40010c00
 8002460:	40011000 	.word	0x40011000
 8002464:	40011400 	.word	0x40011400
 8002468:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800246c:	4b0b      	ldr	r3, [pc, #44]	; (800249c <HAL_GPIO_Init+0x304>)
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	43db      	mvns	r3, r3
 8002474:	4909      	ldr	r1, [pc, #36]	; (800249c <HAL_GPIO_Init+0x304>)
 8002476:	4013      	ands	r3, r2
 8002478:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800247a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247c:	3301      	adds	r3, #1
 800247e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002486:	fa22 f303 	lsr.w	r3, r2, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	f47f ae8e 	bne.w	80021ac <HAL_GPIO_Init+0x14>
  }
}
 8002490:	bf00      	nop
 8002492:	bf00      	nop
 8002494:	372c      	adds	r7, #44	; 0x2c
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr
 800249c:	40010400 	.word	0x40010400

080024a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	460b      	mov	r3, r1
 80024aa:	807b      	strh	r3, [r7, #2]
 80024ac:	4613      	mov	r3, r2
 80024ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024b0:	787b      	ldrb	r3, [r7, #1]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d003      	beq.n	80024be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024b6:	887a      	ldrh	r2, [r7, #2]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80024bc:	e003      	b.n	80024c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024be:	887b      	ldrh	r3, [r7, #2]
 80024c0:	041a      	lsls	r2, r3, #16
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	611a      	str	r2, [r3, #16]
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bc80      	pop	{r7}
 80024ce:	4770      	bx	lr

080024d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e272      	b.n	80029c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f000 8087 	beq.w	80025fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024f0:	4b92      	ldr	r3, [pc, #584]	; (800273c <HAL_RCC_OscConfig+0x26c>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f003 030c 	and.w	r3, r3, #12
 80024f8:	2b04      	cmp	r3, #4
 80024fa:	d00c      	beq.n	8002516 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024fc:	4b8f      	ldr	r3, [pc, #572]	; (800273c <HAL_RCC_OscConfig+0x26c>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f003 030c 	and.w	r3, r3, #12
 8002504:	2b08      	cmp	r3, #8
 8002506:	d112      	bne.n	800252e <HAL_RCC_OscConfig+0x5e>
 8002508:	4b8c      	ldr	r3, [pc, #560]	; (800273c <HAL_RCC_OscConfig+0x26c>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002514:	d10b      	bne.n	800252e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002516:	4b89      	ldr	r3, [pc, #548]	; (800273c <HAL_RCC_OscConfig+0x26c>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d06c      	beq.n	80025fc <HAL_RCC_OscConfig+0x12c>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d168      	bne.n	80025fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e24c      	b.n	80029c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002536:	d106      	bne.n	8002546 <HAL_RCC_OscConfig+0x76>
 8002538:	4b80      	ldr	r3, [pc, #512]	; (800273c <HAL_RCC_OscConfig+0x26c>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a7f      	ldr	r2, [pc, #508]	; (800273c <HAL_RCC_OscConfig+0x26c>)
 800253e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002542:	6013      	str	r3, [r2, #0]
 8002544:	e02e      	b.n	80025a4 <HAL_RCC_OscConfig+0xd4>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d10c      	bne.n	8002568 <HAL_RCC_OscConfig+0x98>
 800254e:	4b7b      	ldr	r3, [pc, #492]	; (800273c <HAL_RCC_OscConfig+0x26c>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a7a      	ldr	r2, [pc, #488]	; (800273c <HAL_RCC_OscConfig+0x26c>)
 8002554:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002558:	6013      	str	r3, [r2, #0]
 800255a:	4b78      	ldr	r3, [pc, #480]	; (800273c <HAL_RCC_OscConfig+0x26c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a77      	ldr	r2, [pc, #476]	; (800273c <HAL_RCC_OscConfig+0x26c>)
 8002560:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002564:	6013      	str	r3, [r2, #0]
 8002566:	e01d      	b.n	80025a4 <HAL_RCC_OscConfig+0xd4>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002570:	d10c      	bne.n	800258c <HAL_RCC_OscConfig+0xbc>
 8002572:	4b72      	ldr	r3, [pc, #456]	; (800273c <HAL_RCC_OscConfig+0x26c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a71      	ldr	r2, [pc, #452]	; (800273c <HAL_RCC_OscConfig+0x26c>)
 8002578:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800257c:	6013      	str	r3, [r2, #0]
 800257e:	4b6f      	ldr	r3, [pc, #444]	; (800273c <HAL_RCC_OscConfig+0x26c>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a6e      	ldr	r2, [pc, #440]	; (800273c <HAL_RCC_OscConfig+0x26c>)
 8002584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002588:	6013      	str	r3, [r2, #0]
 800258a:	e00b      	b.n	80025a4 <HAL_RCC_OscConfig+0xd4>
 800258c:	4b6b      	ldr	r3, [pc, #428]	; (800273c <HAL_RCC_OscConfig+0x26c>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a6a      	ldr	r2, [pc, #424]	; (800273c <HAL_RCC_OscConfig+0x26c>)
 8002592:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002596:	6013      	str	r3, [r2, #0]
 8002598:	4b68      	ldr	r3, [pc, #416]	; (800273c <HAL_RCC_OscConfig+0x26c>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a67      	ldr	r2, [pc, #412]	; (800273c <HAL_RCC_OscConfig+0x26c>)
 800259e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d013      	beq.n	80025d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ac:	f7fe fe6e 	bl	800128c <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025b4:	f7fe fe6a 	bl	800128c <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b64      	cmp	r3, #100	; 0x64
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e200      	b.n	80029c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c6:	4b5d      	ldr	r3, [pc, #372]	; (800273c <HAL_RCC_OscConfig+0x26c>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d0f0      	beq.n	80025b4 <HAL_RCC_OscConfig+0xe4>
 80025d2:	e014      	b.n	80025fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d4:	f7fe fe5a 	bl	800128c <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025dc:	f7fe fe56 	bl	800128c <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b64      	cmp	r3, #100	; 0x64
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e1ec      	b.n	80029c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ee:	4b53      	ldr	r3, [pc, #332]	; (800273c <HAL_RCC_OscConfig+0x26c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1f0      	bne.n	80025dc <HAL_RCC_OscConfig+0x10c>
 80025fa:	e000      	b.n	80025fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d063      	beq.n	80026d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800260a:	4b4c      	ldr	r3, [pc, #304]	; (800273c <HAL_RCC_OscConfig+0x26c>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f003 030c 	and.w	r3, r3, #12
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00b      	beq.n	800262e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002616:	4b49      	ldr	r3, [pc, #292]	; (800273c <HAL_RCC_OscConfig+0x26c>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f003 030c 	and.w	r3, r3, #12
 800261e:	2b08      	cmp	r3, #8
 8002620:	d11c      	bne.n	800265c <HAL_RCC_OscConfig+0x18c>
 8002622:	4b46      	ldr	r3, [pc, #280]	; (800273c <HAL_RCC_OscConfig+0x26c>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d116      	bne.n	800265c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800262e:	4b43      	ldr	r3, [pc, #268]	; (800273c <HAL_RCC_OscConfig+0x26c>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d005      	beq.n	8002646 <HAL_RCC_OscConfig+0x176>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d001      	beq.n	8002646 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e1c0      	b.n	80029c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002646:	4b3d      	ldr	r3, [pc, #244]	; (800273c <HAL_RCC_OscConfig+0x26c>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	4939      	ldr	r1, [pc, #228]	; (800273c <HAL_RCC_OscConfig+0x26c>)
 8002656:	4313      	orrs	r3, r2
 8002658:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800265a:	e03a      	b.n	80026d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d020      	beq.n	80026a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002664:	4b36      	ldr	r3, [pc, #216]	; (8002740 <HAL_RCC_OscConfig+0x270>)
 8002666:	2201      	movs	r2, #1
 8002668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266a:	f7fe fe0f 	bl	800128c <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002670:	e008      	b.n	8002684 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002672:	f7fe fe0b 	bl	800128c <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e1a1      	b.n	80029c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002684:	4b2d      	ldr	r3, [pc, #180]	; (800273c <HAL_RCC_OscConfig+0x26c>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d0f0      	beq.n	8002672 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002690:	4b2a      	ldr	r3, [pc, #168]	; (800273c <HAL_RCC_OscConfig+0x26c>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	695b      	ldr	r3, [r3, #20]
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	4927      	ldr	r1, [pc, #156]	; (800273c <HAL_RCC_OscConfig+0x26c>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	600b      	str	r3, [r1, #0]
 80026a4:	e015      	b.n	80026d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026a6:	4b26      	ldr	r3, [pc, #152]	; (8002740 <HAL_RCC_OscConfig+0x270>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ac:	f7fe fdee 	bl	800128c <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026b4:	f7fe fdea 	bl	800128c <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e180      	b.n	80029c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026c6:	4b1d      	ldr	r3, [pc, #116]	; (800273c <HAL_RCC_OscConfig+0x26c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1f0      	bne.n	80026b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0308 	and.w	r3, r3, #8
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d03a      	beq.n	8002754 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d019      	beq.n	800271a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026e6:	4b17      	ldr	r3, [pc, #92]	; (8002744 <HAL_RCC_OscConfig+0x274>)
 80026e8:	2201      	movs	r2, #1
 80026ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ec:	f7fe fdce 	bl	800128c <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026f2:	e008      	b.n	8002706 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026f4:	f7fe fdca 	bl	800128c <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e160      	b.n	80029c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002706:	4b0d      	ldr	r3, [pc, #52]	; (800273c <HAL_RCC_OscConfig+0x26c>)
 8002708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d0f0      	beq.n	80026f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002712:	2001      	movs	r0, #1
 8002714:	f000 face 	bl	8002cb4 <RCC_Delay>
 8002718:	e01c      	b.n	8002754 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800271a:	4b0a      	ldr	r3, [pc, #40]	; (8002744 <HAL_RCC_OscConfig+0x274>)
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002720:	f7fe fdb4 	bl	800128c <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002726:	e00f      	b.n	8002748 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002728:	f7fe fdb0 	bl	800128c <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d908      	bls.n	8002748 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e146      	b.n	80029c8 <HAL_RCC_OscConfig+0x4f8>
 800273a:	bf00      	nop
 800273c:	40021000 	.word	0x40021000
 8002740:	42420000 	.word	0x42420000
 8002744:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002748:	4b92      	ldr	r3, [pc, #584]	; (8002994 <HAL_RCC_OscConfig+0x4c4>)
 800274a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d1e9      	bne.n	8002728 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	2b00      	cmp	r3, #0
 800275e:	f000 80a6 	beq.w	80028ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002762:	2300      	movs	r3, #0
 8002764:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002766:	4b8b      	ldr	r3, [pc, #556]	; (8002994 <HAL_RCC_OscConfig+0x4c4>)
 8002768:	69db      	ldr	r3, [r3, #28]
 800276a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d10d      	bne.n	800278e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002772:	4b88      	ldr	r3, [pc, #544]	; (8002994 <HAL_RCC_OscConfig+0x4c4>)
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	4a87      	ldr	r2, [pc, #540]	; (8002994 <HAL_RCC_OscConfig+0x4c4>)
 8002778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800277c:	61d3      	str	r3, [r2, #28]
 800277e:	4b85      	ldr	r3, [pc, #532]	; (8002994 <HAL_RCC_OscConfig+0x4c4>)
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002786:	60bb      	str	r3, [r7, #8]
 8002788:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800278a:	2301      	movs	r3, #1
 800278c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800278e:	4b82      	ldr	r3, [pc, #520]	; (8002998 <HAL_RCC_OscConfig+0x4c8>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002796:	2b00      	cmp	r3, #0
 8002798:	d118      	bne.n	80027cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800279a:	4b7f      	ldr	r3, [pc, #508]	; (8002998 <HAL_RCC_OscConfig+0x4c8>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a7e      	ldr	r2, [pc, #504]	; (8002998 <HAL_RCC_OscConfig+0x4c8>)
 80027a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027a6:	f7fe fd71 	bl	800128c <HAL_GetTick>
 80027aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ac:	e008      	b.n	80027c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ae:	f7fe fd6d 	bl	800128c <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b64      	cmp	r3, #100	; 0x64
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e103      	b.n	80029c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c0:	4b75      	ldr	r3, [pc, #468]	; (8002998 <HAL_RCC_OscConfig+0x4c8>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0f0      	beq.n	80027ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d106      	bne.n	80027e2 <HAL_RCC_OscConfig+0x312>
 80027d4:	4b6f      	ldr	r3, [pc, #444]	; (8002994 <HAL_RCC_OscConfig+0x4c4>)
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	4a6e      	ldr	r2, [pc, #440]	; (8002994 <HAL_RCC_OscConfig+0x4c4>)
 80027da:	f043 0301 	orr.w	r3, r3, #1
 80027de:	6213      	str	r3, [r2, #32]
 80027e0:	e02d      	b.n	800283e <HAL_RCC_OscConfig+0x36e>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d10c      	bne.n	8002804 <HAL_RCC_OscConfig+0x334>
 80027ea:	4b6a      	ldr	r3, [pc, #424]	; (8002994 <HAL_RCC_OscConfig+0x4c4>)
 80027ec:	6a1b      	ldr	r3, [r3, #32]
 80027ee:	4a69      	ldr	r2, [pc, #420]	; (8002994 <HAL_RCC_OscConfig+0x4c4>)
 80027f0:	f023 0301 	bic.w	r3, r3, #1
 80027f4:	6213      	str	r3, [r2, #32]
 80027f6:	4b67      	ldr	r3, [pc, #412]	; (8002994 <HAL_RCC_OscConfig+0x4c4>)
 80027f8:	6a1b      	ldr	r3, [r3, #32]
 80027fa:	4a66      	ldr	r2, [pc, #408]	; (8002994 <HAL_RCC_OscConfig+0x4c4>)
 80027fc:	f023 0304 	bic.w	r3, r3, #4
 8002800:	6213      	str	r3, [r2, #32]
 8002802:	e01c      	b.n	800283e <HAL_RCC_OscConfig+0x36e>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	2b05      	cmp	r3, #5
 800280a:	d10c      	bne.n	8002826 <HAL_RCC_OscConfig+0x356>
 800280c:	4b61      	ldr	r3, [pc, #388]	; (8002994 <HAL_RCC_OscConfig+0x4c4>)
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	4a60      	ldr	r2, [pc, #384]	; (8002994 <HAL_RCC_OscConfig+0x4c4>)
 8002812:	f043 0304 	orr.w	r3, r3, #4
 8002816:	6213      	str	r3, [r2, #32]
 8002818:	4b5e      	ldr	r3, [pc, #376]	; (8002994 <HAL_RCC_OscConfig+0x4c4>)
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	4a5d      	ldr	r2, [pc, #372]	; (8002994 <HAL_RCC_OscConfig+0x4c4>)
 800281e:	f043 0301 	orr.w	r3, r3, #1
 8002822:	6213      	str	r3, [r2, #32]
 8002824:	e00b      	b.n	800283e <HAL_RCC_OscConfig+0x36e>
 8002826:	4b5b      	ldr	r3, [pc, #364]	; (8002994 <HAL_RCC_OscConfig+0x4c4>)
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	4a5a      	ldr	r2, [pc, #360]	; (8002994 <HAL_RCC_OscConfig+0x4c4>)
 800282c:	f023 0301 	bic.w	r3, r3, #1
 8002830:	6213      	str	r3, [r2, #32]
 8002832:	4b58      	ldr	r3, [pc, #352]	; (8002994 <HAL_RCC_OscConfig+0x4c4>)
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	4a57      	ldr	r2, [pc, #348]	; (8002994 <HAL_RCC_OscConfig+0x4c4>)
 8002838:	f023 0304 	bic.w	r3, r3, #4
 800283c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d015      	beq.n	8002872 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002846:	f7fe fd21 	bl	800128c <HAL_GetTick>
 800284a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800284c:	e00a      	b.n	8002864 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800284e:	f7fe fd1d 	bl	800128c <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	f241 3288 	movw	r2, #5000	; 0x1388
 800285c:	4293      	cmp	r3, r2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e0b1      	b.n	80029c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002864:	4b4b      	ldr	r3, [pc, #300]	; (8002994 <HAL_RCC_OscConfig+0x4c4>)
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d0ee      	beq.n	800284e <HAL_RCC_OscConfig+0x37e>
 8002870:	e014      	b.n	800289c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002872:	f7fe fd0b 	bl	800128c <HAL_GetTick>
 8002876:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002878:	e00a      	b.n	8002890 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800287a:	f7fe fd07 	bl	800128c <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	f241 3288 	movw	r2, #5000	; 0x1388
 8002888:	4293      	cmp	r3, r2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e09b      	b.n	80029c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002890:	4b40      	ldr	r3, [pc, #256]	; (8002994 <HAL_RCC_OscConfig+0x4c4>)
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1ee      	bne.n	800287a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800289c:	7dfb      	ldrb	r3, [r7, #23]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d105      	bne.n	80028ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028a2:	4b3c      	ldr	r3, [pc, #240]	; (8002994 <HAL_RCC_OscConfig+0x4c4>)
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	4a3b      	ldr	r2, [pc, #236]	; (8002994 <HAL_RCC_OscConfig+0x4c4>)
 80028a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f000 8087 	beq.w	80029c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028b8:	4b36      	ldr	r3, [pc, #216]	; (8002994 <HAL_RCC_OscConfig+0x4c4>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f003 030c 	and.w	r3, r3, #12
 80028c0:	2b08      	cmp	r3, #8
 80028c2:	d061      	beq.n	8002988 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	69db      	ldr	r3, [r3, #28]
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d146      	bne.n	800295a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028cc:	4b33      	ldr	r3, [pc, #204]	; (800299c <HAL_RCC_OscConfig+0x4cc>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d2:	f7fe fcdb 	bl	800128c <HAL_GetTick>
 80028d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028d8:	e008      	b.n	80028ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028da:	f7fe fcd7 	bl	800128c <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e06d      	b.n	80029c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028ec:	4b29      	ldr	r3, [pc, #164]	; (8002994 <HAL_RCC_OscConfig+0x4c4>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1f0      	bne.n	80028da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a1b      	ldr	r3, [r3, #32]
 80028fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002900:	d108      	bne.n	8002914 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002902:	4b24      	ldr	r3, [pc, #144]	; (8002994 <HAL_RCC_OscConfig+0x4c4>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	4921      	ldr	r1, [pc, #132]	; (8002994 <HAL_RCC_OscConfig+0x4c4>)
 8002910:	4313      	orrs	r3, r2
 8002912:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002914:	4b1f      	ldr	r3, [pc, #124]	; (8002994 <HAL_RCC_OscConfig+0x4c4>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a19      	ldr	r1, [r3, #32]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002924:	430b      	orrs	r3, r1
 8002926:	491b      	ldr	r1, [pc, #108]	; (8002994 <HAL_RCC_OscConfig+0x4c4>)
 8002928:	4313      	orrs	r3, r2
 800292a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800292c:	4b1b      	ldr	r3, [pc, #108]	; (800299c <HAL_RCC_OscConfig+0x4cc>)
 800292e:	2201      	movs	r2, #1
 8002930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002932:	f7fe fcab 	bl	800128c <HAL_GetTick>
 8002936:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002938:	e008      	b.n	800294c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800293a:	f7fe fca7 	bl	800128c <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e03d      	b.n	80029c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800294c:	4b11      	ldr	r3, [pc, #68]	; (8002994 <HAL_RCC_OscConfig+0x4c4>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d0f0      	beq.n	800293a <HAL_RCC_OscConfig+0x46a>
 8002958:	e035      	b.n	80029c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800295a:	4b10      	ldr	r3, [pc, #64]	; (800299c <HAL_RCC_OscConfig+0x4cc>)
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002960:	f7fe fc94 	bl	800128c <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002968:	f7fe fc90 	bl	800128c <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e026      	b.n	80029c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800297a:	4b06      	ldr	r3, [pc, #24]	; (8002994 <HAL_RCC_OscConfig+0x4c4>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1f0      	bne.n	8002968 <HAL_RCC_OscConfig+0x498>
 8002986:	e01e      	b.n	80029c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	69db      	ldr	r3, [r3, #28]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d107      	bne.n	80029a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e019      	b.n	80029c8 <HAL_RCC_OscConfig+0x4f8>
 8002994:	40021000 	.word	0x40021000
 8002998:	40007000 	.word	0x40007000
 800299c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029a0:	4b0b      	ldr	r3, [pc, #44]	; (80029d0 <HAL_RCC_OscConfig+0x500>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d106      	bne.n	80029c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029be:	429a      	cmp	r2, r3
 80029c0:	d001      	beq.n	80029c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e000      	b.n	80029c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3718      	adds	r7, #24
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	40021000 	.word	0x40021000

080029d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d101      	bne.n	80029e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e0d0      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029e8:	4b6a      	ldr	r3, [pc, #424]	; (8002b94 <HAL_RCC_ClockConfig+0x1c0>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d910      	bls.n	8002a18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f6:	4b67      	ldr	r3, [pc, #412]	; (8002b94 <HAL_RCC_ClockConfig+0x1c0>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f023 0207 	bic.w	r2, r3, #7
 80029fe:	4965      	ldr	r1, [pc, #404]	; (8002b94 <HAL_RCC_ClockConfig+0x1c0>)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a06:	4b63      	ldr	r3, [pc, #396]	; (8002b94 <HAL_RCC_ClockConfig+0x1c0>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d001      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e0b8      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d020      	beq.n	8002a66 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d005      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a30:	4b59      	ldr	r3, [pc, #356]	; (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	4a58      	ldr	r2, [pc, #352]	; (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a36:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a3a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0308 	and.w	r3, r3, #8
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d005      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a48:	4b53      	ldr	r3, [pc, #332]	; (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	4a52      	ldr	r2, [pc, #328]	; (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a52:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a54:	4b50      	ldr	r3, [pc, #320]	; (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	494d      	ldr	r1, [pc, #308]	; (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d040      	beq.n	8002af4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d107      	bne.n	8002a8a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a7a:	4b47      	ldr	r3, [pc, #284]	; (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d115      	bne.n	8002ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e07f      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d107      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a92:	4b41      	ldr	r3, [pc, #260]	; (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d109      	bne.n	8002ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e073      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aa2:	4b3d      	ldr	r3, [pc, #244]	; (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e06b      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ab2:	4b39      	ldr	r3, [pc, #228]	; (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f023 0203 	bic.w	r2, r3, #3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	4936      	ldr	r1, [pc, #216]	; (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ac4:	f7fe fbe2 	bl	800128c <HAL_GetTick>
 8002ac8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aca:	e00a      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002acc:	f7fe fbde 	bl	800128c <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e053      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ae2:	4b2d      	ldr	r3, [pc, #180]	; (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f003 020c 	and.w	r2, r3, #12
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d1eb      	bne.n	8002acc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002af4:	4b27      	ldr	r3, [pc, #156]	; (8002b94 <HAL_RCC_ClockConfig+0x1c0>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0307 	and.w	r3, r3, #7
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d210      	bcs.n	8002b24 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b02:	4b24      	ldr	r3, [pc, #144]	; (8002b94 <HAL_RCC_ClockConfig+0x1c0>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f023 0207 	bic.w	r2, r3, #7
 8002b0a:	4922      	ldr	r1, [pc, #136]	; (8002b94 <HAL_RCC_ClockConfig+0x1c0>)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b12:	4b20      	ldr	r3, [pc, #128]	; (8002b94 <HAL_RCC_ClockConfig+0x1c0>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d001      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e032      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0304 	and.w	r3, r3, #4
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d008      	beq.n	8002b42 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b30:	4b19      	ldr	r3, [pc, #100]	; (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	4916      	ldr	r1, [pc, #88]	; (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0308 	and.w	r3, r3, #8
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d009      	beq.n	8002b62 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b4e:	4b12      	ldr	r3, [pc, #72]	; (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	490e      	ldr	r1, [pc, #56]	; (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b62:	f000 f821 	bl	8002ba8 <HAL_RCC_GetSysClockFreq>
 8002b66:	4602      	mov	r2, r0
 8002b68:	4b0b      	ldr	r3, [pc, #44]	; (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	091b      	lsrs	r3, r3, #4
 8002b6e:	f003 030f 	and.w	r3, r3, #15
 8002b72:	490a      	ldr	r1, [pc, #40]	; (8002b9c <HAL_RCC_ClockConfig+0x1c8>)
 8002b74:	5ccb      	ldrb	r3, [r1, r3]
 8002b76:	fa22 f303 	lsr.w	r3, r2, r3
 8002b7a:	4a09      	ldr	r2, [pc, #36]	; (8002ba0 <HAL_RCC_ClockConfig+0x1cc>)
 8002b7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b7e:	4b09      	ldr	r3, [pc, #36]	; (8002ba4 <HAL_RCC_ClockConfig+0x1d0>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7fe fb40 	bl	8001208 <HAL_InitTick>

  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	40022000 	.word	0x40022000
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	08003a40 	.word	0x08003a40
 8002ba0:	20000000 	.word	0x20000000
 8002ba4:	20000004 	.word	0x20000004

08002ba8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b087      	sub	sp, #28
 8002bac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	60fb      	str	r3, [r7, #12]
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	60bb      	str	r3, [r7, #8]
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	617b      	str	r3, [r7, #20]
 8002bba:	2300      	movs	r3, #0
 8002bbc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002bc2:	4b1e      	ldr	r3, [pc, #120]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x94>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f003 030c 	and.w	r3, r3, #12
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	d002      	beq.n	8002bd8 <HAL_RCC_GetSysClockFreq+0x30>
 8002bd2:	2b08      	cmp	r3, #8
 8002bd4:	d003      	beq.n	8002bde <HAL_RCC_GetSysClockFreq+0x36>
 8002bd6:	e027      	b.n	8002c28 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bd8:	4b19      	ldr	r3, [pc, #100]	; (8002c40 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bda:	613b      	str	r3, [r7, #16]
      break;
 8002bdc:	e027      	b.n	8002c2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	0c9b      	lsrs	r3, r3, #18
 8002be2:	f003 030f 	and.w	r3, r3, #15
 8002be6:	4a17      	ldr	r2, [pc, #92]	; (8002c44 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002be8:	5cd3      	ldrb	r3, [r2, r3]
 8002bea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d010      	beq.n	8002c18 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002bf6:	4b11      	ldr	r3, [pc, #68]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x94>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	0c5b      	lsrs	r3, r3, #17
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	4a11      	ldr	r2, [pc, #68]	; (8002c48 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c02:	5cd3      	ldrb	r3, [r2, r3]
 8002c04:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a0d      	ldr	r2, [pc, #52]	; (8002c40 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c0a:	fb03 f202 	mul.w	r2, r3, r2
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c14:	617b      	str	r3, [r7, #20]
 8002c16:	e004      	b.n	8002c22 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a0c      	ldr	r2, [pc, #48]	; (8002c4c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c1c:	fb02 f303 	mul.w	r3, r2, r3
 8002c20:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	613b      	str	r3, [r7, #16]
      break;
 8002c26:	e002      	b.n	8002c2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c28:	4b05      	ldr	r3, [pc, #20]	; (8002c40 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c2a:	613b      	str	r3, [r7, #16]
      break;
 8002c2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c2e:	693b      	ldr	r3, [r7, #16]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	371c      	adds	r7, #28
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bc80      	pop	{r7}
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	007a1200 	.word	0x007a1200
 8002c44:	08003a58 	.word	0x08003a58
 8002c48:	08003a68 	.word	0x08003a68
 8002c4c:	003d0900 	.word	0x003d0900

08002c50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c54:	4b02      	ldr	r3, [pc, #8]	; (8002c60 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c56:	681b      	ldr	r3, [r3, #0]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bc80      	pop	{r7}
 8002c5e:	4770      	bx	lr
 8002c60:	20000000 	.word	0x20000000

08002c64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c68:	f7ff fff2 	bl	8002c50 <HAL_RCC_GetHCLKFreq>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	4b05      	ldr	r3, [pc, #20]	; (8002c84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	0a1b      	lsrs	r3, r3, #8
 8002c74:	f003 0307 	and.w	r3, r3, #7
 8002c78:	4903      	ldr	r1, [pc, #12]	; (8002c88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c7a:	5ccb      	ldrb	r3, [r1, r3]
 8002c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40021000 	.word	0x40021000
 8002c88:	08003a50 	.word	0x08003a50

08002c8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c90:	f7ff ffde 	bl	8002c50 <HAL_RCC_GetHCLKFreq>
 8002c94:	4602      	mov	r2, r0
 8002c96:	4b05      	ldr	r3, [pc, #20]	; (8002cac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	0adb      	lsrs	r3, r3, #11
 8002c9c:	f003 0307 	and.w	r3, r3, #7
 8002ca0:	4903      	ldr	r1, [pc, #12]	; (8002cb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ca2:	5ccb      	ldrb	r3, [r1, r3]
 8002ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	08003a50 	.word	0x08003a50

08002cb4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002cbc:	4b0a      	ldr	r3, [pc, #40]	; (8002ce8 <RCC_Delay+0x34>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a0a      	ldr	r2, [pc, #40]	; (8002cec <RCC_Delay+0x38>)
 8002cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc6:	0a5b      	lsrs	r3, r3, #9
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	fb02 f303 	mul.w	r3, r2, r3
 8002cce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002cd0:	bf00      	nop
  }
  while (Delay --);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	1e5a      	subs	r2, r3, #1
 8002cd6:	60fa      	str	r2, [r7, #12]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1f9      	bne.n	8002cd0 <RCC_Delay+0x1c>
}
 8002cdc:	bf00      	nop
 8002cde:	bf00      	nop
 8002ce0:	3714      	adds	r7, #20
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bc80      	pop	{r7}
 8002ce6:	4770      	bx	lr
 8002ce8:	20000000 	.word	0x20000000
 8002cec:	10624dd3 	.word	0x10624dd3

08002cf0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e042      	b.n	8002d88 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d106      	bne.n	8002d1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7fe f962 	bl	8000fe0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2224      	movs	r2, #36	; 0x24
 8002d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68da      	ldr	r2, [r3, #12]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 f91d 	bl	8002f74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	691a      	ldr	r2, [r3, #16]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	695a      	ldr	r2, [r3, #20]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68da      	ldr	r2, [r3, #12]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2220      	movs	r2, #32
 8002d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3708      	adds	r7, #8
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b08a      	sub	sp, #40	; 0x28
 8002d94:	af02      	add	r7, sp, #8
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	603b      	str	r3, [r7, #0]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002da0:	2300      	movs	r3, #0
 8002da2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b20      	cmp	r3, #32
 8002dae:	d16d      	bne.n	8002e8c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d002      	beq.n	8002dbc <HAL_UART_Transmit+0x2c>
 8002db6:	88fb      	ldrh	r3, [r7, #6]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d101      	bne.n	8002dc0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e066      	b.n	8002e8e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2221      	movs	r2, #33	; 0x21
 8002dca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dce:	f7fe fa5d 	bl	800128c <HAL_GetTick>
 8002dd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	88fa      	ldrh	r2, [r7, #6]
 8002dd8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	88fa      	ldrh	r2, [r7, #6]
 8002dde:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002de8:	d108      	bne.n	8002dfc <HAL_UART_Transmit+0x6c>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d104      	bne.n	8002dfc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002df2:	2300      	movs	r3, #0
 8002df4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	61bb      	str	r3, [r7, #24]
 8002dfa:	e003      	b.n	8002e04 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e00:	2300      	movs	r3, #0
 8002e02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e04:	e02a      	b.n	8002e5c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	9300      	str	r3, [sp, #0]
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	2180      	movs	r1, #128	; 0x80
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	f000 f840 	bl	8002e96 <UART_WaitOnFlagUntilTimeout>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e036      	b.n	8002e8e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10b      	bne.n	8002e3e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	881b      	ldrh	r3, [r3, #0]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	3302      	adds	r3, #2
 8002e3a:	61bb      	str	r3, [r7, #24]
 8002e3c:	e007      	b.n	8002e4e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	781a      	ldrb	r2, [r3, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	3b01      	subs	r3, #1
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1cf      	bne.n	8002e06 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	9300      	str	r3, [sp, #0]
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	2140      	movs	r1, #64	; 0x40
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f000 f810 	bl	8002e96 <UART_WaitOnFlagUntilTimeout>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e006      	b.n	8002e8e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2220      	movs	r2, #32
 8002e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	e000      	b.n	8002e8e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002e8c:	2302      	movs	r3, #2
  }
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3720      	adds	r7, #32
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b090      	sub	sp, #64	; 0x40
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	60f8      	str	r0, [r7, #12]
 8002e9e:	60b9      	str	r1, [r7, #8]
 8002ea0:	603b      	str	r3, [r7, #0]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ea6:	e050      	b.n	8002f4a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ea8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eae:	d04c      	beq.n	8002f4a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002eb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d007      	beq.n	8002ec6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002eb6:	f7fe f9e9 	bl	800128c <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d241      	bcs.n	8002f4a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	330c      	adds	r3, #12
 8002ecc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed0:	e853 3f00 	ldrex	r3, [r3]
 8002ed4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002edc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	330c      	adds	r3, #12
 8002ee4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ee6:	637a      	str	r2, [r7, #52]	; 0x34
 8002ee8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002eec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002eee:	e841 2300 	strex	r3, r2, [r1]
 8002ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1e5      	bne.n	8002ec6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	3314      	adds	r3, #20
 8002f00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	e853 3f00 	ldrex	r3, [r3]
 8002f08:	613b      	str	r3, [r7, #16]
   return(result);
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	f023 0301 	bic.w	r3, r3, #1
 8002f10:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	3314      	adds	r3, #20
 8002f18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f1a:	623a      	str	r2, [r7, #32]
 8002f1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f1e:	69f9      	ldr	r1, [r7, #28]
 8002f20:	6a3a      	ldr	r2, [r7, #32]
 8002f22:	e841 2300 	strex	r3, r2, [r1]
 8002f26:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1e5      	bne.n	8002efa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2220      	movs	r2, #32
 8002f32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2220      	movs	r2, #32
 8002f3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e00f      	b.n	8002f6a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	4013      	ands	r3, r2
 8002f54:	68ba      	ldr	r2, [r7, #8]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	bf0c      	ite	eq
 8002f5a:	2301      	moveq	r3, #1
 8002f5c:	2300      	movne	r3, #0
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	461a      	mov	r2, r3
 8002f62:	79fb      	ldrb	r3, [r7, #7]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d09f      	beq.n	8002ea8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3740      	adds	r7, #64	; 0x40
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
	...

08002f74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68da      	ldr	r2, [r3, #12]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689a      	ldr	r2, [r3, #8]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002fae:	f023 030c 	bic.w	r3, r3, #12
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	6812      	ldr	r2, [r2, #0]
 8002fb6:	68b9      	ldr	r1, [r7, #8]
 8002fb8:	430b      	orrs	r3, r1
 8002fba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	699a      	ldr	r2, [r3, #24]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a2c      	ldr	r2, [pc, #176]	; (8003088 <UART_SetConfig+0x114>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d103      	bne.n	8002fe4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002fdc:	f7ff fe56 	bl	8002c8c <HAL_RCC_GetPCLK2Freq>
 8002fe0:	60f8      	str	r0, [r7, #12]
 8002fe2:	e002      	b.n	8002fea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002fe4:	f7ff fe3e 	bl	8002c64 <HAL_RCC_GetPCLK1Freq>
 8002fe8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	4613      	mov	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4413      	add	r3, r2
 8002ff2:	009a      	lsls	r2, r3, #2
 8002ff4:	441a      	add	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003000:	4a22      	ldr	r2, [pc, #136]	; (800308c <UART_SetConfig+0x118>)
 8003002:	fba2 2303 	umull	r2, r3, r2, r3
 8003006:	095b      	lsrs	r3, r3, #5
 8003008:	0119      	lsls	r1, r3, #4
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	4613      	mov	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	009a      	lsls	r2, r3, #2
 8003014:	441a      	add	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003020:	4b1a      	ldr	r3, [pc, #104]	; (800308c <UART_SetConfig+0x118>)
 8003022:	fba3 0302 	umull	r0, r3, r3, r2
 8003026:	095b      	lsrs	r3, r3, #5
 8003028:	2064      	movs	r0, #100	; 0x64
 800302a:	fb00 f303 	mul.w	r3, r0, r3
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	011b      	lsls	r3, r3, #4
 8003032:	3332      	adds	r3, #50	; 0x32
 8003034:	4a15      	ldr	r2, [pc, #84]	; (800308c <UART_SetConfig+0x118>)
 8003036:	fba2 2303 	umull	r2, r3, r2, r3
 800303a:	095b      	lsrs	r3, r3, #5
 800303c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003040:	4419      	add	r1, r3
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	4613      	mov	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	4413      	add	r3, r2
 800304a:	009a      	lsls	r2, r3, #2
 800304c:	441a      	add	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	fbb2 f2f3 	udiv	r2, r2, r3
 8003058:	4b0c      	ldr	r3, [pc, #48]	; (800308c <UART_SetConfig+0x118>)
 800305a:	fba3 0302 	umull	r0, r3, r3, r2
 800305e:	095b      	lsrs	r3, r3, #5
 8003060:	2064      	movs	r0, #100	; 0x64
 8003062:	fb00 f303 	mul.w	r3, r0, r3
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	011b      	lsls	r3, r3, #4
 800306a:	3332      	adds	r3, #50	; 0x32
 800306c:	4a07      	ldr	r2, [pc, #28]	; (800308c <UART_SetConfig+0x118>)
 800306e:	fba2 2303 	umull	r2, r3, r2, r3
 8003072:	095b      	lsrs	r3, r3, #5
 8003074:	f003 020f 	and.w	r2, r3, #15
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	440a      	add	r2, r1
 800307e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003080:	bf00      	nop
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40013800 	.word	0x40013800
 800308c:	51eb851f 	.word	0x51eb851f

08003090 <malloc>:
 8003090:	4b02      	ldr	r3, [pc, #8]	; (800309c <malloc+0xc>)
 8003092:	4601      	mov	r1, r0
 8003094:	6818      	ldr	r0, [r3, #0]
 8003096:	f000 b82b 	b.w	80030f0 <_malloc_r>
 800309a:	bf00      	nop
 800309c:	20000058 	.word	0x20000058

080030a0 <free>:
 80030a0:	4b02      	ldr	r3, [pc, #8]	; (80030ac <free+0xc>)
 80030a2:	4601      	mov	r1, r0
 80030a4:	6818      	ldr	r0, [r3, #0]
 80030a6:	f000 b921 	b.w	80032ec <_free_r>
 80030aa:	bf00      	nop
 80030ac:	20000058 	.word	0x20000058

080030b0 <sbrk_aligned>:
 80030b0:	b570      	push	{r4, r5, r6, lr}
 80030b2:	4e0e      	ldr	r6, [pc, #56]	; (80030ec <sbrk_aligned+0x3c>)
 80030b4:	460c      	mov	r4, r1
 80030b6:	6831      	ldr	r1, [r6, #0]
 80030b8:	4605      	mov	r5, r0
 80030ba:	b911      	cbnz	r1, 80030c2 <sbrk_aligned+0x12>
 80030bc:	f000 f8cc 	bl	8003258 <_sbrk_r>
 80030c0:	6030      	str	r0, [r6, #0]
 80030c2:	4621      	mov	r1, r4
 80030c4:	4628      	mov	r0, r5
 80030c6:	f000 f8c7 	bl	8003258 <_sbrk_r>
 80030ca:	1c43      	adds	r3, r0, #1
 80030cc:	d00a      	beq.n	80030e4 <sbrk_aligned+0x34>
 80030ce:	1cc4      	adds	r4, r0, #3
 80030d0:	f024 0403 	bic.w	r4, r4, #3
 80030d4:	42a0      	cmp	r0, r4
 80030d6:	d007      	beq.n	80030e8 <sbrk_aligned+0x38>
 80030d8:	1a21      	subs	r1, r4, r0
 80030da:	4628      	mov	r0, r5
 80030dc:	f000 f8bc 	bl	8003258 <_sbrk_r>
 80030e0:	3001      	adds	r0, #1
 80030e2:	d101      	bne.n	80030e8 <sbrk_aligned+0x38>
 80030e4:	f04f 34ff 	mov.w	r4, #4294967295
 80030e8:	4620      	mov	r0, r4
 80030ea:	bd70      	pop	{r4, r5, r6, pc}
 80030ec:	200000f4 	.word	0x200000f4

080030f0 <_malloc_r>:
 80030f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80030f4:	1ccd      	adds	r5, r1, #3
 80030f6:	f025 0503 	bic.w	r5, r5, #3
 80030fa:	3508      	adds	r5, #8
 80030fc:	2d0c      	cmp	r5, #12
 80030fe:	bf38      	it	cc
 8003100:	250c      	movcc	r5, #12
 8003102:	2d00      	cmp	r5, #0
 8003104:	4607      	mov	r7, r0
 8003106:	db01      	blt.n	800310c <_malloc_r+0x1c>
 8003108:	42a9      	cmp	r1, r5
 800310a:	d905      	bls.n	8003118 <_malloc_r+0x28>
 800310c:	230c      	movs	r3, #12
 800310e:	2600      	movs	r6, #0
 8003110:	603b      	str	r3, [r7, #0]
 8003112:	4630      	mov	r0, r6
 8003114:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003118:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80031ec <_malloc_r+0xfc>
 800311c:	f000 f868 	bl	80031f0 <__malloc_lock>
 8003120:	f8d8 3000 	ldr.w	r3, [r8]
 8003124:	461c      	mov	r4, r3
 8003126:	bb5c      	cbnz	r4, 8003180 <_malloc_r+0x90>
 8003128:	4629      	mov	r1, r5
 800312a:	4638      	mov	r0, r7
 800312c:	f7ff ffc0 	bl	80030b0 <sbrk_aligned>
 8003130:	1c43      	adds	r3, r0, #1
 8003132:	4604      	mov	r4, r0
 8003134:	d155      	bne.n	80031e2 <_malloc_r+0xf2>
 8003136:	f8d8 4000 	ldr.w	r4, [r8]
 800313a:	4626      	mov	r6, r4
 800313c:	2e00      	cmp	r6, #0
 800313e:	d145      	bne.n	80031cc <_malloc_r+0xdc>
 8003140:	2c00      	cmp	r4, #0
 8003142:	d048      	beq.n	80031d6 <_malloc_r+0xe6>
 8003144:	6823      	ldr	r3, [r4, #0]
 8003146:	4631      	mov	r1, r6
 8003148:	4638      	mov	r0, r7
 800314a:	eb04 0903 	add.w	r9, r4, r3
 800314e:	f000 f883 	bl	8003258 <_sbrk_r>
 8003152:	4581      	cmp	r9, r0
 8003154:	d13f      	bne.n	80031d6 <_malloc_r+0xe6>
 8003156:	6821      	ldr	r1, [r4, #0]
 8003158:	4638      	mov	r0, r7
 800315a:	1a6d      	subs	r5, r5, r1
 800315c:	4629      	mov	r1, r5
 800315e:	f7ff ffa7 	bl	80030b0 <sbrk_aligned>
 8003162:	3001      	adds	r0, #1
 8003164:	d037      	beq.n	80031d6 <_malloc_r+0xe6>
 8003166:	6823      	ldr	r3, [r4, #0]
 8003168:	442b      	add	r3, r5
 800316a:	6023      	str	r3, [r4, #0]
 800316c:	f8d8 3000 	ldr.w	r3, [r8]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d038      	beq.n	80031e6 <_malloc_r+0xf6>
 8003174:	685a      	ldr	r2, [r3, #4]
 8003176:	42a2      	cmp	r2, r4
 8003178:	d12b      	bne.n	80031d2 <_malloc_r+0xe2>
 800317a:	2200      	movs	r2, #0
 800317c:	605a      	str	r2, [r3, #4]
 800317e:	e00f      	b.n	80031a0 <_malloc_r+0xb0>
 8003180:	6822      	ldr	r2, [r4, #0]
 8003182:	1b52      	subs	r2, r2, r5
 8003184:	d41f      	bmi.n	80031c6 <_malloc_r+0xd6>
 8003186:	2a0b      	cmp	r2, #11
 8003188:	d917      	bls.n	80031ba <_malloc_r+0xca>
 800318a:	1961      	adds	r1, r4, r5
 800318c:	42a3      	cmp	r3, r4
 800318e:	6025      	str	r5, [r4, #0]
 8003190:	bf18      	it	ne
 8003192:	6059      	strne	r1, [r3, #4]
 8003194:	6863      	ldr	r3, [r4, #4]
 8003196:	bf08      	it	eq
 8003198:	f8c8 1000 	streq.w	r1, [r8]
 800319c:	5162      	str	r2, [r4, r5]
 800319e:	604b      	str	r3, [r1, #4]
 80031a0:	4638      	mov	r0, r7
 80031a2:	f104 060b 	add.w	r6, r4, #11
 80031a6:	f000 f829 	bl	80031fc <__malloc_unlock>
 80031aa:	f026 0607 	bic.w	r6, r6, #7
 80031ae:	1d23      	adds	r3, r4, #4
 80031b0:	1af2      	subs	r2, r6, r3
 80031b2:	d0ae      	beq.n	8003112 <_malloc_r+0x22>
 80031b4:	1b9b      	subs	r3, r3, r6
 80031b6:	50a3      	str	r3, [r4, r2]
 80031b8:	e7ab      	b.n	8003112 <_malloc_r+0x22>
 80031ba:	42a3      	cmp	r3, r4
 80031bc:	6862      	ldr	r2, [r4, #4]
 80031be:	d1dd      	bne.n	800317c <_malloc_r+0x8c>
 80031c0:	f8c8 2000 	str.w	r2, [r8]
 80031c4:	e7ec      	b.n	80031a0 <_malloc_r+0xb0>
 80031c6:	4623      	mov	r3, r4
 80031c8:	6864      	ldr	r4, [r4, #4]
 80031ca:	e7ac      	b.n	8003126 <_malloc_r+0x36>
 80031cc:	4634      	mov	r4, r6
 80031ce:	6876      	ldr	r6, [r6, #4]
 80031d0:	e7b4      	b.n	800313c <_malloc_r+0x4c>
 80031d2:	4613      	mov	r3, r2
 80031d4:	e7cc      	b.n	8003170 <_malloc_r+0x80>
 80031d6:	230c      	movs	r3, #12
 80031d8:	4638      	mov	r0, r7
 80031da:	603b      	str	r3, [r7, #0]
 80031dc:	f000 f80e 	bl	80031fc <__malloc_unlock>
 80031e0:	e797      	b.n	8003112 <_malloc_r+0x22>
 80031e2:	6025      	str	r5, [r4, #0]
 80031e4:	e7dc      	b.n	80031a0 <_malloc_r+0xb0>
 80031e6:	605b      	str	r3, [r3, #4]
 80031e8:	deff      	udf	#255	; 0xff
 80031ea:	bf00      	nop
 80031ec:	200000f0 	.word	0x200000f0

080031f0 <__malloc_lock>:
 80031f0:	4801      	ldr	r0, [pc, #4]	; (80031f8 <__malloc_lock+0x8>)
 80031f2:	f000 b86b 	b.w	80032cc <__retarget_lock_acquire_recursive>
 80031f6:	bf00      	nop
 80031f8:	20000234 	.word	0x20000234

080031fc <__malloc_unlock>:
 80031fc:	4801      	ldr	r0, [pc, #4]	; (8003204 <__malloc_unlock+0x8>)
 80031fe:	f000 b866 	b.w	80032ce <__retarget_lock_release_recursive>
 8003202:	bf00      	nop
 8003204:	20000234 	.word	0x20000234

08003208 <siprintf>:
 8003208:	b40e      	push	{r1, r2, r3}
 800320a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800320e:	b500      	push	{lr}
 8003210:	b09c      	sub	sp, #112	; 0x70
 8003212:	ab1d      	add	r3, sp, #116	; 0x74
 8003214:	9002      	str	r0, [sp, #8]
 8003216:	9006      	str	r0, [sp, #24]
 8003218:	9107      	str	r1, [sp, #28]
 800321a:	9104      	str	r1, [sp, #16]
 800321c:	4808      	ldr	r0, [pc, #32]	; (8003240 <siprintf+0x38>)
 800321e:	4909      	ldr	r1, [pc, #36]	; (8003244 <siprintf+0x3c>)
 8003220:	f853 2b04 	ldr.w	r2, [r3], #4
 8003224:	9105      	str	r1, [sp, #20]
 8003226:	6800      	ldr	r0, [r0, #0]
 8003228:	a902      	add	r1, sp, #8
 800322a:	9301      	str	r3, [sp, #4]
 800322c:	f000 f900 	bl	8003430 <_svfiprintf_r>
 8003230:	2200      	movs	r2, #0
 8003232:	9b02      	ldr	r3, [sp, #8]
 8003234:	701a      	strb	r2, [r3, #0]
 8003236:	b01c      	add	sp, #112	; 0x70
 8003238:	f85d eb04 	ldr.w	lr, [sp], #4
 800323c:	b003      	add	sp, #12
 800323e:	4770      	bx	lr
 8003240:	20000058 	.word	0x20000058
 8003244:	ffff0208 	.word	0xffff0208

08003248 <memset>:
 8003248:	4603      	mov	r3, r0
 800324a:	4402      	add	r2, r0
 800324c:	4293      	cmp	r3, r2
 800324e:	d100      	bne.n	8003252 <memset+0xa>
 8003250:	4770      	bx	lr
 8003252:	f803 1b01 	strb.w	r1, [r3], #1
 8003256:	e7f9      	b.n	800324c <memset+0x4>

08003258 <_sbrk_r>:
 8003258:	b538      	push	{r3, r4, r5, lr}
 800325a:	2300      	movs	r3, #0
 800325c:	4d05      	ldr	r5, [pc, #20]	; (8003274 <_sbrk_r+0x1c>)
 800325e:	4604      	mov	r4, r0
 8003260:	4608      	mov	r0, r1
 8003262:	602b      	str	r3, [r5, #0]
 8003264:	f7fd ff58 	bl	8001118 <_sbrk>
 8003268:	1c43      	adds	r3, r0, #1
 800326a:	d102      	bne.n	8003272 <_sbrk_r+0x1a>
 800326c:	682b      	ldr	r3, [r5, #0]
 800326e:	b103      	cbz	r3, 8003272 <_sbrk_r+0x1a>
 8003270:	6023      	str	r3, [r4, #0]
 8003272:	bd38      	pop	{r3, r4, r5, pc}
 8003274:	20000230 	.word	0x20000230

08003278 <__errno>:
 8003278:	4b01      	ldr	r3, [pc, #4]	; (8003280 <__errno+0x8>)
 800327a:	6818      	ldr	r0, [r3, #0]
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	20000058 	.word	0x20000058

08003284 <__libc_init_array>:
 8003284:	b570      	push	{r4, r5, r6, lr}
 8003286:	2600      	movs	r6, #0
 8003288:	4d0c      	ldr	r5, [pc, #48]	; (80032bc <__libc_init_array+0x38>)
 800328a:	4c0d      	ldr	r4, [pc, #52]	; (80032c0 <__libc_init_array+0x3c>)
 800328c:	1b64      	subs	r4, r4, r5
 800328e:	10a4      	asrs	r4, r4, #2
 8003290:	42a6      	cmp	r6, r4
 8003292:	d109      	bne.n	80032a8 <__libc_init_array+0x24>
 8003294:	f000 fbbe 	bl	8003a14 <_init>
 8003298:	2600      	movs	r6, #0
 800329a:	4d0a      	ldr	r5, [pc, #40]	; (80032c4 <__libc_init_array+0x40>)
 800329c:	4c0a      	ldr	r4, [pc, #40]	; (80032c8 <__libc_init_array+0x44>)
 800329e:	1b64      	subs	r4, r4, r5
 80032a0:	10a4      	asrs	r4, r4, #2
 80032a2:	42a6      	cmp	r6, r4
 80032a4:	d105      	bne.n	80032b2 <__libc_init_array+0x2e>
 80032a6:	bd70      	pop	{r4, r5, r6, pc}
 80032a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80032ac:	4798      	blx	r3
 80032ae:	3601      	adds	r6, #1
 80032b0:	e7ee      	b.n	8003290 <__libc_init_array+0xc>
 80032b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80032b6:	4798      	blx	r3
 80032b8:	3601      	adds	r6, #1
 80032ba:	e7f2      	b.n	80032a2 <__libc_init_array+0x1e>
 80032bc:	08003aa0 	.word	0x08003aa0
 80032c0:	08003aa0 	.word	0x08003aa0
 80032c4:	08003aa0 	.word	0x08003aa0
 80032c8:	08003aa4 	.word	0x08003aa4

080032cc <__retarget_lock_acquire_recursive>:
 80032cc:	4770      	bx	lr

080032ce <__retarget_lock_release_recursive>:
 80032ce:	4770      	bx	lr

080032d0 <memcpy>:
 80032d0:	440a      	add	r2, r1
 80032d2:	4291      	cmp	r1, r2
 80032d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80032d8:	d100      	bne.n	80032dc <memcpy+0xc>
 80032da:	4770      	bx	lr
 80032dc:	b510      	push	{r4, lr}
 80032de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80032e2:	4291      	cmp	r1, r2
 80032e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80032e8:	d1f9      	bne.n	80032de <memcpy+0xe>
 80032ea:	bd10      	pop	{r4, pc}

080032ec <_free_r>:
 80032ec:	b538      	push	{r3, r4, r5, lr}
 80032ee:	4605      	mov	r5, r0
 80032f0:	2900      	cmp	r1, #0
 80032f2:	d040      	beq.n	8003376 <_free_r+0x8a>
 80032f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032f8:	1f0c      	subs	r4, r1, #4
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	bfb8      	it	lt
 80032fe:	18e4      	addlt	r4, r4, r3
 8003300:	f7ff ff76 	bl	80031f0 <__malloc_lock>
 8003304:	4a1c      	ldr	r2, [pc, #112]	; (8003378 <_free_r+0x8c>)
 8003306:	6813      	ldr	r3, [r2, #0]
 8003308:	b933      	cbnz	r3, 8003318 <_free_r+0x2c>
 800330a:	6063      	str	r3, [r4, #4]
 800330c:	6014      	str	r4, [r2, #0]
 800330e:	4628      	mov	r0, r5
 8003310:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003314:	f7ff bf72 	b.w	80031fc <__malloc_unlock>
 8003318:	42a3      	cmp	r3, r4
 800331a:	d908      	bls.n	800332e <_free_r+0x42>
 800331c:	6820      	ldr	r0, [r4, #0]
 800331e:	1821      	adds	r1, r4, r0
 8003320:	428b      	cmp	r3, r1
 8003322:	bf01      	itttt	eq
 8003324:	6819      	ldreq	r1, [r3, #0]
 8003326:	685b      	ldreq	r3, [r3, #4]
 8003328:	1809      	addeq	r1, r1, r0
 800332a:	6021      	streq	r1, [r4, #0]
 800332c:	e7ed      	b.n	800330a <_free_r+0x1e>
 800332e:	461a      	mov	r2, r3
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	b10b      	cbz	r3, 8003338 <_free_r+0x4c>
 8003334:	42a3      	cmp	r3, r4
 8003336:	d9fa      	bls.n	800332e <_free_r+0x42>
 8003338:	6811      	ldr	r1, [r2, #0]
 800333a:	1850      	adds	r0, r2, r1
 800333c:	42a0      	cmp	r0, r4
 800333e:	d10b      	bne.n	8003358 <_free_r+0x6c>
 8003340:	6820      	ldr	r0, [r4, #0]
 8003342:	4401      	add	r1, r0
 8003344:	1850      	adds	r0, r2, r1
 8003346:	4283      	cmp	r3, r0
 8003348:	6011      	str	r1, [r2, #0]
 800334a:	d1e0      	bne.n	800330e <_free_r+0x22>
 800334c:	6818      	ldr	r0, [r3, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	4408      	add	r0, r1
 8003352:	6010      	str	r0, [r2, #0]
 8003354:	6053      	str	r3, [r2, #4]
 8003356:	e7da      	b.n	800330e <_free_r+0x22>
 8003358:	d902      	bls.n	8003360 <_free_r+0x74>
 800335a:	230c      	movs	r3, #12
 800335c:	602b      	str	r3, [r5, #0]
 800335e:	e7d6      	b.n	800330e <_free_r+0x22>
 8003360:	6820      	ldr	r0, [r4, #0]
 8003362:	1821      	adds	r1, r4, r0
 8003364:	428b      	cmp	r3, r1
 8003366:	bf01      	itttt	eq
 8003368:	6819      	ldreq	r1, [r3, #0]
 800336a:	685b      	ldreq	r3, [r3, #4]
 800336c:	1809      	addeq	r1, r1, r0
 800336e:	6021      	streq	r1, [r4, #0]
 8003370:	6063      	str	r3, [r4, #4]
 8003372:	6054      	str	r4, [r2, #4]
 8003374:	e7cb      	b.n	800330e <_free_r+0x22>
 8003376:	bd38      	pop	{r3, r4, r5, pc}
 8003378:	200000f0 	.word	0x200000f0

0800337c <__ssputs_r>:
 800337c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003380:	461f      	mov	r7, r3
 8003382:	688e      	ldr	r6, [r1, #8]
 8003384:	4682      	mov	sl, r0
 8003386:	42be      	cmp	r6, r7
 8003388:	460c      	mov	r4, r1
 800338a:	4690      	mov	r8, r2
 800338c:	680b      	ldr	r3, [r1, #0]
 800338e:	d82c      	bhi.n	80033ea <__ssputs_r+0x6e>
 8003390:	898a      	ldrh	r2, [r1, #12]
 8003392:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003396:	d026      	beq.n	80033e6 <__ssputs_r+0x6a>
 8003398:	6965      	ldr	r5, [r4, #20]
 800339a:	6909      	ldr	r1, [r1, #16]
 800339c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80033a0:	eba3 0901 	sub.w	r9, r3, r1
 80033a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80033a8:	1c7b      	adds	r3, r7, #1
 80033aa:	444b      	add	r3, r9
 80033ac:	106d      	asrs	r5, r5, #1
 80033ae:	429d      	cmp	r5, r3
 80033b0:	bf38      	it	cc
 80033b2:	461d      	movcc	r5, r3
 80033b4:	0553      	lsls	r3, r2, #21
 80033b6:	d527      	bpl.n	8003408 <__ssputs_r+0x8c>
 80033b8:	4629      	mov	r1, r5
 80033ba:	f7ff fe99 	bl	80030f0 <_malloc_r>
 80033be:	4606      	mov	r6, r0
 80033c0:	b360      	cbz	r0, 800341c <__ssputs_r+0xa0>
 80033c2:	464a      	mov	r2, r9
 80033c4:	6921      	ldr	r1, [r4, #16]
 80033c6:	f7ff ff83 	bl	80032d0 <memcpy>
 80033ca:	89a3      	ldrh	r3, [r4, #12]
 80033cc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80033d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033d4:	81a3      	strh	r3, [r4, #12]
 80033d6:	6126      	str	r6, [r4, #16]
 80033d8:	444e      	add	r6, r9
 80033da:	6026      	str	r6, [r4, #0]
 80033dc:	463e      	mov	r6, r7
 80033de:	6165      	str	r5, [r4, #20]
 80033e0:	eba5 0509 	sub.w	r5, r5, r9
 80033e4:	60a5      	str	r5, [r4, #8]
 80033e6:	42be      	cmp	r6, r7
 80033e8:	d900      	bls.n	80033ec <__ssputs_r+0x70>
 80033ea:	463e      	mov	r6, r7
 80033ec:	4632      	mov	r2, r6
 80033ee:	4641      	mov	r1, r8
 80033f0:	6820      	ldr	r0, [r4, #0]
 80033f2:	f000 faaf 	bl	8003954 <memmove>
 80033f6:	2000      	movs	r0, #0
 80033f8:	68a3      	ldr	r3, [r4, #8]
 80033fa:	1b9b      	subs	r3, r3, r6
 80033fc:	60a3      	str	r3, [r4, #8]
 80033fe:	6823      	ldr	r3, [r4, #0]
 8003400:	4433      	add	r3, r6
 8003402:	6023      	str	r3, [r4, #0]
 8003404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003408:	462a      	mov	r2, r5
 800340a:	f000 facb 	bl	80039a4 <_realloc_r>
 800340e:	4606      	mov	r6, r0
 8003410:	2800      	cmp	r0, #0
 8003412:	d1e0      	bne.n	80033d6 <__ssputs_r+0x5a>
 8003414:	4650      	mov	r0, sl
 8003416:	6921      	ldr	r1, [r4, #16]
 8003418:	f7ff ff68 	bl	80032ec <_free_r>
 800341c:	230c      	movs	r3, #12
 800341e:	f8ca 3000 	str.w	r3, [sl]
 8003422:	89a3      	ldrh	r3, [r4, #12]
 8003424:	f04f 30ff 	mov.w	r0, #4294967295
 8003428:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800342c:	81a3      	strh	r3, [r4, #12]
 800342e:	e7e9      	b.n	8003404 <__ssputs_r+0x88>

08003430 <_svfiprintf_r>:
 8003430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003434:	4698      	mov	r8, r3
 8003436:	898b      	ldrh	r3, [r1, #12]
 8003438:	4607      	mov	r7, r0
 800343a:	061b      	lsls	r3, r3, #24
 800343c:	460d      	mov	r5, r1
 800343e:	4614      	mov	r4, r2
 8003440:	b09d      	sub	sp, #116	; 0x74
 8003442:	d50e      	bpl.n	8003462 <_svfiprintf_r+0x32>
 8003444:	690b      	ldr	r3, [r1, #16]
 8003446:	b963      	cbnz	r3, 8003462 <_svfiprintf_r+0x32>
 8003448:	2140      	movs	r1, #64	; 0x40
 800344a:	f7ff fe51 	bl	80030f0 <_malloc_r>
 800344e:	6028      	str	r0, [r5, #0]
 8003450:	6128      	str	r0, [r5, #16]
 8003452:	b920      	cbnz	r0, 800345e <_svfiprintf_r+0x2e>
 8003454:	230c      	movs	r3, #12
 8003456:	603b      	str	r3, [r7, #0]
 8003458:	f04f 30ff 	mov.w	r0, #4294967295
 800345c:	e0d0      	b.n	8003600 <_svfiprintf_r+0x1d0>
 800345e:	2340      	movs	r3, #64	; 0x40
 8003460:	616b      	str	r3, [r5, #20]
 8003462:	2300      	movs	r3, #0
 8003464:	9309      	str	r3, [sp, #36]	; 0x24
 8003466:	2320      	movs	r3, #32
 8003468:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800346c:	2330      	movs	r3, #48	; 0x30
 800346e:	f04f 0901 	mov.w	r9, #1
 8003472:	f8cd 800c 	str.w	r8, [sp, #12]
 8003476:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003618 <_svfiprintf_r+0x1e8>
 800347a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800347e:	4623      	mov	r3, r4
 8003480:	469a      	mov	sl, r3
 8003482:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003486:	b10a      	cbz	r2, 800348c <_svfiprintf_r+0x5c>
 8003488:	2a25      	cmp	r2, #37	; 0x25
 800348a:	d1f9      	bne.n	8003480 <_svfiprintf_r+0x50>
 800348c:	ebba 0b04 	subs.w	fp, sl, r4
 8003490:	d00b      	beq.n	80034aa <_svfiprintf_r+0x7a>
 8003492:	465b      	mov	r3, fp
 8003494:	4622      	mov	r2, r4
 8003496:	4629      	mov	r1, r5
 8003498:	4638      	mov	r0, r7
 800349a:	f7ff ff6f 	bl	800337c <__ssputs_r>
 800349e:	3001      	adds	r0, #1
 80034a0:	f000 80a9 	beq.w	80035f6 <_svfiprintf_r+0x1c6>
 80034a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80034a6:	445a      	add	r2, fp
 80034a8:	9209      	str	r2, [sp, #36]	; 0x24
 80034aa:	f89a 3000 	ldrb.w	r3, [sl]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f000 80a1 	beq.w	80035f6 <_svfiprintf_r+0x1c6>
 80034b4:	2300      	movs	r3, #0
 80034b6:	f04f 32ff 	mov.w	r2, #4294967295
 80034ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80034be:	f10a 0a01 	add.w	sl, sl, #1
 80034c2:	9304      	str	r3, [sp, #16]
 80034c4:	9307      	str	r3, [sp, #28]
 80034c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80034ca:	931a      	str	r3, [sp, #104]	; 0x68
 80034cc:	4654      	mov	r4, sl
 80034ce:	2205      	movs	r2, #5
 80034d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034d4:	4850      	ldr	r0, [pc, #320]	; (8003618 <_svfiprintf_r+0x1e8>)
 80034d6:	f000 fa57 	bl	8003988 <memchr>
 80034da:	9a04      	ldr	r2, [sp, #16]
 80034dc:	b9d8      	cbnz	r0, 8003516 <_svfiprintf_r+0xe6>
 80034de:	06d0      	lsls	r0, r2, #27
 80034e0:	bf44      	itt	mi
 80034e2:	2320      	movmi	r3, #32
 80034e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80034e8:	0711      	lsls	r1, r2, #28
 80034ea:	bf44      	itt	mi
 80034ec:	232b      	movmi	r3, #43	; 0x2b
 80034ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80034f2:	f89a 3000 	ldrb.w	r3, [sl]
 80034f6:	2b2a      	cmp	r3, #42	; 0x2a
 80034f8:	d015      	beq.n	8003526 <_svfiprintf_r+0xf6>
 80034fa:	4654      	mov	r4, sl
 80034fc:	2000      	movs	r0, #0
 80034fe:	f04f 0c0a 	mov.w	ip, #10
 8003502:	9a07      	ldr	r2, [sp, #28]
 8003504:	4621      	mov	r1, r4
 8003506:	f811 3b01 	ldrb.w	r3, [r1], #1
 800350a:	3b30      	subs	r3, #48	; 0x30
 800350c:	2b09      	cmp	r3, #9
 800350e:	d94d      	bls.n	80035ac <_svfiprintf_r+0x17c>
 8003510:	b1b0      	cbz	r0, 8003540 <_svfiprintf_r+0x110>
 8003512:	9207      	str	r2, [sp, #28]
 8003514:	e014      	b.n	8003540 <_svfiprintf_r+0x110>
 8003516:	eba0 0308 	sub.w	r3, r0, r8
 800351a:	fa09 f303 	lsl.w	r3, r9, r3
 800351e:	4313      	orrs	r3, r2
 8003520:	46a2      	mov	sl, r4
 8003522:	9304      	str	r3, [sp, #16]
 8003524:	e7d2      	b.n	80034cc <_svfiprintf_r+0x9c>
 8003526:	9b03      	ldr	r3, [sp, #12]
 8003528:	1d19      	adds	r1, r3, #4
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	9103      	str	r1, [sp, #12]
 800352e:	2b00      	cmp	r3, #0
 8003530:	bfbb      	ittet	lt
 8003532:	425b      	neglt	r3, r3
 8003534:	f042 0202 	orrlt.w	r2, r2, #2
 8003538:	9307      	strge	r3, [sp, #28]
 800353a:	9307      	strlt	r3, [sp, #28]
 800353c:	bfb8      	it	lt
 800353e:	9204      	strlt	r2, [sp, #16]
 8003540:	7823      	ldrb	r3, [r4, #0]
 8003542:	2b2e      	cmp	r3, #46	; 0x2e
 8003544:	d10c      	bne.n	8003560 <_svfiprintf_r+0x130>
 8003546:	7863      	ldrb	r3, [r4, #1]
 8003548:	2b2a      	cmp	r3, #42	; 0x2a
 800354a:	d134      	bne.n	80035b6 <_svfiprintf_r+0x186>
 800354c:	9b03      	ldr	r3, [sp, #12]
 800354e:	3402      	adds	r4, #2
 8003550:	1d1a      	adds	r2, r3, #4
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	9203      	str	r2, [sp, #12]
 8003556:	2b00      	cmp	r3, #0
 8003558:	bfb8      	it	lt
 800355a:	f04f 33ff 	movlt.w	r3, #4294967295
 800355e:	9305      	str	r3, [sp, #20]
 8003560:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800361c <_svfiprintf_r+0x1ec>
 8003564:	2203      	movs	r2, #3
 8003566:	4650      	mov	r0, sl
 8003568:	7821      	ldrb	r1, [r4, #0]
 800356a:	f000 fa0d 	bl	8003988 <memchr>
 800356e:	b138      	cbz	r0, 8003580 <_svfiprintf_r+0x150>
 8003570:	2240      	movs	r2, #64	; 0x40
 8003572:	9b04      	ldr	r3, [sp, #16]
 8003574:	eba0 000a 	sub.w	r0, r0, sl
 8003578:	4082      	lsls	r2, r0
 800357a:	4313      	orrs	r3, r2
 800357c:	3401      	adds	r4, #1
 800357e:	9304      	str	r3, [sp, #16]
 8003580:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003584:	2206      	movs	r2, #6
 8003586:	4826      	ldr	r0, [pc, #152]	; (8003620 <_svfiprintf_r+0x1f0>)
 8003588:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800358c:	f000 f9fc 	bl	8003988 <memchr>
 8003590:	2800      	cmp	r0, #0
 8003592:	d038      	beq.n	8003606 <_svfiprintf_r+0x1d6>
 8003594:	4b23      	ldr	r3, [pc, #140]	; (8003624 <_svfiprintf_r+0x1f4>)
 8003596:	bb1b      	cbnz	r3, 80035e0 <_svfiprintf_r+0x1b0>
 8003598:	9b03      	ldr	r3, [sp, #12]
 800359a:	3307      	adds	r3, #7
 800359c:	f023 0307 	bic.w	r3, r3, #7
 80035a0:	3308      	adds	r3, #8
 80035a2:	9303      	str	r3, [sp, #12]
 80035a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035a6:	4433      	add	r3, r6
 80035a8:	9309      	str	r3, [sp, #36]	; 0x24
 80035aa:	e768      	b.n	800347e <_svfiprintf_r+0x4e>
 80035ac:	460c      	mov	r4, r1
 80035ae:	2001      	movs	r0, #1
 80035b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80035b4:	e7a6      	b.n	8003504 <_svfiprintf_r+0xd4>
 80035b6:	2300      	movs	r3, #0
 80035b8:	f04f 0c0a 	mov.w	ip, #10
 80035bc:	4619      	mov	r1, r3
 80035be:	3401      	adds	r4, #1
 80035c0:	9305      	str	r3, [sp, #20]
 80035c2:	4620      	mov	r0, r4
 80035c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80035c8:	3a30      	subs	r2, #48	; 0x30
 80035ca:	2a09      	cmp	r2, #9
 80035cc:	d903      	bls.n	80035d6 <_svfiprintf_r+0x1a6>
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d0c6      	beq.n	8003560 <_svfiprintf_r+0x130>
 80035d2:	9105      	str	r1, [sp, #20]
 80035d4:	e7c4      	b.n	8003560 <_svfiprintf_r+0x130>
 80035d6:	4604      	mov	r4, r0
 80035d8:	2301      	movs	r3, #1
 80035da:	fb0c 2101 	mla	r1, ip, r1, r2
 80035de:	e7f0      	b.n	80035c2 <_svfiprintf_r+0x192>
 80035e0:	ab03      	add	r3, sp, #12
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	462a      	mov	r2, r5
 80035e6:	4638      	mov	r0, r7
 80035e8:	4b0f      	ldr	r3, [pc, #60]	; (8003628 <_svfiprintf_r+0x1f8>)
 80035ea:	a904      	add	r1, sp, #16
 80035ec:	f3af 8000 	nop.w
 80035f0:	1c42      	adds	r2, r0, #1
 80035f2:	4606      	mov	r6, r0
 80035f4:	d1d6      	bne.n	80035a4 <_svfiprintf_r+0x174>
 80035f6:	89ab      	ldrh	r3, [r5, #12]
 80035f8:	065b      	lsls	r3, r3, #25
 80035fa:	f53f af2d 	bmi.w	8003458 <_svfiprintf_r+0x28>
 80035fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003600:	b01d      	add	sp, #116	; 0x74
 8003602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003606:	ab03      	add	r3, sp, #12
 8003608:	9300      	str	r3, [sp, #0]
 800360a:	462a      	mov	r2, r5
 800360c:	4638      	mov	r0, r7
 800360e:	4b06      	ldr	r3, [pc, #24]	; (8003628 <_svfiprintf_r+0x1f8>)
 8003610:	a904      	add	r1, sp, #16
 8003612:	f000 f87d 	bl	8003710 <_printf_i>
 8003616:	e7eb      	b.n	80035f0 <_svfiprintf_r+0x1c0>
 8003618:	08003a6a 	.word	0x08003a6a
 800361c:	08003a70 	.word	0x08003a70
 8003620:	08003a74 	.word	0x08003a74
 8003624:	00000000 	.word	0x00000000
 8003628:	0800337d 	.word	0x0800337d

0800362c <_printf_common>:
 800362c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003630:	4616      	mov	r6, r2
 8003632:	4699      	mov	r9, r3
 8003634:	688a      	ldr	r2, [r1, #8]
 8003636:	690b      	ldr	r3, [r1, #16]
 8003638:	4607      	mov	r7, r0
 800363a:	4293      	cmp	r3, r2
 800363c:	bfb8      	it	lt
 800363e:	4613      	movlt	r3, r2
 8003640:	6033      	str	r3, [r6, #0]
 8003642:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003646:	460c      	mov	r4, r1
 8003648:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800364c:	b10a      	cbz	r2, 8003652 <_printf_common+0x26>
 800364e:	3301      	adds	r3, #1
 8003650:	6033      	str	r3, [r6, #0]
 8003652:	6823      	ldr	r3, [r4, #0]
 8003654:	0699      	lsls	r1, r3, #26
 8003656:	bf42      	ittt	mi
 8003658:	6833      	ldrmi	r3, [r6, #0]
 800365a:	3302      	addmi	r3, #2
 800365c:	6033      	strmi	r3, [r6, #0]
 800365e:	6825      	ldr	r5, [r4, #0]
 8003660:	f015 0506 	ands.w	r5, r5, #6
 8003664:	d106      	bne.n	8003674 <_printf_common+0x48>
 8003666:	f104 0a19 	add.w	sl, r4, #25
 800366a:	68e3      	ldr	r3, [r4, #12]
 800366c:	6832      	ldr	r2, [r6, #0]
 800366e:	1a9b      	subs	r3, r3, r2
 8003670:	42ab      	cmp	r3, r5
 8003672:	dc2b      	bgt.n	80036cc <_printf_common+0xa0>
 8003674:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003678:	1e13      	subs	r3, r2, #0
 800367a:	6822      	ldr	r2, [r4, #0]
 800367c:	bf18      	it	ne
 800367e:	2301      	movne	r3, #1
 8003680:	0692      	lsls	r2, r2, #26
 8003682:	d430      	bmi.n	80036e6 <_printf_common+0xba>
 8003684:	4649      	mov	r1, r9
 8003686:	4638      	mov	r0, r7
 8003688:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800368c:	47c0      	blx	r8
 800368e:	3001      	adds	r0, #1
 8003690:	d023      	beq.n	80036da <_printf_common+0xae>
 8003692:	6823      	ldr	r3, [r4, #0]
 8003694:	6922      	ldr	r2, [r4, #16]
 8003696:	f003 0306 	and.w	r3, r3, #6
 800369a:	2b04      	cmp	r3, #4
 800369c:	bf14      	ite	ne
 800369e:	2500      	movne	r5, #0
 80036a0:	6833      	ldreq	r3, [r6, #0]
 80036a2:	f04f 0600 	mov.w	r6, #0
 80036a6:	bf08      	it	eq
 80036a8:	68e5      	ldreq	r5, [r4, #12]
 80036aa:	f104 041a 	add.w	r4, r4, #26
 80036ae:	bf08      	it	eq
 80036b0:	1aed      	subeq	r5, r5, r3
 80036b2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80036b6:	bf08      	it	eq
 80036b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036bc:	4293      	cmp	r3, r2
 80036be:	bfc4      	itt	gt
 80036c0:	1a9b      	subgt	r3, r3, r2
 80036c2:	18ed      	addgt	r5, r5, r3
 80036c4:	42b5      	cmp	r5, r6
 80036c6:	d11a      	bne.n	80036fe <_printf_common+0xd2>
 80036c8:	2000      	movs	r0, #0
 80036ca:	e008      	b.n	80036de <_printf_common+0xb2>
 80036cc:	2301      	movs	r3, #1
 80036ce:	4652      	mov	r2, sl
 80036d0:	4649      	mov	r1, r9
 80036d2:	4638      	mov	r0, r7
 80036d4:	47c0      	blx	r8
 80036d6:	3001      	adds	r0, #1
 80036d8:	d103      	bne.n	80036e2 <_printf_common+0xb6>
 80036da:	f04f 30ff 	mov.w	r0, #4294967295
 80036de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036e2:	3501      	adds	r5, #1
 80036e4:	e7c1      	b.n	800366a <_printf_common+0x3e>
 80036e6:	2030      	movs	r0, #48	; 0x30
 80036e8:	18e1      	adds	r1, r4, r3
 80036ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80036ee:	1c5a      	adds	r2, r3, #1
 80036f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80036f4:	4422      	add	r2, r4
 80036f6:	3302      	adds	r3, #2
 80036f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80036fc:	e7c2      	b.n	8003684 <_printf_common+0x58>
 80036fe:	2301      	movs	r3, #1
 8003700:	4622      	mov	r2, r4
 8003702:	4649      	mov	r1, r9
 8003704:	4638      	mov	r0, r7
 8003706:	47c0      	blx	r8
 8003708:	3001      	adds	r0, #1
 800370a:	d0e6      	beq.n	80036da <_printf_common+0xae>
 800370c:	3601      	adds	r6, #1
 800370e:	e7d9      	b.n	80036c4 <_printf_common+0x98>

08003710 <_printf_i>:
 8003710:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003714:	7e0f      	ldrb	r7, [r1, #24]
 8003716:	4691      	mov	r9, r2
 8003718:	2f78      	cmp	r7, #120	; 0x78
 800371a:	4680      	mov	r8, r0
 800371c:	460c      	mov	r4, r1
 800371e:	469a      	mov	sl, r3
 8003720:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003722:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003726:	d807      	bhi.n	8003738 <_printf_i+0x28>
 8003728:	2f62      	cmp	r7, #98	; 0x62
 800372a:	d80a      	bhi.n	8003742 <_printf_i+0x32>
 800372c:	2f00      	cmp	r7, #0
 800372e:	f000 80d5 	beq.w	80038dc <_printf_i+0x1cc>
 8003732:	2f58      	cmp	r7, #88	; 0x58
 8003734:	f000 80c1 	beq.w	80038ba <_printf_i+0x1aa>
 8003738:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800373c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003740:	e03a      	b.n	80037b8 <_printf_i+0xa8>
 8003742:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003746:	2b15      	cmp	r3, #21
 8003748:	d8f6      	bhi.n	8003738 <_printf_i+0x28>
 800374a:	a101      	add	r1, pc, #4	; (adr r1, 8003750 <_printf_i+0x40>)
 800374c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003750:	080037a9 	.word	0x080037a9
 8003754:	080037bd 	.word	0x080037bd
 8003758:	08003739 	.word	0x08003739
 800375c:	08003739 	.word	0x08003739
 8003760:	08003739 	.word	0x08003739
 8003764:	08003739 	.word	0x08003739
 8003768:	080037bd 	.word	0x080037bd
 800376c:	08003739 	.word	0x08003739
 8003770:	08003739 	.word	0x08003739
 8003774:	08003739 	.word	0x08003739
 8003778:	08003739 	.word	0x08003739
 800377c:	080038c3 	.word	0x080038c3
 8003780:	080037e9 	.word	0x080037e9
 8003784:	0800387d 	.word	0x0800387d
 8003788:	08003739 	.word	0x08003739
 800378c:	08003739 	.word	0x08003739
 8003790:	080038e5 	.word	0x080038e5
 8003794:	08003739 	.word	0x08003739
 8003798:	080037e9 	.word	0x080037e9
 800379c:	08003739 	.word	0x08003739
 80037a0:	08003739 	.word	0x08003739
 80037a4:	08003885 	.word	0x08003885
 80037a8:	682b      	ldr	r3, [r5, #0]
 80037aa:	1d1a      	adds	r2, r3, #4
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	602a      	str	r2, [r5, #0]
 80037b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80037b8:	2301      	movs	r3, #1
 80037ba:	e0a0      	b.n	80038fe <_printf_i+0x1ee>
 80037bc:	6820      	ldr	r0, [r4, #0]
 80037be:	682b      	ldr	r3, [r5, #0]
 80037c0:	0607      	lsls	r7, r0, #24
 80037c2:	f103 0104 	add.w	r1, r3, #4
 80037c6:	6029      	str	r1, [r5, #0]
 80037c8:	d501      	bpl.n	80037ce <_printf_i+0xbe>
 80037ca:	681e      	ldr	r6, [r3, #0]
 80037cc:	e003      	b.n	80037d6 <_printf_i+0xc6>
 80037ce:	0646      	lsls	r6, r0, #25
 80037d0:	d5fb      	bpl.n	80037ca <_printf_i+0xba>
 80037d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80037d6:	2e00      	cmp	r6, #0
 80037d8:	da03      	bge.n	80037e2 <_printf_i+0xd2>
 80037da:	232d      	movs	r3, #45	; 0x2d
 80037dc:	4276      	negs	r6, r6
 80037de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037e2:	230a      	movs	r3, #10
 80037e4:	4859      	ldr	r0, [pc, #356]	; (800394c <_printf_i+0x23c>)
 80037e6:	e012      	b.n	800380e <_printf_i+0xfe>
 80037e8:	682b      	ldr	r3, [r5, #0]
 80037ea:	6820      	ldr	r0, [r4, #0]
 80037ec:	1d19      	adds	r1, r3, #4
 80037ee:	6029      	str	r1, [r5, #0]
 80037f0:	0605      	lsls	r5, r0, #24
 80037f2:	d501      	bpl.n	80037f8 <_printf_i+0xe8>
 80037f4:	681e      	ldr	r6, [r3, #0]
 80037f6:	e002      	b.n	80037fe <_printf_i+0xee>
 80037f8:	0641      	lsls	r1, r0, #25
 80037fa:	d5fb      	bpl.n	80037f4 <_printf_i+0xe4>
 80037fc:	881e      	ldrh	r6, [r3, #0]
 80037fe:	2f6f      	cmp	r7, #111	; 0x6f
 8003800:	bf0c      	ite	eq
 8003802:	2308      	moveq	r3, #8
 8003804:	230a      	movne	r3, #10
 8003806:	4851      	ldr	r0, [pc, #324]	; (800394c <_printf_i+0x23c>)
 8003808:	2100      	movs	r1, #0
 800380a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800380e:	6865      	ldr	r5, [r4, #4]
 8003810:	2d00      	cmp	r5, #0
 8003812:	bfa8      	it	ge
 8003814:	6821      	ldrge	r1, [r4, #0]
 8003816:	60a5      	str	r5, [r4, #8]
 8003818:	bfa4      	itt	ge
 800381a:	f021 0104 	bicge.w	r1, r1, #4
 800381e:	6021      	strge	r1, [r4, #0]
 8003820:	b90e      	cbnz	r6, 8003826 <_printf_i+0x116>
 8003822:	2d00      	cmp	r5, #0
 8003824:	d04b      	beq.n	80038be <_printf_i+0x1ae>
 8003826:	4615      	mov	r5, r2
 8003828:	fbb6 f1f3 	udiv	r1, r6, r3
 800382c:	fb03 6711 	mls	r7, r3, r1, r6
 8003830:	5dc7      	ldrb	r7, [r0, r7]
 8003832:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003836:	4637      	mov	r7, r6
 8003838:	42bb      	cmp	r3, r7
 800383a:	460e      	mov	r6, r1
 800383c:	d9f4      	bls.n	8003828 <_printf_i+0x118>
 800383e:	2b08      	cmp	r3, #8
 8003840:	d10b      	bne.n	800385a <_printf_i+0x14a>
 8003842:	6823      	ldr	r3, [r4, #0]
 8003844:	07de      	lsls	r6, r3, #31
 8003846:	d508      	bpl.n	800385a <_printf_i+0x14a>
 8003848:	6923      	ldr	r3, [r4, #16]
 800384a:	6861      	ldr	r1, [r4, #4]
 800384c:	4299      	cmp	r1, r3
 800384e:	bfde      	ittt	le
 8003850:	2330      	movle	r3, #48	; 0x30
 8003852:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003856:	f105 35ff 	addle.w	r5, r5, #4294967295
 800385a:	1b52      	subs	r2, r2, r5
 800385c:	6122      	str	r2, [r4, #16]
 800385e:	464b      	mov	r3, r9
 8003860:	4621      	mov	r1, r4
 8003862:	4640      	mov	r0, r8
 8003864:	f8cd a000 	str.w	sl, [sp]
 8003868:	aa03      	add	r2, sp, #12
 800386a:	f7ff fedf 	bl	800362c <_printf_common>
 800386e:	3001      	adds	r0, #1
 8003870:	d14a      	bne.n	8003908 <_printf_i+0x1f8>
 8003872:	f04f 30ff 	mov.w	r0, #4294967295
 8003876:	b004      	add	sp, #16
 8003878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800387c:	6823      	ldr	r3, [r4, #0]
 800387e:	f043 0320 	orr.w	r3, r3, #32
 8003882:	6023      	str	r3, [r4, #0]
 8003884:	2778      	movs	r7, #120	; 0x78
 8003886:	4832      	ldr	r0, [pc, #200]	; (8003950 <_printf_i+0x240>)
 8003888:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800388c:	6823      	ldr	r3, [r4, #0]
 800388e:	6829      	ldr	r1, [r5, #0]
 8003890:	061f      	lsls	r7, r3, #24
 8003892:	f851 6b04 	ldr.w	r6, [r1], #4
 8003896:	d402      	bmi.n	800389e <_printf_i+0x18e>
 8003898:	065f      	lsls	r7, r3, #25
 800389a:	bf48      	it	mi
 800389c:	b2b6      	uxthmi	r6, r6
 800389e:	07df      	lsls	r7, r3, #31
 80038a0:	bf48      	it	mi
 80038a2:	f043 0320 	orrmi.w	r3, r3, #32
 80038a6:	6029      	str	r1, [r5, #0]
 80038a8:	bf48      	it	mi
 80038aa:	6023      	strmi	r3, [r4, #0]
 80038ac:	b91e      	cbnz	r6, 80038b6 <_printf_i+0x1a6>
 80038ae:	6823      	ldr	r3, [r4, #0]
 80038b0:	f023 0320 	bic.w	r3, r3, #32
 80038b4:	6023      	str	r3, [r4, #0]
 80038b6:	2310      	movs	r3, #16
 80038b8:	e7a6      	b.n	8003808 <_printf_i+0xf8>
 80038ba:	4824      	ldr	r0, [pc, #144]	; (800394c <_printf_i+0x23c>)
 80038bc:	e7e4      	b.n	8003888 <_printf_i+0x178>
 80038be:	4615      	mov	r5, r2
 80038c0:	e7bd      	b.n	800383e <_printf_i+0x12e>
 80038c2:	682b      	ldr	r3, [r5, #0]
 80038c4:	6826      	ldr	r6, [r4, #0]
 80038c6:	1d18      	adds	r0, r3, #4
 80038c8:	6961      	ldr	r1, [r4, #20]
 80038ca:	6028      	str	r0, [r5, #0]
 80038cc:	0635      	lsls	r5, r6, #24
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	d501      	bpl.n	80038d6 <_printf_i+0x1c6>
 80038d2:	6019      	str	r1, [r3, #0]
 80038d4:	e002      	b.n	80038dc <_printf_i+0x1cc>
 80038d6:	0670      	lsls	r0, r6, #25
 80038d8:	d5fb      	bpl.n	80038d2 <_printf_i+0x1c2>
 80038da:	8019      	strh	r1, [r3, #0]
 80038dc:	2300      	movs	r3, #0
 80038de:	4615      	mov	r5, r2
 80038e0:	6123      	str	r3, [r4, #16]
 80038e2:	e7bc      	b.n	800385e <_printf_i+0x14e>
 80038e4:	682b      	ldr	r3, [r5, #0]
 80038e6:	2100      	movs	r1, #0
 80038e8:	1d1a      	adds	r2, r3, #4
 80038ea:	602a      	str	r2, [r5, #0]
 80038ec:	681d      	ldr	r5, [r3, #0]
 80038ee:	6862      	ldr	r2, [r4, #4]
 80038f0:	4628      	mov	r0, r5
 80038f2:	f000 f849 	bl	8003988 <memchr>
 80038f6:	b108      	cbz	r0, 80038fc <_printf_i+0x1ec>
 80038f8:	1b40      	subs	r0, r0, r5
 80038fa:	6060      	str	r0, [r4, #4]
 80038fc:	6863      	ldr	r3, [r4, #4]
 80038fe:	6123      	str	r3, [r4, #16]
 8003900:	2300      	movs	r3, #0
 8003902:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003906:	e7aa      	b.n	800385e <_printf_i+0x14e>
 8003908:	462a      	mov	r2, r5
 800390a:	4649      	mov	r1, r9
 800390c:	4640      	mov	r0, r8
 800390e:	6923      	ldr	r3, [r4, #16]
 8003910:	47d0      	blx	sl
 8003912:	3001      	adds	r0, #1
 8003914:	d0ad      	beq.n	8003872 <_printf_i+0x162>
 8003916:	6823      	ldr	r3, [r4, #0]
 8003918:	079b      	lsls	r3, r3, #30
 800391a:	d413      	bmi.n	8003944 <_printf_i+0x234>
 800391c:	68e0      	ldr	r0, [r4, #12]
 800391e:	9b03      	ldr	r3, [sp, #12]
 8003920:	4298      	cmp	r0, r3
 8003922:	bfb8      	it	lt
 8003924:	4618      	movlt	r0, r3
 8003926:	e7a6      	b.n	8003876 <_printf_i+0x166>
 8003928:	2301      	movs	r3, #1
 800392a:	4632      	mov	r2, r6
 800392c:	4649      	mov	r1, r9
 800392e:	4640      	mov	r0, r8
 8003930:	47d0      	blx	sl
 8003932:	3001      	adds	r0, #1
 8003934:	d09d      	beq.n	8003872 <_printf_i+0x162>
 8003936:	3501      	adds	r5, #1
 8003938:	68e3      	ldr	r3, [r4, #12]
 800393a:	9903      	ldr	r1, [sp, #12]
 800393c:	1a5b      	subs	r3, r3, r1
 800393e:	42ab      	cmp	r3, r5
 8003940:	dcf2      	bgt.n	8003928 <_printf_i+0x218>
 8003942:	e7eb      	b.n	800391c <_printf_i+0x20c>
 8003944:	2500      	movs	r5, #0
 8003946:	f104 0619 	add.w	r6, r4, #25
 800394a:	e7f5      	b.n	8003938 <_printf_i+0x228>
 800394c:	08003a7b 	.word	0x08003a7b
 8003950:	08003a8c 	.word	0x08003a8c

08003954 <memmove>:
 8003954:	4288      	cmp	r0, r1
 8003956:	b510      	push	{r4, lr}
 8003958:	eb01 0402 	add.w	r4, r1, r2
 800395c:	d902      	bls.n	8003964 <memmove+0x10>
 800395e:	4284      	cmp	r4, r0
 8003960:	4623      	mov	r3, r4
 8003962:	d807      	bhi.n	8003974 <memmove+0x20>
 8003964:	1e43      	subs	r3, r0, #1
 8003966:	42a1      	cmp	r1, r4
 8003968:	d008      	beq.n	800397c <memmove+0x28>
 800396a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800396e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003972:	e7f8      	b.n	8003966 <memmove+0x12>
 8003974:	4601      	mov	r1, r0
 8003976:	4402      	add	r2, r0
 8003978:	428a      	cmp	r2, r1
 800397a:	d100      	bne.n	800397e <memmove+0x2a>
 800397c:	bd10      	pop	{r4, pc}
 800397e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003982:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003986:	e7f7      	b.n	8003978 <memmove+0x24>

08003988 <memchr>:
 8003988:	4603      	mov	r3, r0
 800398a:	b510      	push	{r4, lr}
 800398c:	b2c9      	uxtb	r1, r1
 800398e:	4402      	add	r2, r0
 8003990:	4293      	cmp	r3, r2
 8003992:	4618      	mov	r0, r3
 8003994:	d101      	bne.n	800399a <memchr+0x12>
 8003996:	2000      	movs	r0, #0
 8003998:	e003      	b.n	80039a2 <memchr+0x1a>
 800399a:	7804      	ldrb	r4, [r0, #0]
 800399c:	3301      	adds	r3, #1
 800399e:	428c      	cmp	r4, r1
 80039a0:	d1f6      	bne.n	8003990 <memchr+0x8>
 80039a2:	bd10      	pop	{r4, pc}

080039a4 <_realloc_r>:
 80039a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039a8:	4680      	mov	r8, r0
 80039aa:	4614      	mov	r4, r2
 80039ac:	460e      	mov	r6, r1
 80039ae:	b921      	cbnz	r1, 80039ba <_realloc_r+0x16>
 80039b0:	4611      	mov	r1, r2
 80039b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80039b6:	f7ff bb9b 	b.w	80030f0 <_malloc_r>
 80039ba:	b92a      	cbnz	r2, 80039c8 <_realloc_r+0x24>
 80039bc:	f7ff fc96 	bl	80032ec <_free_r>
 80039c0:	4625      	mov	r5, r4
 80039c2:	4628      	mov	r0, r5
 80039c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039c8:	f000 f81b 	bl	8003a02 <_malloc_usable_size_r>
 80039cc:	4284      	cmp	r4, r0
 80039ce:	4607      	mov	r7, r0
 80039d0:	d802      	bhi.n	80039d8 <_realloc_r+0x34>
 80039d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80039d6:	d812      	bhi.n	80039fe <_realloc_r+0x5a>
 80039d8:	4621      	mov	r1, r4
 80039da:	4640      	mov	r0, r8
 80039dc:	f7ff fb88 	bl	80030f0 <_malloc_r>
 80039e0:	4605      	mov	r5, r0
 80039e2:	2800      	cmp	r0, #0
 80039e4:	d0ed      	beq.n	80039c2 <_realloc_r+0x1e>
 80039e6:	42bc      	cmp	r4, r7
 80039e8:	4622      	mov	r2, r4
 80039ea:	4631      	mov	r1, r6
 80039ec:	bf28      	it	cs
 80039ee:	463a      	movcs	r2, r7
 80039f0:	f7ff fc6e 	bl	80032d0 <memcpy>
 80039f4:	4631      	mov	r1, r6
 80039f6:	4640      	mov	r0, r8
 80039f8:	f7ff fc78 	bl	80032ec <_free_r>
 80039fc:	e7e1      	b.n	80039c2 <_realloc_r+0x1e>
 80039fe:	4635      	mov	r5, r6
 8003a00:	e7df      	b.n	80039c2 <_realloc_r+0x1e>

08003a02 <_malloc_usable_size_r>:
 8003a02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a06:	1f18      	subs	r0, r3, #4
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	bfbc      	itt	lt
 8003a0c:	580b      	ldrlt	r3, [r1, r0]
 8003a0e:	18c0      	addlt	r0, r0, r3
 8003a10:	4770      	bx	lr
	...

08003a14 <_init>:
 8003a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a16:	bf00      	nop
 8003a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a1a:	bc08      	pop	{r3}
 8003a1c:	469e      	mov	lr, r3
 8003a1e:	4770      	bx	lr

08003a20 <_fini>:
 8003a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a22:	bf00      	nop
 8003a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a26:	bc08      	pop	{r3}
 8003a28:	469e      	mov	lr, r3
 8003a2a:	4770      	bx	lr
