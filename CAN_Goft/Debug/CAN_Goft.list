
CAN_Goft.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d80  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002e8c  08002e8c  00012e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002eb8  08002eb8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08002eb8  08002eb8  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002eb8  08002eb8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002eb8  08002eb8  00012eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ebc  08002ebc  00012ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002ec0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  2000005c  08002f1c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  08002f1c  00020238  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009cd7  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ca4  00000000  00000000  00029d9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000850  00000000  00000000  0002ba48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000064d  00000000  00000000  0002c298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000175ac  00000000  00000000  0002c8e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a72d  00000000  00000000  00043e91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000849de  00000000  00000000  0004e5be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000023b4  00000000  00000000  000d2f9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000d5350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e74 	.word	0x08002e74

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08002e74 	.word	0x08002e74

0800014c <CANBufferHandleStruct_Init>:
 *      Author: win 10
 */
#include <CAN_OSI.h>
#include <string.h>
#include "CAN_Flag.h"
void CANBufferHandleStruct_Init(CANBufferHandleStruct *Buffer) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b096      	sub	sp, #88	; 0x58
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	NodeBufferHandle defaultNodeHandle = {0};
 8000154:	f107 030c 	add.w	r3, r7, #12
 8000158:	2247      	movs	r2, #71	; 0x47
 800015a:	2100      	movs	r1, #0
 800015c:	4618      	mov	r0, r3
 800015e:	f002 fdef 	bl	8002d40 <memset>
	Buffer->Buffer_Index = 0;
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2200      	movs	r2, #0
 8000166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	Buffer->SenderID = 0;
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	2200      	movs	r2, #0
 800016e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	Buffer->RecvID = 0;
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	2200      	movs	r2, #0
 8000176:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	Buffer->FrameType_Index = SET_UP_FRAME;
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	2200      	movs	r2, #0
 800017e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	Buffer->PacketDataLength = 0;
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	2200      	movs	r2, #0
 8000186:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	Buffer->CRCValue = 0;
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2200      	movs	r2, #0
 800018e:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	Buffer->NumberOfFrame=0;
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	2200      	movs	r2, #0
 8000196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	memset(Buffer->NetworkBuffer, 0, sizeof(Buffer->NetworkBuffer));
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	2240      	movs	r2, #64	; 0x40
 800019e:	2100      	movs	r1, #0
 80001a0:	4618      	mov	r0, r3
 80001a2:	f002 fdcd 	bl	8002d40 <memset>
	memset(Buffer->Buffer, 0x55, sizeof(Buffer->Buffer));
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	3348      	adds	r3, #72	; 0x48
 80001aa:	2240      	movs	r2, #64	; 0x40
 80001ac:	2155      	movs	r1, #85	; 0x55
 80001ae:	4618      	mov	r0, r3
 80001b0:	f002 fdc6 	bl	8002d40 <memset>
	memset(Buffer->StoreData, 0, sizeof(Buffer->StoreData));
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	3388      	adds	r3, #136	; 0x88
 80001b8:	2240      	movs	r2, #64	; 0x40
 80001ba:	2100      	movs	r1, #0
 80001bc:	4618      	mov	r0, r3
 80001be:	f002 fdbf 	bl	8002d40 <memset>
	for (int i = 0; i < 16; i++) {
 80001c2:	2300      	movs	r3, #0
 80001c4:	657b      	str	r3, [r7, #84]	; 0x54
 80001c6:	e012      	b.n	80001ee <CANBufferHandleStruct_Init+0xa2>
		Buffer->NodeHandle[i] = defaultNodeHandle;
 80001c8:	6879      	ldr	r1, [r7, #4]
 80001ca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80001cc:	4613      	mov	r3, r2
 80001ce:	00db      	lsls	r3, r3, #3
 80001d0:	4413      	add	r3, r2
 80001d2:	00db      	lsls	r3, r3, #3
 80001d4:	1a9b      	subs	r3, r3, r2
 80001d6:	440b      	add	r3, r1
 80001d8:	33c8      	adds	r3, #200	; 0xc8
 80001da:	3302      	adds	r3, #2
 80001dc:	f107 010c 	add.w	r1, r7, #12
 80001e0:	2247      	movs	r2, #71	; 0x47
 80001e2:	4618      	mov	r0, r3
 80001e4:	f002 fdf0 	bl	8002dc8 <memcpy>
	for (int i = 0; i < 16; i++) {
 80001e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80001ea:	3301      	adds	r3, #1
 80001ec:	657b      	str	r3, [r7, #84]	; 0x54
 80001ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80001f0:	2b0f      	cmp	r3, #15
 80001f2:	dde9      	ble.n	80001c8 <CANBufferHandleStruct_Init+0x7c>
	}
}
 80001f4:	bf00      	nop
 80001f6:	bf00      	nop
 80001f8:	3758      	adds	r7, #88	; 0x58
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bd80      	pop	{r7, pc}

080001fe <FlagsFrameHandle_Init>:
void FlagsFrameHandle_Init(FlagFrameHandle *FlagInit) {
 80001fe:	b4b0      	push	{r4, r5, r7}
 8000200:	b089      	sub	sp, #36	; 0x24
 8000202:	af00      	add	r7, sp, #0
 8000204:	6078      	str	r0, [r7, #4]
	FlagIdHandle DefaultFlagID= {0};
 8000206:	f107 0308 	add.w	r3, r7, #8
 800020a:	2200      	movs	r2, #0
 800020c:	601a      	str	r2, [r3, #0]
 800020e:	605a      	str	r2, [r3, #4]
 8000210:	609a      	str	r2, [r3, #8]
 8000212:	60da      	str	r2, [r3, #12]
 8000214:	741a      	strb	r2, [r3, #16]
	FlagInit->FrameBits.Flag_Frame_0 = 0;
 8000216:	687a      	ldr	r2, [r7, #4]
 8000218:	f892 3110 	ldrb.w	r3, [r2, #272]	; 0x110
 800021c:	f36f 0300 	bfc	r3, #0, #1
 8000220:	f882 3110 	strb.w	r3, [r2, #272]	; 0x110
	FlagInit->FrameBits.Flag_Frame_1 = 0;
 8000224:	687a      	ldr	r2, [r7, #4]
 8000226:	f892 3110 	ldrb.w	r3, [r2, #272]	; 0x110
 800022a:	f36f 0341 	bfc	r3, #1, #1
 800022e:	f882 3110 	strb.w	r3, [r2, #272]	; 0x110
	FlagInit->FrameBits.Flag_Frame_2 = 0;
 8000232:	687a      	ldr	r2, [r7, #4]
 8000234:	f892 3110 	ldrb.w	r3, [r2, #272]	; 0x110
 8000238:	f36f 0382 	bfc	r3, #2, #1
 800023c:	f882 3110 	strb.w	r3, [r2, #272]	; 0x110
	FlagInit->FrameBits.Flag_Frame_3 = 0;
 8000240:	687a      	ldr	r2, [r7, #4]
 8000242:	f892 3110 	ldrb.w	r3, [r2, #272]	; 0x110
 8000246:	f36f 03c3 	bfc	r3, #3, #1
 800024a:	f882 3110 	strb.w	r3, [r2, #272]	; 0x110
	FlagInit->FrameBits.Flag_Frame_4 = 0;
 800024e:	687a      	ldr	r2, [r7, #4]
 8000250:	f892 3110 	ldrb.w	r3, [r2, #272]	; 0x110
 8000254:	f36f 1304 	bfc	r3, #4, #1
 8000258:	f882 3110 	strb.w	r3, [r2, #272]	; 0x110
	FlagInit->FrameBits.Flag_Frame_5 = 0;
 800025c:	687a      	ldr	r2, [r7, #4]
 800025e:	f892 3110 	ldrb.w	r3, [r2, #272]	; 0x110
 8000262:	f36f 1345 	bfc	r3, #5, #1
 8000266:	f882 3110 	strb.w	r3, [r2, #272]	; 0x110
	FlagInit->FrameBits.Flag_Frame_6 = 0;
 800026a:	687a      	ldr	r2, [r7, #4]
 800026c:	f892 3110 	ldrb.w	r3, [r2, #272]	; 0x110
 8000270:	f36f 1386 	bfc	r3, #6, #1
 8000274:	f882 3110 	strb.w	r3, [r2, #272]	; 0x110
	FlagInit->FrameBits.Flag_Frame_7 = 0;
 8000278:	687a      	ldr	r2, [r7, #4]
 800027a:	f892 3110 	ldrb.w	r3, [r2, #272]	; 0x110
 800027e:	f36f 13c7 	bfc	r3, #7, #1
 8000282:	f882 3110 	strb.w	r3, [r2, #272]	; 0x110
	for(int i=0; i<16;i++)
 8000286:	2300      	movs	r3, #0
 8000288:	61fb      	str	r3, [r7, #28]
 800028a:	e012      	b.n	80002b2 <FlagsFrameHandle_Init+0xb4>
	{
		FlagInit->FlagID[i]=DefaultFlagID;
 800028c:	6879      	ldr	r1, [r7, #4]
 800028e:	69fa      	ldr	r2, [r7, #28]
 8000290:	4613      	mov	r3, r2
 8000292:	011b      	lsls	r3, r3, #4
 8000294:	4413      	add	r3, r2
 8000296:	440b      	add	r3, r1
 8000298:	461d      	mov	r5, r3
 800029a:	f107 0408 	add.w	r4, r7, #8
 800029e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80002a0:	6028      	str	r0, [r5, #0]
 80002a2:	6069      	str	r1, [r5, #4]
 80002a4:	60aa      	str	r2, [r5, #8]
 80002a6:	60eb      	str	r3, [r5, #12]
 80002a8:	7823      	ldrb	r3, [r4, #0]
 80002aa:	742b      	strb	r3, [r5, #16]
	for(int i=0; i<16;i++)
 80002ac:	69fb      	ldr	r3, [r7, #28]
 80002ae:	3301      	adds	r3, #1
 80002b0:	61fb      	str	r3, [r7, #28]
 80002b2:	69fb      	ldr	r3, [r7, #28]
 80002b4:	2b0f      	cmp	r3, #15
 80002b6:	dde9      	ble.n	800028c <FlagsFrameHandle_Init+0x8e>
	}
}
 80002b8:	bf00      	nop
 80002ba:	bf00      	nop
 80002bc:	3724      	adds	r7, #36	; 0x24
 80002be:	46bd      	mov	sp, r7
 80002c0:	bcb0      	pop	{r4, r5, r7}
 80002c2:	4770      	bx	lr

080002c4 <CAN_ProcessRxBuffer>:
	return HAL_OK;
}

void CAN_ProcessRxBuffer(FlagFrameHandle *FlagHandle, uint8_t ID,
		CANBufferHandleStruct *RxBuffer, uint8_t *DataPhysical,
		FlagRecNotification *FlagRecHandle) {
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b088      	sub	sp, #32
 80002c8:	af02      	add	r7, sp, #8
 80002ca:	60f8      	str	r0, [r7, #12]
 80002cc:	607a      	str	r2, [r7, #4]
 80002ce:	603b      	str	r3, [r7, #0]
 80002d0:	460b      	mov	r3, r1
 80002d2:	72fb      	strb	r3, [r7, #11]
	uint8_t FrameType = 0;
 80002d4:	2300      	movs	r3, #0
 80002d6:	75fb      	strb	r3, [r7, #23]
	RxBuffer->NodeHandle[ID].NodeIndex++;
 80002d8:	7afa      	ldrb	r2, [r7, #11]
 80002da:	6879      	ldr	r1, [r7, #4]
 80002dc:	4613      	mov	r3, r2
 80002de:	00db      	lsls	r3, r3, #3
 80002e0:	4413      	add	r3, r2
 80002e2:	00db      	lsls	r3, r3, #3
 80002e4:	1a9b      	subs	r3, r3, r2
 80002e6:	440b      	add	r3, r1
 80002e8:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	3301      	adds	r3, #1
 80002f0:	b2d8      	uxtb	r0, r3
 80002f2:	6879      	ldr	r1, [r7, #4]
 80002f4:	4613      	mov	r3, r2
 80002f6:	00db      	lsls	r3, r3, #3
 80002f8:	4413      	add	r3, r2
 80002fa:	00db      	lsls	r3, r3, #3
 80002fc:	1a9b      	subs	r3, r3, r2
 80002fe:	440b      	add	r3, r1
 8000300:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8000304:	4602      	mov	r2, r0
 8000306:	701a      	strb	r2, [r3, #0]
	for (; FrameType < RxBuffer->NodeHandle[ID].NumberOfFrame; FrameType++) {
 8000308:	e00b      	b.n	8000322 <CAN_ProcessRxBuffer+0x5e>
		CAN_ProcessFrame(FlagHandle, ID, RxBuffer, FrameType, DataPhysical);
 800030a:	7dfa      	ldrb	r2, [r7, #23]
 800030c:	7af9      	ldrb	r1, [r7, #11]
 800030e:	683b      	ldr	r3, [r7, #0]
 8000310:	9300      	str	r3, [sp, #0]
 8000312:	4613      	mov	r3, r2
 8000314:	687a      	ldr	r2, [r7, #4]
 8000316:	68f8      	ldr	r0, [r7, #12]
 8000318:	f000 f8b3 	bl	8000482 <CAN_ProcessFrame>
	for (; FrameType < RxBuffer->NodeHandle[ID].NumberOfFrame; FrameType++) {
 800031c:	7dfb      	ldrb	r3, [r7, #23]
 800031e:	3301      	adds	r3, #1
 8000320:	75fb      	strb	r3, [r7, #23]
 8000322:	7afa      	ldrb	r2, [r7, #11]
 8000324:	6879      	ldr	r1, [r7, #4]
 8000326:	4613      	mov	r3, r2
 8000328:	00db      	lsls	r3, r3, #3
 800032a:	4413      	add	r3, r2
 800032c:	00db      	lsls	r3, r3, #3
 800032e:	1a9b      	subs	r3, r3, r2
 8000330:	440b      	add	r3, r1
 8000332:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	7dfa      	ldrb	r2, [r7, #23]
 800033a:	429a      	cmp	r2, r3
 800033c:	d3e5      	bcc.n	800030a <CAN_ProcessRxBuffer+0x46>
	}
	if (RxBuffer->NodeHandle[ID].NodeIndex
 800033e:	7afa      	ldrb	r2, [r7, #11]
 8000340:	6879      	ldr	r1, [r7, #4]
 8000342:	4613      	mov	r3, r2
 8000344:	00db      	lsls	r3, r3, #3
 8000346:	4413      	add	r3, r2
 8000348:	00db      	lsls	r3, r3, #3
 800034a:	1a9b      	subs	r3, r3, r2
 800034c:	440b      	add	r3, r1
 800034e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8000352:	7819      	ldrb	r1, [r3, #0]
			== RxBuffer->NodeHandle[ID].NumberOfFrame) {
 8000354:	7afa      	ldrb	r2, [r7, #11]
 8000356:	6878      	ldr	r0, [r7, #4]
 8000358:	4613      	mov	r3, r2
 800035a:	00db      	lsls	r3, r3, #3
 800035c:	4413      	add	r3, r2
 800035e:	00db      	lsls	r3, r3, #3
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4403      	add	r3, r0
 8000364:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8000368:	781b      	ldrb	r3, [r3, #0]
	if (RxBuffer->NodeHandle[ID].NodeIndex
 800036a:	4299      	cmp	r1, r3
 800036c:	f040 8085 	bne.w	800047a <CAN_ProcessRxBuffer+0x1b6>
		if (FlagHandle->FlagID[ID].SumOfFlag
 8000370:	7afa      	ldrb	r2, [r7, #11]
 8000372:	68f9      	ldr	r1, [r7, #12]
 8000374:	4613      	mov	r3, r2
 8000376:	011b      	lsls	r3, r3, #4
 8000378:	4413      	add	r3, r2
 800037a:	440b      	add	r3, r1
 800037c:	3308      	adds	r3, #8
 800037e:	7819      	ldrb	r1, [r3, #0]
				== RxBuffer->NodeHandle[ID].NumberOfFrame) {
 8000380:	7afa      	ldrb	r2, [r7, #11]
 8000382:	6878      	ldr	r0, [r7, #4]
 8000384:	4613      	mov	r3, r2
 8000386:	00db      	lsls	r3, r3, #3
 8000388:	4413      	add	r3, r2
 800038a:	00db      	lsls	r3, r3, #3
 800038c:	1a9b      	subs	r3, r3, r2
 800038e:	4403      	add	r3, r0
 8000390:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8000394:	781b      	ldrb	r3, [r3, #0]
		if (FlagHandle->FlagID[ID].SumOfFlag
 8000396:	4299      	cmp	r1, r3
 8000398:	d142      	bne.n	8000420 <CAN_ProcessRxBuffer+0x15c>
			*FlagRecHandle = REC_FRAMEDATA_SUCCESS;
 800039a:	6a3b      	ldr	r3, [r7, #32]
 800039c:	2202      	movs	r2, #2
 800039e:	701a      	strb	r2, [r3, #0]
			RxBuffer->NodeHandle[ID].NodeIndex = 0;
 80003a0:	7afa      	ldrb	r2, [r7, #11]
 80003a2:	6879      	ldr	r1, [r7, #4]
 80003a4:	4613      	mov	r3, r2
 80003a6:	00db      	lsls	r3, r3, #3
 80003a8:	4413      	add	r3, r2
 80003aa:	00db      	lsls	r3, r3, #3
 80003ac:	1a9b      	subs	r3, r3, r2
 80003ae:	440b      	add	r3, r1
 80003b0:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80003b4:	2200      	movs	r2, #0
 80003b6:	701a      	strb	r2, [r3, #0]
			RxBuffer->NodeHandle[ID].DuplicateFrame = 0;
 80003b8:	7afa      	ldrb	r2, [r7, #11]
 80003ba:	6879      	ldr	r1, [r7, #4]
 80003bc:	4613      	mov	r3, r2
 80003be:	00db      	lsls	r3, r3, #3
 80003c0:	4413      	add	r3, r2
 80003c2:	00db      	lsls	r3, r3, #3
 80003c4:	1a9b      	subs	r3, r3, r2
 80003c6:	440b      	add	r3, r1
 80003c8:	f203 130b 	addw	r3, r3, #267	; 0x10b
 80003cc:	2200      	movs	r2, #0
 80003ce:	701a      	strb	r2, [r3, #0]
			FlagHandle->FlagID[ID].SumOfFlag = 0;
 80003d0:	7afa      	ldrb	r2, [r7, #11]
 80003d2:	68f9      	ldr	r1, [r7, #12]
 80003d4:	4613      	mov	r3, r2
 80003d6:	011b      	lsls	r3, r3, #4
 80003d8:	4413      	add	r3, r2
 80003da:	440b      	add	r3, r1
 80003dc:	3308      	adds	r3, #8
 80003de:	2200      	movs	r2, #0
 80003e0:	701a      	strb	r2, [r3, #0]
			for (FrameType = 0;
 80003e2:	2300      	movs	r3, #0
 80003e4:	75fb      	strb	r3, [r7, #23]
 80003e6:	e00c      	b.n	8000402 <CAN_ProcessRxBuffer+0x13e>
					FrameType < RxBuffer->NodeHandle[ID].NumberOfFrame;
					FrameType++) {
				FlagHandle->FlagID[ID].FlagFrameFull[FrameType] = 0;
 80003e8:	7afa      	ldrb	r2, [r7, #11]
 80003ea:	7df9      	ldrb	r1, [r7, #23]
 80003ec:	68f8      	ldr	r0, [r7, #12]
 80003ee:	4613      	mov	r3, r2
 80003f0:	011b      	lsls	r3, r3, #4
 80003f2:	4413      	add	r3, r2
 80003f4:	4403      	add	r3, r0
 80003f6:	440b      	add	r3, r1
 80003f8:	2200      	movs	r2, #0
 80003fa:	701a      	strb	r2, [r3, #0]
					FrameType++) {
 80003fc:	7dfb      	ldrb	r3, [r7, #23]
 80003fe:	3301      	adds	r3, #1
 8000400:	75fb      	strb	r3, [r7, #23]
					FrameType < RxBuffer->NodeHandle[ID].NumberOfFrame;
 8000402:	7afa      	ldrb	r2, [r7, #11]
 8000404:	6879      	ldr	r1, [r7, #4]
 8000406:	4613      	mov	r3, r2
 8000408:	00db      	lsls	r3, r3, #3
 800040a:	4413      	add	r3, r2
 800040c:	00db      	lsls	r3, r3, #3
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	440b      	add	r3, r1
 8000412:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	7dfa      	ldrb	r2, [r7, #23]
 800041a:	429a      	cmp	r2, r3
 800041c:	d3e4      	bcc.n	80003e8 <CAN_ProcessRxBuffer+0x124>
					FlagHandle->FlagID[ID].FrameError[FrameType] = 1;
				}
			}
		}
	}
}
 800041e:	e02c      	b.n	800047a <CAN_ProcessRxBuffer+0x1b6>
			*FlagRecHandle = REC_FRAMEDATA_ERROR;
 8000420:	6a3b      	ldr	r3, [r7, #32]
 8000422:	2201      	movs	r2, #1
 8000424:	701a      	strb	r2, [r3, #0]
			for (FrameType = 0;
 8000426:	2300      	movs	r3, #0
 8000428:	75fb      	strb	r3, [r7, #23]
 800042a:	e018      	b.n	800045e <CAN_ProcessRxBuffer+0x19a>
				if (FlagHandle->FlagID[ID].FlagFrameFull[FrameType] == 0) {
 800042c:	7afa      	ldrb	r2, [r7, #11]
 800042e:	7df9      	ldrb	r1, [r7, #23]
 8000430:	68f8      	ldr	r0, [r7, #12]
 8000432:	4613      	mov	r3, r2
 8000434:	011b      	lsls	r3, r3, #4
 8000436:	4413      	add	r3, r2
 8000438:	4403      	add	r3, r0
 800043a:	440b      	add	r3, r1
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	2b00      	cmp	r3, #0
 8000440:	d10a      	bne.n	8000458 <CAN_ProcessRxBuffer+0x194>
					FlagHandle->FlagID[ID].FrameError[FrameType] = 1;
 8000442:	7afa      	ldrb	r2, [r7, #11]
 8000444:	7df9      	ldrb	r1, [r7, #23]
 8000446:	68f8      	ldr	r0, [r7, #12]
 8000448:	4613      	mov	r3, r2
 800044a:	011b      	lsls	r3, r3, #4
 800044c:	4413      	add	r3, r2
 800044e:	4403      	add	r3, r0
 8000450:	440b      	add	r3, r1
 8000452:	3309      	adds	r3, #9
 8000454:	2201      	movs	r2, #1
 8000456:	701a      	strb	r2, [r3, #0]
					FrameType++) {
 8000458:	7dfb      	ldrb	r3, [r7, #23]
 800045a:	3301      	adds	r3, #1
 800045c:	75fb      	strb	r3, [r7, #23]
					FrameType <= RxBuffer->NodeHandle[ID].NumberOfFrame;
 800045e:	7afa      	ldrb	r2, [r7, #11]
 8000460:	6879      	ldr	r1, [r7, #4]
 8000462:	4613      	mov	r3, r2
 8000464:	00db      	lsls	r3, r3, #3
 8000466:	4413      	add	r3, r2
 8000468:	00db      	lsls	r3, r3, #3
 800046a:	1a9b      	subs	r3, r3, r2
 800046c:	440b      	add	r3, r1
 800046e:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	7dfa      	ldrb	r2, [r7, #23]
 8000476:	429a      	cmp	r2, r3
 8000478:	d9d8      	bls.n	800042c <CAN_ProcessRxBuffer+0x168>
}
 800047a:	bf00      	nop
 800047c:	3718      	adds	r7, #24
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}

08000482 <CAN_ProcessFrame>:

void CAN_ProcessFrame(FlagFrameHandle *FlagHandle, uint8_t ID,
		CANBufferHandleStruct *RxBuffer, uint8_t FrameType, uint8_t *Data) {
 8000482:	b590      	push	{r4, r7, lr}
 8000484:	b085      	sub	sp, #20
 8000486:	af00      	add	r7, sp, #0
 8000488:	60f8      	str	r0, [r7, #12]
 800048a:	607a      	str	r2, [r7, #4]
 800048c:	461a      	mov	r2, r3
 800048e:	460b      	mov	r3, r1
 8000490:	72fb      	strb	r3, [r7, #11]
 8000492:	4613      	mov	r3, r2
 8000494:	72bb      	strb	r3, [r7, #10]
	if (RxBuffer->NodeHandle[ID].FrameType == FrameType
 8000496:	7afa      	ldrb	r2, [r7, #11]
 8000498:	6879      	ldr	r1, [r7, #4]
 800049a:	4613      	mov	r3, r2
 800049c:	00db      	lsls	r3, r3, #3
 800049e:	4413      	add	r3, r2
 80004a0:	00db      	lsls	r3, r3, #3
 80004a2:	1a9b      	subs	r3, r3, r2
 80004a4:	440b      	add	r3, r1
 80004a6:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	7aba      	ldrb	r2, [r7, #10]
 80004ae:	429a      	cmp	r2, r3
 80004b0:	d14c      	bne.n	800054c <CAN_ProcessFrame+0xca>
			&& FlagHandle->FlagID[ID].FlagFrameFull[FrameType] == 0) {
 80004b2:	7afa      	ldrb	r2, [r7, #11]
 80004b4:	7ab9      	ldrb	r1, [r7, #10]
 80004b6:	68f8      	ldr	r0, [r7, #12]
 80004b8:	4613      	mov	r3, r2
 80004ba:	011b      	lsls	r3, r3, #4
 80004bc:	4413      	add	r3, r2
 80004be:	4403      	add	r3, r0
 80004c0:	440b      	add	r3, r1
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d141      	bne.n	800054c <CAN_ProcessFrame+0xca>
		memcpy(
				RxBuffer->NodeHandle[ID].NodeBuffer[RxBuffer->NodeHandle[ID].FrameType],
 80004c8:	7afa      	ldrb	r2, [r7, #11]
 80004ca:	7af9      	ldrb	r1, [r7, #11]
 80004cc:	6878      	ldr	r0, [r7, #4]
 80004ce:	460b      	mov	r3, r1
 80004d0:	00db      	lsls	r3, r3, #3
 80004d2:	440b      	add	r3, r1
 80004d4:	00db      	lsls	r3, r3, #3
 80004d6:	1a5b      	subs	r3, r3, r1
 80004d8:	4403      	add	r3, r0
 80004da:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	00d9      	lsls	r1, r3, #3
 80004e2:	4613      	mov	r3, r2
 80004e4:	00db      	lsls	r3, r3, #3
 80004e6:	4413      	add	r3, r2
 80004e8:	00db      	lsls	r3, r3, #3
 80004ea:	1a9b      	subs	r3, r3, r2
 80004ec:	440b      	add	r3, r1
 80004ee:	33c8      	adds	r3, #200	; 0xc8
 80004f0:	687a      	ldr	r2, [r7, #4]
 80004f2:	4413      	add	r3, r2
 80004f4:	3303      	adds	r3, #3
		memcpy(
 80004f6:	2208      	movs	r2, #8
 80004f8:	6a39      	ldr	r1, [r7, #32]
 80004fa:	4618      	mov	r0, r3
 80004fc:	f002 fc64 	bl	8002dc8 <memcpy>
				Data, CAN_MAX_DATA);
		FlagHandle->FlagID[ID].FlagFrameFull[FrameType] = 1;
 8000500:	7afa      	ldrb	r2, [r7, #11]
 8000502:	7ab9      	ldrb	r1, [r7, #10]
 8000504:	68f8      	ldr	r0, [r7, #12]
 8000506:	4613      	mov	r3, r2
 8000508:	011b      	lsls	r3, r3, #4
 800050a:	4413      	add	r3, r2
 800050c:	4403      	add	r3, r0
 800050e:	440b      	add	r3, r1
 8000510:	2201      	movs	r2, #1
 8000512:	701a      	strb	r2, [r3, #0]
		FlagHandle->FlagID[ID].SumOfFlag +=
 8000514:	7afa      	ldrb	r2, [r7, #11]
 8000516:	68f9      	ldr	r1, [r7, #12]
 8000518:	4613      	mov	r3, r2
 800051a:	011b      	lsls	r3, r3, #4
 800051c:	4413      	add	r3, r2
 800051e:	440b      	add	r3, r1
 8000520:	3308      	adds	r3, #8
 8000522:	7819      	ldrb	r1, [r3, #0]
				FlagHandle->FlagID[ID].FlagFrameFull[FrameType];
 8000524:	7afa      	ldrb	r2, [r7, #11]
 8000526:	7ab8      	ldrb	r0, [r7, #10]
 8000528:	68fc      	ldr	r4, [r7, #12]
 800052a:	4613      	mov	r3, r2
 800052c:	011b      	lsls	r3, r3, #4
 800052e:	4413      	add	r3, r2
 8000530:	4423      	add	r3, r4
 8000532:	4403      	add	r3, r0
 8000534:	781b      	ldrb	r3, [r3, #0]
		FlagHandle->FlagID[ID].SumOfFlag +=
 8000536:	7afa      	ldrb	r2, [r7, #11]
 8000538:	440b      	add	r3, r1
 800053a:	b2d8      	uxtb	r0, r3
 800053c:	68f9      	ldr	r1, [r7, #12]
 800053e:	4613      	mov	r3, r2
 8000540:	011b      	lsls	r3, r3, #4
 8000542:	4413      	add	r3, r2
 8000544:	440b      	add	r3, r1
 8000546:	3308      	adds	r3, #8
 8000548:	4602      	mov	r2, r0
 800054a:	701a      	strb	r2, [r3, #0]
	}
}
 800054c:	bf00      	nop
 800054e:	3714      	adds	r7, #20
 8000550:	46bd      	mov	sp, r7
 8000552:	bd90      	pop	{r4, r7, pc}

08000554 <CAN_Recieve_Physical>:
		BufferIndex = 0;
	}
	return HAL_OK;
}

uint8_t CAN_Recieve_Physical(CAN_RxHeaderTypeDef *RxHeader, uint8_t *Data) {
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	6039      	str	r1, [r7, #0]

	while (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) == 0)
 800055e:	bf00      	nop
 8000560:	2100      	movs	r1, #0
 8000562:	480b      	ldr	r0, [pc, #44]	; (8000590 <CAN_Recieve_Physical+0x3c>)
 8000564:	f001 f92b 	bl	80017be <HAL_CAN_GetRxFifoFillLevel>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d0f8      	beq.n	8000560 <CAN_Recieve_Physical+0xc>
		;
	if (HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, RxHeader, Data) != HAL_OK) {
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	687a      	ldr	r2, [r7, #4]
 8000572:	2100      	movs	r1, #0
 8000574:	4806      	ldr	r0, [pc, #24]	; (8000590 <CAN_Recieve_Physical+0x3c>)
 8000576:	f001 f801 	bl	800157c <HAL_CAN_GetRxMessage>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <CAN_Recieve_Physical+0x30>
		Error_Handler(); //get message from RAM;
 8000580:	f000 fbcc 	bl	8000d1c <Error_Handler>
	}
	return HAL_OK;
 8000584:	2300      	movs	r3, #0
}
 8000586:	4618      	mov	r0, r3
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	20000078 	.word	0x20000078

08000594 <CAN_Receive_DataLink>:

uint8_t CAN_Receive_DataLink(FlagFrameHandle *FlagHandle, CANBufferHandleStruct *RxBuffer,
		FlagRecNotification *FlagNotiHandle) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b090      	sub	sp, #64	; 0x40
 8000598:	af02      	add	r7, sp, #8
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	*FlagNotiHandle = REC_DATA;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	2200      	movs	r2, #0
 80005a4:	701a      	strb	r2, [r3, #0]
	uint8_t DataPhysical[CAN_MAX_DATA] = { 0 }; // init local DataPhysical for get data from receive
 80005a6:	2300      	movs	r3, #0
 80005a8:	613b      	str	r3, [r7, #16]
 80005aa:	2300      	movs	r3, #0
 80005ac:	617b      	str	r3, [r7, #20]
	uint16_t StdID = 0;
 80005ae:	2300      	movs	r3, #0
 80005b0:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint8_t ID = 0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	CAN_Recieve_Physical(&RxHeader, DataPhysical); // get Data
 80005b8:	f107 0210 	add.w	r2, r7, #16
 80005bc:	f107 0318 	add.w	r3, r7, #24
 80005c0:	4611      	mov	r1, r2
 80005c2:	4618      	mov	r0, r3
 80005c4:	f7ff ffc6 	bl	8000554 <CAN_Recieve_Physical>

	StdID = RxHeader.StdId;
 80005c8:	69bb      	ldr	r3, [r7, #24]
 80005ca:	86fb      	strh	r3, [r7, #54]	; 0x36
	ID = (StdID >> 3) & 15;
 80005cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80005ce:	08db      	lsrs	r3, r3, #3
 80005d0:	b29b      	uxth	r3, r3
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	f003 030f 	and.w	r3, r3, #15
 80005d8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	RxBuffer->RecvID = ID;
 80005dc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80005e0:	b29a      	uxth	r2, r3
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	RxBuffer->NodeHandle[ID].FrameType = StdID & 7; // get frame type store into Rxbuffer struct with Node ID manage frame type
 80005e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80005f0:	f003 0307 	and.w	r3, r3, #7
 80005f4:	b2d8      	uxtb	r0, r3
 80005f6:	68b9      	ldr	r1, [r7, #8]
 80005f8:	4613      	mov	r3, r2
 80005fa:	00db      	lsls	r3, r3, #3
 80005fc:	4413      	add	r3, r2
 80005fe:	00db      	lsls	r3, r3, #3
 8000600:	1a9b      	subs	r3, r3, r2
 8000602:	440b      	add	r3, r1
 8000604:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8000608:	4602      	mov	r2, r0
 800060a:	701a      	strb	r2, [r3, #0]
	if (RxBuffer->NodeHandle[ID].FrameType == SET_UP_FRAME
 800060c:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8000610:	68b9      	ldr	r1, [r7, #8]
 8000612:	4613      	mov	r3, r2
 8000614:	00db      	lsls	r3, r3, #3
 8000616:	4413      	add	r3, r2
 8000618:	00db      	lsls	r3, r3, #3
 800061a:	1a9b      	subs	r3, r3, r2
 800061c:	440b      	add	r3, r1
 800061e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	f040 8082 	bne.w	800072e <CAN_Receive_DataLink+0x19a>
			&& RxBuffer->NodeHandle[ID].DuplicateFrame != 1) { // check if frame type = SET_UP_FRAME
 800062a:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800062e:	68b9      	ldr	r1, [r7, #8]
 8000630:	4613      	mov	r3, r2
 8000632:	00db      	lsls	r3, r3, #3
 8000634:	4413      	add	r3, r2
 8000636:	00db      	lsls	r3, r3, #3
 8000638:	1a9b      	subs	r3, r3, r2
 800063a:	440b      	add	r3, r1
 800063c:	f203 130b 	addw	r3, r3, #267	; 0x10b
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2b01      	cmp	r3, #1
 8000644:	d073      	beq.n	800072e <CAN_Receive_DataLink+0x19a>
		RxBuffer->NodeHandle[ID].DuplicateFrame = 1; // check send multiple SET_UP_frame
 8000646:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800064a:	68b9      	ldr	r1, [r7, #8]
 800064c:	4613      	mov	r3, r2
 800064e:	00db      	lsls	r3, r3, #3
 8000650:	4413      	add	r3, r2
 8000652:	00db      	lsls	r3, r3, #3
 8000654:	1a9b      	subs	r3, r3, r2
 8000656:	440b      	add	r3, r1
 8000658:	f203 130b 	addw	r3, r3, #267	; 0x10b
 800065c:	2201      	movs	r2, #1
 800065e:	701a      	strb	r2, [r3, #0]
		RxBuffer->NodeHandle[ID].PacketLength = DataPhysical[6];
 8000660:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8000664:	7db8      	ldrb	r0, [r7, #22]
 8000666:	68b9      	ldr	r1, [r7, #8]
 8000668:	4613      	mov	r3, r2
 800066a:	00db      	lsls	r3, r3, #3
 800066c:	4413      	add	r3, r2
 800066e:	00db      	lsls	r3, r3, #3
 8000670:	1a9b      	subs	r3, r3, r2
 8000672:	440b      	add	r3, r1
 8000674:	f203 130d 	addw	r3, r3, #269	; 0x10d
 8000678:	4602      	mov	r2, r0
 800067a:	701a      	strb	r2, [r3, #0]
		RxBuffer->NodeHandle[ID].CRCValue = DataPhysical[7];
 800067c:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8000680:	7df8      	ldrb	r0, [r7, #23]
 8000682:	68b9      	ldr	r1, [r7, #8]
 8000684:	4613      	mov	r3, r2
 8000686:	00db      	lsls	r3, r3, #3
 8000688:	4413      	add	r3, r2
 800068a:	00db      	lsls	r3, r3, #3
 800068c:	1a9b      	subs	r3, r3, r2
 800068e:	440b      	add	r3, r1
 8000690:	f203 130f 	addw	r3, r3, #271	; 0x10f
 8000694:	4602      	mov	r2, r0
 8000696:	701a      	strb	r2, [r3, #0]
		if (RxBuffer->NodeHandle[ID].PacketLength % 8 == 0) {
 8000698:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800069c:	68b9      	ldr	r1, [r7, #8]
 800069e:	4613      	mov	r3, r2
 80006a0:	00db      	lsls	r3, r3, #3
 80006a2:	4413      	add	r3, r2
 80006a4:	00db      	lsls	r3, r3, #3
 80006a6:	1a9b      	subs	r3, r3, r2
 80006a8:	440b      	add	r3, r1
 80006aa:	f203 130d 	addw	r3, r3, #269	; 0x10d
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	f003 0307 	and.w	r3, r3, #7
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d11b      	bne.n	80006f2 <CAN_Receive_DataLink+0x15e>
			RxBuffer->NodeHandle[ID].NumberOfFrame =
					(RxBuffer->NodeHandle[ID].PacketLength / 8);
 80006ba:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80006be:	68b9      	ldr	r1, [r7, #8]
 80006c0:	4613      	mov	r3, r2
 80006c2:	00db      	lsls	r3, r3, #3
 80006c4:	4413      	add	r3, r2
 80006c6:	00db      	lsls	r3, r3, #3
 80006c8:	1a9b      	subs	r3, r3, r2
 80006ca:	440b      	add	r3, r1
 80006cc:	f203 130d 	addw	r3, r3, #269	; 0x10d
 80006d0:	781b      	ldrb	r3, [r3, #0]
			RxBuffer->NodeHandle[ID].NumberOfFrame =
 80006d2:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80006d6:	08db      	lsrs	r3, r3, #3
 80006d8:	b2d8      	uxtb	r0, r3
 80006da:	68b9      	ldr	r1, [r7, #8]
 80006dc:	4613      	mov	r3, r2
 80006de:	00db      	lsls	r3, r3, #3
 80006e0:	4413      	add	r3, r2
 80006e2:	00db      	lsls	r3, r3, #3
 80006e4:	1a9b      	subs	r3, r3, r2
 80006e6:	440b      	add	r3, r1
 80006e8:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80006ec:	4602      	mov	r2, r0
 80006ee:	701a      	strb	r2, [r3, #0]
		if (RxBuffer->NodeHandle[ID].PacketLength % 8 == 0) {
 80006f0:	e046      	b.n	8000780 <CAN_Receive_DataLink+0x1ec>
		} else {
			RxBuffer->NodeHandle[ID].NumberOfFrame =
					(RxBuffer->NodeHandle[ID].PacketLength / 8) + 1;
 80006f2:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80006f6:	68b9      	ldr	r1, [r7, #8]
 80006f8:	4613      	mov	r3, r2
 80006fa:	00db      	lsls	r3, r3, #3
 80006fc:	4413      	add	r3, r2
 80006fe:	00db      	lsls	r3, r3, #3
 8000700:	1a9b      	subs	r3, r3, r2
 8000702:	440b      	add	r3, r1
 8000704:	f203 130d 	addw	r3, r3, #269	; 0x10d
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	08db      	lsrs	r3, r3, #3
 800070c:	b2db      	uxtb	r3, r3
			RxBuffer->NodeHandle[ID].NumberOfFrame =
 800070e:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
					(RxBuffer->NodeHandle[ID].PacketLength / 8) + 1;
 8000712:	3301      	adds	r3, #1
 8000714:	b2d8      	uxtb	r0, r3
			RxBuffer->NodeHandle[ID].NumberOfFrame =
 8000716:	68b9      	ldr	r1, [r7, #8]
 8000718:	4613      	mov	r3, r2
 800071a:	00db      	lsls	r3, r3, #3
 800071c:	4413      	add	r3, r2
 800071e:	00db      	lsls	r3, r3, #3
 8000720:	1a9b      	subs	r3, r3, r2
 8000722:	440b      	add	r3, r1
 8000724:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8000728:	4602      	mov	r2, r0
 800072a:	701a      	strb	r2, [r3, #0]
		if (RxBuffer->NodeHandle[ID].PacketLength % 8 == 0) {
 800072c:	e028      	b.n	8000780 <CAN_Receive_DataLink+0x1ec>
		}
	} else {
		if (RxBuffer->NodeHandle[ID].FrameType == SET_UP_FRAME) {
 800072e:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8000732:	68b9      	ldr	r1, [r7, #8]
 8000734:	4613      	mov	r3, r2
 8000736:	00db      	lsls	r3, r3, #3
 8000738:	4413      	add	r3, r2
 800073a:	00db      	lsls	r3, r3, #3
 800073c:	1a9b      	subs	r3, r3, r2
 800073e:	440b      	add	r3, r1
 8000740:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d11a      	bne.n	8000780 <CAN_Receive_DataLink+0x1ec>
			*FlagNotiHandle = REC_FRAMEDATA_ERROR;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	2201      	movs	r2, #1
 800074e:	701a      	strb	r2, [r3, #0]
			FlagHandle->FlagID[ID].FrameError[RxBuffer->NodeHandle[ID].FrameType] =
 8000750:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000754:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8000758:	68b8      	ldr	r0, [r7, #8]
 800075a:	4613      	mov	r3, r2
 800075c:	00db      	lsls	r3, r3, #3
 800075e:	4413      	add	r3, r2
 8000760:	00db      	lsls	r3, r3, #3
 8000762:	1a9b      	subs	r3, r3, r2
 8000764:	4403      	add	r3, r0
 8000766:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	4618      	mov	r0, r3
 800076e:	68fa      	ldr	r2, [r7, #12]
 8000770:	460b      	mov	r3, r1
 8000772:	011b      	lsls	r3, r3, #4
 8000774:	440b      	add	r3, r1
 8000776:	4413      	add	r3, r2
 8000778:	4403      	add	r3, r0
 800077a:	3309      	adds	r3, #9
 800077c:	2201      	movs	r2, #1
 800077e:	701a      	strb	r2, [r3, #0]
					1;
		}
	}
	CAN_ProcessRxBuffer(FlagHandle, ID, RxBuffer, DataPhysical, FlagNotiHandle);
 8000780:	f107 0210 	add.w	r2, r7, #16
 8000784:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	9300      	str	r3, [sp, #0]
 800078c:	4613      	mov	r3, r2
 800078e:	68ba      	ldr	r2, [r7, #8]
 8000790:	68f8      	ldr	r0, [r7, #12]
 8000792:	f7ff fd97 	bl	80002c4 <CAN_ProcessRxBuffer>
	return HAL_OK;
 8000796:	2300      	movs	r3, #0
}
 8000798:	4618      	mov	r0, r3
 800079a:	3738      	adds	r7, #56	; 0x38
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <CAN_Receive_Network>:
uint8_t CAN_Receive_Network(CANBufferHandleStruct *NetBuffer,
		FlagFrameHandle *NetworkFlag, FlagRecNotification *FlagNotiHandle) {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b088      	sub	sp, #32
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	607a      	str	r2, [r7, #4]
	CAN_Receive_DataLink(NetworkFlag, NetBuffer, FlagNotiHandle);
 80007ac:	687a      	ldr	r2, [r7, #4]
 80007ae:	68f9      	ldr	r1, [r7, #12]
 80007b0:	68b8      	ldr	r0, [r7, #8]
 80007b2:	f7ff feef 	bl	8000594 <CAN_Receive_DataLink>
	uint8_t FrameLength = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	77fb      	strb	r3, [r7, #31]
	uint8_t FrameType = 0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	77bb      	strb	r3, [r7, #30]
	uint8_t NetBufferIndex = 0;
 80007be:	2300      	movs	r3, #0
 80007c0:	777b      	strb	r3, [r7, #29]
	uint8_t DataLength=0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	75fb      	strb	r3, [r7, #23]
	uint8_t CRCValue=0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	75bb      	strb	r3, [r7, #22]
	uint8_t *NetData;
	FrameLength = NetBuffer->NodeHandle[NetBuffer->RecvID].NumberOfFrame;
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80007d0:	461a      	mov	r2, r3
 80007d2:	68f9      	ldr	r1, [r7, #12]
 80007d4:	4613      	mov	r3, r2
 80007d6:	00db      	lsls	r3, r3, #3
 80007d8:	4413      	add	r3, r2
 80007da:	00db      	lsls	r3, r3, #3
 80007dc:	1a9b      	subs	r3, r3, r2
 80007de:	440b      	add	r3, r1
 80007e0:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	77fb      	strb	r3, [r7, #31]
	uint8_t NumberofFrame =FrameLength;
 80007e8:	7ffb      	ldrb	r3, [r7, #31]
 80007ea:	757b      	strb	r3, [r7, #21]
	FrameType = NetBuffer->NodeHandle[NetBuffer->RecvID].FrameType;
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80007f2:	461a      	mov	r2, r3
 80007f4:	68f9      	ldr	r1, [r7, #12]
 80007f6:	4613      	mov	r3, r2
 80007f8:	00db      	lsls	r3, r3, #3
 80007fa:	4413      	add	r3, r2
 80007fc:	00db      	lsls	r3, r3, #3
 80007fe:	1a9b      	subs	r3, r3, r2
 8000800:	440b      	add	r3, r1
 8000802:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	77bb      	strb	r3, [r7, #30]
	if (*FlagNotiHandle == REC_FRAMEDATA_SUCCESS) {
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	2b02      	cmp	r3, #2
 8000810:	f040 8087 	bne.w	8000922 <CAN_Receive_Network+0x182>
		for (;FrameLength > 0; FrameLength--) {
 8000814:	e021      	b.n	800085a <CAN_Receive_Network+0xba>
			memcpy(NetBuffer->Buffer[NetBufferIndex],
 8000816:	7f7b      	ldrb	r3, [r7, #29]
 8000818:	3309      	adds	r3, #9
 800081a:	00db      	lsls	r3, r3, #3
 800081c:	68fa      	ldr	r2, [r7, #12]
 800081e:	18d0      	adds	r0, r2, r3
					NetBuffer->NodeHandle[NetBuffer->RecvID].NodeBuffer[FrameType],
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8000826:	461a      	mov	r2, r3
 8000828:	7fbb      	ldrb	r3, [r7, #30]
 800082a:	00d9      	lsls	r1, r3, #3
 800082c:	4613      	mov	r3, r2
 800082e:	00db      	lsls	r3, r3, #3
 8000830:	4413      	add	r3, r2
 8000832:	00db      	lsls	r3, r3, #3
 8000834:	1a9b      	subs	r3, r3, r2
 8000836:	440b      	add	r3, r1
 8000838:	33c8      	adds	r3, #200	; 0xc8
 800083a:	68fa      	ldr	r2, [r7, #12]
 800083c:	4413      	add	r3, r2
 800083e:	3303      	adds	r3, #3
			memcpy(NetBuffer->Buffer[NetBufferIndex],
 8000840:	2208      	movs	r2, #8
 8000842:	4619      	mov	r1, r3
 8000844:	f002 fac0 	bl	8002dc8 <memcpy>
					CAN_MAX_DATA);
			NetBufferIndex++;
 8000848:	7f7b      	ldrb	r3, [r7, #29]
 800084a:	3301      	adds	r3, #1
 800084c:	777b      	strb	r3, [r7, #29]
			FrameType--;
 800084e:	7fbb      	ldrb	r3, [r7, #30]
 8000850:	3b01      	subs	r3, #1
 8000852:	77bb      	strb	r3, [r7, #30]
		for (;FrameLength > 0; FrameLength--) {
 8000854:	7ffb      	ldrb	r3, [r7, #31]
 8000856:	3b01      	subs	r3, #1
 8000858:	77fb      	strb	r3, [r7, #31]
 800085a:	7ffb      	ldrb	r3, [r7, #31]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d1da      	bne.n	8000816 <CAN_Receive_Network+0x76>
		}
		DataLength=NetBuffer->NodeHandle[NetBuffer->RecvID].PacketLength-2;
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8000866:	461a      	mov	r2, r3
 8000868:	68f9      	ldr	r1, [r7, #12]
 800086a:	4613      	mov	r3, r2
 800086c:	00db      	lsls	r3, r3, #3
 800086e:	4413      	add	r3, r2
 8000870:	00db      	lsls	r3, r3, #3
 8000872:	1a9b      	subs	r3, r3, r2
 8000874:	440b      	add	r3, r1
 8000876:	f203 130d 	addw	r3, r3, #269	; 0x10d
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	3b02      	subs	r3, #2
 800087e:	75fb      	strb	r3, [r7, #23]
		NetData=(uint8_t*)malloc(DataLength*sizeof(uint8_t));
 8000880:	7dfb      	ldrb	r3, [r7, #23]
 8000882:	4618      	mov	r0, r3
 8000884:	f002 f9a0 	bl	8002bc8 <malloc>
 8000888:	4603      	mov	r3, r0
 800088a:	613b      	str	r3, [r7, #16]
		for(NetBufferIndex=0;NetBufferIndex<=NumberofFrame;NetBufferIndex++)
 800088c:	2300      	movs	r3, #0
 800088e:	777b      	strb	r3, [r7, #29]
 8000890:	e01b      	b.n	80008ca <CAN_Receive_Network+0x12a>
		{
			for (int j=0;j<8;j++)
 8000892:	2300      	movs	r3, #0
 8000894:	61bb      	str	r3, [r7, #24]
 8000896:	e012      	b.n	80008be <CAN_Receive_Network+0x11e>
			{
				NetData[NetBufferIndex*8+j]=NetBuffer->Buffer[NetBufferIndex][j];
 8000898:	7f7a      	ldrb	r2, [r7, #29]
 800089a:	7f7b      	ldrb	r3, [r7, #29]
 800089c:	00d9      	lsls	r1, r3, #3
 800089e:	69bb      	ldr	r3, [r7, #24]
 80008a0:	440b      	add	r3, r1
 80008a2:	4619      	mov	r1, r3
 80008a4:	693b      	ldr	r3, [r7, #16]
 80008a6:	440b      	add	r3, r1
 80008a8:	68f9      	ldr	r1, [r7, #12]
 80008aa:	00d2      	lsls	r2, r2, #3
 80008ac:	4411      	add	r1, r2
 80008ae:	69ba      	ldr	r2, [r7, #24]
 80008b0:	440a      	add	r2, r1
 80008b2:	3248      	adds	r2, #72	; 0x48
 80008b4:	7812      	ldrb	r2, [r2, #0]
 80008b6:	701a      	strb	r2, [r3, #0]
			for (int j=0;j<8;j++)
 80008b8:	69bb      	ldr	r3, [r7, #24]
 80008ba:	3301      	adds	r3, #1
 80008bc:	61bb      	str	r3, [r7, #24]
 80008be:	69bb      	ldr	r3, [r7, #24]
 80008c0:	2b07      	cmp	r3, #7
 80008c2:	dde9      	ble.n	8000898 <CAN_Receive_Network+0xf8>
		for(NetBufferIndex=0;NetBufferIndex<=NumberofFrame;NetBufferIndex++)
 80008c4:	7f7b      	ldrb	r3, [r7, #29]
 80008c6:	3301      	adds	r3, #1
 80008c8:	777b      	strb	r3, [r7, #29]
 80008ca:	7f7a      	ldrb	r2, [r7, #29]
 80008cc:	7d7b      	ldrb	r3, [r7, #21]
 80008ce:	429a      	cmp	r2, r3
 80008d0:	d9df      	bls.n	8000892 <CAN_Receive_Network+0xf2>
			}
		}
		CRCValue=crc_8(NetData,DataLength);
 80008d2:	7dfb      	ldrb	r3, [r7, #23]
 80008d4:	4619      	mov	r1, r3
 80008d6:	6938      	ldr	r0, [r7, #16]
 80008d8:	f000 f87a 	bl	80009d0 <crc_8>
 80008dc:	4603      	mov	r3, r0
 80008de:	75bb      	strb	r3, [r7, #22]
		if(CRCValue==NetBuffer->NodeHandle[NetBuffer->RecvID].CRCValue)
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80008e6:	461a      	mov	r2, r3
 80008e8:	68f9      	ldr	r1, [r7, #12]
 80008ea:	4613      	mov	r3, r2
 80008ec:	00db      	lsls	r3, r3, #3
 80008ee:	4413      	add	r3, r2
 80008f0:	00db      	lsls	r3, r3, #3
 80008f2:	1a9b      	subs	r3, r3, r2
 80008f4:	440b      	add	r3, r1
 80008f6:	f203 130f 	addw	r3, r3, #271	; 0x10f
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	7dba      	ldrb	r2, [r7, #22]
 80008fe:	429a      	cmp	r2, r3
 8000900:	d109      	bne.n	8000916 <CAN_Receive_Network+0x176>
		{
			*FlagNotiHandle=REC_PACKET_SUCCESS;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2204      	movs	r2, #4
 8000906:	701a      	strb	r2, [r3, #0]
			memcpy(NetBuffer->NetworkBuffer,NetData,DataLength);
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	7dfa      	ldrb	r2, [r7, #23]
 800090c:	6939      	ldr	r1, [r7, #16]
 800090e:	4618      	mov	r0, r3
 8000910:	f002 fa5a 	bl	8002dc8 <memcpy>
 8000914:	e002      	b.n	800091c <CAN_Receive_Network+0x17c>
		}
		else
		{
			*FlagNotiHandle=REC_PACKET_ERROR;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2203      	movs	r2, #3
 800091a:	701a      	strb	r2, [r3, #0]
		}
		free(NetData);
 800091c:	6938      	ldr	r0, [r7, #16]
 800091e:	f002 f95b 	bl	8002bd8 <free>
	}
	return HAL_OK;
 8000922:	2300      	movs	r3, #0
}
 8000924:	4618      	mov	r0, r3
 8000926:	3720      	adds	r7, #32
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}

0800092c <CAN_Receive_Application>:

uint8_t CAN_Receive_Application(CANBufferHandleStruct *AppBuffer,uint8_t *Data,FlagFrameHandle *FlagFrame ,FlagRecNotification *FlagNotification)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af00      	add	r7, sp, #0
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	60b9      	str	r1, [r7, #8]
 8000936:	607a      	str	r2, [r7, #4]
 8000938:	603b      	str	r3, [r7, #0]
	uint8_t AppDataLength=AppBuffer->NodeHandle[AppBuffer->RecvID].PacketLength-2;
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8000940:	461a      	mov	r2, r3
 8000942:	68f9      	ldr	r1, [r7, #12]
 8000944:	4613      	mov	r3, r2
 8000946:	00db      	lsls	r3, r3, #3
 8000948:	4413      	add	r3, r2
 800094a:	00db      	lsls	r3, r3, #3
 800094c:	1a9b      	subs	r3, r3, r2
 800094e:	440b      	add	r3, r1
 8000950:	f203 130d 	addw	r3, r3, #269	; 0x10d
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	3b02      	subs	r3, #2
 8000958:	75fb      	strb	r3, [r7, #23]
	CAN_Receive_Network(AppBuffer, FlagFrame, FlagNotification);
 800095a:	683a      	ldr	r2, [r7, #0]
 800095c:	6879      	ldr	r1, [r7, #4]
 800095e:	68f8      	ldr	r0, [r7, #12]
 8000960:	f7ff ff1e 	bl	80007a0 <CAN_Receive_Network>
	if(*FlagNotification==REC_PACKET_SUCCESS)
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2b04      	cmp	r3, #4
 800096a:	d105      	bne.n	8000978 <CAN_Receive_Application+0x4c>
	{
	memcpy(Data,AppBuffer->NetworkBuffer,AppDataLength);
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	7dfa      	ldrb	r2, [r7, #23]
 8000970:	4619      	mov	r1, r3
 8000972:	68b8      	ldr	r0, [r7, #8]
 8000974:	f002 fa28 	bl	8002dc8 <memcpy>
	}
	return HAL_OK;
 8000978:	2300      	movs	r3, #0
}
 800097a:	4618      	mov	r0, r3
 800097c:	3718      	adds	r7, #24
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
	...

08000984 <CAN_Config_filtering>:
uint32_t CAN_Config_filtering(void) {
 8000984:	b580      	push	{r7, lr}
 8000986:	b08a      	sub	sp, #40	; 0x28
 8000988:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef Can_filter_init;
	Can_filter_init.FilterActivation = ENABLE;
 800098a:	2301      	movs	r3, #1
 800098c:	623b      	str	r3, [r7, #32]
	Can_filter_init.FilterBank = 0;
 800098e:	2300      	movs	r3, #0
 8000990:	617b      	str	r3, [r7, #20]
	Can_filter_init.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000992:	2300      	movs	r3, #0
 8000994:	613b      	str	r3, [r7, #16]
	Can_filter_init.FilterIdHigh = 0x0000;
 8000996:	2300      	movs	r3, #0
 8000998:	603b      	str	r3, [r7, #0]
	Can_filter_init.FilterIdLow = 0x0000;
 800099a:	2300      	movs	r3, #0
 800099c:	607b      	str	r3, [r7, #4]
	Can_filter_init.FilterMaskIdHigh = 0x0000;
 800099e:	2300      	movs	r3, #0
 80009a0:	60bb      	str	r3, [r7, #8]
	Can_filter_init.FilterMaskIdLow = 0x0000;
 80009a2:	2300      	movs	r3, #0
 80009a4:	60fb      	str	r3, [r7, #12]
	Can_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 80009a6:	2300      	movs	r3, #0
 80009a8:	61bb      	str	r3, [r7, #24]
	Can_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 80009aa:	2301      	movs	r3, #1
 80009ac:	61fb      	str	r3, [r7, #28]
	if (HAL_CAN_ConfigFilter(&hcan, &Can_filter_init) != HAL_OK) {
 80009ae:	463b      	mov	r3, r7
 80009b0:	4619      	mov	r1, r3
 80009b2:	4806      	ldr	r0, [pc, #24]	; (80009cc <CAN_Config_filtering+0x48>)
 80009b4:	f000 fcd5 	bl	8001362 <HAL_CAN_ConfigFilter>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <CAN_Config_filtering+0x3e>
		Error_Handler();
 80009be:	f000 f9ad 	bl	8000d1c <Error_Handler>
	}
	return HAL_OK;
 80009c2:	2300      	movs	r3, #0
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	3728      	adds	r7, #40	; 0x28
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20000078 	.word	0x20000078

080009d0 <crc_8>:

#include "CRC.h"
#include "stdint.h"
unsigned char table[256] = {0};

uint8_t crc_8(uint8_t* data, uint8_t len) {
 80009d0:	b480      	push	{r7}
 80009d2:	b087      	sub	sp, #28
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	460b      	mov	r3, r1
 80009da:	70fb      	strb	r3, [r7, #3]
  unsigned crc = 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	617b      	str	r3, [r7, #20]
  int i, j;
  for (j = len; j; j--, data++) {
 80009e0:	78fb      	ldrb	r3, [r7, #3]
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	e023      	b.n	8000a2e <crc_8+0x5e>
    crc ^= (*data << 8);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	021b      	lsls	r3, r3, #8
 80009ec:	461a      	mov	r2, r3
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	4053      	eors	r3, r2
 80009f2:	617b      	str	r3, [r7, #20]
    for(i = 8; i; i--) {
 80009f4:	2308      	movs	r3, #8
 80009f6:	613b      	str	r3, [r7, #16]
 80009f8:	e010      	b.n	8000a1c <crc_8+0x4c>
      if (crc & 0x8000)
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d005      	beq.n	8000a10 <crc_8+0x40>
        crc ^= (0x1070 << 3);
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	f483 4303 	eor.w	r3, r3, #33536	; 0x8300
 8000a0a:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 8000a0e:	617b      	str	r3, [r7, #20]
      crc <<= 1;
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	617b      	str	r3, [r7, #20]
    for(i = 8; i; i--) {
 8000a16:	693b      	ldr	r3, [r7, #16]
 8000a18:	3b01      	subs	r3, #1
 8000a1a:	613b      	str	r3, [r7, #16]
 8000a1c:	693b      	ldr	r3, [r7, #16]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d1eb      	bne.n	80009fa <crc_8+0x2a>
  for (j = len; j; j--, data++) {
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	3b01      	subs	r3, #1
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d1d8      	bne.n	80009e6 <crc_8+0x16>
    }
  }
  return (uint8_t)(crc >> 8);
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	0a1b      	lsrs	r3, r3, #8
 8000a38:	b2db      	uxtb	r3, r3
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	371c      	adds	r7, #28
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr

08000a44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	f5ad 6ddd 	sub.w	sp, sp, #1768	; 0x6e8
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a4c:	f000 fb08 	bl	8001060 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a50:	f000 f872 	bl	8000b38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a54:	f000 f916 	bl	8000c84 <MX_GPIO_Init>
  MX_CAN_Init();
 8000a58:	f000 f8b4 	bl	8000bc4 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000a5c:	f000 f8e8 	bl	8000c30 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  CAN_Config_filtering();
 8000a60:	f7ff ff90 	bl	8000984 <CAN_Config_filtering>
  if(HAL_CAN_Start(&hcan)!=HAL_OK)
 8000a64:	4832      	ldr	r0, [pc, #200]	; (8000b30 <main+0xec>)
 8000a66:	f000 fd45 	bl	80014f4 <HAL_CAN_Start>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <main+0x30>
     {
     	Error_Handler();
 8000a70:	f000 f954 	bl	8000d1c <Error_Handler>
     }
  uint32_t Txmailbox;
  CANConfigIDTxtypedef pIDtype;
  pIDtype.MessageType=COMMAND_FRAME;
 8000a74:	2301      	movs	r3, #1
 8000a76:	f8a7 36dc 	strh.w	r3, [r7, #1756]	; 0x6dc
  pIDtype.SenderID=OBSTALCE8;
 8000a7a:	230f      	movs	r3, #15
 8000a7c:	f8a7 36de 	strh.w	r3, [r7, #1758]	; 0x6de
  CANBufferHandleStruct Buffer;
  CANBufferHandleStruct_Init(&Buffer);
 8000a80:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff fb61 	bl	800014c <CANBufferHandleStruct_Init>
  CAN_RxHeaderTypeDef RxHeader;
  FlagRecNotification FlagRec;
  FlagFrameHandle Flag;
  FlagsFrameHandle_Init(&Flag);
 8000a8a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f7ff fbb5 	bl	80001fe <FlagsFrameHandle_Init>
  uint8_t DataRec[16];
  uint8_t Data[64]={0};
 8000a94:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 8000a98:	f5a3 63d9 	sub.w	r3, r3, #1736	; 0x6c8
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	3304      	adds	r3, #4
 8000aa2:	223c      	movs	r2, #60	; 0x3c
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f002 f94a 	bl	8002d40 <memset>
  uint8_t mess[30]={0};
 8000aac:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 8000ab0:	f5a3 63dd 	sub.w	r3, r3, #1768	; 0x6e8
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	3304      	adds	r3, #4
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	609a      	str	r2, [r3, #8]
 8000ac2:	60da      	str	r2, [r3, #12]
 8000ac4:	611a      	str	r2, [r3, #16]
 8000ac6:	615a      	str	r2, [r3, #20]
 8000ac8:	831a      	strh	r2, [r3, #24]
  uint8_t k=0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	f887 36e7 	strb.w	r3, [r7, #1767]	; 0x6e7
  for (int i=0; i<DATA_TEST;i++)
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	f8c7 36e0 	str.w	r3, [r7, #1760]	; 0x6e0
 8000ad6:	e013      	b.n	8000b00 <main+0xbc>
  {
	  Data[i]=k;
 8000ad8:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 8000adc:	f5a3 62d9 	sub.w	r2, r3, #1736	; 0x6c8
 8000ae0:	f8d7 36e0 	ldr.w	r3, [r7, #1760]	; 0x6e0
 8000ae4:	4413      	add	r3, r2
 8000ae6:	f897 26e7 	ldrb.w	r2, [r7, #1767]	; 0x6e7
 8000aea:	701a      	strb	r2, [r3, #0]
	  k=k+1;
 8000aec:	f897 36e7 	ldrb.w	r3, [r7, #1767]	; 0x6e7
 8000af0:	3301      	adds	r3, #1
 8000af2:	f887 36e7 	strb.w	r3, [r7, #1767]	; 0x6e7
  for (int i=0; i<DATA_TEST;i++)
 8000af6:	f8d7 36e0 	ldr.w	r3, [r7, #1760]	; 0x6e0
 8000afa:	3301      	adds	r3, #1
 8000afc:	f8c7 36e0 	str.w	r3, [r7, #1760]	; 0x6e0
 8000b00:	f8d7 36e0 	ldr.w	r3, [r7, #1760]	; 0x6e0
 8000b04:	2b0f      	cmp	r3, #15
 8000b06:	dde7      	ble.n	8000ad8 <main+0x94>
    /* USER CODE BEGIN 3 */
	  //CAN_Send_Dataframe(pIDtype, Data, Txmailbox, TxBufferSend)
	  //CAN_Send_DataLink_Separate(&Buffer, Data);
	 // CAN_DataLink_Separate(&Buffer,Data,9);
	//	CAN_Network_Packet(&Buffer,Data,62);
	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000b08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b0c:	4809      	ldr	r0, [pc, #36]	; (8000b34 <main+0xf0>)
 8000b0e:	f001 fb53 	bl	80021b8 <HAL_GPIO_TogglePin>
	 //CAN_Send_Physical_Send(&Buffer, Data , DATA_TEST , &pIDtype);
	 CAN_Receive_Application(&Buffer, mess, &Flag, &FlagRec);
 8000b12:	f207 1383 	addw	r3, r7, #387	; 0x183
 8000b16:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8000b1a:	4639      	mov	r1, r7
 8000b1c:	f507 70d0 	add.w	r0, r7, #416	; 0x1a0
 8000b20:	f7ff ff04 	bl	800092c <CAN_Receive_Application>
	 HAL_Delay(500);
 8000b24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b28:	f000 fafc 	bl	8001124 <HAL_Delay>
	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000b2c:	e7ec      	b.n	8000b08 <main+0xc4>
 8000b2e:	bf00      	nop
 8000b30:	20000078 	.word	0x20000078
 8000b34:	40011000 	.word	0x40011000

08000b38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b090      	sub	sp, #64	; 0x40
 8000b3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b3e:	f107 0318 	add.w	r3, r7, #24
 8000b42:	2228      	movs	r2, #40	; 0x28
 8000b44:	2100      	movs	r1, #0
 8000b46:	4618      	mov	r0, r3
 8000b48:	f002 f8fa 	bl	8002d40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
 8000b54:	609a      	str	r2, [r3, #8]
 8000b56:	60da      	str	r2, [r3, #12]
 8000b58:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b62:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b64:	2300      	movs	r3, #0
 8000b66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b74:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b76:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b7c:	f107 0318 	add.w	r3, r7, #24
 8000b80:	4618      	mov	r0, r3
 8000b82:	f001 fb33 	bl	80021ec <HAL_RCC_OscConfig>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000b8c:	f000 f8c6 	bl	8000d1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b90:	230f      	movs	r3, #15
 8000b92:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b94:	2302      	movs	r3, #2
 8000b96:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ba0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ba6:	1d3b      	adds	r3, r7, #4
 8000ba8:	2102      	movs	r1, #2
 8000baa:	4618      	mov	r0, r3
 8000bac:	f001 fda0 	bl	80026f0 <HAL_RCC_ClockConfig>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000bb6:	f000 f8b1 	bl	8000d1c <Error_Handler>
  }
}
 8000bba:	bf00      	nop
 8000bbc:	3740      	adds	r7, #64	; 0x40
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
	...

08000bc4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000bc8:	4b17      	ldr	r3, [pc, #92]	; (8000c28 <MX_CAN_Init+0x64>)
 8000bca:	4a18      	ldr	r2, [pc, #96]	; (8000c2c <MX_CAN_Init+0x68>)
 8000bcc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000bce:	4b16      	ldr	r3, [pc, #88]	; (8000c28 <MX_CAN_Init+0x64>)
 8000bd0:	2204      	movs	r2, #4
 8000bd2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000bd4:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <MX_CAN_Init+0x64>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000bda:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <MX_CAN_Init+0x64>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000be0:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <MX_CAN_Init+0x64>)
 8000be2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000be6:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000be8:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <MX_CAN_Init+0x64>)
 8000bea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000bee:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000bf0:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <MX_CAN_Init+0x64>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000bf6:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <MX_CAN_Init+0x64>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000bfc:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <MX_CAN_Init+0x64>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000c02:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <MX_CAN_Init+0x64>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000c08:	4b07      	ldr	r3, [pc, #28]	; (8000c28 <MX_CAN_Init+0x64>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <MX_CAN_Init+0x64>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000c14:	4804      	ldr	r0, [pc, #16]	; (8000c28 <MX_CAN_Init+0x64>)
 8000c16:	f000 faa9 	bl	800116c <HAL_CAN_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000c20:	f000 f87c 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000078 	.word	0x20000078
 8000c2c:	40006400 	.word	0x40006400

08000c30 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c34:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <MX_USART1_UART_Init+0x4c>)
 8000c36:	4a12      	ldr	r2, [pc, #72]	; (8000c80 <MX_USART1_UART_Init+0x50>)
 8000c38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c3a:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <MX_USART1_UART_Init+0x4c>)
 8000c3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c42:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <MX_USART1_UART_Init+0x4c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c48:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <MX_USART1_UART_Init+0x4c>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <MX_USART1_UART_Init+0x4c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c54:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <MX_USART1_UART_Init+0x4c>)
 8000c56:	220c      	movs	r2, #12
 8000c58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c5a:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <MX_USART1_UART_Init+0x4c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <MX_USART1_UART_Init+0x4c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c66:	4805      	ldr	r0, [pc, #20]	; (8000c7c <MX_USART1_UART_Init+0x4c>)
 8000c68:	f001 fed0 	bl	8002a0c <HAL_UART_Init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c72:	f000 f853 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	200000a0 	.word	0x200000a0
 8000c80:	40013800 	.word	0x40013800

08000c84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b088      	sub	sp, #32
 8000c88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8a:	f107 0310 	add.w	r3, r7, #16
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]
 8000c96:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c98:	4b1e      	ldr	r3, [pc, #120]	; (8000d14 <MX_GPIO_Init+0x90>)
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	4a1d      	ldr	r2, [pc, #116]	; (8000d14 <MX_GPIO_Init+0x90>)
 8000c9e:	f043 0310 	orr.w	r3, r3, #16
 8000ca2:	6193      	str	r3, [r2, #24]
 8000ca4:	4b1b      	ldr	r3, [pc, #108]	; (8000d14 <MX_GPIO_Init+0x90>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	f003 0310 	and.w	r3, r3, #16
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cb0:	4b18      	ldr	r3, [pc, #96]	; (8000d14 <MX_GPIO_Init+0x90>)
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	4a17      	ldr	r2, [pc, #92]	; (8000d14 <MX_GPIO_Init+0x90>)
 8000cb6:	f043 0320 	orr.w	r3, r3, #32
 8000cba:	6193      	str	r3, [r2, #24]
 8000cbc:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <MX_GPIO_Init+0x90>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	f003 0320 	and.w	r3, r3, #32
 8000cc4:	60bb      	str	r3, [r7, #8]
 8000cc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc8:	4b12      	ldr	r3, [pc, #72]	; (8000d14 <MX_GPIO_Init+0x90>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	4a11      	ldr	r2, [pc, #68]	; (8000d14 <MX_GPIO_Init+0x90>)
 8000cce:	f043 0304 	orr.w	r3, r3, #4
 8000cd2:	6193      	str	r3, [r2, #24]
 8000cd4:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <MX_GPIO_Init+0x90>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	f003 0304 	and.w	r3, r3, #4
 8000cdc:	607b      	str	r3, [r7, #4]
 8000cde:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ce6:	480c      	ldr	r0, [pc, #48]	; (8000d18 <MX_GPIO_Init+0x94>)
 8000ce8:	f001 fa4e 	bl	8002188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000cec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cf0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cfe:	f107 0310 	add.w	r3, r7, #16
 8000d02:	4619      	mov	r1, r3
 8000d04:	4804      	ldr	r0, [pc, #16]	; (8000d18 <MX_GPIO_Init+0x94>)
 8000d06:	f001 f8bb 	bl	8001e80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d0a:	bf00      	nop
 8000d0c:	3720      	adds	r7, #32
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40021000 	.word	0x40021000
 8000d18:	40011000 	.word	0x40011000

08000d1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d20:	b672      	cpsid	i
}
 8000d22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <Error_Handler+0x8>
	...

08000d28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d2e:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <HAL_MspInit+0x5c>)
 8000d30:	699b      	ldr	r3, [r3, #24]
 8000d32:	4a14      	ldr	r2, [pc, #80]	; (8000d84 <HAL_MspInit+0x5c>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	6193      	str	r3, [r2, #24]
 8000d3a:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <HAL_MspInit+0x5c>)
 8000d3c:	699b      	ldr	r3, [r3, #24]
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	60bb      	str	r3, [r7, #8]
 8000d44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d46:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <HAL_MspInit+0x5c>)
 8000d48:	69db      	ldr	r3, [r3, #28]
 8000d4a:	4a0e      	ldr	r2, [pc, #56]	; (8000d84 <HAL_MspInit+0x5c>)
 8000d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d50:	61d3      	str	r3, [r2, #28]
 8000d52:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <HAL_MspInit+0x5c>)
 8000d54:	69db      	ldr	r3, [r3, #28]
 8000d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d5e:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <HAL_MspInit+0x60>)
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	4a04      	ldr	r2, [pc, #16]	; (8000d88 <HAL_MspInit+0x60>)
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	3714      	adds	r7, #20
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr
 8000d84:	40021000 	.word	0x40021000
 8000d88:	40010000 	.word	0x40010000

08000d8c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 0310 	add.w	r3, r7, #16
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a2c      	ldr	r2, [pc, #176]	; (8000e58 <HAL_CAN_MspInit+0xcc>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d151      	bne.n	8000e50 <HAL_CAN_MspInit+0xc4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000dac:	4b2b      	ldr	r3, [pc, #172]	; (8000e5c <HAL_CAN_MspInit+0xd0>)
 8000dae:	69db      	ldr	r3, [r3, #28]
 8000db0:	4a2a      	ldr	r2, [pc, #168]	; (8000e5c <HAL_CAN_MspInit+0xd0>)
 8000db2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000db6:	61d3      	str	r3, [r2, #28]
 8000db8:	4b28      	ldr	r3, [pc, #160]	; (8000e5c <HAL_CAN_MspInit+0xd0>)
 8000dba:	69db      	ldr	r3, [r3, #28]
 8000dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc4:	4b25      	ldr	r3, [pc, #148]	; (8000e5c <HAL_CAN_MspInit+0xd0>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	4a24      	ldr	r2, [pc, #144]	; (8000e5c <HAL_CAN_MspInit+0xd0>)
 8000dca:	f043 0304 	orr.w	r3, r3, #4
 8000dce:	6193      	str	r3, [r2, #24]
 8000dd0:	4b22      	ldr	r3, [pc, #136]	; (8000e5c <HAL_CAN_MspInit+0xd0>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	f003 0304 	and.w	r3, r3, #4
 8000dd8:	60bb      	str	r3, [r7, #8]
 8000dda:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ddc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000de0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de2:	2300      	movs	r3, #0
 8000de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dea:	f107 0310 	add.w	r3, r7, #16
 8000dee:	4619      	mov	r1, r3
 8000df0:	481b      	ldr	r0, [pc, #108]	; (8000e60 <HAL_CAN_MspInit+0xd4>)
 8000df2:	f001 f845 	bl	8001e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000df6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dfa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e00:	2303      	movs	r3, #3
 8000e02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e04:	f107 0310 	add.w	r3, r7, #16
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4815      	ldr	r0, [pc, #84]	; (8000e60 <HAL_CAN_MspInit+0xd4>)
 8000e0c:	f001 f838 	bl	8001e80 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8000e10:	2200      	movs	r2, #0
 8000e12:	2100      	movs	r1, #0
 8000e14:	2013      	movs	r0, #19
 8000e16:	f000 fffc 	bl	8001e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8000e1a:	2013      	movs	r0, #19
 8000e1c:	f001 f815 	bl	8001e4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000e20:	2200      	movs	r2, #0
 8000e22:	2100      	movs	r1, #0
 8000e24:	2014      	movs	r0, #20
 8000e26:	f000 fff4 	bl	8001e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000e2a:	2014      	movs	r0, #20
 8000e2c:	f001 f80d 	bl	8001e4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000e30:	2200      	movs	r2, #0
 8000e32:	2100      	movs	r1, #0
 8000e34:	2015      	movs	r0, #21
 8000e36:	f000 ffec 	bl	8001e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000e3a:	2015      	movs	r0, #21
 8000e3c:	f001 f805 	bl	8001e4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000e40:	2200      	movs	r2, #0
 8000e42:	2100      	movs	r1, #0
 8000e44:	2016      	movs	r0, #22
 8000e46:	f000 ffe4 	bl	8001e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000e4a:	2016      	movs	r0, #22
 8000e4c:	f000 fffd 	bl	8001e4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000e50:	bf00      	nop
 8000e52:	3720      	adds	r7, #32
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40006400 	.word	0x40006400
 8000e5c:	40021000 	.word	0x40021000
 8000e60:	40010800 	.word	0x40010800

08000e64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b088      	sub	sp, #32
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 0310 	add.w	r3, r7, #16
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a1c      	ldr	r2, [pc, #112]	; (8000ef0 <HAL_UART_MspInit+0x8c>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d131      	bne.n	8000ee8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e84:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <HAL_UART_MspInit+0x90>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	4a1a      	ldr	r2, [pc, #104]	; (8000ef4 <HAL_UART_MspInit+0x90>)
 8000e8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e8e:	6193      	str	r3, [r2, #24]
 8000e90:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <HAL_UART_MspInit+0x90>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9c:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <HAL_UART_MspInit+0x90>)
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	4a14      	ldr	r2, [pc, #80]	; (8000ef4 <HAL_UART_MspInit+0x90>)
 8000ea2:	f043 0304 	orr.w	r3, r3, #4
 8000ea6:	6193      	str	r3, [r2, #24]
 8000ea8:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <HAL_UART_MspInit+0x90>)
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	f003 0304 	and.w	r3, r3, #4
 8000eb0:	60bb      	str	r3, [r7, #8]
 8000eb2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000eb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000eb8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec2:	f107 0310 	add.w	r3, r7, #16
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	480b      	ldr	r0, [pc, #44]	; (8000ef8 <HAL_UART_MspInit+0x94>)
 8000eca:	f000 ffd9 	bl	8001e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ece:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ed2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000edc:	f107 0310 	add.w	r3, r7, #16
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4805      	ldr	r0, [pc, #20]	; (8000ef8 <HAL_UART_MspInit+0x94>)
 8000ee4:	f000 ffcc 	bl	8001e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ee8:	bf00      	nop
 8000eea:	3720      	adds	r7, #32
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40013800 	.word	0x40013800
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	40010800 	.word	0x40010800

08000efc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <NMI_Handler+0x4>

08000f02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f06:	e7fe      	b.n	8000f06 <HardFault_Handler+0x4>

08000f08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <MemManage_Handler+0x4>

08000f0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f12:	e7fe      	b.n	8000f12 <BusFault_Handler+0x4>

08000f14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <UsageFault_Handler+0x4>

08000f1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bc80      	pop	{r7}
 8000f24:	4770      	bx	lr

08000f26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bc80      	pop	{r7}
 8000f30:	4770      	bx	lr

08000f32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bc80      	pop	{r7}
 8000f3c:	4770      	bx	lr

08000f3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f42:	f000 f8d3 	bl	80010ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000f50:	4802      	ldr	r0, [pc, #8]	; (8000f5c <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8000f52:	f000 fc5b 	bl	800180c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000078 	.word	0x20000078

08000f60 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000f64:	4802      	ldr	r0, [pc, #8]	; (8000f70 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000f66:	f000 fc51 	bl	800180c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000078 	.word	0x20000078

08000f74 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000f78:	4802      	ldr	r0, [pc, #8]	; (8000f84 <CAN1_RX1_IRQHandler+0x10>)
 8000f7a:	f000 fc47 	bl	800180c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000078 	.word	0x20000078

08000f88 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000f8c:	4802      	ldr	r0, [pc, #8]	; (8000f98 <CAN1_SCE_IRQHandler+0x10>)
 8000f8e:	f000 fc3d 	bl	800180c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000078 	.word	0x20000078

08000f9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fa4:	4a14      	ldr	r2, [pc, #80]	; (8000ff8 <_sbrk+0x5c>)
 8000fa6:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <_sbrk+0x60>)
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fb0:	4b13      	ldr	r3, [pc, #76]	; (8001000 <_sbrk+0x64>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d102      	bne.n	8000fbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fb8:	4b11      	ldr	r3, [pc, #68]	; (8001000 <_sbrk+0x64>)
 8000fba:	4a12      	ldr	r2, [pc, #72]	; (8001004 <_sbrk+0x68>)
 8000fbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fbe:	4b10      	ldr	r3, [pc, #64]	; (8001000 <_sbrk+0x64>)
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d207      	bcs.n	8000fdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fcc:	f001 fed0 	bl	8002d70 <__errno>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	220c      	movs	r2, #12
 8000fd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fda:	e009      	b.n	8000ff0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fdc:	4b08      	ldr	r3, [pc, #32]	; (8001000 <_sbrk+0x64>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fe2:	4b07      	ldr	r3, [pc, #28]	; (8001000 <_sbrk+0x64>)
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4413      	add	r3, r2
 8000fea:	4a05      	ldr	r2, [pc, #20]	; (8001000 <_sbrk+0x64>)
 8000fec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fee:	68fb      	ldr	r3, [r7, #12]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3718      	adds	r7, #24
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20005000 	.word	0x20005000
 8000ffc:	00000400 	.word	0x00000400
 8001000:	200000e8 	.word	0x200000e8
 8001004:	20000238 	.word	0x20000238

08001008 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr

08001014 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001014:	f7ff fff8 	bl	8001008 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001018:	480b      	ldr	r0, [pc, #44]	; (8001048 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800101a:	490c      	ldr	r1, [pc, #48]	; (800104c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800101c:	4a0c      	ldr	r2, [pc, #48]	; (8001050 <LoopFillZerobss+0x16>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001020:	e002      	b.n	8001028 <LoopCopyDataInit>

08001022 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001022:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001024:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001026:	3304      	adds	r3, #4

08001028 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001028:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800102c:	d3f9      	bcc.n	8001022 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800102e:	4a09      	ldr	r2, [pc, #36]	; (8001054 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001030:	4c09      	ldr	r4, [pc, #36]	; (8001058 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001032:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001034:	e001      	b.n	800103a <LoopFillZerobss>

08001036 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001036:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001038:	3204      	adds	r2, #4

0800103a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800103c:	d3fb      	bcc.n	8001036 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800103e:	f001 fe9d 	bl	8002d7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001042:	f7ff fcff 	bl	8000a44 <main>
  bx lr
 8001046:	4770      	bx	lr
  ldr r0, =_sdata
 8001048:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800104c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001050:	08002ec0 	.word	0x08002ec0
  ldr r2, =_sbss
 8001054:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001058:	20000238 	.word	0x20000238

0800105c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800105c:	e7fe      	b.n	800105c <ADC1_2_IRQHandler>
	...

08001060 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001064:	4b08      	ldr	r3, [pc, #32]	; (8001088 <HAL_Init+0x28>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a07      	ldr	r2, [pc, #28]	; (8001088 <HAL_Init+0x28>)
 800106a:	f043 0310 	orr.w	r3, r3, #16
 800106e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001070:	2003      	movs	r0, #3
 8001072:	f000 fec3 	bl	8001dfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001076:	200f      	movs	r0, #15
 8001078:	f000 f808 	bl	800108c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800107c:	f7ff fe54 	bl	8000d28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40022000 	.word	0x40022000

0800108c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001094:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <HAL_InitTick+0x54>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <HAL_InitTick+0x58>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	4619      	mov	r1, r3
 800109e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010aa:	4618      	mov	r0, r3
 80010ac:	f000 fedb 	bl	8001e66 <HAL_SYSTICK_Config>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e00e      	b.n	80010d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2b0f      	cmp	r3, #15
 80010be:	d80a      	bhi.n	80010d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c0:	2200      	movs	r2, #0
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	f04f 30ff 	mov.w	r0, #4294967295
 80010c8:	f000 fea3 	bl	8001e12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010cc:	4a06      	ldr	r2, [pc, #24]	; (80010e8 <HAL_InitTick+0x5c>)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010d2:	2300      	movs	r3, #0
 80010d4:	e000      	b.n	80010d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000000 	.word	0x20000000
 80010e4:	20000008 	.word	0x20000008
 80010e8:	20000004 	.word	0x20000004

080010ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010f0:	4b05      	ldr	r3, [pc, #20]	; (8001108 <HAL_IncTick+0x1c>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	461a      	mov	r2, r3
 80010f6:	4b05      	ldr	r3, [pc, #20]	; (800110c <HAL_IncTick+0x20>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4413      	add	r3, r2
 80010fc:	4a03      	ldr	r2, [pc, #12]	; (800110c <HAL_IncTick+0x20>)
 80010fe:	6013      	str	r3, [r2, #0]
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr
 8001108:	20000008 	.word	0x20000008
 800110c:	200000ec 	.word	0x200000ec

08001110 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  return uwTick;
 8001114:	4b02      	ldr	r3, [pc, #8]	; (8001120 <HAL_GetTick+0x10>)
 8001116:	681b      	ldr	r3, [r3, #0]
}
 8001118:	4618      	mov	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr
 8001120:	200000ec 	.word	0x200000ec

08001124 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800112c:	f7ff fff0 	bl	8001110 <HAL_GetTick>
 8001130:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800113c:	d005      	beq.n	800114a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800113e:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <HAL_Delay+0x44>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	461a      	mov	r2, r3
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4413      	add	r3, r2
 8001148:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800114a:	bf00      	nop
 800114c:	f7ff ffe0 	bl	8001110 <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	68fa      	ldr	r2, [r7, #12]
 8001158:	429a      	cmp	r2, r3
 800115a:	d8f7      	bhi.n	800114c <HAL_Delay+0x28>
  {
  }
}
 800115c:	bf00      	nop
 800115e:	bf00      	nop
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000008 	.word	0x20000008

0800116c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d101      	bne.n	800117e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e0ed      	b.n	800135a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001184:	b2db      	uxtb	r3, r3
 8001186:	2b00      	cmp	r3, #0
 8001188:	d102      	bne.n	8001190 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff fdfe 	bl	8000d8c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f042 0201 	orr.w	r2, r2, #1
 800119e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011a0:	f7ff ffb6 	bl	8001110 <HAL_GetTick>
 80011a4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011a6:	e012      	b.n	80011ce <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011a8:	f7ff ffb2 	bl	8001110 <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	2b0a      	cmp	r3, #10
 80011b4:	d90b      	bls.n	80011ce <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2205      	movs	r2, #5
 80011c6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e0c5      	b.n	800135a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d0e5      	beq.n	80011a8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f022 0202 	bic.w	r2, r2, #2
 80011ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011ec:	f7ff ff90 	bl	8001110 <HAL_GetTick>
 80011f0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80011f2:	e012      	b.n	800121a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011f4:	f7ff ff8c 	bl	8001110 <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b0a      	cmp	r3, #10
 8001200:	d90b      	bls.n	800121a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001206:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2205      	movs	r2, #5
 8001212:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e09f      	b.n	800135a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 0302 	and.w	r3, r3, #2
 8001224:	2b00      	cmp	r3, #0
 8001226:	d1e5      	bne.n	80011f4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	7e1b      	ldrb	r3, [r3, #24]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d108      	bne.n	8001242 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	e007      	b.n	8001252 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001250:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	7e5b      	ldrb	r3, [r3, #25]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d108      	bne.n	800126c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	e007      	b.n	800127c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800127a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	7e9b      	ldrb	r3, [r3, #26]
 8001280:	2b01      	cmp	r3, #1
 8001282:	d108      	bne.n	8001296 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f042 0220 	orr.w	r2, r2, #32
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	e007      	b.n	80012a6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f022 0220 	bic.w	r2, r2, #32
 80012a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	7edb      	ldrb	r3, [r3, #27]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d108      	bne.n	80012c0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f022 0210 	bic.w	r2, r2, #16
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	e007      	b.n	80012d0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f042 0210 	orr.w	r2, r2, #16
 80012ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	7f1b      	ldrb	r3, [r3, #28]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d108      	bne.n	80012ea <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f042 0208 	orr.w	r2, r2, #8
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	e007      	b.n	80012fa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f022 0208 	bic.w	r2, r2, #8
 80012f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	7f5b      	ldrb	r3, [r3, #29]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d108      	bne.n	8001314 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f042 0204 	orr.w	r2, r2, #4
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	e007      	b.n	8001324 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f022 0204 	bic.w	r2, r2, #4
 8001322:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	689a      	ldr	r2, [r3, #8]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	431a      	orrs	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	691b      	ldr	r3, [r3, #16]
 8001332:	431a      	orrs	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	695b      	ldr	r3, [r3, #20]
 8001338:	ea42 0103 	orr.w	r1, r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	1e5a      	subs	r2, r3, #1
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	430a      	orrs	r2, r1
 8001348:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2201      	movs	r2, #1
 8001354:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001362:	b480      	push	{r7}
 8001364:	b087      	sub	sp, #28
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
 800136a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001378:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800137a:	7cfb      	ldrb	r3, [r7, #19]
 800137c:	2b01      	cmp	r3, #1
 800137e:	d003      	beq.n	8001388 <HAL_CAN_ConfigFilter+0x26>
 8001380:	7cfb      	ldrb	r3, [r7, #19]
 8001382:	2b02      	cmp	r3, #2
 8001384:	f040 80aa 	bne.w	80014dc <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800138e:	f043 0201 	orr.w	r2, r3, #1
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	695b      	ldr	r3, [r3, #20]
 800139c:	f003 031f 	and.w	r3, r3, #31
 80013a0:	2201      	movs	r2, #1
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	43db      	mvns	r3, r3
 80013b2:	401a      	ands	r2, r3
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	69db      	ldr	r3, [r3, #28]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d123      	bne.n	800140a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	43db      	mvns	r3, r3
 80013cc:	401a      	ands	r2, r3
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013e0:	683a      	ldr	r2, [r7, #0]
 80013e2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80013e4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	3248      	adds	r2, #72	; 0x48
 80013ea:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013fe:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001400:	6979      	ldr	r1, [r7, #20]
 8001402:	3348      	adds	r3, #72	; 0x48
 8001404:	00db      	lsls	r3, r3, #3
 8001406:	440b      	add	r3, r1
 8001408:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d122      	bne.n	8001458 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	431a      	orrs	r2, r3
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800142e:	683a      	ldr	r2, [r7, #0]
 8001430:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001432:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	3248      	adds	r2, #72	; 0x48
 8001438:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800144c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800144e:	6979      	ldr	r1, [r7, #20]
 8001450:	3348      	adds	r3, #72	; 0x48
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	440b      	add	r3, r1
 8001456:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d109      	bne.n	8001474 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	43db      	mvns	r3, r3
 800146a:	401a      	ands	r2, r3
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001472:	e007      	b.n	8001484 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	431a      	orrs	r2, r3
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	691b      	ldr	r3, [r3, #16]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d109      	bne.n	80014a0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	43db      	mvns	r3, r3
 8001496:	401a      	ands	r2, r3
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800149e:	e007      	b.n	80014b0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	431a      	orrs	r2, r3
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	6a1b      	ldr	r3, [r3, #32]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d107      	bne.n	80014c8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	431a      	orrs	r2, r3
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80014ce:	f023 0201 	bic.w	r2, r3, #1
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80014d8:	2300      	movs	r3, #0
 80014da:	e006      	b.n	80014ea <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
  }
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	371c      	adds	r7, #28
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr

080014f4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001502:	b2db      	uxtb	r3, r3
 8001504:	2b01      	cmp	r3, #1
 8001506:	d12e      	bne.n	8001566 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2202      	movs	r2, #2
 800150c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f022 0201 	bic.w	r2, r2, #1
 800151e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001520:	f7ff fdf6 	bl	8001110 <HAL_GetTick>
 8001524:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001526:	e012      	b.n	800154e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001528:	f7ff fdf2 	bl	8001110 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b0a      	cmp	r3, #10
 8001534:	d90b      	bls.n	800154e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2205      	movs	r2, #5
 8001546:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e012      	b.n	8001574 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f003 0301 	and.w	r3, r3, #1
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1e5      	bne.n	8001528 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001562:	2300      	movs	r3, #0
 8001564:	e006      	b.n	8001574 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
  }
}
 8001574:	4618      	mov	r0, r3
 8001576:	3710      	adds	r7, #16
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800157c:	b480      	push	{r7}
 800157e:	b087      	sub	sp, #28
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
 8001588:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001590:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001592:	7dfb      	ldrb	r3, [r7, #23]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d003      	beq.n	80015a0 <HAL_CAN_GetRxMessage+0x24>
 8001598:	7dfb      	ldrb	r3, [r7, #23]
 800159a:	2b02      	cmp	r3, #2
 800159c:	f040 8103 	bne.w	80017a6 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d10e      	bne.n	80015c4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	f003 0303 	and.w	r3, r3, #3
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d116      	bne.n	80015e2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e0f7      	b.n	80017b4 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	691b      	ldr	r3, [r3, #16]
 80015ca:	f003 0303 	and.w	r3, r3, #3
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d107      	bne.n	80015e2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e0e8      	b.n	80017b4 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	331b      	adds	r3, #27
 80015ea:	011b      	lsls	r3, r3, #4
 80015ec:	4413      	add	r3, r2
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0204 	and.w	r2, r3, #4
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d10c      	bne.n	800161a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	331b      	adds	r3, #27
 8001608:	011b      	lsls	r3, r3, #4
 800160a:	4413      	add	r3, r2
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	0d5b      	lsrs	r3, r3, #21
 8001610:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	e00b      	b.n	8001632 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	331b      	adds	r3, #27
 8001622:	011b      	lsls	r3, r3, #4
 8001624:	4413      	add	r3, r2
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	08db      	lsrs	r3, r3, #3
 800162a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	331b      	adds	r3, #27
 800163a:	011b      	lsls	r3, r3, #4
 800163c:	4413      	add	r3, r2
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0202 	and.w	r2, r3, #2
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	331b      	adds	r3, #27
 8001650:	011b      	lsls	r3, r3, #4
 8001652:	4413      	add	r3, r2
 8001654:	3304      	adds	r3, #4
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0308 	and.w	r3, r3, #8
 800165c:	2b00      	cmp	r3, #0
 800165e:	d003      	beq.n	8001668 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2208      	movs	r2, #8
 8001664:	611a      	str	r2, [r3, #16]
 8001666:	e00b      	b.n	8001680 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	331b      	adds	r3, #27
 8001670:	011b      	lsls	r3, r3, #4
 8001672:	4413      	add	r3, r2
 8001674:	3304      	adds	r3, #4
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 020f 	and.w	r2, r3, #15
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	331b      	adds	r3, #27
 8001688:	011b      	lsls	r3, r3, #4
 800168a:	4413      	add	r3, r2
 800168c:	3304      	adds	r3, #4
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	0a1b      	lsrs	r3, r3, #8
 8001692:	b2da      	uxtb	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	331b      	adds	r3, #27
 80016a0:	011b      	lsls	r3, r3, #4
 80016a2:	4413      	add	r3, r2
 80016a4:	3304      	adds	r3, #4
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	0c1b      	lsrs	r3, r3, #16
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	011b      	lsls	r3, r3, #4
 80016b8:	4413      	add	r3, r2
 80016ba:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	b2da      	uxtb	r2, r3
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	011b      	lsls	r3, r3, #4
 80016ce:	4413      	add	r3, r2
 80016d0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	0a1a      	lsrs	r2, r3, #8
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	3301      	adds	r3, #1
 80016dc:	b2d2      	uxtb	r2, r2
 80016de:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	011b      	lsls	r3, r3, #4
 80016e8:	4413      	add	r3, r2
 80016ea:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	0c1a      	lsrs	r2, r3, #16
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	3302      	adds	r3, #2
 80016f6:	b2d2      	uxtb	r2, r2
 80016f8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	011b      	lsls	r3, r3, #4
 8001702:	4413      	add	r3, r2
 8001704:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	0e1a      	lsrs	r2, r3, #24
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	3303      	adds	r3, #3
 8001710:	b2d2      	uxtb	r2, r2
 8001712:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	011b      	lsls	r3, r3, #4
 800171c:	4413      	add	r3, r2
 800171e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	3304      	adds	r3, #4
 8001728:	b2d2      	uxtb	r2, r2
 800172a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	011b      	lsls	r3, r3, #4
 8001734:	4413      	add	r3, r2
 8001736:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	0a1a      	lsrs	r2, r3, #8
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	3305      	adds	r3, #5
 8001742:	b2d2      	uxtb	r2, r2
 8001744:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	011b      	lsls	r3, r3, #4
 800174e:	4413      	add	r3, r2
 8001750:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	0c1a      	lsrs	r2, r3, #16
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	3306      	adds	r3, #6
 800175c:	b2d2      	uxtb	r2, r2
 800175e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	011b      	lsls	r3, r3, #4
 8001768:	4413      	add	r3, r2
 800176a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	0e1a      	lsrs	r2, r3, #24
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	3307      	adds	r3, #7
 8001776:	b2d2      	uxtb	r2, r2
 8001778:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d108      	bne.n	8001792 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	68da      	ldr	r2, [r3, #12]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f042 0220 	orr.w	r2, r2, #32
 800178e:	60da      	str	r2, [r3, #12]
 8001790:	e007      	b.n	80017a2 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	691a      	ldr	r2, [r3, #16]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f042 0220 	orr.w	r2, r2, #32
 80017a0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80017a2:	2300      	movs	r3, #0
 80017a4:	e006      	b.n	80017b4 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017aa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
  }
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	371c      	adds	r7, #28
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bc80      	pop	{r7}
 80017bc:	4770      	bx	lr

080017be <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80017be:	b480      	push	{r7}
 80017c0:	b085      	sub	sp, #20
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
 80017c6:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80017c8:	2300      	movs	r3, #0
 80017ca:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017d2:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80017d4:	7afb      	ldrb	r3, [r7, #11]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d002      	beq.n	80017e0 <HAL_CAN_GetRxFifoFillLevel+0x22>
 80017da:	7afb      	ldrb	r3, [r7, #11]
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d10f      	bne.n	8001800 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d106      	bne.n	80017f4 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	f003 0303 	and.w	r3, r3, #3
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	e005      	b.n	8001800 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	f003 0303 	and.w	r3, r3, #3
 80017fe:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8001800:	68fb      	ldr	r3, [r7, #12]
}
 8001802:	4618      	mov	r0, r3
 8001804:	3714      	adds	r7, #20
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr

0800180c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b08a      	sub	sp, #40	; 0x28
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001814:	2300      	movs	r3, #0
 8001816:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	695b      	ldr	r3, [r3, #20]
 800181e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001848:	6a3b      	ldr	r3, [r7, #32]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b00      	cmp	r3, #0
 8001850:	d07c      	beq.n	800194c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	2b00      	cmp	r3, #0
 800185a:	d023      	beq.n	80018a4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2201      	movs	r2, #1
 8001862:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f000 f983 	bl	8001b7a <HAL_CAN_TxMailbox0CompleteCallback>
 8001874:	e016      	b.n	80018a4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	2b00      	cmp	r3, #0
 800187e:	d004      	beq.n	800188a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001882:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001886:	627b      	str	r3, [r7, #36]	; 0x24
 8001888:	e00c      	b.n	80018a4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	f003 0308 	and.w	r3, r3, #8
 8001890:	2b00      	cmp	r3, #0
 8001892:	d004      	beq.n	800189e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001896:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800189a:	627b      	str	r3, [r7, #36]	; 0x24
 800189c:	e002      	b.n	80018a4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f000 f986 	bl	8001bb0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d024      	beq.n	80018f8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018b6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d003      	beq.n	80018ca <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f000 f962 	bl	8001b8c <HAL_CAN_TxMailbox1CompleteCallback>
 80018c8:	e016      	b.n	80018f8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d004      	beq.n	80018de <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80018d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018da:	627b      	str	r3, [r7, #36]	; 0x24
 80018dc:	e00c      	b.n	80018f8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d004      	beq.n	80018f2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80018e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018ee:	627b      	str	r3, [r7, #36]	; 0x24
 80018f0:	e002      	b.n	80018f8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f000 f965 	bl	8001bc2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d024      	beq.n	800194c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800190a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d003      	beq.n	800191e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f000 f941 	bl	8001b9e <HAL_CAN_TxMailbox2CompleteCallback>
 800191c:	e016      	b.n	800194c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d004      	beq.n	8001932 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
 8001930:	e00c      	b.n	800194c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d004      	beq.n	8001946 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800193c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001942:	627b      	str	r3, [r7, #36]	; 0x24
 8001944:	e002      	b.n	800194c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f000 f944 	bl	8001bd4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800194c:	6a3b      	ldr	r3, [r7, #32]
 800194e:	f003 0308 	and.w	r3, r3, #8
 8001952:	2b00      	cmp	r3, #0
 8001954:	d00c      	beq.n	8001970 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	f003 0310 	and.w	r3, r3, #16
 800195c:	2b00      	cmp	r3, #0
 800195e:	d007      	beq.n	8001970 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001962:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001966:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2210      	movs	r2, #16
 800196e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001970:	6a3b      	ldr	r3, [r7, #32]
 8001972:	f003 0304 	and.w	r3, r3, #4
 8001976:	2b00      	cmp	r3, #0
 8001978:	d00b      	beq.n	8001992 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	f003 0308 	and.w	r3, r3, #8
 8001980:	2b00      	cmp	r3, #0
 8001982:	d006      	beq.n	8001992 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2208      	movs	r2, #8
 800198a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f000 f933 	bl	8001bf8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001992:	6a3b      	ldr	r3, [r7, #32]
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d009      	beq.n	80019b0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	f003 0303 	and.w	r3, r3, #3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d002      	beq.n	80019b0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f000 f91b 	bl	8001be6 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80019b0:	6a3b      	ldr	r3, [r7, #32]
 80019b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d00c      	beq.n	80019d4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	f003 0310 	and.w	r3, r3, #16
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d007      	beq.n	80019d4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80019c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019ca:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2210      	movs	r2, #16
 80019d2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80019d4:	6a3b      	ldr	r3, [r7, #32]
 80019d6:	f003 0320 	and.w	r3, r3, #32
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d00b      	beq.n	80019f6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	f003 0308 	and.w	r3, r3, #8
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d006      	beq.n	80019f6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2208      	movs	r2, #8
 80019ee:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f000 f913 	bl	8001c1c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80019f6:	6a3b      	ldr	r3, [r7, #32]
 80019f8:	f003 0310 	and.w	r3, r3, #16
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d009      	beq.n	8001a14 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	f003 0303 	and.w	r3, r3, #3
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d002      	beq.n	8001a14 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 f8fb 	bl	8001c0a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001a14:	6a3b      	ldr	r3, [r7, #32]
 8001a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d00b      	beq.n	8001a36 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	f003 0310 	and.w	r3, r3, #16
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d006      	beq.n	8001a36 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2210      	movs	r2, #16
 8001a2e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f000 f8fc 	bl	8001c2e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001a36:	6a3b      	ldr	r3, [r7, #32]
 8001a38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d00b      	beq.n	8001a58 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	f003 0308 	and.w	r3, r3, #8
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d006      	beq.n	8001a58 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2208      	movs	r2, #8
 8001a50:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f000 f8f4 	bl	8001c40 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001a58:	6a3b      	ldr	r3, [r7, #32]
 8001a5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d07b      	beq.n	8001b5a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d072      	beq.n	8001b52 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001a6c:	6a3b      	ldr	r3, [r7, #32]
 8001a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d008      	beq.n	8001a88 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d003      	beq.n	8001a88 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a82:	f043 0301 	orr.w	r3, r3, #1
 8001a86:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001a88:	6a3b      	ldr	r3, [r7, #32]
 8001a8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d008      	beq.n	8001aa4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d003      	beq.n	8001aa4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9e:	f043 0302 	orr.w	r3, r3, #2
 8001aa2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001aa4:	6a3b      	ldr	r3, [r7, #32]
 8001aa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d008      	beq.n	8001ac0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d003      	beq.n	8001ac0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aba:	f043 0304 	orr.w	r3, r3, #4
 8001abe:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ac0:	6a3b      	ldr	r3, [r7, #32]
 8001ac2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d043      	beq.n	8001b52 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d03e      	beq.n	8001b52 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ada:	2b60      	cmp	r3, #96	; 0x60
 8001adc:	d02b      	beq.n	8001b36 <HAL_CAN_IRQHandler+0x32a>
 8001ade:	2b60      	cmp	r3, #96	; 0x60
 8001ae0:	d82e      	bhi.n	8001b40 <HAL_CAN_IRQHandler+0x334>
 8001ae2:	2b50      	cmp	r3, #80	; 0x50
 8001ae4:	d022      	beq.n	8001b2c <HAL_CAN_IRQHandler+0x320>
 8001ae6:	2b50      	cmp	r3, #80	; 0x50
 8001ae8:	d82a      	bhi.n	8001b40 <HAL_CAN_IRQHandler+0x334>
 8001aea:	2b40      	cmp	r3, #64	; 0x40
 8001aec:	d019      	beq.n	8001b22 <HAL_CAN_IRQHandler+0x316>
 8001aee:	2b40      	cmp	r3, #64	; 0x40
 8001af0:	d826      	bhi.n	8001b40 <HAL_CAN_IRQHandler+0x334>
 8001af2:	2b30      	cmp	r3, #48	; 0x30
 8001af4:	d010      	beq.n	8001b18 <HAL_CAN_IRQHandler+0x30c>
 8001af6:	2b30      	cmp	r3, #48	; 0x30
 8001af8:	d822      	bhi.n	8001b40 <HAL_CAN_IRQHandler+0x334>
 8001afa:	2b10      	cmp	r3, #16
 8001afc:	d002      	beq.n	8001b04 <HAL_CAN_IRQHandler+0x2f8>
 8001afe:	2b20      	cmp	r3, #32
 8001b00:	d005      	beq.n	8001b0e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001b02:	e01d      	b.n	8001b40 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b06:	f043 0308 	orr.w	r3, r3, #8
 8001b0a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b0c:	e019      	b.n	8001b42 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b10:	f043 0310 	orr.w	r3, r3, #16
 8001b14:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b16:	e014      	b.n	8001b42 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1a:	f043 0320 	orr.w	r3, r3, #32
 8001b1e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b20:	e00f      	b.n	8001b42 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b2a:	e00a      	b.n	8001b42 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b32:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b34:	e005      	b.n	8001b42 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b3c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b3e:	e000      	b.n	8001b42 <HAL_CAN_IRQHandler+0x336>
            break;
 8001b40:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	699a      	ldr	r2, [r3, #24]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001b50:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2204      	movs	r2, #4
 8001b58:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d008      	beq.n	8001b72 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b66:	431a      	orrs	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 f870 	bl	8001c52 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001b72:	bf00      	nop
 8001b74:	3728      	adds	r7, #40	; 0x28
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc80      	pop	{r7}
 8001b8a:	4770      	bx	lr

08001b8c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr

08001b9e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bc80      	pop	{r7}
 8001bae:	4770      	bx	lr

08001bb0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bc80      	pop	{r7}
 8001bc0:	4770      	bx	lr

08001bc2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b083      	sub	sp, #12
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr

08001bd4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bc80      	pop	{r7}
 8001be4:	4770      	bx	lr

08001be6 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr

08001bf8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bc80      	pop	{r7}
 8001c08:	4770      	bx	lr

08001c0a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b083      	sub	sp, #12
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr

08001c1c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bc80      	pop	{r7}
 8001c2c:	4770      	bx	lr

08001c2e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b083      	sub	sp, #12
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr

08001c40 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001c48:	bf00      	nop
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bc80      	pop	{r7}
 8001c50:	4770      	bx	lr

08001c52 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b083      	sub	sp, #12
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr

08001c64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f003 0307 	and.w	r3, r3, #7
 8001c72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c74:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c7a:	68ba      	ldr	r2, [r7, #8]
 8001c7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c80:	4013      	ands	r3, r2
 8001c82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c96:	4a04      	ldr	r2, [pc, #16]	; (8001ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	60d3      	str	r3, [r2, #12]
}
 8001c9c:	bf00      	nop
 8001c9e:	3714      	adds	r7, #20
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bc80      	pop	{r7}
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	e000ed00 	.word	0xe000ed00

08001cac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cb0:	4b04      	ldr	r3, [pc, #16]	; (8001cc4 <__NVIC_GetPriorityGrouping+0x18>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	0a1b      	lsrs	r3, r3, #8
 8001cb6:	f003 0307 	and.w	r3, r3, #7
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc80      	pop	{r7}
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	db0b      	blt.n	8001cf2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	f003 021f 	and.w	r2, r3, #31
 8001ce0:	4906      	ldr	r1, [pc, #24]	; (8001cfc <__NVIC_EnableIRQ+0x34>)
 8001ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce6:	095b      	lsrs	r3, r3, #5
 8001ce8:	2001      	movs	r0, #1
 8001cea:	fa00 f202 	lsl.w	r2, r0, r2
 8001cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cf2:	bf00      	nop
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bc80      	pop	{r7}
 8001cfa:	4770      	bx	lr
 8001cfc:	e000e100 	.word	0xe000e100

08001d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	6039      	str	r1, [r7, #0]
 8001d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	db0a      	blt.n	8001d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	b2da      	uxtb	r2, r3
 8001d18:	490c      	ldr	r1, [pc, #48]	; (8001d4c <__NVIC_SetPriority+0x4c>)
 8001d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1e:	0112      	lsls	r2, r2, #4
 8001d20:	b2d2      	uxtb	r2, r2
 8001d22:	440b      	add	r3, r1
 8001d24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d28:	e00a      	b.n	8001d40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	4908      	ldr	r1, [pc, #32]	; (8001d50 <__NVIC_SetPriority+0x50>)
 8001d30:	79fb      	ldrb	r3, [r7, #7]
 8001d32:	f003 030f 	and.w	r3, r3, #15
 8001d36:	3b04      	subs	r3, #4
 8001d38:	0112      	lsls	r2, r2, #4
 8001d3a:	b2d2      	uxtb	r2, r2
 8001d3c:	440b      	add	r3, r1
 8001d3e:	761a      	strb	r2, [r3, #24]
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	e000e100 	.word	0xe000e100
 8001d50:	e000ed00 	.word	0xe000ed00

08001d54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b089      	sub	sp, #36	; 0x24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	f1c3 0307 	rsb	r3, r3, #7
 8001d6e:	2b04      	cmp	r3, #4
 8001d70:	bf28      	it	cs
 8001d72:	2304      	movcs	r3, #4
 8001d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	3304      	adds	r3, #4
 8001d7a:	2b06      	cmp	r3, #6
 8001d7c:	d902      	bls.n	8001d84 <NVIC_EncodePriority+0x30>
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	3b03      	subs	r3, #3
 8001d82:	e000      	b.n	8001d86 <NVIC_EncodePriority+0x32>
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d88:	f04f 32ff 	mov.w	r2, #4294967295
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43da      	mvns	r2, r3
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	401a      	ands	r2, r3
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	fa01 f303 	lsl.w	r3, r1, r3
 8001da6:	43d9      	mvns	r1, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dac:	4313      	orrs	r3, r2
         );
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3724      	adds	r7, #36	; 0x24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr

08001db8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dc8:	d301      	bcc.n	8001dce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e00f      	b.n	8001dee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dce:	4a0a      	ldr	r2, [pc, #40]	; (8001df8 <SysTick_Config+0x40>)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dd6:	210f      	movs	r1, #15
 8001dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ddc:	f7ff ff90 	bl	8001d00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001de0:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <SysTick_Config+0x40>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001de6:	4b04      	ldr	r3, [pc, #16]	; (8001df8 <SysTick_Config+0x40>)
 8001de8:	2207      	movs	r2, #7
 8001dea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	e000e010 	.word	0xe000e010

08001dfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f7ff ff2d 	bl	8001c64 <__NVIC_SetPriorityGrouping>
}
 8001e0a:	bf00      	nop
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b086      	sub	sp, #24
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	4603      	mov	r3, r0
 8001e1a:	60b9      	str	r1, [r7, #8]
 8001e1c:	607a      	str	r2, [r7, #4]
 8001e1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e20:	2300      	movs	r3, #0
 8001e22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e24:	f7ff ff42 	bl	8001cac <__NVIC_GetPriorityGrouping>
 8001e28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	68b9      	ldr	r1, [r7, #8]
 8001e2e:	6978      	ldr	r0, [r7, #20]
 8001e30:	f7ff ff90 	bl	8001d54 <NVIC_EncodePriority>
 8001e34:	4602      	mov	r2, r0
 8001e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e3a:	4611      	mov	r1, r2
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff ff5f 	bl	8001d00 <__NVIC_SetPriority>
}
 8001e42:	bf00      	nop
 8001e44:	3718      	adds	r7, #24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	4603      	mov	r3, r0
 8001e52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff ff35 	bl	8001cc8 <__NVIC_EnableIRQ>
}
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b082      	sub	sp, #8
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7ff ffa2 	bl	8001db8 <SysTick_Config>
 8001e74:	4603      	mov	r3, r0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
	...

08001e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b08b      	sub	sp, #44	; 0x2c
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e92:	e169      	b.n	8002168 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e94:	2201      	movs	r2, #1
 8001e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	69fa      	ldr	r2, [r7, #28]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	f040 8158 	bne.w	8002162 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	4a9a      	ldr	r2, [pc, #616]	; (8002120 <HAL_GPIO_Init+0x2a0>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d05e      	beq.n	8001f7a <HAL_GPIO_Init+0xfa>
 8001ebc:	4a98      	ldr	r2, [pc, #608]	; (8002120 <HAL_GPIO_Init+0x2a0>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d875      	bhi.n	8001fae <HAL_GPIO_Init+0x12e>
 8001ec2:	4a98      	ldr	r2, [pc, #608]	; (8002124 <HAL_GPIO_Init+0x2a4>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d058      	beq.n	8001f7a <HAL_GPIO_Init+0xfa>
 8001ec8:	4a96      	ldr	r2, [pc, #600]	; (8002124 <HAL_GPIO_Init+0x2a4>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d86f      	bhi.n	8001fae <HAL_GPIO_Init+0x12e>
 8001ece:	4a96      	ldr	r2, [pc, #600]	; (8002128 <HAL_GPIO_Init+0x2a8>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d052      	beq.n	8001f7a <HAL_GPIO_Init+0xfa>
 8001ed4:	4a94      	ldr	r2, [pc, #592]	; (8002128 <HAL_GPIO_Init+0x2a8>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d869      	bhi.n	8001fae <HAL_GPIO_Init+0x12e>
 8001eda:	4a94      	ldr	r2, [pc, #592]	; (800212c <HAL_GPIO_Init+0x2ac>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d04c      	beq.n	8001f7a <HAL_GPIO_Init+0xfa>
 8001ee0:	4a92      	ldr	r2, [pc, #584]	; (800212c <HAL_GPIO_Init+0x2ac>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d863      	bhi.n	8001fae <HAL_GPIO_Init+0x12e>
 8001ee6:	4a92      	ldr	r2, [pc, #584]	; (8002130 <HAL_GPIO_Init+0x2b0>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d046      	beq.n	8001f7a <HAL_GPIO_Init+0xfa>
 8001eec:	4a90      	ldr	r2, [pc, #576]	; (8002130 <HAL_GPIO_Init+0x2b0>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d85d      	bhi.n	8001fae <HAL_GPIO_Init+0x12e>
 8001ef2:	2b12      	cmp	r3, #18
 8001ef4:	d82a      	bhi.n	8001f4c <HAL_GPIO_Init+0xcc>
 8001ef6:	2b12      	cmp	r3, #18
 8001ef8:	d859      	bhi.n	8001fae <HAL_GPIO_Init+0x12e>
 8001efa:	a201      	add	r2, pc, #4	; (adr r2, 8001f00 <HAL_GPIO_Init+0x80>)
 8001efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f00:	08001f7b 	.word	0x08001f7b
 8001f04:	08001f55 	.word	0x08001f55
 8001f08:	08001f67 	.word	0x08001f67
 8001f0c:	08001fa9 	.word	0x08001fa9
 8001f10:	08001faf 	.word	0x08001faf
 8001f14:	08001faf 	.word	0x08001faf
 8001f18:	08001faf 	.word	0x08001faf
 8001f1c:	08001faf 	.word	0x08001faf
 8001f20:	08001faf 	.word	0x08001faf
 8001f24:	08001faf 	.word	0x08001faf
 8001f28:	08001faf 	.word	0x08001faf
 8001f2c:	08001faf 	.word	0x08001faf
 8001f30:	08001faf 	.word	0x08001faf
 8001f34:	08001faf 	.word	0x08001faf
 8001f38:	08001faf 	.word	0x08001faf
 8001f3c:	08001faf 	.word	0x08001faf
 8001f40:	08001faf 	.word	0x08001faf
 8001f44:	08001f5d 	.word	0x08001f5d
 8001f48:	08001f71 	.word	0x08001f71
 8001f4c:	4a79      	ldr	r2, [pc, #484]	; (8002134 <HAL_GPIO_Init+0x2b4>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d013      	beq.n	8001f7a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f52:	e02c      	b.n	8001fae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	623b      	str	r3, [r7, #32]
          break;
 8001f5a:	e029      	b.n	8001fb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	3304      	adds	r3, #4
 8001f62:	623b      	str	r3, [r7, #32]
          break;
 8001f64:	e024      	b.n	8001fb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	3308      	adds	r3, #8
 8001f6c:	623b      	str	r3, [r7, #32]
          break;
 8001f6e:	e01f      	b.n	8001fb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	330c      	adds	r3, #12
 8001f76:	623b      	str	r3, [r7, #32]
          break;
 8001f78:	e01a      	b.n	8001fb0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d102      	bne.n	8001f88 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f82:	2304      	movs	r3, #4
 8001f84:	623b      	str	r3, [r7, #32]
          break;
 8001f86:	e013      	b.n	8001fb0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d105      	bne.n	8001f9c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f90:	2308      	movs	r3, #8
 8001f92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	69fa      	ldr	r2, [r7, #28]
 8001f98:	611a      	str	r2, [r3, #16]
          break;
 8001f9a:	e009      	b.n	8001fb0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f9c:	2308      	movs	r3, #8
 8001f9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	69fa      	ldr	r2, [r7, #28]
 8001fa4:	615a      	str	r2, [r3, #20]
          break;
 8001fa6:	e003      	b.n	8001fb0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	623b      	str	r3, [r7, #32]
          break;
 8001fac:	e000      	b.n	8001fb0 <HAL_GPIO_Init+0x130>
          break;
 8001fae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	2bff      	cmp	r3, #255	; 0xff
 8001fb4:	d801      	bhi.n	8001fba <HAL_GPIO_Init+0x13a>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	e001      	b.n	8001fbe <HAL_GPIO_Init+0x13e>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	3304      	adds	r3, #4
 8001fbe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	2bff      	cmp	r3, #255	; 0xff
 8001fc4:	d802      	bhi.n	8001fcc <HAL_GPIO_Init+0x14c>
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	e002      	b.n	8001fd2 <HAL_GPIO_Init+0x152>
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	3b08      	subs	r3, #8
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	210f      	movs	r1, #15
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	401a      	ands	r2, r3
 8001fe4:	6a39      	ldr	r1, [r7, #32]
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fec:	431a      	orrs	r2, r3
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f000 80b1 	beq.w	8002162 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002000:	4b4d      	ldr	r3, [pc, #308]	; (8002138 <HAL_GPIO_Init+0x2b8>)
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	4a4c      	ldr	r2, [pc, #304]	; (8002138 <HAL_GPIO_Init+0x2b8>)
 8002006:	f043 0301 	orr.w	r3, r3, #1
 800200a:	6193      	str	r3, [r2, #24]
 800200c:	4b4a      	ldr	r3, [pc, #296]	; (8002138 <HAL_GPIO_Init+0x2b8>)
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	60bb      	str	r3, [r7, #8]
 8002016:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002018:	4a48      	ldr	r2, [pc, #288]	; (800213c <HAL_GPIO_Init+0x2bc>)
 800201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201c:	089b      	lsrs	r3, r3, #2
 800201e:	3302      	adds	r3, #2
 8002020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002024:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	f003 0303 	and.w	r3, r3, #3
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	220f      	movs	r2, #15
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	43db      	mvns	r3, r3
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	4013      	ands	r3, r2
 800203a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a40      	ldr	r2, [pc, #256]	; (8002140 <HAL_GPIO_Init+0x2c0>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d013      	beq.n	800206c <HAL_GPIO_Init+0x1ec>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a3f      	ldr	r2, [pc, #252]	; (8002144 <HAL_GPIO_Init+0x2c4>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d00d      	beq.n	8002068 <HAL_GPIO_Init+0x1e8>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a3e      	ldr	r2, [pc, #248]	; (8002148 <HAL_GPIO_Init+0x2c8>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d007      	beq.n	8002064 <HAL_GPIO_Init+0x1e4>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a3d      	ldr	r2, [pc, #244]	; (800214c <HAL_GPIO_Init+0x2cc>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d101      	bne.n	8002060 <HAL_GPIO_Init+0x1e0>
 800205c:	2303      	movs	r3, #3
 800205e:	e006      	b.n	800206e <HAL_GPIO_Init+0x1ee>
 8002060:	2304      	movs	r3, #4
 8002062:	e004      	b.n	800206e <HAL_GPIO_Init+0x1ee>
 8002064:	2302      	movs	r3, #2
 8002066:	e002      	b.n	800206e <HAL_GPIO_Init+0x1ee>
 8002068:	2301      	movs	r3, #1
 800206a:	e000      	b.n	800206e <HAL_GPIO_Init+0x1ee>
 800206c:	2300      	movs	r3, #0
 800206e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002070:	f002 0203 	and.w	r2, r2, #3
 8002074:	0092      	lsls	r2, r2, #2
 8002076:	4093      	lsls	r3, r2
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	4313      	orrs	r3, r2
 800207c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800207e:	492f      	ldr	r1, [pc, #188]	; (800213c <HAL_GPIO_Init+0x2bc>)
 8002080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002082:	089b      	lsrs	r3, r3, #2
 8002084:	3302      	adds	r3, #2
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d006      	beq.n	80020a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002098:	4b2d      	ldr	r3, [pc, #180]	; (8002150 <HAL_GPIO_Init+0x2d0>)
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	492c      	ldr	r1, [pc, #176]	; (8002150 <HAL_GPIO_Init+0x2d0>)
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	608b      	str	r3, [r1, #8]
 80020a4:	e006      	b.n	80020b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020a6:	4b2a      	ldr	r3, [pc, #168]	; (8002150 <HAL_GPIO_Init+0x2d0>)
 80020a8:	689a      	ldr	r2, [r3, #8]
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	43db      	mvns	r3, r3
 80020ae:	4928      	ldr	r1, [pc, #160]	; (8002150 <HAL_GPIO_Init+0x2d0>)
 80020b0:	4013      	ands	r3, r2
 80020b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d006      	beq.n	80020ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020c0:	4b23      	ldr	r3, [pc, #140]	; (8002150 <HAL_GPIO_Init+0x2d0>)
 80020c2:	68da      	ldr	r2, [r3, #12]
 80020c4:	4922      	ldr	r1, [pc, #136]	; (8002150 <HAL_GPIO_Init+0x2d0>)
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	60cb      	str	r3, [r1, #12]
 80020cc:	e006      	b.n	80020dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020ce:	4b20      	ldr	r3, [pc, #128]	; (8002150 <HAL_GPIO_Init+0x2d0>)
 80020d0:	68da      	ldr	r2, [r3, #12]
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	43db      	mvns	r3, r3
 80020d6:	491e      	ldr	r1, [pc, #120]	; (8002150 <HAL_GPIO_Init+0x2d0>)
 80020d8:	4013      	ands	r3, r2
 80020da:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d006      	beq.n	80020f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020e8:	4b19      	ldr	r3, [pc, #100]	; (8002150 <HAL_GPIO_Init+0x2d0>)
 80020ea:	685a      	ldr	r2, [r3, #4]
 80020ec:	4918      	ldr	r1, [pc, #96]	; (8002150 <HAL_GPIO_Init+0x2d0>)
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	604b      	str	r3, [r1, #4]
 80020f4:	e006      	b.n	8002104 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020f6:	4b16      	ldr	r3, [pc, #88]	; (8002150 <HAL_GPIO_Init+0x2d0>)
 80020f8:	685a      	ldr	r2, [r3, #4]
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	43db      	mvns	r3, r3
 80020fe:	4914      	ldr	r1, [pc, #80]	; (8002150 <HAL_GPIO_Init+0x2d0>)
 8002100:	4013      	ands	r3, r2
 8002102:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d021      	beq.n	8002154 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002110:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <HAL_GPIO_Init+0x2d0>)
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	490e      	ldr	r1, [pc, #56]	; (8002150 <HAL_GPIO_Init+0x2d0>)
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	4313      	orrs	r3, r2
 800211a:	600b      	str	r3, [r1, #0]
 800211c:	e021      	b.n	8002162 <HAL_GPIO_Init+0x2e2>
 800211e:	bf00      	nop
 8002120:	10320000 	.word	0x10320000
 8002124:	10310000 	.word	0x10310000
 8002128:	10220000 	.word	0x10220000
 800212c:	10210000 	.word	0x10210000
 8002130:	10120000 	.word	0x10120000
 8002134:	10110000 	.word	0x10110000
 8002138:	40021000 	.word	0x40021000
 800213c:	40010000 	.word	0x40010000
 8002140:	40010800 	.word	0x40010800
 8002144:	40010c00 	.word	0x40010c00
 8002148:	40011000 	.word	0x40011000
 800214c:	40011400 	.word	0x40011400
 8002150:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002154:	4b0b      	ldr	r3, [pc, #44]	; (8002184 <HAL_GPIO_Init+0x304>)
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	43db      	mvns	r3, r3
 800215c:	4909      	ldr	r1, [pc, #36]	; (8002184 <HAL_GPIO_Init+0x304>)
 800215e:	4013      	ands	r3, r2
 8002160:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	3301      	adds	r3, #1
 8002166:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216e:	fa22 f303 	lsr.w	r3, r2, r3
 8002172:	2b00      	cmp	r3, #0
 8002174:	f47f ae8e 	bne.w	8001e94 <HAL_GPIO_Init+0x14>
  }
}
 8002178:	bf00      	nop
 800217a:	bf00      	nop
 800217c:	372c      	adds	r7, #44	; 0x2c
 800217e:	46bd      	mov	sp, r7
 8002180:	bc80      	pop	{r7}
 8002182:	4770      	bx	lr
 8002184:	40010400 	.word	0x40010400

08002188 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	460b      	mov	r3, r1
 8002192:	807b      	strh	r3, [r7, #2]
 8002194:	4613      	mov	r3, r2
 8002196:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002198:	787b      	ldrb	r3, [r7, #1]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800219e:	887a      	ldrh	r2, [r7, #2]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021a4:	e003      	b.n	80021ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021a6:	887b      	ldrh	r3, [r7, #2]
 80021a8:	041a      	lsls	r2, r3, #16
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	611a      	str	r2, [r3, #16]
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr

080021b8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	460b      	mov	r3, r1
 80021c2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021ca:	887a      	ldrh	r2, [r7, #2]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	4013      	ands	r3, r2
 80021d0:	041a      	lsls	r2, r3, #16
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	43d9      	mvns	r1, r3
 80021d6:	887b      	ldrh	r3, [r7, #2]
 80021d8:	400b      	ands	r3, r1
 80021da:	431a      	orrs	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	611a      	str	r2, [r3, #16]
}
 80021e0:	bf00      	nop
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc80      	pop	{r7}
 80021e8:	4770      	bx	lr
	...

080021ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e272      	b.n	80026e4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b00      	cmp	r3, #0
 8002208:	f000 8087 	beq.w	800231a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800220c:	4b92      	ldr	r3, [pc, #584]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f003 030c 	and.w	r3, r3, #12
 8002214:	2b04      	cmp	r3, #4
 8002216:	d00c      	beq.n	8002232 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002218:	4b8f      	ldr	r3, [pc, #572]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f003 030c 	and.w	r3, r3, #12
 8002220:	2b08      	cmp	r3, #8
 8002222:	d112      	bne.n	800224a <HAL_RCC_OscConfig+0x5e>
 8002224:	4b8c      	ldr	r3, [pc, #560]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800222c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002230:	d10b      	bne.n	800224a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002232:	4b89      	ldr	r3, [pc, #548]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d06c      	beq.n	8002318 <HAL_RCC_OscConfig+0x12c>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d168      	bne.n	8002318 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e24c      	b.n	80026e4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002252:	d106      	bne.n	8002262 <HAL_RCC_OscConfig+0x76>
 8002254:	4b80      	ldr	r3, [pc, #512]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a7f      	ldr	r2, [pc, #508]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 800225a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800225e:	6013      	str	r3, [r2, #0]
 8002260:	e02e      	b.n	80022c0 <HAL_RCC_OscConfig+0xd4>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10c      	bne.n	8002284 <HAL_RCC_OscConfig+0x98>
 800226a:	4b7b      	ldr	r3, [pc, #492]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a7a      	ldr	r2, [pc, #488]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 8002270:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002274:	6013      	str	r3, [r2, #0]
 8002276:	4b78      	ldr	r3, [pc, #480]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a77      	ldr	r2, [pc, #476]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 800227c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002280:	6013      	str	r3, [r2, #0]
 8002282:	e01d      	b.n	80022c0 <HAL_RCC_OscConfig+0xd4>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800228c:	d10c      	bne.n	80022a8 <HAL_RCC_OscConfig+0xbc>
 800228e:	4b72      	ldr	r3, [pc, #456]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a71      	ldr	r2, [pc, #452]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 8002294:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002298:	6013      	str	r3, [r2, #0]
 800229a:	4b6f      	ldr	r3, [pc, #444]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a6e      	ldr	r2, [pc, #440]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 80022a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a4:	6013      	str	r3, [r2, #0]
 80022a6:	e00b      	b.n	80022c0 <HAL_RCC_OscConfig+0xd4>
 80022a8:	4b6b      	ldr	r3, [pc, #428]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a6a      	ldr	r2, [pc, #424]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 80022ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022b2:	6013      	str	r3, [r2, #0]
 80022b4:	4b68      	ldr	r3, [pc, #416]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a67      	ldr	r2, [pc, #412]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 80022ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d013      	beq.n	80022f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c8:	f7fe ff22 	bl	8001110 <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022d0:	f7fe ff1e 	bl	8001110 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b64      	cmp	r3, #100	; 0x64
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e200      	b.n	80026e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e2:	4b5d      	ldr	r3, [pc, #372]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d0f0      	beq.n	80022d0 <HAL_RCC_OscConfig+0xe4>
 80022ee:	e014      	b.n	800231a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f0:	f7fe ff0e 	bl	8001110 <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022f8:	f7fe ff0a 	bl	8001110 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b64      	cmp	r3, #100	; 0x64
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e1ec      	b.n	80026e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800230a:	4b53      	ldr	r3, [pc, #332]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1f0      	bne.n	80022f8 <HAL_RCC_OscConfig+0x10c>
 8002316:	e000      	b.n	800231a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002318:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d063      	beq.n	80023ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002326:	4b4c      	ldr	r3, [pc, #304]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f003 030c 	and.w	r3, r3, #12
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00b      	beq.n	800234a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002332:	4b49      	ldr	r3, [pc, #292]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f003 030c 	and.w	r3, r3, #12
 800233a:	2b08      	cmp	r3, #8
 800233c:	d11c      	bne.n	8002378 <HAL_RCC_OscConfig+0x18c>
 800233e:	4b46      	ldr	r3, [pc, #280]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d116      	bne.n	8002378 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800234a:	4b43      	ldr	r3, [pc, #268]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d005      	beq.n	8002362 <HAL_RCC_OscConfig+0x176>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	2b01      	cmp	r3, #1
 800235c:	d001      	beq.n	8002362 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e1c0      	b.n	80026e4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002362:	4b3d      	ldr	r3, [pc, #244]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	4939      	ldr	r1, [pc, #228]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 8002372:	4313      	orrs	r3, r2
 8002374:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002376:	e03a      	b.n	80023ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d020      	beq.n	80023c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002380:	4b36      	ldr	r3, [pc, #216]	; (800245c <HAL_RCC_OscConfig+0x270>)
 8002382:	2201      	movs	r2, #1
 8002384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002386:	f7fe fec3 	bl	8001110 <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800238c:	e008      	b.n	80023a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800238e:	f7fe febf 	bl	8001110 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e1a1      	b.n	80026e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a0:	4b2d      	ldr	r3, [pc, #180]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d0f0      	beq.n	800238e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ac:	4b2a      	ldr	r3, [pc, #168]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	00db      	lsls	r3, r3, #3
 80023ba:	4927      	ldr	r1, [pc, #156]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	600b      	str	r3, [r1, #0]
 80023c0:	e015      	b.n	80023ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023c2:	4b26      	ldr	r3, [pc, #152]	; (800245c <HAL_RCC_OscConfig+0x270>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c8:	f7fe fea2 	bl	8001110 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023d0:	f7fe fe9e 	bl	8001110 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e180      	b.n	80026e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023e2:	4b1d      	ldr	r3, [pc, #116]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1f0      	bne.n	80023d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0308 	and.w	r3, r3, #8
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d03a      	beq.n	8002470 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d019      	beq.n	8002436 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002402:	4b17      	ldr	r3, [pc, #92]	; (8002460 <HAL_RCC_OscConfig+0x274>)
 8002404:	2201      	movs	r2, #1
 8002406:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002408:	f7fe fe82 	bl	8001110 <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002410:	f7fe fe7e 	bl	8001110 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e160      	b.n	80026e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002422:	4b0d      	ldr	r3, [pc, #52]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 8002424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d0f0      	beq.n	8002410 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800242e:	2001      	movs	r0, #1
 8002430:	f000 face 	bl	80029d0 <RCC_Delay>
 8002434:	e01c      	b.n	8002470 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002436:	4b0a      	ldr	r3, [pc, #40]	; (8002460 <HAL_RCC_OscConfig+0x274>)
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800243c:	f7fe fe68 	bl	8001110 <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002442:	e00f      	b.n	8002464 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002444:	f7fe fe64 	bl	8001110 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d908      	bls.n	8002464 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e146      	b.n	80026e4 <HAL_RCC_OscConfig+0x4f8>
 8002456:	bf00      	nop
 8002458:	40021000 	.word	0x40021000
 800245c:	42420000 	.word	0x42420000
 8002460:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002464:	4b92      	ldr	r3, [pc, #584]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 8002466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1e9      	bne.n	8002444 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0304 	and.w	r3, r3, #4
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 80a6 	beq.w	80025ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800247e:	2300      	movs	r3, #0
 8002480:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002482:	4b8b      	ldr	r3, [pc, #556]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10d      	bne.n	80024aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800248e:	4b88      	ldr	r3, [pc, #544]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	4a87      	ldr	r2, [pc, #540]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 8002494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002498:	61d3      	str	r3, [r2, #28]
 800249a:	4b85      	ldr	r3, [pc, #532]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a2:	60bb      	str	r3, [r7, #8]
 80024a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024a6:	2301      	movs	r3, #1
 80024a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024aa:	4b82      	ldr	r3, [pc, #520]	; (80026b4 <HAL_RCC_OscConfig+0x4c8>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d118      	bne.n	80024e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024b6:	4b7f      	ldr	r3, [pc, #508]	; (80026b4 <HAL_RCC_OscConfig+0x4c8>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a7e      	ldr	r2, [pc, #504]	; (80026b4 <HAL_RCC_OscConfig+0x4c8>)
 80024bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024c2:	f7fe fe25 	bl	8001110 <HAL_GetTick>
 80024c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c8:	e008      	b.n	80024dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ca:	f7fe fe21 	bl	8001110 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b64      	cmp	r3, #100	; 0x64
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e103      	b.n	80026e4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024dc:	4b75      	ldr	r3, [pc, #468]	; (80026b4 <HAL_RCC_OscConfig+0x4c8>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d0f0      	beq.n	80024ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d106      	bne.n	80024fe <HAL_RCC_OscConfig+0x312>
 80024f0:	4b6f      	ldr	r3, [pc, #444]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	4a6e      	ldr	r2, [pc, #440]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 80024f6:	f043 0301 	orr.w	r3, r3, #1
 80024fa:	6213      	str	r3, [r2, #32]
 80024fc:	e02d      	b.n	800255a <HAL_RCC_OscConfig+0x36e>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d10c      	bne.n	8002520 <HAL_RCC_OscConfig+0x334>
 8002506:	4b6a      	ldr	r3, [pc, #424]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	4a69      	ldr	r2, [pc, #420]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 800250c:	f023 0301 	bic.w	r3, r3, #1
 8002510:	6213      	str	r3, [r2, #32]
 8002512:	4b67      	ldr	r3, [pc, #412]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	4a66      	ldr	r2, [pc, #408]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 8002518:	f023 0304 	bic.w	r3, r3, #4
 800251c:	6213      	str	r3, [r2, #32]
 800251e:	e01c      	b.n	800255a <HAL_RCC_OscConfig+0x36e>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	2b05      	cmp	r3, #5
 8002526:	d10c      	bne.n	8002542 <HAL_RCC_OscConfig+0x356>
 8002528:	4b61      	ldr	r3, [pc, #388]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	4a60      	ldr	r2, [pc, #384]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 800252e:	f043 0304 	orr.w	r3, r3, #4
 8002532:	6213      	str	r3, [r2, #32]
 8002534:	4b5e      	ldr	r3, [pc, #376]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	4a5d      	ldr	r2, [pc, #372]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 800253a:	f043 0301 	orr.w	r3, r3, #1
 800253e:	6213      	str	r3, [r2, #32]
 8002540:	e00b      	b.n	800255a <HAL_RCC_OscConfig+0x36e>
 8002542:	4b5b      	ldr	r3, [pc, #364]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	4a5a      	ldr	r2, [pc, #360]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 8002548:	f023 0301 	bic.w	r3, r3, #1
 800254c:	6213      	str	r3, [r2, #32]
 800254e:	4b58      	ldr	r3, [pc, #352]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	4a57      	ldr	r2, [pc, #348]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 8002554:	f023 0304 	bic.w	r3, r3, #4
 8002558:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d015      	beq.n	800258e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002562:	f7fe fdd5 	bl	8001110 <HAL_GetTick>
 8002566:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002568:	e00a      	b.n	8002580 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800256a:	f7fe fdd1 	bl	8001110 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	f241 3288 	movw	r2, #5000	; 0x1388
 8002578:	4293      	cmp	r3, r2
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e0b1      	b.n	80026e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002580:	4b4b      	ldr	r3, [pc, #300]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0ee      	beq.n	800256a <HAL_RCC_OscConfig+0x37e>
 800258c:	e014      	b.n	80025b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800258e:	f7fe fdbf 	bl	8001110 <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002594:	e00a      	b.n	80025ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002596:	f7fe fdbb 	bl	8001110 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e09b      	b.n	80026e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ac:	4b40      	ldr	r3, [pc, #256]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1ee      	bne.n	8002596 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025b8:	7dfb      	ldrb	r3, [r7, #23]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d105      	bne.n	80025ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025be:	4b3c      	ldr	r3, [pc, #240]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	4a3b      	ldr	r2, [pc, #236]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 80025c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f000 8087 	beq.w	80026e2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025d4:	4b36      	ldr	r3, [pc, #216]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f003 030c 	and.w	r3, r3, #12
 80025dc:	2b08      	cmp	r3, #8
 80025de:	d061      	beq.n	80026a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	69db      	ldr	r3, [r3, #28]
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d146      	bne.n	8002676 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025e8:	4b33      	ldr	r3, [pc, #204]	; (80026b8 <HAL_RCC_OscConfig+0x4cc>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ee:	f7fe fd8f 	bl	8001110 <HAL_GetTick>
 80025f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025f4:	e008      	b.n	8002608 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f6:	f7fe fd8b 	bl	8001110 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e06d      	b.n	80026e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002608:	4b29      	ldr	r3, [pc, #164]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1f0      	bne.n	80025f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800261c:	d108      	bne.n	8002630 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800261e:	4b24      	ldr	r3, [pc, #144]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	4921      	ldr	r1, [pc, #132]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 800262c:	4313      	orrs	r3, r2
 800262e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002630:	4b1f      	ldr	r3, [pc, #124]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a19      	ldr	r1, [r3, #32]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002640:	430b      	orrs	r3, r1
 8002642:	491b      	ldr	r1, [pc, #108]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 8002644:	4313      	orrs	r3, r2
 8002646:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002648:	4b1b      	ldr	r3, [pc, #108]	; (80026b8 <HAL_RCC_OscConfig+0x4cc>)
 800264a:	2201      	movs	r2, #1
 800264c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800264e:	f7fe fd5f 	bl	8001110 <HAL_GetTick>
 8002652:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002654:	e008      	b.n	8002668 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002656:	f7fe fd5b 	bl	8001110 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e03d      	b.n	80026e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002668:	4b11      	ldr	r3, [pc, #68]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d0f0      	beq.n	8002656 <HAL_RCC_OscConfig+0x46a>
 8002674:	e035      	b.n	80026e2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002676:	4b10      	ldr	r3, [pc, #64]	; (80026b8 <HAL_RCC_OscConfig+0x4cc>)
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267c:	f7fe fd48 	bl	8001110 <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002684:	f7fe fd44 	bl	8001110 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e026      	b.n	80026e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002696:	4b06      	ldr	r3, [pc, #24]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1f0      	bne.n	8002684 <HAL_RCC_OscConfig+0x498>
 80026a2:	e01e      	b.n	80026e2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	69db      	ldr	r3, [r3, #28]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d107      	bne.n	80026bc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e019      	b.n	80026e4 <HAL_RCC_OscConfig+0x4f8>
 80026b0:	40021000 	.word	0x40021000
 80026b4:	40007000 	.word	0x40007000
 80026b8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026bc:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <HAL_RCC_OscConfig+0x500>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d106      	bne.n	80026de <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026da:	429a      	cmp	r2, r3
 80026dc:	d001      	beq.n	80026e2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e000      	b.n	80026e4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3718      	adds	r7, #24
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	40021000 	.word	0x40021000

080026f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d101      	bne.n	8002704 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e0d0      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002704:	4b6a      	ldr	r3, [pc, #424]	; (80028b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	429a      	cmp	r2, r3
 8002710:	d910      	bls.n	8002734 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002712:	4b67      	ldr	r3, [pc, #412]	; (80028b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f023 0207 	bic.w	r2, r3, #7
 800271a:	4965      	ldr	r1, [pc, #404]	; (80028b0 <HAL_RCC_ClockConfig+0x1c0>)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	4313      	orrs	r3, r2
 8002720:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002722:	4b63      	ldr	r3, [pc, #396]	; (80028b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0307 	and.w	r3, r3, #7
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	429a      	cmp	r2, r3
 800272e:	d001      	beq.n	8002734 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e0b8      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d020      	beq.n	8002782 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0304 	and.w	r3, r3, #4
 8002748:	2b00      	cmp	r3, #0
 800274a:	d005      	beq.n	8002758 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800274c:	4b59      	ldr	r3, [pc, #356]	; (80028b4 <HAL_RCC_ClockConfig+0x1c4>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	4a58      	ldr	r2, [pc, #352]	; (80028b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002752:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002756:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0308 	and.w	r3, r3, #8
 8002760:	2b00      	cmp	r3, #0
 8002762:	d005      	beq.n	8002770 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002764:	4b53      	ldr	r3, [pc, #332]	; (80028b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	4a52      	ldr	r2, [pc, #328]	; (80028b4 <HAL_RCC_ClockConfig+0x1c4>)
 800276a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800276e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002770:	4b50      	ldr	r3, [pc, #320]	; (80028b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	494d      	ldr	r1, [pc, #308]	; (80028b4 <HAL_RCC_ClockConfig+0x1c4>)
 800277e:	4313      	orrs	r3, r2
 8002780:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	d040      	beq.n	8002810 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d107      	bne.n	80027a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002796:	4b47      	ldr	r3, [pc, #284]	; (80028b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d115      	bne.n	80027ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e07f      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d107      	bne.n	80027be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ae:	4b41      	ldr	r3, [pc, #260]	; (80028b4 <HAL_RCC_ClockConfig+0x1c4>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d109      	bne.n	80027ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e073      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027be:	4b3d      	ldr	r3, [pc, #244]	; (80028b4 <HAL_RCC_ClockConfig+0x1c4>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e06b      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ce:	4b39      	ldr	r3, [pc, #228]	; (80028b4 <HAL_RCC_ClockConfig+0x1c4>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f023 0203 	bic.w	r2, r3, #3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	4936      	ldr	r1, [pc, #216]	; (80028b4 <HAL_RCC_ClockConfig+0x1c4>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027e0:	f7fe fc96 	bl	8001110 <HAL_GetTick>
 80027e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027e6:	e00a      	b.n	80027fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027e8:	f7fe fc92 	bl	8001110 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e053      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027fe:	4b2d      	ldr	r3, [pc, #180]	; (80028b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f003 020c 	and.w	r2, r3, #12
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	429a      	cmp	r2, r3
 800280e:	d1eb      	bne.n	80027e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002810:	4b27      	ldr	r3, [pc, #156]	; (80028b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0307 	and.w	r3, r3, #7
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	429a      	cmp	r2, r3
 800281c:	d210      	bcs.n	8002840 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800281e:	4b24      	ldr	r3, [pc, #144]	; (80028b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f023 0207 	bic.w	r2, r3, #7
 8002826:	4922      	ldr	r1, [pc, #136]	; (80028b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	4313      	orrs	r3, r2
 800282c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800282e:	4b20      	ldr	r3, [pc, #128]	; (80028b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0307 	and.w	r3, r3, #7
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	429a      	cmp	r2, r3
 800283a:	d001      	beq.n	8002840 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e032      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	2b00      	cmp	r3, #0
 800284a:	d008      	beq.n	800285e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800284c:	4b19      	ldr	r3, [pc, #100]	; (80028b4 <HAL_RCC_ClockConfig+0x1c4>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	4916      	ldr	r1, [pc, #88]	; (80028b4 <HAL_RCC_ClockConfig+0x1c4>)
 800285a:	4313      	orrs	r3, r2
 800285c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0308 	and.w	r3, r3, #8
 8002866:	2b00      	cmp	r3, #0
 8002868:	d009      	beq.n	800287e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800286a:	4b12      	ldr	r3, [pc, #72]	; (80028b4 <HAL_RCC_ClockConfig+0x1c4>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	490e      	ldr	r1, [pc, #56]	; (80028b4 <HAL_RCC_ClockConfig+0x1c4>)
 800287a:	4313      	orrs	r3, r2
 800287c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800287e:	f000 f821 	bl	80028c4 <HAL_RCC_GetSysClockFreq>
 8002882:	4602      	mov	r2, r0
 8002884:	4b0b      	ldr	r3, [pc, #44]	; (80028b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	091b      	lsrs	r3, r3, #4
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	490a      	ldr	r1, [pc, #40]	; (80028b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002890:	5ccb      	ldrb	r3, [r1, r3]
 8002892:	fa22 f303 	lsr.w	r3, r2, r3
 8002896:	4a09      	ldr	r2, [pc, #36]	; (80028bc <HAL_RCC_ClockConfig+0x1cc>)
 8002898:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800289a:	4b09      	ldr	r3, [pc, #36]	; (80028c0 <HAL_RCC_ClockConfig+0x1d0>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f7fe fbf4 	bl	800108c <HAL_InitTick>

  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40022000 	.word	0x40022000
 80028b4:	40021000 	.word	0x40021000
 80028b8:	08002e8c 	.word	0x08002e8c
 80028bc:	20000000 	.word	0x20000000
 80028c0:	20000004 	.word	0x20000004

080028c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b087      	sub	sp, #28
 80028c8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028ca:	2300      	movs	r3, #0
 80028cc:	60fb      	str	r3, [r7, #12]
 80028ce:	2300      	movs	r3, #0
 80028d0:	60bb      	str	r3, [r7, #8]
 80028d2:	2300      	movs	r3, #0
 80028d4:	617b      	str	r3, [r7, #20]
 80028d6:	2300      	movs	r3, #0
 80028d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80028da:	2300      	movs	r3, #0
 80028dc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028de:	4b1e      	ldr	r3, [pc, #120]	; (8002958 <HAL_RCC_GetSysClockFreq+0x94>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f003 030c 	and.w	r3, r3, #12
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	d002      	beq.n	80028f4 <HAL_RCC_GetSysClockFreq+0x30>
 80028ee:	2b08      	cmp	r3, #8
 80028f0:	d003      	beq.n	80028fa <HAL_RCC_GetSysClockFreq+0x36>
 80028f2:	e027      	b.n	8002944 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028f4:	4b19      	ldr	r3, [pc, #100]	; (800295c <HAL_RCC_GetSysClockFreq+0x98>)
 80028f6:	613b      	str	r3, [r7, #16]
      break;
 80028f8:	e027      	b.n	800294a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	0c9b      	lsrs	r3, r3, #18
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	4a17      	ldr	r2, [pc, #92]	; (8002960 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002904:	5cd3      	ldrb	r3, [r2, r3]
 8002906:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d010      	beq.n	8002934 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002912:	4b11      	ldr	r3, [pc, #68]	; (8002958 <HAL_RCC_GetSysClockFreq+0x94>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	0c5b      	lsrs	r3, r3, #17
 8002918:	f003 0301 	and.w	r3, r3, #1
 800291c:	4a11      	ldr	r2, [pc, #68]	; (8002964 <HAL_RCC_GetSysClockFreq+0xa0>)
 800291e:	5cd3      	ldrb	r3, [r2, r3]
 8002920:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a0d      	ldr	r2, [pc, #52]	; (800295c <HAL_RCC_GetSysClockFreq+0x98>)
 8002926:	fb03 f202 	mul.w	r2, r3, r2
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002930:	617b      	str	r3, [r7, #20]
 8002932:	e004      	b.n	800293e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a0c      	ldr	r2, [pc, #48]	; (8002968 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002938:	fb02 f303 	mul.w	r3, r2, r3
 800293c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	613b      	str	r3, [r7, #16]
      break;
 8002942:	e002      	b.n	800294a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002944:	4b05      	ldr	r3, [pc, #20]	; (800295c <HAL_RCC_GetSysClockFreq+0x98>)
 8002946:	613b      	str	r3, [r7, #16]
      break;
 8002948:	bf00      	nop
    }
  }
  return sysclockfreq;
 800294a:	693b      	ldr	r3, [r7, #16]
}
 800294c:	4618      	mov	r0, r3
 800294e:	371c      	adds	r7, #28
 8002950:	46bd      	mov	sp, r7
 8002952:	bc80      	pop	{r7}
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	40021000 	.word	0x40021000
 800295c:	007a1200 	.word	0x007a1200
 8002960:	08002ea4 	.word	0x08002ea4
 8002964:	08002eb4 	.word	0x08002eb4
 8002968:	003d0900 	.word	0x003d0900

0800296c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002970:	4b02      	ldr	r3, [pc, #8]	; (800297c <HAL_RCC_GetHCLKFreq+0x10>)
 8002972:	681b      	ldr	r3, [r3, #0]
}
 8002974:	4618      	mov	r0, r3
 8002976:	46bd      	mov	sp, r7
 8002978:	bc80      	pop	{r7}
 800297a:	4770      	bx	lr
 800297c:	20000000 	.word	0x20000000

08002980 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002984:	f7ff fff2 	bl	800296c <HAL_RCC_GetHCLKFreq>
 8002988:	4602      	mov	r2, r0
 800298a:	4b05      	ldr	r3, [pc, #20]	; (80029a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	0a1b      	lsrs	r3, r3, #8
 8002990:	f003 0307 	and.w	r3, r3, #7
 8002994:	4903      	ldr	r1, [pc, #12]	; (80029a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002996:	5ccb      	ldrb	r3, [r1, r3]
 8002998:	fa22 f303 	lsr.w	r3, r2, r3
}
 800299c:	4618      	mov	r0, r3
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40021000 	.word	0x40021000
 80029a4:	08002e9c 	.word	0x08002e9c

080029a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029ac:	f7ff ffde 	bl	800296c <HAL_RCC_GetHCLKFreq>
 80029b0:	4602      	mov	r2, r0
 80029b2:	4b05      	ldr	r3, [pc, #20]	; (80029c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	0adb      	lsrs	r3, r3, #11
 80029b8:	f003 0307 	and.w	r3, r3, #7
 80029bc:	4903      	ldr	r1, [pc, #12]	; (80029cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80029be:	5ccb      	ldrb	r3, [r1, r3]
 80029c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	40021000 	.word	0x40021000
 80029cc:	08002e9c 	.word	0x08002e9c

080029d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029d8:	4b0a      	ldr	r3, [pc, #40]	; (8002a04 <RCC_Delay+0x34>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a0a      	ldr	r2, [pc, #40]	; (8002a08 <RCC_Delay+0x38>)
 80029de:	fba2 2303 	umull	r2, r3, r2, r3
 80029e2:	0a5b      	lsrs	r3, r3, #9
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	fb02 f303 	mul.w	r3, r2, r3
 80029ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029ec:	bf00      	nop
  }
  while (Delay --);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	1e5a      	subs	r2, r3, #1
 80029f2:	60fa      	str	r2, [r7, #12]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1f9      	bne.n	80029ec <RCC_Delay+0x1c>
}
 80029f8:	bf00      	nop
 80029fa:	bf00      	nop
 80029fc:	3714      	adds	r7, #20
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bc80      	pop	{r7}
 8002a02:	4770      	bx	lr
 8002a04:	20000000 	.word	0x20000000
 8002a08:	10624dd3 	.word	0x10624dd3

08002a0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e042      	b.n	8002aa4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d106      	bne.n	8002a38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f7fe fa16 	bl	8000e64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2224      	movs	r2, #36	; 0x24
 8002a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68da      	ldr	r2, [r3, #12]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 f82b 	bl	8002aac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	691a      	ldr	r2, [r3, #16]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	695a      	ldr	r2, [r3, #20]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68da      	ldr	r2, [r3, #12]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2220      	movs	r2, #32
 8002a98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3708      	adds	r7, #8
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	68da      	ldr	r2, [r3, #12]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	689a      	ldr	r2, [r3, #8]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	695b      	ldr	r3, [r3, #20]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002ae6:	f023 030c 	bic.w	r3, r3, #12
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	6812      	ldr	r2, [r2, #0]
 8002aee:	68b9      	ldr	r1, [r7, #8]
 8002af0:	430b      	orrs	r3, r1
 8002af2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	699a      	ldr	r2, [r3, #24]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	430a      	orrs	r2, r1
 8002b08:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a2c      	ldr	r2, [pc, #176]	; (8002bc0 <UART_SetConfig+0x114>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d103      	bne.n	8002b1c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002b14:	f7ff ff48 	bl	80029a8 <HAL_RCC_GetPCLK2Freq>
 8002b18:	60f8      	str	r0, [r7, #12]
 8002b1a:	e002      	b.n	8002b22 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002b1c:	f7ff ff30 	bl	8002980 <HAL_RCC_GetPCLK1Freq>
 8002b20:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	4613      	mov	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	4413      	add	r3, r2
 8002b2a:	009a      	lsls	r2, r3, #2
 8002b2c:	441a      	add	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b38:	4a22      	ldr	r2, [pc, #136]	; (8002bc4 <UART_SetConfig+0x118>)
 8002b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3e:	095b      	lsrs	r3, r3, #5
 8002b40:	0119      	lsls	r1, r3, #4
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	4613      	mov	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4413      	add	r3, r2
 8002b4a:	009a      	lsls	r2, r3, #2
 8002b4c:	441a      	add	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b58:	4b1a      	ldr	r3, [pc, #104]	; (8002bc4 <UART_SetConfig+0x118>)
 8002b5a:	fba3 0302 	umull	r0, r3, r3, r2
 8002b5e:	095b      	lsrs	r3, r3, #5
 8002b60:	2064      	movs	r0, #100	; 0x64
 8002b62:	fb00 f303 	mul.w	r3, r0, r3
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	011b      	lsls	r3, r3, #4
 8002b6a:	3332      	adds	r3, #50	; 0x32
 8002b6c:	4a15      	ldr	r2, [pc, #84]	; (8002bc4 <UART_SetConfig+0x118>)
 8002b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b72:	095b      	lsrs	r3, r3, #5
 8002b74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b78:	4419      	add	r1, r3
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4413      	add	r3, r2
 8002b82:	009a      	lsls	r2, r3, #2
 8002b84:	441a      	add	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b90:	4b0c      	ldr	r3, [pc, #48]	; (8002bc4 <UART_SetConfig+0x118>)
 8002b92:	fba3 0302 	umull	r0, r3, r3, r2
 8002b96:	095b      	lsrs	r3, r3, #5
 8002b98:	2064      	movs	r0, #100	; 0x64
 8002b9a:	fb00 f303 	mul.w	r3, r0, r3
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	011b      	lsls	r3, r3, #4
 8002ba2:	3332      	adds	r3, #50	; 0x32
 8002ba4:	4a07      	ldr	r2, [pc, #28]	; (8002bc4 <UART_SetConfig+0x118>)
 8002ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8002baa:	095b      	lsrs	r3, r3, #5
 8002bac:	f003 020f 	and.w	r2, r3, #15
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	440a      	add	r2, r1
 8002bb6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002bb8:	bf00      	nop
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40013800 	.word	0x40013800
 8002bc4:	51eb851f 	.word	0x51eb851f

08002bc8 <malloc>:
 8002bc8:	4b02      	ldr	r3, [pc, #8]	; (8002bd4 <malloc+0xc>)
 8002bca:	4601      	mov	r1, r0
 8002bcc:	6818      	ldr	r0, [r3, #0]
 8002bce:	f000 b82b 	b.w	8002c28 <_malloc_r>
 8002bd2:	bf00      	nop
 8002bd4:	20000058 	.word	0x20000058

08002bd8 <free>:
 8002bd8:	4b02      	ldr	r3, [pc, #8]	; (8002be4 <free+0xc>)
 8002bda:	4601      	mov	r1, r0
 8002bdc:	6818      	ldr	r0, [r3, #0]
 8002bde:	f000 b901 	b.w	8002de4 <_free_r>
 8002be2:	bf00      	nop
 8002be4:	20000058 	.word	0x20000058

08002be8 <sbrk_aligned>:
 8002be8:	b570      	push	{r4, r5, r6, lr}
 8002bea:	4e0e      	ldr	r6, [pc, #56]	; (8002c24 <sbrk_aligned+0x3c>)
 8002bec:	460c      	mov	r4, r1
 8002bee:	6831      	ldr	r1, [r6, #0]
 8002bf0:	4605      	mov	r5, r0
 8002bf2:	b911      	cbnz	r1, 8002bfa <sbrk_aligned+0x12>
 8002bf4:	f000 f8ac 	bl	8002d50 <_sbrk_r>
 8002bf8:	6030      	str	r0, [r6, #0]
 8002bfa:	4621      	mov	r1, r4
 8002bfc:	4628      	mov	r0, r5
 8002bfe:	f000 f8a7 	bl	8002d50 <_sbrk_r>
 8002c02:	1c43      	adds	r3, r0, #1
 8002c04:	d00a      	beq.n	8002c1c <sbrk_aligned+0x34>
 8002c06:	1cc4      	adds	r4, r0, #3
 8002c08:	f024 0403 	bic.w	r4, r4, #3
 8002c0c:	42a0      	cmp	r0, r4
 8002c0e:	d007      	beq.n	8002c20 <sbrk_aligned+0x38>
 8002c10:	1a21      	subs	r1, r4, r0
 8002c12:	4628      	mov	r0, r5
 8002c14:	f000 f89c 	bl	8002d50 <_sbrk_r>
 8002c18:	3001      	adds	r0, #1
 8002c1a:	d101      	bne.n	8002c20 <sbrk_aligned+0x38>
 8002c1c:	f04f 34ff 	mov.w	r4, #4294967295
 8002c20:	4620      	mov	r0, r4
 8002c22:	bd70      	pop	{r4, r5, r6, pc}
 8002c24:	200000f4 	.word	0x200000f4

08002c28 <_malloc_r>:
 8002c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c2c:	1ccd      	adds	r5, r1, #3
 8002c2e:	f025 0503 	bic.w	r5, r5, #3
 8002c32:	3508      	adds	r5, #8
 8002c34:	2d0c      	cmp	r5, #12
 8002c36:	bf38      	it	cc
 8002c38:	250c      	movcc	r5, #12
 8002c3a:	2d00      	cmp	r5, #0
 8002c3c:	4607      	mov	r7, r0
 8002c3e:	db01      	blt.n	8002c44 <_malloc_r+0x1c>
 8002c40:	42a9      	cmp	r1, r5
 8002c42:	d905      	bls.n	8002c50 <_malloc_r+0x28>
 8002c44:	230c      	movs	r3, #12
 8002c46:	2600      	movs	r6, #0
 8002c48:	603b      	str	r3, [r7, #0]
 8002c4a:	4630      	mov	r0, r6
 8002c4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c50:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002d24 <_malloc_r+0xfc>
 8002c54:	f000 f868 	bl	8002d28 <__malloc_lock>
 8002c58:	f8d8 3000 	ldr.w	r3, [r8]
 8002c5c:	461c      	mov	r4, r3
 8002c5e:	bb5c      	cbnz	r4, 8002cb8 <_malloc_r+0x90>
 8002c60:	4629      	mov	r1, r5
 8002c62:	4638      	mov	r0, r7
 8002c64:	f7ff ffc0 	bl	8002be8 <sbrk_aligned>
 8002c68:	1c43      	adds	r3, r0, #1
 8002c6a:	4604      	mov	r4, r0
 8002c6c:	d155      	bne.n	8002d1a <_malloc_r+0xf2>
 8002c6e:	f8d8 4000 	ldr.w	r4, [r8]
 8002c72:	4626      	mov	r6, r4
 8002c74:	2e00      	cmp	r6, #0
 8002c76:	d145      	bne.n	8002d04 <_malloc_r+0xdc>
 8002c78:	2c00      	cmp	r4, #0
 8002c7a:	d048      	beq.n	8002d0e <_malloc_r+0xe6>
 8002c7c:	6823      	ldr	r3, [r4, #0]
 8002c7e:	4631      	mov	r1, r6
 8002c80:	4638      	mov	r0, r7
 8002c82:	eb04 0903 	add.w	r9, r4, r3
 8002c86:	f000 f863 	bl	8002d50 <_sbrk_r>
 8002c8a:	4581      	cmp	r9, r0
 8002c8c:	d13f      	bne.n	8002d0e <_malloc_r+0xe6>
 8002c8e:	6821      	ldr	r1, [r4, #0]
 8002c90:	4638      	mov	r0, r7
 8002c92:	1a6d      	subs	r5, r5, r1
 8002c94:	4629      	mov	r1, r5
 8002c96:	f7ff ffa7 	bl	8002be8 <sbrk_aligned>
 8002c9a:	3001      	adds	r0, #1
 8002c9c:	d037      	beq.n	8002d0e <_malloc_r+0xe6>
 8002c9e:	6823      	ldr	r3, [r4, #0]
 8002ca0:	442b      	add	r3, r5
 8002ca2:	6023      	str	r3, [r4, #0]
 8002ca4:	f8d8 3000 	ldr.w	r3, [r8]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d038      	beq.n	8002d1e <_malloc_r+0xf6>
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	42a2      	cmp	r2, r4
 8002cb0:	d12b      	bne.n	8002d0a <_malloc_r+0xe2>
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	605a      	str	r2, [r3, #4]
 8002cb6:	e00f      	b.n	8002cd8 <_malloc_r+0xb0>
 8002cb8:	6822      	ldr	r2, [r4, #0]
 8002cba:	1b52      	subs	r2, r2, r5
 8002cbc:	d41f      	bmi.n	8002cfe <_malloc_r+0xd6>
 8002cbe:	2a0b      	cmp	r2, #11
 8002cc0:	d917      	bls.n	8002cf2 <_malloc_r+0xca>
 8002cc2:	1961      	adds	r1, r4, r5
 8002cc4:	42a3      	cmp	r3, r4
 8002cc6:	6025      	str	r5, [r4, #0]
 8002cc8:	bf18      	it	ne
 8002cca:	6059      	strne	r1, [r3, #4]
 8002ccc:	6863      	ldr	r3, [r4, #4]
 8002cce:	bf08      	it	eq
 8002cd0:	f8c8 1000 	streq.w	r1, [r8]
 8002cd4:	5162      	str	r2, [r4, r5]
 8002cd6:	604b      	str	r3, [r1, #4]
 8002cd8:	4638      	mov	r0, r7
 8002cda:	f104 060b 	add.w	r6, r4, #11
 8002cde:	f000 f829 	bl	8002d34 <__malloc_unlock>
 8002ce2:	f026 0607 	bic.w	r6, r6, #7
 8002ce6:	1d23      	adds	r3, r4, #4
 8002ce8:	1af2      	subs	r2, r6, r3
 8002cea:	d0ae      	beq.n	8002c4a <_malloc_r+0x22>
 8002cec:	1b9b      	subs	r3, r3, r6
 8002cee:	50a3      	str	r3, [r4, r2]
 8002cf0:	e7ab      	b.n	8002c4a <_malloc_r+0x22>
 8002cf2:	42a3      	cmp	r3, r4
 8002cf4:	6862      	ldr	r2, [r4, #4]
 8002cf6:	d1dd      	bne.n	8002cb4 <_malloc_r+0x8c>
 8002cf8:	f8c8 2000 	str.w	r2, [r8]
 8002cfc:	e7ec      	b.n	8002cd8 <_malloc_r+0xb0>
 8002cfe:	4623      	mov	r3, r4
 8002d00:	6864      	ldr	r4, [r4, #4]
 8002d02:	e7ac      	b.n	8002c5e <_malloc_r+0x36>
 8002d04:	4634      	mov	r4, r6
 8002d06:	6876      	ldr	r6, [r6, #4]
 8002d08:	e7b4      	b.n	8002c74 <_malloc_r+0x4c>
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	e7cc      	b.n	8002ca8 <_malloc_r+0x80>
 8002d0e:	230c      	movs	r3, #12
 8002d10:	4638      	mov	r0, r7
 8002d12:	603b      	str	r3, [r7, #0]
 8002d14:	f000 f80e 	bl	8002d34 <__malloc_unlock>
 8002d18:	e797      	b.n	8002c4a <_malloc_r+0x22>
 8002d1a:	6025      	str	r5, [r4, #0]
 8002d1c:	e7dc      	b.n	8002cd8 <_malloc_r+0xb0>
 8002d1e:	605b      	str	r3, [r3, #4]
 8002d20:	deff      	udf	#255	; 0xff
 8002d22:	bf00      	nop
 8002d24:	200000f0 	.word	0x200000f0

08002d28 <__malloc_lock>:
 8002d28:	4801      	ldr	r0, [pc, #4]	; (8002d30 <__malloc_lock+0x8>)
 8002d2a:	f000 b84b 	b.w	8002dc4 <__retarget_lock_acquire_recursive>
 8002d2e:	bf00      	nop
 8002d30:	20000234 	.word	0x20000234

08002d34 <__malloc_unlock>:
 8002d34:	4801      	ldr	r0, [pc, #4]	; (8002d3c <__malloc_unlock+0x8>)
 8002d36:	f000 b846 	b.w	8002dc6 <__retarget_lock_release_recursive>
 8002d3a:	bf00      	nop
 8002d3c:	20000234 	.word	0x20000234

08002d40 <memset>:
 8002d40:	4603      	mov	r3, r0
 8002d42:	4402      	add	r2, r0
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d100      	bne.n	8002d4a <memset+0xa>
 8002d48:	4770      	bx	lr
 8002d4a:	f803 1b01 	strb.w	r1, [r3], #1
 8002d4e:	e7f9      	b.n	8002d44 <memset+0x4>

08002d50 <_sbrk_r>:
 8002d50:	b538      	push	{r3, r4, r5, lr}
 8002d52:	2300      	movs	r3, #0
 8002d54:	4d05      	ldr	r5, [pc, #20]	; (8002d6c <_sbrk_r+0x1c>)
 8002d56:	4604      	mov	r4, r0
 8002d58:	4608      	mov	r0, r1
 8002d5a:	602b      	str	r3, [r5, #0]
 8002d5c:	f7fe f91e 	bl	8000f9c <_sbrk>
 8002d60:	1c43      	adds	r3, r0, #1
 8002d62:	d102      	bne.n	8002d6a <_sbrk_r+0x1a>
 8002d64:	682b      	ldr	r3, [r5, #0]
 8002d66:	b103      	cbz	r3, 8002d6a <_sbrk_r+0x1a>
 8002d68:	6023      	str	r3, [r4, #0]
 8002d6a:	bd38      	pop	{r3, r4, r5, pc}
 8002d6c:	20000230 	.word	0x20000230

08002d70 <__errno>:
 8002d70:	4b01      	ldr	r3, [pc, #4]	; (8002d78 <__errno+0x8>)
 8002d72:	6818      	ldr	r0, [r3, #0]
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	20000058 	.word	0x20000058

08002d7c <__libc_init_array>:
 8002d7c:	b570      	push	{r4, r5, r6, lr}
 8002d7e:	2600      	movs	r6, #0
 8002d80:	4d0c      	ldr	r5, [pc, #48]	; (8002db4 <__libc_init_array+0x38>)
 8002d82:	4c0d      	ldr	r4, [pc, #52]	; (8002db8 <__libc_init_array+0x3c>)
 8002d84:	1b64      	subs	r4, r4, r5
 8002d86:	10a4      	asrs	r4, r4, #2
 8002d88:	42a6      	cmp	r6, r4
 8002d8a:	d109      	bne.n	8002da0 <__libc_init_array+0x24>
 8002d8c:	f000 f872 	bl	8002e74 <_init>
 8002d90:	2600      	movs	r6, #0
 8002d92:	4d0a      	ldr	r5, [pc, #40]	; (8002dbc <__libc_init_array+0x40>)
 8002d94:	4c0a      	ldr	r4, [pc, #40]	; (8002dc0 <__libc_init_array+0x44>)
 8002d96:	1b64      	subs	r4, r4, r5
 8002d98:	10a4      	asrs	r4, r4, #2
 8002d9a:	42a6      	cmp	r6, r4
 8002d9c:	d105      	bne.n	8002daa <__libc_init_array+0x2e>
 8002d9e:	bd70      	pop	{r4, r5, r6, pc}
 8002da0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002da4:	4798      	blx	r3
 8002da6:	3601      	adds	r6, #1
 8002da8:	e7ee      	b.n	8002d88 <__libc_init_array+0xc>
 8002daa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dae:	4798      	blx	r3
 8002db0:	3601      	adds	r6, #1
 8002db2:	e7f2      	b.n	8002d9a <__libc_init_array+0x1e>
 8002db4:	08002eb8 	.word	0x08002eb8
 8002db8:	08002eb8 	.word	0x08002eb8
 8002dbc:	08002eb8 	.word	0x08002eb8
 8002dc0:	08002ebc 	.word	0x08002ebc

08002dc4 <__retarget_lock_acquire_recursive>:
 8002dc4:	4770      	bx	lr

08002dc6 <__retarget_lock_release_recursive>:
 8002dc6:	4770      	bx	lr

08002dc8 <memcpy>:
 8002dc8:	440a      	add	r2, r1
 8002dca:	4291      	cmp	r1, r2
 8002dcc:	f100 33ff 	add.w	r3, r0, #4294967295
 8002dd0:	d100      	bne.n	8002dd4 <memcpy+0xc>
 8002dd2:	4770      	bx	lr
 8002dd4:	b510      	push	{r4, lr}
 8002dd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002dda:	4291      	cmp	r1, r2
 8002ddc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002de0:	d1f9      	bne.n	8002dd6 <memcpy+0xe>
 8002de2:	bd10      	pop	{r4, pc}

08002de4 <_free_r>:
 8002de4:	b538      	push	{r3, r4, r5, lr}
 8002de6:	4605      	mov	r5, r0
 8002de8:	2900      	cmp	r1, #0
 8002dea:	d040      	beq.n	8002e6e <_free_r+0x8a>
 8002dec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002df0:	1f0c      	subs	r4, r1, #4
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	bfb8      	it	lt
 8002df6:	18e4      	addlt	r4, r4, r3
 8002df8:	f7ff ff96 	bl	8002d28 <__malloc_lock>
 8002dfc:	4a1c      	ldr	r2, [pc, #112]	; (8002e70 <_free_r+0x8c>)
 8002dfe:	6813      	ldr	r3, [r2, #0]
 8002e00:	b933      	cbnz	r3, 8002e10 <_free_r+0x2c>
 8002e02:	6063      	str	r3, [r4, #4]
 8002e04:	6014      	str	r4, [r2, #0]
 8002e06:	4628      	mov	r0, r5
 8002e08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e0c:	f7ff bf92 	b.w	8002d34 <__malloc_unlock>
 8002e10:	42a3      	cmp	r3, r4
 8002e12:	d908      	bls.n	8002e26 <_free_r+0x42>
 8002e14:	6820      	ldr	r0, [r4, #0]
 8002e16:	1821      	adds	r1, r4, r0
 8002e18:	428b      	cmp	r3, r1
 8002e1a:	bf01      	itttt	eq
 8002e1c:	6819      	ldreq	r1, [r3, #0]
 8002e1e:	685b      	ldreq	r3, [r3, #4]
 8002e20:	1809      	addeq	r1, r1, r0
 8002e22:	6021      	streq	r1, [r4, #0]
 8002e24:	e7ed      	b.n	8002e02 <_free_r+0x1e>
 8002e26:	461a      	mov	r2, r3
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	b10b      	cbz	r3, 8002e30 <_free_r+0x4c>
 8002e2c:	42a3      	cmp	r3, r4
 8002e2e:	d9fa      	bls.n	8002e26 <_free_r+0x42>
 8002e30:	6811      	ldr	r1, [r2, #0]
 8002e32:	1850      	adds	r0, r2, r1
 8002e34:	42a0      	cmp	r0, r4
 8002e36:	d10b      	bne.n	8002e50 <_free_r+0x6c>
 8002e38:	6820      	ldr	r0, [r4, #0]
 8002e3a:	4401      	add	r1, r0
 8002e3c:	1850      	adds	r0, r2, r1
 8002e3e:	4283      	cmp	r3, r0
 8002e40:	6011      	str	r1, [r2, #0]
 8002e42:	d1e0      	bne.n	8002e06 <_free_r+0x22>
 8002e44:	6818      	ldr	r0, [r3, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	4408      	add	r0, r1
 8002e4a:	6010      	str	r0, [r2, #0]
 8002e4c:	6053      	str	r3, [r2, #4]
 8002e4e:	e7da      	b.n	8002e06 <_free_r+0x22>
 8002e50:	d902      	bls.n	8002e58 <_free_r+0x74>
 8002e52:	230c      	movs	r3, #12
 8002e54:	602b      	str	r3, [r5, #0]
 8002e56:	e7d6      	b.n	8002e06 <_free_r+0x22>
 8002e58:	6820      	ldr	r0, [r4, #0]
 8002e5a:	1821      	adds	r1, r4, r0
 8002e5c:	428b      	cmp	r3, r1
 8002e5e:	bf01      	itttt	eq
 8002e60:	6819      	ldreq	r1, [r3, #0]
 8002e62:	685b      	ldreq	r3, [r3, #4]
 8002e64:	1809      	addeq	r1, r1, r0
 8002e66:	6021      	streq	r1, [r4, #0]
 8002e68:	6063      	str	r3, [r4, #4]
 8002e6a:	6054      	str	r4, [r2, #4]
 8002e6c:	e7cb      	b.n	8002e06 <_free_r+0x22>
 8002e6e:	bd38      	pop	{r3, r4, r5, pc}
 8002e70:	200000f0 	.word	0x200000f0

08002e74 <_init>:
 8002e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e76:	bf00      	nop
 8002e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e7a:	bc08      	pop	{r3}
 8002e7c:	469e      	mov	lr, r3
 8002e7e:	4770      	bx	lr

08002e80 <_fini>:
 8002e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e82:	bf00      	nop
 8002e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e86:	bc08      	pop	{r3}
 8002e88:	469e      	mov	lr, r3
 8002e8a:	4770      	bx	lr
