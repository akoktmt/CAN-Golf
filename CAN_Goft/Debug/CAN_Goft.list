
CAN_Goft.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d14  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002e20  08002e20  00012e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e4c  08002e4c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08002e4c  08002e4c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e4c  08002e4c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e4c  08002e4c  00012e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e50  08002e50  00012e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002e54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  2000005c  08002eb0  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  08002eb0  00020238  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009c37  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c8e  00000000  00000000  00029cff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000840  00000000  00000000  0002b990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000641  00000000  00000000  0002c1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000175ac  00000000  00000000  0002c811  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a6de  00000000  00000000  00043dbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008497d  00000000  00000000  0004e49b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000236c  00000000  00000000  000d2e18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000d5184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e08 	.word	0x08002e08

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08002e08 	.word	0x08002e08

0800014c <CANBufferHandleStruct_Init>:
 *      Author: win 10
 */
#include <CAN_OSI.h>
#include <string.h>
#include "CAN_Flag.h"
void CANBufferHandleStruct_Init(CANBufferHandleStruct *Buffer) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b096      	sub	sp, #88	; 0x58
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	NodeBufferHandle defaultNodeHandle = {0};
 8000154:	f107 030c 	add.w	r3, r7, #12
 8000158:	2247      	movs	r2, #71	; 0x47
 800015a:	2100      	movs	r1, #0
 800015c:	4618      	mov	r0, r3
 800015e:	f002 fdb9 	bl	8002cd4 <memset>
	Buffer->Buffer_Index = 0;
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2200      	movs	r2, #0
 8000166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	Buffer->SenderID = 0;
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	2200      	movs	r2, #0
 800016e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	Buffer->RecvID = 0;
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	2200      	movs	r2, #0
 8000176:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	Buffer->FrameType_Index = SET_UP_FRAME;
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	2200      	movs	r2, #0
 800017e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	Buffer->PacketDataLength = 0;
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	2200      	movs	r2, #0
 8000186:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	Buffer->CRCValue = 0;
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2200      	movs	r2, #0
 800018e:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	Buffer->NumberOfFrame=0;
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	2200      	movs	r2, #0
 8000196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	memset(Buffer->NetworkBuffer, 0, sizeof(Buffer->NetworkBuffer));
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	2240      	movs	r2, #64	; 0x40
 800019e:	2100      	movs	r1, #0
 80001a0:	4618      	mov	r0, r3
 80001a2:	f002 fd97 	bl	8002cd4 <memset>
	memset(Buffer->Buffer, 0x55, sizeof(Buffer->Buffer));
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	3348      	adds	r3, #72	; 0x48
 80001aa:	2240      	movs	r2, #64	; 0x40
 80001ac:	2155      	movs	r1, #85	; 0x55
 80001ae:	4618      	mov	r0, r3
 80001b0:	f002 fd90 	bl	8002cd4 <memset>
	memset(Buffer->StoreData, 0, sizeof(Buffer->StoreData));
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	3388      	adds	r3, #136	; 0x88
 80001b8:	2240      	movs	r2, #64	; 0x40
 80001ba:	2100      	movs	r1, #0
 80001bc:	4618      	mov	r0, r3
 80001be:	f002 fd89 	bl	8002cd4 <memset>
	for (int i = 0; i < 16; i++) {
 80001c2:	2300      	movs	r3, #0
 80001c4:	657b      	str	r3, [r7, #84]	; 0x54
 80001c6:	e012      	b.n	80001ee <CANBufferHandleStruct_Init+0xa2>
		Buffer->NodeHandle[i] = defaultNodeHandle;
 80001c8:	6879      	ldr	r1, [r7, #4]
 80001ca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80001cc:	4613      	mov	r3, r2
 80001ce:	00db      	lsls	r3, r3, #3
 80001d0:	4413      	add	r3, r2
 80001d2:	00db      	lsls	r3, r3, #3
 80001d4:	1a9b      	subs	r3, r3, r2
 80001d6:	440b      	add	r3, r1
 80001d8:	33c8      	adds	r3, #200	; 0xc8
 80001da:	3302      	adds	r3, #2
 80001dc:	f107 010c 	add.w	r1, r7, #12
 80001e0:	2247      	movs	r2, #71	; 0x47
 80001e2:	4618      	mov	r0, r3
 80001e4:	f002 fdba 	bl	8002d5c <memcpy>
	for (int i = 0; i < 16; i++) {
 80001e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80001ea:	3301      	adds	r3, #1
 80001ec:	657b      	str	r3, [r7, #84]	; 0x54
 80001ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80001f0:	2b0f      	cmp	r3, #15
 80001f2:	dde9      	ble.n	80001c8 <CANBufferHandleStruct_Init+0x7c>
	}
}
 80001f4:	bf00      	nop
 80001f6:	bf00      	nop
 80001f8:	3758      	adds	r7, #88	; 0x58
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bd80      	pop	{r7, pc}

080001fe <FlagsFrameHandle_Init>:
void FlagsFrameHandle_Init(FlagFrameHandle *FlagInit) {
 80001fe:	b4b0      	push	{r4, r5, r7}
 8000200:	b089      	sub	sp, #36	; 0x24
 8000202:	af00      	add	r7, sp, #0
 8000204:	6078      	str	r0, [r7, #4]
	FlagIdHandle DefaultFlagID= {0};
 8000206:	f107 0308 	add.w	r3, r7, #8
 800020a:	2200      	movs	r2, #0
 800020c:	601a      	str	r2, [r3, #0]
 800020e:	605a      	str	r2, [r3, #4]
 8000210:	609a      	str	r2, [r3, #8]
 8000212:	60da      	str	r2, [r3, #12]
 8000214:	741a      	strb	r2, [r3, #16]
	FlagInit->FrameBits.Flag_Frame_0 = 0;
 8000216:	687a      	ldr	r2, [r7, #4]
 8000218:	f892 3110 	ldrb.w	r3, [r2, #272]	; 0x110
 800021c:	f36f 0300 	bfc	r3, #0, #1
 8000220:	f882 3110 	strb.w	r3, [r2, #272]	; 0x110
	FlagInit->FrameBits.Flag_Frame_1 = 0;
 8000224:	687a      	ldr	r2, [r7, #4]
 8000226:	f892 3110 	ldrb.w	r3, [r2, #272]	; 0x110
 800022a:	f36f 0341 	bfc	r3, #1, #1
 800022e:	f882 3110 	strb.w	r3, [r2, #272]	; 0x110
	FlagInit->FrameBits.Flag_Frame_2 = 0;
 8000232:	687a      	ldr	r2, [r7, #4]
 8000234:	f892 3110 	ldrb.w	r3, [r2, #272]	; 0x110
 8000238:	f36f 0382 	bfc	r3, #2, #1
 800023c:	f882 3110 	strb.w	r3, [r2, #272]	; 0x110
	FlagInit->FrameBits.Flag_Frame_3 = 0;
 8000240:	687a      	ldr	r2, [r7, #4]
 8000242:	f892 3110 	ldrb.w	r3, [r2, #272]	; 0x110
 8000246:	f36f 03c3 	bfc	r3, #3, #1
 800024a:	f882 3110 	strb.w	r3, [r2, #272]	; 0x110
	FlagInit->FrameBits.Flag_Frame_4 = 0;
 800024e:	687a      	ldr	r2, [r7, #4]
 8000250:	f892 3110 	ldrb.w	r3, [r2, #272]	; 0x110
 8000254:	f36f 1304 	bfc	r3, #4, #1
 8000258:	f882 3110 	strb.w	r3, [r2, #272]	; 0x110
	FlagInit->FrameBits.Flag_Frame_5 = 0;
 800025c:	687a      	ldr	r2, [r7, #4]
 800025e:	f892 3110 	ldrb.w	r3, [r2, #272]	; 0x110
 8000262:	f36f 1345 	bfc	r3, #5, #1
 8000266:	f882 3110 	strb.w	r3, [r2, #272]	; 0x110
	FlagInit->FrameBits.Flag_Frame_6 = 0;
 800026a:	687a      	ldr	r2, [r7, #4]
 800026c:	f892 3110 	ldrb.w	r3, [r2, #272]	; 0x110
 8000270:	f36f 1386 	bfc	r3, #6, #1
 8000274:	f882 3110 	strb.w	r3, [r2, #272]	; 0x110
	FlagInit->FrameBits.Flag_Frame_7 = 0;
 8000278:	687a      	ldr	r2, [r7, #4]
 800027a:	f892 3110 	ldrb.w	r3, [r2, #272]	; 0x110
 800027e:	f36f 13c7 	bfc	r3, #7, #1
 8000282:	f882 3110 	strb.w	r3, [r2, #272]	; 0x110
	for(int i=0; i<16;i++)
 8000286:	2300      	movs	r3, #0
 8000288:	61fb      	str	r3, [r7, #28]
 800028a:	e012      	b.n	80002b2 <FlagsFrameHandle_Init+0xb4>
	{
		FlagInit->FlagID[i]=DefaultFlagID;
 800028c:	6879      	ldr	r1, [r7, #4]
 800028e:	69fa      	ldr	r2, [r7, #28]
 8000290:	4613      	mov	r3, r2
 8000292:	011b      	lsls	r3, r3, #4
 8000294:	4413      	add	r3, r2
 8000296:	440b      	add	r3, r1
 8000298:	461d      	mov	r5, r3
 800029a:	f107 0408 	add.w	r4, r7, #8
 800029e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80002a0:	6028      	str	r0, [r5, #0]
 80002a2:	6069      	str	r1, [r5, #4]
 80002a4:	60aa      	str	r2, [r5, #8]
 80002a6:	60eb      	str	r3, [r5, #12]
 80002a8:	7823      	ldrb	r3, [r4, #0]
 80002aa:	742b      	strb	r3, [r5, #16]
	for(int i=0; i<16;i++)
 80002ac:	69fb      	ldr	r3, [r7, #28]
 80002ae:	3301      	adds	r3, #1
 80002b0:	61fb      	str	r3, [r7, #28]
 80002b2:	69fb      	ldr	r3, [r7, #28]
 80002b4:	2b0f      	cmp	r3, #15
 80002b6:	dde9      	ble.n	800028c <FlagsFrameHandle_Init+0x8e>
	}
}
 80002b8:	bf00      	nop
 80002ba:	bf00      	nop
 80002bc:	3724      	adds	r7, #36	; 0x24
 80002be:	46bd      	mov	sp, r7
 80002c0:	bcb0      	pop	{r4, r5, r7}
 80002c2:	4770      	bx	lr

080002c4 <CAN_ProcessRxBuffer>:
	return HAL_OK;
}

void CAN_ProcessRxBuffer(FlagFrameHandle *FlagHandle, uint8_t ID,
		CANBufferHandleStruct *RxBuffer, uint8_t *DataPhysical,
		FlagRecNotification *FlagRecHandle) {
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b088      	sub	sp, #32
 80002c8:	af02      	add	r7, sp, #8
 80002ca:	60f8      	str	r0, [r7, #12]
 80002cc:	607a      	str	r2, [r7, #4]
 80002ce:	603b      	str	r3, [r7, #0]
 80002d0:	460b      	mov	r3, r1
 80002d2:	72fb      	strb	r3, [r7, #11]
	uint8_t FrameType = 0;
 80002d4:	2300      	movs	r3, #0
 80002d6:	75fb      	strb	r3, [r7, #23]
	RxBuffer->NodeHandle[ID].NodeIndex++;
 80002d8:	7afa      	ldrb	r2, [r7, #11]
 80002da:	6879      	ldr	r1, [r7, #4]
 80002dc:	4613      	mov	r3, r2
 80002de:	00db      	lsls	r3, r3, #3
 80002e0:	4413      	add	r3, r2
 80002e2:	00db      	lsls	r3, r3, #3
 80002e4:	1a9b      	subs	r3, r3, r2
 80002e6:	440b      	add	r3, r1
 80002e8:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	3301      	adds	r3, #1
 80002f0:	b2d8      	uxtb	r0, r3
 80002f2:	6879      	ldr	r1, [r7, #4]
 80002f4:	4613      	mov	r3, r2
 80002f6:	00db      	lsls	r3, r3, #3
 80002f8:	4413      	add	r3, r2
 80002fa:	00db      	lsls	r3, r3, #3
 80002fc:	1a9b      	subs	r3, r3, r2
 80002fe:	440b      	add	r3, r1
 8000300:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8000304:	4602      	mov	r2, r0
 8000306:	701a      	strb	r2, [r3, #0]
	for (; FrameType < RxBuffer->NodeHandle[ID].NumberOfFrame; FrameType++) {
 8000308:	e00b      	b.n	8000322 <CAN_ProcessRxBuffer+0x5e>
		CAN_ProcessFrame(FlagHandle, ID, RxBuffer, FrameType, DataPhysical);
 800030a:	7dfa      	ldrb	r2, [r7, #23]
 800030c:	7af9      	ldrb	r1, [r7, #11]
 800030e:	683b      	ldr	r3, [r7, #0]
 8000310:	9300      	str	r3, [sp, #0]
 8000312:	4613      	mov	r3, r2
 8000314:	687a      	ldr	r2, [r7, #4]
 8000316:	68f8      	ldr	r0, [r7, #12]
 8000318:	f000 f8b3 	bl	8000482 <CAN_ProcessFrame>
	for (; FrameType < RxBuffer->NodeHandle[ID].NumberOfFrame; FrameType++) {
 800031c:	7dfb      	ldrb	r3, [r7, #23]
 800031e:	3301      	adds	r3, #1
 8000320:	75fb      	strb	r3, [r7, #23]
 8000322:	7afa      	ldrb	r2, [r7, #11]
 8000324:	6879      	ldr	r1, [r7, #4]
 8000326:	4613      	mov	r3, r2
 8000328:	00db      	lsls	r3, r3, #3
 800032a:	4413      	add	r3, r2
 800032c:	00db      	lsls	r3, r3, #3
 800032e:	1a9b      	subs	r3, r3, r2
 8000330:	440b      	add	r3, r1
 8000332:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	7dfa      	ldrb	r2, [r7, #23]
 800033a:	429a      	cmp	r2, r3
 800033c:	d3e5      	bcc.n	800030a <CAN_ProcessRxBuffer+0x46>
	}
	if (RxBuffer->NodeHandle[ID].NodeIndex
 800033e:	7afa      	ldrb	r2, [r7, #11]
 8000340:	6879      	ldr	r1, [r7, #4]
 8000342:	4613      	mov	r3, r2
 8000344:	00db      	lsls	r3, r3, #3
 8000346:	4413      	add	r3, r2
 8000348:	00db      	lsls	r3, r3, #3
 800034a:	1a9b      	subs	r3, r3, r2
 800034c:	440b      	add	r3, r1
 800034e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8000352:	7819      	ldrb	r1, [r3, #0]
			== RxBuffer->NodeHandle[ID].NumberOfFrame) {
 8000354:	7afa      	ldrb	r2, [r7, #11]
 8000356:	6878      	ldr	r0, [r7, #4]
 8000358:	4613      	mov	r3, r2
 800035a:	00db      	lsls	r3, r3, #3
 800035c:	4413      	add	r3, r2
 800035e:	00db      	lsls	r3, r3, #3
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4403      	add	r3, r0
 8000364:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8000368:	781b      	ldrb	r3, [r3, #0]
	if (RxBuffer->NodeHandle[ID].NodeIndex
 800036a:	4299      	cmp	r1, r3
 800036c:	f040 8085 	bne.w	800047a <CAN_ProcessRxBuffer+0x1b6>
		if (FlagHandle->FlagID[ID].SumOfFlag
 8000370:	7afa      	ldrb	r2, [r7, #11]
 8000372:	68f9      	ldr	r1, [r7, #12]
 8000374:	4613      	mov	r3, r2
 8000376:	011b      	lsls	r3, r3, #4
 8000378:	4413      	add	r3, r2
 800037a:	440b      	add	r3, r1
 800037c:	3308      	adds	r3, #8
 800037e:	7819      	ldrb	r1, [r3, #0]
				== RxBuffer->NodeHandle[ID].NumberOfFrame) {
 8000380:	7afa      	ldrb	r2, [r7, #11]
 8000382:	6878      	ldr	r0, [r7, #4]
 8000384:	4613      	mov	r3, r2
 8000386:	00db      	lsls	r3, r3, #3
 8000388:	4413      	add	r3, r2
 800038a:	00db      	lsls	r3, r3, #3
 800038c:	1a9b      	subs	r3, r3, r2
 800038e:	4403      	add	r3, r0
 8000390:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8000394:	781b      	ldrb	r3, [r3, #0]
		if (FlagHandle->FlagID[ID].SumOfFlag
 8000396:	4299      	cmp	r1, r3
 8000398:	d142      	bne.n	8000420 <CAN_ProcessRxBuffer+0x15c>
			*FlagRecHandle = REC_FRAMEDATA_SUCCESS;
 800039a:	6a3b      	ldr	r3, [r7, #32]
 800039c:	2202      	movs	r2, #2
 800039e:	701a      	strb	r2, [r3, #0]
			RxBuffer->NodeHandle[ID].NodeIndex = 0;
 80003a0:	7afa      	ldrb	r2, [r7, #11]
 80003a2:	6879      	ldr	r1, [r7, #4]
 80003a4:	4613      	mov	r3, r2
 80003a6:	00db      	lsls	r3, r3, #3
 80003a8:	4413      	add	r3, r2
 80003aa:	00db      	lsls	r3, r3, #3
 80003ac:	1a9b      	subs	r3, r3, r2
 80003ae:	440b      	add	r3, r1
 80003b0:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80003b4:	2200      	movs	r2, #0
 80003b6:	701a      	strb	r2, [r3, #0]
			RxBuffer->NodeHandle[ID].DuplicateFrame = 0;
 80003b8:	7afa      	ldrb	r2, [r7, #11]
 80003ba:	6879      	ldr	r1, [r7, #4]
 80003bc:	4613      	mov	r3, r2
 80003be:	00db      	lsls	r3, r3, #3
 80003c0:	4413      	add	r3, r2
 80003c2:	00db      	lsls	r3, r3, #3
 80003c4:	1a9b      	subs	r3, r3, r2
 80003c6:	440b      	add	r3, r1
 80003c8:	f203 130b 	addw	r3, r3, #267	; 0x10b
 80003cc:	2200      	movs	r2, #0
 80003ce:	701a      	strb	r2, [r3, #0]
			FlagHandle->FlagID[ID].SumOfFlag = 0;
 80003d0:	7afa      	ldrb	r2, [r7, #11]
 80003d2:	68f9      	ldr	r1, [r7, #12]
 80003d4:	4613      	mov	r3, r2
 80003d6:	011b      	lsls	r3, r3, #4
 80003d8:	4413      	add	r3, r2
 80003da:	440b      	add	r3, r1
 80003dc:	3308      	adds	r3, #8
 80003de:	2200      	movs	r2, #0
 80003e0:	701a      	strb	r2, [r3, #0]
			for (FrameType = 0;
 80003e2:	2300      	movs	r3, #0
 80003e4:	75fb      	strb	r3, [r7, #23]
 80003e6:	e00c      	b.n	8000402 <CAN_ProcessRxBuffer+0x13e>
					FrameType < RxBuffer->NodeHandle[ID].NumberOfFrame;
					FrameType++) {
				FlagHandle->FlagID[ID].FlagFrameFull[FrameType] = 0;
 80003e8:	7afa      	ldrb	r2, [r7, #11]
 80003ea:	7df9      	ldrb	r1, [r7, #23]
 80003ec:	68f8      	ldr	r0, [r7, #12]
 80003ee:	4613      	mov	r3, r2
 80003f0:	011b      	lsls	r3, r3, #4
 80003f2:	4413      	add	r3, r2
 80003f4:	4403      	add	r3, r0
 80003f6:	440b      	add	r3, r1
 80003f8:	2200      	movs	r2, #0
 80003fa:	701a      	strb	r2, [r3, #0]
					FrameType++) {
 80003fc:	7dfb      	ldrb	r3, [r7, #23]
 80003fe:	3301      	adds	r3, #1
 8000400:	75fb      	strb	r3, [r7, #23]
					FrameType < RxBuffer->NodeHandle[ID].NumberOfFrame;
 8000402:	7afa      	ldrb	r2, [r7, #11]
 8000404:	6879      	ldr	r1, [r7, #4]
 8000406:	4613      	mov	r3, r2
 8000408:	00db      	lsls	r3, r3, #3
 800040a:	4413      	add	r3, r2
 800040c:	00db      	lsls	r3, r3, #3
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	440b      	add	r3, r1
 8000412:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	7dfa      	ldrb	r2, [r7, #23]
 800041a:	429a      	cmp	r2, r3
 800041c:	d3e4      	bcc.n	80003e8 <CAN_ProcessRxBuffer+0x124>
					FlagHandle->FlagID[ID].FrameError[FrameType] = 1;
				}
			}
		}
	}
}
 800041e:	e02c      	b.n	800047a <CAN_ProcessRxBuffer+0x1b6>
			*FlagRecHandle = REC_FRAMEDATA_ERROR;
 8000420:	6a3b      	ldr	r3, [r7, #32]
 8000422:	2201      	movs	r2, #1
 8000424:	701a      	strb	r2, [r3, #0]
			for (FrameType = 0;
 8000426:	2300      	movs	r3, #0
 8000428:	75fb      	strb	r3, [r7, #23]
 800042a:	e018      	b.n	800045e <CAN_ProcessRxBuffer+0x19a>
				if (FlagHandle->FlagID[ID].FlagFrameFull[FrameType] == 0) {
 800042c:	7afa      	ldrb	r2, [r7, #11]
 800042e:	7df9      	ldrb	r1, [r7, #23]
 8000430:	68f8      	ldr	r0, [r7, #12]
 8000432:	4613      	mov	r3, r2
 8000434:	011b      	lsls	r3, r3, #4
 8000436:	4413      	add	r3, r2
 8000438:	4403      	add	r3, r0
 800043a:	440b      	add	r3, r1
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	2b00      	cmp	r3, #0
 8000440:	d10a      	bne.n	8000458 <CAN_ProcessRxBuffer+0x194>
					FlagHandle->FlagID[ID].FrameError[FrameType] = 1;
 8000442:	7afa      	ldrb	r2, [r7, #11]
 8000444:	7df9      	ldrb	r1, [r7, #23]
 8000446:	68f8      	ldr	r0, [r7, #12]
 8000448:	4613      	mov	r3, r2
 800044a:	011b      	lsls	r3, r3, #4
 800044c:	4413      	add	r3, r2
 800044e:	4403      	add	r3, r0
 8000450:	440b      	add	r3, r1
 8000452:	3309      	adds	r3, #9
 8000454:	2201      	movs	r2, #1
 8000456:	701a      	strb	r2, [r3, #0]
					FrameType++) {
 8000458:	7dfb      	ldrb	r3, [r7, #23]
 800045a:	3301      	adds	r3, #1
 800045c:	75fb      	strb	r3, [r7, #23]
					FrameType <= RxBuffer->NodeHandle[ID].NumberOfFrame;
 800045e:	7afa      	ldrb	r2, [r7, #11]
 8000460:	6879      	ldr	r1, [r7, #4]
 8000462:	4613      	mov	r3, r2
 8000464:	00db      	lsls	r3, r3, #3
 8000466:	4413      	add	r3, r2
 8000468:	00db      	lsls	r3, r3, #3
 800046a:	1a9b      	subs	r3, r3, r2
 800046c:	440b      	add	r3, r1
 800046e:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	7dfa      	ldrb	r2, [r7, #23]
 8000476:	429a      	cmp	r2, r3
 8000478:	d9d8      	bls.n	800042c <CAN_ProcessRxBuffer+0x168>
}
 800047a:	bf00      	nop
 800047c:	3718      	adds	r7, #24
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}

08000482 <CAN_ProcessFrame>:

void CAN_ProcessFrame(FlagFrameHandle *FlagHandle, uint8_t ID,
		CANBufferHandleStruct *RxBuffer, uint8_t FrameType, uint8_t *Data) {
 8000482:	b590      	push	{r4, r7, lr}
 8000484:	b085      	sub	sp, #20
 8000486:	af00      	add	r7, sp, #0
 8000488:	60f8      	str	r0, [r7, #12]
 800048a:	607a      	str	r2, [r7, #4]
 800048c:	461a      	mov	r2, r3
 800048e:	460b      	mov	r3, r1
 8000490:	72fb      	strb	r3, [r7, #11]
 8000492:	4613      	mov	r3, r2
 8000494:	72bb      	strb	r3, [r7, #10]
	if (RxBuffer->NodeHandle[ID].FrameType == FrameType
 8000496:	7afa      	ldrb	r2, [r7, #11]
 8000498:	6879      	ldr	r1, [r7, #4]
 800049a:	4613      	mov	r3, r2
 800049c:	00db      	lsls	r3, r3, #3
 800049e:	4413      	add	r3, r2
 80004a0:	00db      	lsls	r3, r3, #3
 80004a2:	1a9b      	subs	r3, r3, r2
 80004a4:	440b      	add	r3, r1
 80004a6:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	7aba      	ldrb	r2, [r7, #10]
 80004ae:	429a      	cmp	r2, r3
 80004b0:	d14c      	bne.n	800054c <CAN_ProcessFrame+0xca>
			&& FlagHandle->FlagID[ID].FlagFrameFull[FrameType] == 0) {
 80004b2:	7afa      	ldrb	r2, [r7, #11]
 80004b4:	7ab9      	ldrb	r1, [r7, #10]
 80004b6:	68f8      	ldr	r0, [r7, #12]
 80004b8:	4613      	mov	r3, r2
 80004ba:	011b      	lsls	r3, r3, #4
 80004bc:	4413      	add	r3, r2
 80004be:	4403      	add	r3, r0
 80004c0:	440b      	add	r3, r1
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d141      	bne.n	800054c <CAN_ProcessFrame+0xca>
		memcpy(
				RxBuffer->NodeHandle[ID].NodeBuffer[RxBuffer->NodeHandle[ID].FrameType],
 80004c8:	7afa      	ldrb	r2, [r7, #11]
 80004ca:	7af9      	ldrb	r1, [r7, #11]
 80004cc:	6878      	ldr	r0, [r7, #4]
 80004ce:	460b      	mov	r3, r1
 80004d0:	00db      	lsls	r3, r3, #3
 80004d2:	440b      	add	r3, r1
 80004d4:	00db      	lsls	r3, r3, #3
 80004d6:	1a5b      	subs	r3, r3, r1
 80004d8:	4403      	add	r3, r0
 80004da:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	00d9      	lsls	r1, r3, #3
 80004e2:	4613      	mov	r3, r2
 80004e4:	00db      	lsls	r3, r3, #3
 80004e6:	4413      	add	r3, r2
 80004e8:	00db      	lsls	r3, r3, #3
 80004ea:	1a9b      	subs	r3, r3, r2
 80004ec:	440b      	add	r3, r1
 80004ee:	33c8      	adds	r3, #200	; 0xc8
 80004f0:	687a      	ldr	r2, [r7, #4]
 80004f2:	4413      	add	r3, r2
 80004f4:	3303      	adds	r3, #3
		memcpy(
 80004f6:	2208      	movs	r2, #8
 80004f8:	6a39      	ldr	r1, [r7, #32]
 80004fa:	4618      	mov	r0, r3
 80004fc:	f002 fc2e 	bl	8002d5c <memcpy>
				Data, CAN_MAX_DATA);
		FlagHandle->FlagID[ID].FlagFrameFull[FrameType] = 1;
 8000500:	7afa      	ldrb	r2, [r7, #11]
 8000502:	7ab9      	ldrb	r1, [r7, #10]
 8000504:	68f8      	ldr	r0, [r7, #12]
 8000506:	4613      	mov	r3, r2
 8000508:	011b      	lsls	r3, r3, #4
 800050a:	4413      	add	r3, r2
 800050c:	4403      	add	r3, r0
 800050e:	440b      	add	r3, r1
 8000510:	2201      	movs	r2, #1
 8000512:	701a      	strb	r2, [r3, #0]
		FlagHandle->FlagID[ID].SumOfFlag +=
 8000514:	7afa      	ldrb	r2, [r7, #11]
 8000516:	68f9      	ldr	r1, [r7, #12]
 8000518:	4613      	mov	r3, r2
 800051a:	011b      	lsls	r3, r3, #4
 800051c:	4413      	add	r3, r2
 800051e:	440b      	add	r3, r1
 8000520:	3308      	adds	r3, #8
 8000522:	7819      	ldrb	r1, [r3, #0]
				FlagHandle->FlagID[ID].FlagFrameFull[FrameType];
 8000524:	7afa      	ldrb	r2, [r7, #11]
 8000526:	7ab8      	ldrb	r0, [r7, #10]
 8000528:	68fc      	ldr	r4, [r7, #12]
 800052a:	4613      	mov	r3, r2
 800052c:	011b      	lsls	r3, r3, #4
 800052e:	4413      	add	r3, r2
 8000530:	4423      	add	r3, r4
 8000532:	4403      	add	r3, r0
 8000534:	781b      	ldrb	r3, [r3, #0]
		FlagHandle->FlagID[ID].SumOfFlag +=
 8000536:	7afa      	ldrb	r2, [r7, #11]
 8000538:	440b      	add	r3, r1
 800053a:	b2d8      	uxtb	r0, r3
 800053c:	68f9      	ldr	r1, [r7, #12]
 800053e:	4613      	mov	r3, r2
 8000540:	011b      	lsls	r3, r3, #4
 8000542:	4413      	add	r3, r2
 8000544:	440b      	add	r3, r1
 8000546:	3308      	adds	r3, #8
 8000548:	4602      	mov	r2, r0
 800054a:	701a      	strb	r2, [r3, #0]
	}
}
 800054c:	bf00      	nop
 800054e:	3714      	adds	r7, #20
 8000550:	46bd      	mov	sp, r7
 8000552:	bd90      	pop	{r4, r7, pc}

08000554 <CAN_Recieve_Physical>:
		BufferIndex = 0;
	}
	return HAL_OK;
}

uint8_t CAN_Recieve_Physical(CAN_RxHeaderTypeDef *RxHeader, uint8_t *Data) {
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	6039      	str	r1, [r7, #0]

	while (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) == 0)
 800055e:	bf00      	nop
 8000560:	2100      	movs	r1, #0
 8000562:	480b      	ldr	r0, [pc, #44]	; (8000590 <CAN_Recieve_Physical+0x3c>)
 8000564:	f001 f8f5 	bl	8001752 <HAL_CAN_GetRxFifoFillLevel>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d0f8      	beq.n	8000560 <CAN_Recieve_Physical+0xc>
		;
	if (HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, RxHeader, Data) != HAL_OK) {
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	687a      	ldr	r2, [r7, #4]
 8000572:	2100      	movs	r1, #0
 8000574:	4806      	ldr	r0, [pc, #24]	; (8000590 <CAN_Recieve_Physical+0x3c>)
 8000576:	f000 ffcb 	bl	8001510 <HAL_CAN_GetRxMessage>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <CAN_Recieve_Physical+0x30>
		Error_Handler(); //get message from RAM;
 8000580:	f000 fb96 	bl	8000cb0 <Error_Handler>
	}
	return HAL_OK;
 8000584:	2300      	movs	r3, #0
}
 8000586:	4618      	mov	r0, r3
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	20000078 	.word	0x20000078

08000594 <CAN_Receive_DataLink>:

uint8_t CAN_Receive_DataLink(CAN_RxHeaderTypeDef *RxHeader,
		FlagFrameHandle *FlagHandle, CANBufferHandleStruct *RxBuffer,
		FlagRecNotification *FlagNotiHandle) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b08a      	sub	sp, #40	; 0x28
 8000598:	af02      	add	r7, sp, #8
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
 80005a0:	603b      	str	r3, [r7, #0]

	*FlagNotiHandle = REC_DATA;
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	2200      	movs	r2, #0
 80005a6:	701a      	strb	r2, [r3, #0]
	uint8_t DataPhysical[CAN_MAX_DATA] = { 0 }; // init local DataPhysical for get data from receive
 80005a8:	2300      	movs	r3, #0
 80005aa:	617b      	str	r3, [r7, #20]
 80005ac:	2300      	movs	r3, #0
 80005ae:	61bb      	str	r3, [r7, #24]
	uint16_t StdID = 0;
 80005b0:	2300      	movs	r3, #0
 80005b2:	83fb      	strh	r3, [r7, #30]
	uint8_t ID = 0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	777b      	strb	r3, [r7, #29]

	CAN_Recieve_Physical(RxHeader, DataPhysical); // get Data
 80005b8:	f107 0314 	add.w	r3, r7, #20
 80005bc:	4619      	mov	r1, r3
 80005be:	68f8      	ldr	r0, [r7, #12]
 80005c0:	f7ff ffc8 	bl	8000554 <CAN_Recieve_Physical>

	StdID = RxHeader->StdId;
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	83fb      	strh	r3, [r7, #30]
	ID = (StdID >> 3) & 15;
 80005ca:	8bfb      	ldrh	r3, [r7, #30]
 80005cc:	08db      	lsrs	r3, r3, #3
 80005ce:	b29b      	uxth	r3, r3
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	f003 030f 	and.w	r3, r3, #15
 80005d6:	777b      	strb	r3, [r7, #29]
	RxBuffer->RecvID = ID;
 80005d8:	7f7b      	ldrb	r3, [r7, #29]
 80005da:	b29a      	uxth	r2, r3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	RxBuffer->NodeHandle[ID].FrameType = StdID & 7; // get frame type store into Rxbuffer struct with Node ID manage frame type
 80005e2:	8bfb      	ldrh	r3, [r7, #30]
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	7f7a      	ldrb	r2, [r7, #29]
 80005e8:	f003 0307 	and.w	r3, r3, #7
 80005ec:	b2d8      	uxtb	r0, r3
 80005ee:	6879      	ldr	r1, [r7, #4]
 80005f0:	4613      	mov	r3, r2
 80005f2:	00db      	lsls	r3, r3, #3
 80005f4:	4413      	add	r3, r2
 80005f6:	00db      	lsls	r3, r3, #3
 80005f8:	1a9b      	subs	r3, r3, r2
 80005fa:	440b      	add	r3, r1
 80005fc:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8000600:	4602      	mov	r2, r0
 8000602:	701a      	strb	r2, [r3, #0]
	if (RxBuffer->NodeHandle[ID].FrameType == SET_UP_FRAME
 8000604:	7f7a      	ldrb	r2, [r7, #29]
 8000606:	6879      	ldr	r1, [r7, #4]
 8000608:	4613      	mov	r3, r2
 800060a:	00db      	lsls	r3, r3, #3
 800060c:	4413      	add	r3, r2
 800060e:	00db      	lsls	r3, r3, #3
 8000610:	1a9b      	subs	r3, r3, r2
 8000612:	440b      	add	r3, r1
 8000614:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d178      	bne.n	8000710 <CAN_Receive_DataLink+0x17c>
			&& RxBuffer->NodeHandle[ID].DuplicateFrame != 1) { // check if frame type = SET_UP_FRAME
 800061e:	7f7a      	ldrb	r2, [r7, #29]
 8000620:	6879      	ldr	r1, [r7, #4]
 8000622:	4613      	mov	r3, r2
 8000624:	00db      	lsls	r3, r3, #3
 8000626:	4413      	add	r3, r2
 8000628:	00db      	lsls	r3, r3, #3
 800062a:	1a9b      	subs	r3, r3, r2
 800062c:	440b      	add	r3, r1
 800062e:	f203 130b 	addw	r3, r3, #267	; 0x10b
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2b01      	cmp	r3, #1
 8000636:	d06b      	beq.n	8000710 <CAN_Receive_DataLink+0x17c>
		RxBuffer->NodeHandle[ID].DuplicateFrame = 1; // check send multiple SET_UP_frame
 8000638:	7f7a      	ldrb	r2, [r7, #29]
 800063a:	6879      	ldr	r1, [r7, #4]
 800063c:	4613      	mov	r3, r2
 800063e:	00db      	lsls	r3, r3, #3
 8000640:	4413      	add	r3, r2
 8000642:	00db      	lsls	r3, r3, #3
 8000644:	1a9b      	subs	r3, r3, r2
 8000646:	440b      	add	r3, r1
 8000648:	f203 130b 	addw	r3, r3, #267	; 0x10b
 800064c:	2201      	movs	r2, #1
 800064e:	701a      	strb	r2, [r3, #0]
		RxBuffer->NodeHandle[ID].PacketLength = DataPhysical[6];
 8000650:	7f7a      	ldrb	r2, [r7, #29]
 8000652:	7eb8      	ldrb	r0, [r7, #26]
 8000654:	6879      	ldr	r1, [r7, #4]
 8000656:	4613      	mov	r3, r2
 8000658:	00db      	lsls	r3, r3, #3
 800065a:	4413      	add	r3, r2
 800065c:	00db      	lsls	r3, r3, #3
 800065e:	1a9b      	subs	r3, r3, r2
 8000660:	440b      	add	r3, r1
 8000662:	f203 130d 	addw	r3, r3, #269	; 0x10d
 8000666:	4602      	mov	r2, r0
 8000668:	701a      	strb	r2, [r3, #0]
		RxBuffer->NodeHandle[ID].CRCValue = DataPhysical[7];
 800066a:	7f7a      	ldrb	r2, [r7, #29]
 800066c:	7ef8      	ldrb	r0, [r7, #27]
 800066e:	6879      	ldr	r1, [r7, #4]
 8000670:	4613      	mov	r3, r2
 8000672:	00db      	lsls	r3, r3, #3
 8000674:	4413      	add	r3, r2
 8000676:	00db      	lsls	r3, r3, #3
 8000678:	1a9b      	subs	r3, r3, r2
 800067a:	440b      	add	r3, r1
 800067c:	f203 130f 	addw	r3, r3, #271	; 0x10f
 8000680:	4602      	mov	r2, r0
 8000682:	701a      	strb	r2, [r3, #0]
		if (RxBuffer->NodeHandle[ID].PacketLength % 8 == 0) {
 8000684:	7f7a      	ldrb	r2, [r7, #29]
 8000686:	6879      	ldr	r1, [r7, #4]
 8000688:	4613      	mov	r3, r2
 800068a:	00db      	lsls	r3, r3, #3
 800068c:	4413      	add	r3, r2
 800068e:	00db      	lsls	r3, r3, #3
 8000690:	1a9b      	subs	r3, r3, r2
 8000692:	440b      	add	r3, r1
 8000694:	f203 130d 	addw	r3, r3, #269	; 0x10d
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	f003 0307 	and.w	r3, r3, #7
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d119      	bne.n	80006d8 <CAN_Receive_DataLink+0x144>
			RxBuffer->NodeHandle[ID].NumberOfFrame =
					(RxBuffer->NodeHandle[ID].PacketLength / 8);
 80006a4:	7f7a      	ldrb	r2, [r7, #29]
 80006a6:	6879      	ldr	r1, [r7, #4]
 80006a8:	4613      	mov	r3, r2
 80006aa:	00db      	lsls	r3, r3, #3
 80006ac:	4413      	add	r3, r2
 80006ae:	00db      	lsls	r3, r3, #3
 80006b0:	1a9b      	subs	r3, r3, r2
 80006b2:	440b      	add	r3, r1
 80006b4:	f203 130d 	addw	r3, r3, #269	; 0x10d
 80006b8:	781b      	ldrb	r3, [r3, #0]
			RxBuffer->NodeHandle[ID].NumberOfFrame =
 80006ba:	7f7a      	ldrb	r2, [r7, #29]
 80006bc:	08db      	lsrs	r3, r3, #3
 80006be:	b2d8      	uxtb	r0, r3
 80006c0:	6879      	ldr	r1, [r7, #4]
 80006c2:	4613      	mov	r3, r2
 80006c4:	00db      	lsls	r3, r3, #3
 80006c6:	4413      	add	r3, r2
 80006c8:	00db      	lsls	r3, r3, #3
 80006ca:	1a9b      	subs	r3, r3, r2
 80006cc:	440b      	add	r3, r1
 80006ce:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80006d2:	4602      	mov	r2, r0
 80006d4:	701a      	strb	r2, [r3, #0]
		if (RxBuffer->NodeHandle[ID].PacketLength % 8 == 0) {
 80006d6:	e041      	b.n	800075c <CAN_Receive_DataLink+0x1c8>
		} else {
			RxBuffer->NodeHandle[ID].NumberOfFrame =
					(RxBuffer->NodeHandle[ID].PacketLength / 8) + 1;
 80006d8:	7f7a      	ldrb	r2, [r7, #29]
 80006da:	6879      	ldr	r1, [r7, #4]
 80006dc:	4613      	mov	r3, r2
 80006de:	00db      	lsls	r3, r3, #3
 80006e0:	4413      	add	r3, r2
 80006e2:	00db      	lsls	r3, r3, #3
 80006e4:	1a9b      	subs	r3, r3, r2
 80006e6:	440b      	add	r3, r1
 80006e8:	f203 130d 	addw	r3, r3, #269	; 0x10d
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	08db      	lsrs	r3, r3, #3
 80006f0:	b2db      	uxtb	r3, r3
			RxBuffer->NodeHandle[ID].NumberOfFrame =
 80006f2:	7f7a      	ldrb	r2, [r7, #29]
					(RxBuffer->NodeHandle[ID].PacketLength / 8) + 1;
 80006f4:	3301      	adds	r3, #1
 80006f6:	b2d8      	uxtb	r0, r3
			RxBuffer->NodeHandle[ID].NumberOfFrame =
 80006f8:	6879      	ldr	r1, [r7, #4]
 80006fa:	4613      	mov	r3, r2
 80006fc:	00db      	lsls	r3, r3, #3
 80006fe:	4413      	add	r3, r2
 8000700:	00db      	lsls	r3, r3, #3
 8000702:	1a9b      	subs	r3, r3, r2
 8000704:	440b      	add	r3, r1
 8000706:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800070a:	4602      	mov	r2, r0
 800070c:	701a      	strb	r2, [r3, #0]
		if (RxBuffer->NodeHandle[ID].PacketLength % 8 == 0) {
 800070e:	e025      	b.n	800075c <CAN_Receive_DataLink+0x1c8>
		}
	} else {
		if (RxBuffer->NodeHandle[ID].FrameType == SET_UP_FRAME) {
 8000710:	7f7a      	ldrb	r2, [r7, #29]
 8000712:	6879      	ldr	r1, [r7, #4]
 8000714:	4613      	mov	r3, r2
 8000716:	00db      	lsls	r3, r3, #3
 8000718:	4413      	add	r3, r2
 800071a:	00db      	lsls	r3, r3, #3
 800071c:	1a9b      	subs	r3, r3, r2
 800071e:	440b      	add	r3, r1
 8000720:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d118      	bne.n	800075c <CAN_Receive_DataLink+0x1c8>
			*FlagNotiHandle = REC_FRAMEDATA_ERROR;
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	2201      	movs	r2, #1
 800072e:	701a      	strb	r2, [r3, #0]
			FlagHandle->FlagID[ID].FrameError[RxBuffer->NodeHandle[ID].FrameType] =
 8000730:	7f79      	ldrb	r1, [r7, #29]
 8000732:	7f7a      	ldrb	r2, [r7, #29]
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	4613      	mov	r3, r2
 8000738:	00db      	lsls	r3, r3, #3
 800073a:	4413      	add	r3, r2
 800073c:	00db      	lsls	r3, r3, #3
 800073e:	1a9b      	subs	r3, r3, r2
 8000740:	4403      	add	r3, r0
 8000742:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	4618      	mov	r0, r3
 800074a:	68ba      	ldr	r2, [r7, #8]
 800074c:	460b      	mov	r3, r1
 800074e:	011b      	lsls	r3, r3, #4
 8000750:	440b      	add	r3, r1
 8000752:	4413      	add	r3, r2
 8000754:	4403      	add	r3, r0
 8000756:	3309      	adds	r3, #9
 8000758:	2201      	movs	r2, #1
 800075a:	701a      	strb	r2, [r3, #0]
					1;
		}
	}
	CAN_ProcessRxBuffer(FlagHandle, ID, RxBuffer, DataPhysical, FlagNotiHandle);
 800075c:	f107 0214 	add.w	r2, r7, #20
 8000760:	7f79      	ldrb	r1, [r7, #29]
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	9300      	str	r3, [sp, #0]
 8000766:	4613      	mov	r3, r2
 8000768:	687a      	ldr	r2, [r7, #4]
 800076a:	68b8      	ldr	r0, [r7, #8]
 800076c:	f7ff fdaa 	bl	80002c4 <CAN_ProcessRxBuffer>
	CAN_Receive_Network(RxBuffer, FlagHandle, FlagNotiHandle);
 8000770:	683a      	ldr	r2, [r7, #0]
 8000772:	68b9      	ldr	r1, [r7, #8]
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f000 f805 	bl	8000784 <CAN_Receive_Network>
	return HAL_OK;
 800077a:	2300      	movs	r3, #0
}
 800077c:	4618      	mov	r0, r3
 800077e:	3720      	adds	r7, #32
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <CAN_Receive_Network>:
uint8_t CAN_Receive_Network(CANBufferHandleStruct *NetBuffer,
		FlagFrameHandle *NetworkFlag, FlagRecNotification *FlagNotiHandle) {
 8000784:	b580      	push	{r7, lr}
 8000786:	b08a      	sub	sp, #40	; 0x28
 8000788:	af00      	add	r7, sp, #0
 800078a:	60f8      	str	r0, [r7, #12]
 800078c:	60b9      	str	r1, [r7, #8]
 800078e:	607a      	str	r2, [r7, #4]
	uint8_t FrameLength = 0;
 8000790:	2300      	movs	r3, #0
 8000792:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t FrameType = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t NetBufferIndex = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t DataLength=0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	76fb      	strb	r3, [r7, #27]
	uint8_t CRCValue=0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	76bb      	strb	r3, [r7, #26]
	uint8_t *NetData;
	FrameLength = NetBuffer->NodeHandle[NetBuffer->RecvID].NumberOfFrame;
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80007b0:	461a      	mov	r2, r3
 80007b2:	68f9      	ldr	r1, [r7, #12]
 80007b4:	4613      	mov	r3, r2
 80007b6:	00db      	lsls	r3, r3, #3
 80007b8:	4413      	add	r3, r2
 80007ba:	00db      	lsls	r3, r3, #3
 80007bc:	1a9b      	subs	r3, r3, r2
 80007be:	440b      	add	r3, r1
 80007c0:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t NumberofFrame =FrameLength;
 80007ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007ce:	767b      	strb	r3, [r7, #25]
	FrameType = NetBuffer->NodeHandle[NetBuffer->RecvID].FrameType;
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80007d6:	461a      	mov	r2, r3
 80007d8:	68f9      	ldr	r1, [r7, #12]
 80007da:	4613      	mov	r3, r2
 80007dc:	00db      	lsls	r3, r3, #3
 80007de:	4413      	add	r3, r2
 80007e0:	00db      	lsls	r3, r3, #3
 80007e2:	1a9b      	subs	r3, r3, r2
 80007e4:	440b      	add	r3, r1
 80007e6:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (*FlagNotiHandle == REC_FRAMEDATA_SUCCESS) {
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	2b02      	cmp	r3, #2
 80007f6:	f040 808a 	bne.w	800090e <CAN_Receive_Network+0x18a>
		for (;FrameLength > 0; FrameLength--) {
 80007fa:	e029      	b.n	8000850 <CAN_Receive_Network+0xcc>
			memcpy(NetBuffer->Buffer[NetBufferIndex],
 80007fc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000800:	3309      	adds	r3, #9
 8000802:	00db      	lsls	r3, r3, #3
 8000804:	68fa      	ldr	r2, [r7, #12]
 8000806:	18d0      	adds	r0, r2, r3
					NetBuffer->NodeHandle[NetBuffer->RecvID].NodeBuffer[FrameType],
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800080e:	461a      	mov	r2, r3
 8000810:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000814:	00d9      	lsls	r1, r3, #3
 8000816:	4613      	mov	r3, r2
 8000818:	00db      	lsls	r3, r3, #3
 800081a:	4413      	add	r3, r2
 800081c:	00db      	lsls	r3, r3, #3
 800081e:	1a9b      	subs	r3, r3, r2
 8000820:	440b      	add	r3, r1
 8000822:	33c8      	adds	r3, #200	; 0xc8
 8000824:	68fa      	ldr	r2, [r7, #12]
 8000826:	4413      	add	r3, r2
 8000828:	3303      	adds	r3, #3
			memcpy(NetBuffer->Buffer[NetBufferIndex],
 800082a:	2208      	movs	r2, #8
 800082c:	4619      	mov	r1, r3
 800082e:	f002 fa95 	bl	8002d5c <memcpy>
					CAN_MAX_DATA);
			NetBufferIndex++;
 8000832:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000836:	3301      	adds	r3, #1
 8000838:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			FrameType--;
 800083c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000840:	3b01      	subs	r3, #1
 8000842:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for (;FrameLength > 0; FrameLength--) {
 8000846:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800084a:	3b01      	subs	r3, #1
 800084c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000850:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000854:	2b00      	cmp	r3, #0
 8000856:	d1d1      	bne.n	80007fc <CAN_Receive_Network+0x78>
		}
		DataLength=NetBuffer->NodeHandle[NetBuffer->RecvID].PacketLength-2;
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800085e:	461a      	mov	r2, r3
 8000860:	68f9      	ldr	r1, [r7, #12]
 8000862:	4613      	mov	r3, r2
 8000864:	00db      	lsls	r3, r3, #3
 8000866:	4413      	add	r3, r2
 8000868:	00db      	lsls	r3, r3, #3
 800086a:	1a9b      	subs	r3, r3, r2
 800086c:	440b      	add	r3, r1
 800086e:	f203 130d 	addw	r3, r3, #269	; 0x10d
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	3b02      	subs	r3, #2
 8000876:	76fb      	strb	r3, [r7, #27]
		NetData=(uint8_t*)malloc(DataLength*sizeof(uint8_t));
 8000878:	7efb      	ldrb	r3, [r7, #27]
 800087a:	4618      	mov	r0, r3
 800087c:	f002 f96e 	bl	8002b5c <malloc>
 8000880:	4603      	mov	r3, r0
 8000882:	617b      	str	r3, [r7, #20]
		for(int i=0;i<=NumberofFrame;i++)
 8000884:	2300      	movs	r3, #0
 8000886:	623b      	str	r3, [r7, #32]
 8000888:	e01b      	b.n	80008c2 <CAN_Receive_Network+0x13e>
		{
			for (int j=0;j<8;j++)
 800088a:	2300      	movs	r3, #0
 800088c:	61fb      	str	r3, [r7, #28]
 800088e:	e012      	b.n	80008b6 <CAN_Receive_Network+0x132>
			{
				NetData[i*8+j]=NetBuffer->Buffer[i][j];
 8000890:	6a3b      	ldr	r3, [r7, #32]
 8000892:	00da      	lsls	r2, r3, #3
 8000894:	69fb      	ldr	r3, [r7, #28]
 8000896:	4413      	add	r3, r2
 8000898:	461a      	mov	r2, r3
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	4413      	add	r3, r2
 800089e:	68f9      	ldr	r1, [r7, #12]
 80008a0:	6a3a      	ldr	r2, [r7, #32]
 80008a2:	00d2      	lsls	r2, r2, #3
 80008a4:	4411      	add	r1, r2
 80008a6:	69fa      	ldr	r2, [r7, #28]
 80008a8:	440a      	add	r2, r1
 80008aa:	3248      	adds	r2, #72	; 0x48
 80008ac:	7812      	ldrb	r2, [r2, #0]
 80008ae:	701a      	strb	r2, [r3, #0]
			for (int j=0;j<8;j++)
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	3301      	adds	r3, #1
 80008b4:	61fb      	str	r3, [r7, #28]
 80008b6:	69fb      	ldr	r3, [r7, #28]
 80008b8:	2b07      	cmp	r3, #7
 80008ba:	dde9      	ble.n	8000890 <CAN_Receive_Network+0x10c>
		for(int i=0;i<=NumberofFrame;i++)
 80008bc:	6a3b      	ldr	r3, [r7, #32]
 80008be:	3301      	adds	r3, #1
 80008c0:	623b      	str	r3, [r7, #32]
 80008c2:	7e7b      	ldrb	r3, [r7, #25]
 80008c4:	6a3a      	ldr	r2, [r7, #32]
 80008c6:	429a      	cmp	r2, r3
 80008c8:	dddf      	ble.n	800088a <CAN_Receive_Network+0x106>
			}
		}
		CRCValue=crc_8(NetData,DataLength);
 80008ca:	7efb      	ldrb	r3, [r7, #27]
 80008cc:	4619      	mov	r1, r3
 80008ce:	6978      	ldr	r0, [r7, #20]
 80008d0:	f000 f848 	bl	8000964 <crc_8>
 80008d4:	4603      	mov	r3, r0
 80008d6:	76bb      	strb	r3, [r7, #26]
		if(CRCValue==NetBuffer->NodeHandle[NetBuffer->RecvID].CRCValue)
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80008de:	461a      	mov	r2, r3
 80008e0:	68f9      	ldr	r1, [r7, #12]
 80008e2:	4613      	mov	r3, r2
 80008e4:	00db      	lsls	r3, r3, #3
 80008e6:	4413      	add	r3, r2
 80008e8:	00db      	lsls	r3, r3, #3
 80008ea:	1a9b      	subs	r3, r3, r2
 80008ec:	440b      	add	r3, r1
 80008ee:	f203 130f 	addw	r3, r3, #271	; 0x10f
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	7eba      	ldrb	r2, [r7, #26]
 80008f6:	429a      	cmp	r2, r3
 80008f8:	d103      	bne.n	8000902 <CAN_Receive_Network+0x17e>
		{
			*FlagNotiHandle=REC_PACKET_SUCCESS;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2204      	movs	r2, #4
 80008fe:	701a      	strb	r2, [r3, #0]
 8000900:	e002      	b.n	8000908 <CAN_Receive_Network+0x184>
		}
		else
		{
			*FlagNotiHandle=REC_PACKET_ERROR;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2203      	movs	r2, #3
 8000906:	701a      	strb	r2, [r3, #0]
		}
		free(NetData);
 8000908:	6978      	ldr	r0, [r7, #20]
 800090a:	f002 f92f 	bl	8002b6c <free>
	}
	return HAL_OK;
 800090e:	2300      	movs	r3, #0
}
 8000910:	4618      	mov	r0, r3
 8000912:	3728      	adds	r7, #40	; 0x28
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <CAN_Config_filtering>:
uint32_t CAN_Config_filtering(void) {
 8000918:	b580      	push	{r7, lr}
 800091a:	b08a      	sub	sp, #40	; 0x28
 800091c:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef Can_filter_init;
	Can_filter_init.FilterActivation = ENABLE;
 800091e:	2301      	movs	r3, #1
 8000920:	623b      	str	r3, [r7, #32]
	Can_filter_init.FilterBank = 0;
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
	Can_filter_init.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000926:	2300      	movs	r3, #0
 8000928:	613b      	str	r3, [r7, #16]
	Can_filter_init.FilterIdHigh = 0x0000;
 800092a:	2300      	movs	r3, #0
 800092c:	603b      	str	r3, [r7, #0]
	Can_filter_init.FilterIdLow = 0x0000;
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
	Can_filter_init.FilterMaskIdHigh = 0x0000;
 8000932:	2300      	movs	r3, #0
 8000934:	60bb      	str	r3, [r7, #8]
	Can_filter_init.FilterMaskIdLow = 0x0000;
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
	Can_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 800093a:	2300      	movs	r3, #0
 800093c:	61bb      	str	r3, [r7, #24]
	Can_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 800093e:	2301      	movs	r3, #1
 8000940:	61fb      	str	r3, [r7, #28]
	if (HAL_CAN_ConfigFilter(&hcan, &Can_filter_init) != HAL_OK) {
 8000942:	463b      	mov	r3, r7
 8000944:	4619      	mov	r1, r3
 8000946:	4806      	ldr	r0, [pc, #24]	; (8000960 <CAN_Config_filtering+0x48>)
 8000948:	f000 fcd5 	bl	80012f6 <HAL_CAN_ConfigFilter>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <CAN_Config_filtering+0x3e>
		Error_Handler();
 8000952:	f000 f9ad 	bl	8000cb0 <Error_Handler>
	}
	return HAL_OK;
 8000956:	2300      	movs	r3, #0
}
 8000958:	4618      	mov	r0, r3
 800095a:	3728      	adds	r7, #40	; 0x28
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000078 	.word	0x20000078

08000964 <crc_8>:

#include "CRC.h"
#include "stdint.h"
unsigned char table[256] = {0};

uint8_t crc_8(uint8_t* data, uint8_t len) {
 8000964:	b480      	push	{r7}
 8000966:	b087      	sub	sp, #28
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	460b      	mov	r3, r1
 800096e:	70fb      	strb	r3, [r7, #3]
  unsigned crc = 0;
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]
  int i, j;
  for (j = len; j; j--, data++) {
 8000974:	78fb      	ldrb	r3, [r7, #3]
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	e023      	b.n	80009c2 <crc_8+0x5e>
    crc ^= (*data << 8);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	021b      	lsls	r3, r3, #8
 8000980:	461a      	mov	r2, r3
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	4053      	eors	r3, r2
 8000986:	617b      	str	r3, [r7, #20]
    for(i = 8; i; i--) {
 8000988:	2308      	movs	r3, #8
 800098a:	613b      	str	r3, [r7, #16]
 800098c:	e010      	b.n	80009b0 <crc_8+0x4c>
      if (crc & 0x8000)
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000994:	2b00      	cmp	r3, #0
 8000996:	d005      	beq.n	80009a4 <crc_8+0x40>
        crc ^= (0x1070 << 3);
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	f483 4303 	eor.w	r3, r3, #33536	; 0x8300
 800099e:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 80009a2:	617b      	str	r3, [r7, #20]
      crc <<= 1;
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	617b      	str	r3, [r7, #20]
    for(i = 8; i; i--) {
 80009aa:	693b      	ldr	r3, [r7, #16]
 80009ac:	3b01      	subs	r3, #1
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	693b      	ldr	r3, [r7, #16]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d1eb      	bne.n	800098e <crc_8+0x2a>
  for (j = len; j; j--, data++) {
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	3b01      	subs	r3, #1
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	3301      	adds	r3, #1
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d1d8      	bne.n	800097a <crc_8+0x16>
    }
  }
  return (uint8_t)(crc >> 8);
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	0a1b      	lsrs	r3, r3, #8
 80009cc:	b2db      	uxtb	r3, r3
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	371c      	adds	r7, #28
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr

080009d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	f5ad 6ddd 	sub.w	sp, sp, #1768	; 0x6e8
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009e0:	f000 fb08 	bl	8000ff4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009e4:	f000 f872 	bl	8000acc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e8:	f000 f916 	bl	8000c18 <MX_GPIO_Init>
  MX_CAN_Init();
 80009ec:	f000 f8b4 	bl	8000b58 <MX_CAN_Init>
  MX_USART1_UART_Init();
 80009f0:	f000 f8e8 	bl	8000bc4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  CAN_Config_filtering();
 80009f4:	f7ff ff90 	bl	8000918 <CAN_Config_filtering>
  if(HAL_CAN_Start(&hcan)!=HAL_OK)
 80009f8:	4832      	ldr	r0, [pc, #200]	; (8000ac4 <main+0xec>)
 80009fa:	f000 fd45 	bl	8001488 <HAL_CAN_Start>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <main+0x30>
     {
     	Error_Handler();
 8000a04:	f000 f954 	bl	8000cb0 <Error_Handler>
     }
  uint32_t Txmailbox;
  CANConfigIDTxtypedef pIDtype;
  pIDtype.MessageType=COMMAND_FRAME;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	f8a7 36dc 	strh.w	r3, [r7, #1756]	; 0x6dc
  pIDtype.SenderID=OBSTALCE8;
 8000a0e:	230f      	movs	r3, #15
 8000a10:	f8a7 36de 	strh.w	r3, [r7, #1758]	; 0x6de
  CANBufferHandleStruct Buffer;
  CANBufferHandleStruct_Init(&Buffer);
 8000a14:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff fb97 	bl	800014c <CANBufferHandleStruct_Init>
  CAN_RxHeaderTypeDef RxHeader;
  FlagRecNotification FlagRec;
  FlagFrameHandle Flag;
  FlagsFrameHandle_Init(&Flag);
 8000a1e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000a22:	4618      	mov	r0, r3
 8000a24:	f7ff fbeb 	bl	80001fe <FlagsFrameHandle_Init>
  uint8_t DataRec[16];
  uint8_t Data[64]={0};
 8000a28:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 8000a2c:	f5a3 63d9 	sub.w	r3, r3, #1736	; 0x6c8
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	3304      	adds	r3, #4
 8000a36:	223c      	movs	r2, #60	; 0x3c
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f002 f94a 	bl	8002cd4 <memset>
  uint8_t mess[30]={0};
 8000a40:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 8000a44:	f5a3 63dd 	sub.w	r3, r3, #1768	; 0x6e8
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	3304      	adds	r3, #4
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
 8000a58:	611a      	str	r2, [r3, #16]
 8000a5a:	615a      	str	r2, [r3, #20]
 8000a5c:	831a      	strh	r2, [r3, #24]
  uint8_t k=0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	f887 36e7 	strb.w	r3, [r7, #1767]	; 0x6e7
  for (int i=0; i<DATA_TEST;i++)
 8000a64:	2300      	movs	r3, #0
 8000a66:	f8c7 36e0 	str.w	r3, [r7, #1760]	; 0x6e0
 8000a6a:	e013      	b.n	8000a94 <main+0xbc>
  {
	  Data[i]=k;
 8000a6c:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 8000a70:	f5a3 62d9 	sub.w	r2, r3, #1736	; 0x6c8
 8000a74:	f8d7 36e0 	ldr.w	r3, [r7, #1760]	; 0x6e0
 8000a78:	4413      	add	r3, r2
 8000a7a:	f897 26e7 	ldrb.w	r2, [r7, #1767]	; 0x6e7
 8000a7e:	701a      	strb	r2, [r3, #0]
	  k=k+1;
 8000a80:	f897 36e7 	ldrb.w	r3, [r7, #1767]	; 0x6e7
 8000a84:	3301      	adds	r3, #1
 8000a86:	f887 36e7 	strb.w	r3, [r7, #1767]	; 0x6e7
  for (int i=0; i<DATA_TEST;i++)
 8000a8a:	f8d7 36e0 	ldr.w	r3, [r7, #1760]	; 0x6e0
 8000a8e:	3301      	adds	r3, #1
 8000a90:	f8c7 36e0 	str.w	r3, [r7, #1760]	; 0x6e0
 8000a94:	f8d7 36e0 	ldr.w	r3, [r7, #1760]	; 0x6e0
 8000a98:	2b0f      	cmp	r3, #15
 8000a9a:	dde7      	ble.n	8000a6c <main+0x94>
    /* USER CODE BEGIN 3 */
	  //CAN_Send_Dataframe(pIDtype, Data, Txmailbox, TxBufferSend)
	  //CAN_Send_DataLink_Separate(&Buffer, Data);
	 // CAN_DataLink_Separate(&Buffer,Data,9);
	//	CAN_Network_Packet(&Buffer,Data,62);
	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000a9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aa0:	4809      	ldr	r0, [pc, #36]	; (8000ac8 <main+0xf0>)
 8000aa2:	f001 fb53 	bl	800214c <HAL_GPIO_TogglePin>
//	 CAN_Send_Physical_Send(&Buffer, Data , DATA_TEST , &pIDtype);
	// CAN_Recieve_Physical(&RxBuffer,DataRec);
	 //HAL_UART_Transmit( &huart1, DataRec, sizeof(DataRec), HAL_MAX_DELAY);
	 CAN_Receive_DataLink(&RxHeader,&Flag,&Buffer,&FlagRec);
 8000aa6:	f207 1383 	addw	r3, r7, #387	; 0x183
 8000aaa:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8000aae:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8000ab2:	f507 70c2 	add.w	r0, r7, #388	; 0x184
 8000ab6:	f7ff fd6d 	bl	8000594 <CAN_Receive_DataLink>
	//CAN_Send_Response(0b1111, ACK, 0b010);
	 HAL_Delay(500);
 8000aba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000abe:	f000 fafb 	bl	80010b8 <HAL_Delay>
	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000ac2:	e7eb      	b.n	8000a9c <main+0xc4>
 8000ac4:	20000078 	.word	0x20000078
 8000ac8:	40011000 	.word	0x40011000

08000acc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b090      	sub	sp, #64	; 0x40
 8000ad0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ad2:	f107 0318 	add.w	r3, r7, #24
 8000ad6:	2228      	movs	r2, #40	; 0x28
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4618      	mov	r0, r3
 8000adc:	f002 f8fa 	bl	8002cd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
 8000aea:	60da      	str	r2, [r3, #12]
 8000aec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aee:	2301      	movs	r3, #1
 8000af0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000af2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000af6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000af8:	2300      	movs	r3, #0
 8000afa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000afc:	2301      	movs	r3, #1
 8000afe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b00:	2302      	movs	r3, #2
 8000b02:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b08:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b0a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b10:	f107 0318 	add.w	r3, r7, #24
 8000b14:	4618      	mov	r0, r3
 8000b16:	f001 fb33 	bl	8002180 <HAL_RCC_OscConfig>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000b20:	f000 f8c6 	bl	8000cb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b24:	230f      	movs	r3, #15
 8000b26:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b36:	2300      	movs	r3, #0
 8000b38:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	2102      	movs	r1, #2
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f001 fda0 	bl	8002684 <HAL_RCC_ClockConfig>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000b4a:	f000 f8b1 	bl	8000cb0 <Error_Handler>
  }
}
 8000b4e:	bf00      	nop
 8000b50:	3740      	adds	r7, #64	; 0x40
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
	...

08000b58 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000b5c:	4b17      	ldr	r3, [pc, #92]	; (8000bbc <MX_CAN_Init+0x64>)
 8000b5e:	4a18      	ldr	r2, [pc, #96]	; (8000bc0 <MX_CAN_Init+0x68>)
 8000b60:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000b62:	4b16      	ldr	r3, [pc, #88]	; (8000bbc <MX_CAN_Init+0x64>)
 8000b64:	2204      	movs	r2, #4
 8000b66:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000b68:	4b14      	ldr	r3, [pc, #80]	; (8000bbc <MX_CAN_Init+0x64>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000b6e:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <MX_CAN_Init+0x64>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000b74:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <MX_CAN_Init+0x64>)
 8000b76:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000b7a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000b7c:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <MX_CAN_Init+0x64>)
 8000b7e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000b82:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000b84:	4b0d      	ldr	r3, [pc, #52]	; (8000bbc <MX_CAN_Init+0x64>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000b8a:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <MX_CAN_Init+0x64>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000b90:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <MX_CAN_Init+0x64>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000b96:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <MX_CAN_Init+0x64>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000b9c:	4b07      	ldr	r3, [pc, #28]	; (8000bbc <MX_CAN_Init+0x64>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000ba2:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <MX_CAN_Init+0x64>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000ba8:	4804      	ldr	r0, [pc, #16]	; (8000bbc <MX_CAN_Init+0x64>)
 8000baa:	f000 faa9 	bl	8001100 <HAL_CAN_Init>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000bb4:	f000 f87c 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20000078 	.word	0x20000078
 8000bc0:	40006400 	.word	0x40006400

08000bc4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bc8:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <MX_USART1_UART_Init+0x4c>)
 8000bca:	4a12      	ldr	r2, [pc, #72]	; (8000c14 <MX_USART1_UART_Init+0x50>)
 8000bcc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bce:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <MX_USART1_UART_Init+0x4c>)
 8000bd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bd4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <MX_USART1_UART_Init+0x4c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <MX_USART1_UART_Init+0x4c>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000be2:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <MX_USART1_UART_Init+0x4c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000be8:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <MX_USART1_UART_Init+0x4c>)
 8000bea:	220c      	movs	r2, #12
 8000bec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bee:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <MX_USART1_UART_Init+0x4c>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <MX_USART1_UART_Init+0x4c>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bfa:	4805      	ldr	r0, [pc, #20]	; (8000c10 <MX_USART1_UART_Init+0x4c>)
 8000bfc:	f001 fed0 	bl	80029a0 <HAL_UART_Init>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c06:	f000 f853 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	200000a0 	.word	0x200000a0
 8000c14:	40013800 	.word	0x40013800

08000c18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b088      	sub	sp, #32
 8000c1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1e:	f107 0310 	add.w	r3, r7, #16
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	609a      	str	r2, [r3, #8]
 8000c2a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2c:	4b1e      	ldr	r3, [pc, #120]	; (8000ca8 <MX_GPIO_Init+0x90>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	4a1d      	ldr	r2, [pc, #116]	; (8000ca8 <MX_GPIO_Init+0x90>)
 8000c32:	f043 0310 	orr.w	r3, r3, #16
 8000c36:	6193      	str	r3, [r2, #24]
 8000c38:	4b1b      	ldr	r3, [pc, #108]	; (8000ca8 <MX_GPIO_Init+0x90>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	f003 0310 	and.w	r3, r3, #16
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c44:	4b18      	ldr	r3, [pc, #96]	; (8000ca8 <MX_GPIO_Init+0x90>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	4a17      	ldr	r2, [pc, #92]	; (8000ca8 <MX_GPIO_Init+0x90>)
 8000c4a:	f043 0320 	orr.w	r3, r3, #32
 8000c4e:	6193      	str	r3, [r2, #24]
 8000c50:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <MX_GPIO_Init+0x90>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	f003 0320 	and.w	r3, r3, #32
 8000c58:	60bb      	str	r3, [r7, #8]
 8000c5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5c:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <MX_GPIO_Init+0x90>)
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	4a11      	ldr	r2, [pc, #68]	; (8000ca8 <MX_GPIO_Init+0x90>)
 8000c62:	f043 0304 	orr.w	r3, r3, #4
 8000c66:	6193      	str	r3, [r2, #24]
 8000c68:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <MX_GPIO_Init+0x90>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	f003 0304 	and.w	r3, r3, #4
 8000c70:	607b      	str	r3, [r7, #4]
 8000c72:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c74:	2200      	movs	r2, #0
 8000c76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c7a:	480c      	ldr	r0, [pc, #48]	; (8000cac <MX_GPIO_Init+0x94>)
 8000c7c:	f001 fa4e 	bl	800211c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c86:	2301      	movs	r3, #1
 8000c88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c92:	f107 0310 	add.w	r3, r7, #16
 8000c96:	4619      	mov	r1, r3
 8000c98:	4804      	ldr	r0, [pc, #16]	; (8000cac <MX_GPIO_Init+0x94>)
 8000c9a:	f001 f8bb 	bl	8001e14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c9e:	bf00      	nop
 8000ca0:	3720      	adds	r7, #32
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	40011000 	.word	0x40011000

08000cb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb4:	b672      	cpsid	i
}
 8000cb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <Error_Handler+0x8>
	...

08000cbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cc2:	4b15      	ldr	r3, [pc, #84]	; (8000d18 <HAL_MspInit+0x5c>)
 8000cc4:	699b      	ldr	r3, [r3, #24]
 8000cc6:	4a14      	ldr	r2, [pc, #80]	; (8000d18 <HAL_MspInit+0x5c>)
 8000cc8:	f043 0301 	orr.w	r3, r3, #1
 8000ccc:	6193      	str	r3, [r2, #24]
 8000cce:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <HAL_MspInit+0x5c>)
 8000cd0:	699b      	ldr	r3, [r3, #24]
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	60bb      	str	r3, [r7, #8]
 8000cd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cda:	4b0f      	ldr	r3, [pc, #60]	; (8000d18 <HAL_MspInit+0x5c>)
 8000cdc:	69db      	ldr	r3, [r3, #28]
 8000cde:	4a0e      	ldr	r2, [pc, #56]	; (8000d18 <HAL_MspInit+0x5c>)
 8000ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ce4:	61d3      	str	r3, [r2, #28]
 8000ce6:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <HAL_MspInit+0x5c>)
 8000ce8:	69db      	ldr	r3, [r3, #28]
 8000cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cf2:	4b0a      	ldr	r3, [pc, #40]	; (8000d1c <HAL_MspInit+0x60>)
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	4a04      	ldr	r2, [pc, #16]	; (8000d1c <HAL_MspInit+0x60>)
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	3714      	adds	r7, #20
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bc80      	pop	{r7}
 8000d16:	4770      	bx	lr
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	40010000 	.word	0x40010000

08000d20 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b088      	sub	sp, #32
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d28:	f107 0310 	add.w	r3, r7, #16
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a2c      	ldr	r2, [pc, #176]	; (8000dec <HAL_CAN_MspInit+0xcc>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d151      	bne.n	8000de4 <HAL_CAN_MspInit+0xc4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d40:	4b2b      	ldr	r3, [pc, #172]	; (8000df0 <HAL_CAN_MspInit+0xd0>)
 8000d42:	69db      	ldr	r3, [r3, #28]
 8000d44:	4a2a      	ldr	r2, [pc, #168]	; (8000df0 <HAL_CAN_MspInit+0xd0>)
 8000d46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d4a:	61d3      	str	r3, [r2, #28]
 8000d4c:	4b28      	ldr	r3, [pc, #160]	; (8000df0 <HAL_CAN_MspInit+0xd0>)
 8000d4e:	69db      	ldr	r3, [r3, #28]
 8000d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d58:	4b25      	ldr	r3, [pc, #148]	; (8000df0 <HAL_CAN_MspInit+0xd0>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	4a24      	ldr	r2, [pc, #144]	; (8000df0 <HAL_CAN_MspInit+0xd0>)
 8000d5e:	f043 0304 	orr.w	r3, r3, #4
 8000d62:	6193      	str	r3, [r2, #24]
 8000d64:	4b22      	ldr	r3, [pc, #136]	; (8000df0 <HAL_CAN_MspInit+0xd0>)
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	f003 0304 	and.w	r3, r3, #4
 8000d6c:	60bb      	str	r3, [r7, #8]
 8000d6e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000d70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d74:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d76:	2300      	movs	r3, #0
 8000d78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7e:	f107 0310 	add.w	r3, r7, #16
 8000d82:	4619      	mov	r1, r3
 8000d84:	481b      	ldr	r0, [pc, #108]	; (8000df4 <HAL_CAN_MspInit+0xd4>)
 8000d86:	f001 f845 	bl	8001e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d90:	2302      	movs	r3, #2
 8000d92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d94:	2303      	movs	r3, #3
 8000d96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d98:	f107 0310 	add.w	r3, r7, #16
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4815      	ldr	r0, [pc, #84]	; (8000df4 <HAL_CAN_MspInit+0xd4>)
 8000da0:	f001 f838 	bl	8001e14 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8000da4:	2200      	movs	r2, #0
 8000da6:	2100      	movs	r1, #0
 8000da8:	2013      	movs	r0, #19
 8000daa:	f000 fffc 	bl	8001da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8000dae:	2013      	movs	r0, #19
 8000db0:	f001 f815 	bl	8001dde <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000db4:	2200      	movs	r2, #0
 8000db6:	2100      	movs	r1, #0
 8000db8:	2014      	movs	r0, #20
 8000dba:	f000 fff4 	bl	8001da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000dbe:	2014      	movs	r0, #20
 8000dc0:	f001 f80d 	bl	8001dde <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	2015      	movs	r0, #21
 8000dca:	f000 ffec 	bl	8001da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000dce:	2015      	movs	r0, #21
 8000dd0:	f001 f805 	bl	8001dde <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	2016      	movs	r0, #22
 8000dda:	f000 ffe4 	bl	8001da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000dde:	2016      	movs	r0, #22
 8000de0:	f000 fffd 	bl	8001dde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000de4:	bf00      	nop
 8000de6:	3720      	adds	r7, #32
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40006400 	.word	0x40006400
 8000df0:	40021000 	.word	0x40021000
 8000df4:	40010800 	.word	0x40010800

08000df8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b088      	sub	sp, #32
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	f107 0310 	add.w	r3, r7, #16
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a1c      	ldr	r2, [pc, #112]	; (8000e84 <HAL_UART_MspInit+0x8c>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d131      	bne.n	8000e7c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e18:	4b1b      	ldr	r3, [pc, #108]	; (8000e88 <HAL_UART_MspInit+0x90>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	4a1a      	ldr	r2, [pc, #104]	; (8000e88 <HAL_UART_MspInit+0x90>)
 8000e1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e22:	6193      	str	r3, [r2, #24]
 8000e24:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <HAL_UART_MspInit+0x90>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e30:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <HAL_UART_MspInit+0x90>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	4a14      	ldr	r2, [pc, #80]	; (8000e88 <HAL_UART_MspInit+0x90>)
 8000e36:	f043 0304 	orr.w	r3, r3, #4
 8000e3a:	6193      	str	r3, [r2, #24]
 8000e3c:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <HAL_UART_MspInit+0x90>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	f003 0304 	and.w	r3, r3, #4
 8000e44:	60bb      	str	r3, [r7, #8]
 8000e46:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e4c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e52:	2303      	movs	r3, #3
 8000e54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e56:	f107 0310 	add.w	r3, r7, #16
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	480b      	ldr	r0, [pc, #44]	; (8000e8c <HAL_UART_MspInit+0x94>)
 8000e5e:	f000 ffd9 	bl	8001e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e70:	f107 0310 	add.w	r3, r7, #16
 8000e74:	4619      	mov	r1, r3
 8000e76:	4805      	ldr	r0, [pc, #20]	; (8000e8c <HAL_UART_MspInit+0x94>)
 8000e78:	f000 ffcc 	bl	8001e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e7c:	bf00      	nop
 8000e7e:	3720      	adds	r7, #32
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40013800 	.word	0x40013800
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	40010800 	.word	0x40010800

08000e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <NMI_Handler+0x4>

08000e96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e9a:	e7fe      	b.n	8000e9a <HardFault_Handler+0x4>

08000e9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <MemManage_Handler+0x4>

08000ea2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea6:	e7fe      	b.n	8000ea6 <BusFault_Handler+0x4>

08000ea8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eac:	e7fe      	b.n	8000eac <UsageFault_Handler+0x4>

08000eae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bc80      	pop	{r7}
 8000eb8:	4770      	bx	lr

08000eba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bc80      	pop	{r7}
 8000ec4:	4770      	bx	lr

08000ec6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bc80      	pop	{r7}
 8000ed0:	4770      	bx	lr

08000ed2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed6:	f000 f8d3 	bl	8001080 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000ee4:	4802      	ldr	r0, [pc, #8]	; (8000ef0 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8000ee6:	f000 fc5b 	bl	80017a0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000078 	.word	0x20000078

08000ef4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000ef8:	4802      	ldr	r0, [pc, #8]	; (8000f04 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000efa:	f000 fc51 	bl	80017a0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000078 	.word	0x20000078

08000f08 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000f0c:	4802      	ldr	r0, [pc, #8]	; (8000f18 <CAN1_RX1_IRQHandler+0x10>)
 8000f0e:	f000 fc47 	bl	80017a0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000078 	.word	0x20000078

08000f1c <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000f20:	4802      	ldr	r0, [pc, #8]	; (8000f2c <CAN1_SCE_IRQHandler+0x10>)
 8000f22:	f000 fc3d 	bl	80017a0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000078 	.word	0x20000078

08000f30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f38:	4a14      	ldr	r2, [pc, #80]	; (8000f8c <_sbrk+0x5c>)
 8000f3a:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <_sbrk+0x60>)
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f44:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <_sbrk+0x64>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d102      	bne.n	8000f52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f4c:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <_sbrk+0x64>)
 8000f4e:	4a12      	ldr	r2, [pc, #72]	; (8000f98 <_sbrk+0x68>)
 8000f50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f52:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <_sbrk+0x64>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4413      	add	r3, r2
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d207      	bcs.n	8000f70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f60:	f001 fed0 	bl	8002d04 <__errno>
 8000f64:	4603      	mov	r3, r0
 8000f66:	220c      	movs	r2, #12
 8000f68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6e:	e009      	b.n	8000f84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f70:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <_sbrk+0x64>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f76:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <_sbrk+0x64>)
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	4a05      	ldr	r2, [pc, #20]	; (8000f94 <_sbrk+0x64>)
 8000f80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f82:	68fb      	ldr	r3, [r7, #12]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3718      	adds	r7, #24
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20005000 	.word	0x20005000
 8000f90:	00000400 	.word	0x00000400
 8000f94:	200000e8 	.word	0x200000e8
 8000f98:	20000238 	.word	0x20000238

08000f9c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr

08000fa8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fa8:	f7ff fff8 	bl	8000f9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fac:	480b      	ldr	r0, [pc, #44]	; (8000fdc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000fae:	490c      	ldr	r1, [pc, #48]	; (8000fe0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000fb0:	4a0c      	ldr	r2, [pc, #48]	; (8000fe4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000fb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb4:	e002      	b.n	8000fbc <LoopCopyDataInit>

08000fb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fba:	3304      	adds	r3, #4

08000fbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc0:	d3f9      	bcc.n	8000fb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fc2:	4a09      	ldr	r2, [pc, #36]	; (8000fe8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000fc4:	4c09      	ldr	r4, [pc, #36]	; (8000fec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc8:	e001      	b.n	8000fce <LoopFillZerobss>

08000fca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fcc:	3204      	adds	r2, #4

08000fce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd0:	d3fb      	bcc.n	8000fca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fd2:	f001 fe9d 	bl	8002d10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fd6:	f7ff fcff 	bl	80009d8 <main>
  bx lr
 8000fda:	4770      	bx	lr
  ldr r0, =_sdata
 8000fdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000fe4:	08002e54 	.word	0x08002e54
  ldr r2, =_sbss
 8000fe8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000fec:	20000238 	.word	0x20000238

08000ff0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ff0:	e7fe      	b.n	8000ff0 <ADC1_2_IRQHandler>
	...

08000ff4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff8:	4b08      	ldr	r3, [pc, #32]	; (800101c <HAL_Init+0x28>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a07      	ldr	r2, [pc, #28]	; (800101c <HAL_Init+0x28>)
 8000ffe:	f043 0310 	orr.w	r3, r3, #16
 8001002:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001004:	2003      	movs	r0, #3
 8001006:	f000 fec3 	bl	8001d90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800100a:	200f      	movs	r0, #15
 800100c:	f000 f808 	bl	8001020 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001010:	f7ff fe54 	bl	8000cbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40022000 	.word	0x40022000

08001020 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <HAL_InitTick+0x54>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	4b12      	ldr	r3, [pc, #72]	; (8001078 <HAL_InitTick+0x58>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	4619      	mov	r1, r3
 8001032:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001036:	fbb3 f3f1 	udiv	r3, r3, r1
 800103a:	fbb2 f3f3 	udiv	r3, r2, r3
 800103e:	4618      	mov	r0, r3
 8001040:	f000 fedb 	bl	8001dfa <HAL_SYSTICK_Config>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e00e      	b.n	800106c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2b0f      	cmp	r3, #15
 8001052:	d80a      	bhi.n	800106a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001054:	2200      	movs	r2, #0
 8001056:	6879      	ldr	r1, [r7, #4]
 8001058:	f04f 30ff 	mov.w	r0, #4294967295
 800105c:	f000 fea3 	bl	8001da6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001060:	4a06      	ldr	r2, [pc, #24]	; (800107c <HAL_InitTick+0x5c>)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001066:	2300      	movs	r3, #0
 8001068:	e000      	b.n	800106c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
}
 800106c:	4618      	mov	r0, r3
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000000 	.word	0x20000000
 8001078:	20000008 	.word	0x20000008
 800107c:	20000004 	.word	0x20000004

08001080 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001084:	4b05      	ldr	r3, [pc, #20]	; (800109c <HAL_IncTick+0x1c>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	461a      	mov	r2, r3
 800108a:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <HAL_IncTick+0x20>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4413      	add	r3, r2
 8001090:	4a03      	ldr	r2, [pc, #12]	; (80010a0 <HAL_IncTick+0x20>)
 8001092:	6013      	str	r3, [r2, #0]
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr
 800109c:	20000008 	.word	0x20000008
 80010a0:	200000ec 	.word	0x200000ec

080010a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  return uwTick;
 80010a8:	4b02      	ldr	r3, [pc, #8]	; (80010b4 <HAL_GetTick+0x10>)
 80010aa:	681b      	ldr	r3, [r3, #0]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr
 80010b4:	200000ec 	.word	0x200000ec

080010b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010c0:	f7ff fff0 	bl	80010a4 <HAL_GetTick>
 80010c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010d0:	d005      	beq.n	80010de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010d2:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <HAL_Delay+0x44>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	461a      	mov	r2, r3
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	4413      	add	r3, r2
 80010dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010de:	bf00      	nop
 80010e0:	f7ff ffe0 	bl	80010a4 <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	68fa      	ldr	r2, [r7, #12]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d8f7      	bhi.n	80010e0 <HAL_Delay+0x28>
  {
  }
}
 80010f0:	bf00      	nop
 80010f2:	bf00      	nop
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000008 	.word	0x20000008

08001100 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d101      	bne.n	8001112 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e0ed      	b.n	80012ee <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001118:	b2db      	uxtb	r3, r3
 800111a:	2b00      	cmp	r3, #0
 800111c:	d102      	bne.n	8001124 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff fdfe 	bl	8000d20 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f042 0201 	orr.w	r2, r2, #1
 8001132:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001134:	f7ff ffb6 	bl	80010a4 <HAL_GetTick>
 8001138:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800113a:	e012      	b.n	8001162 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800113c:	f7ff ffb2 	bl	80010a4 <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b0a      	cmp	r3, #10
 8001148:	d90b      	bls.n	8001162 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2205      	movs	r2, #5
 800115a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e0c5      	b.n	80012ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f003 0301 	and.w	r3, r3, #1
 800116c:	2b00      	cmp	r3, #0
 800116e:	d0e5      	beq.n	800113c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f022 0202 	bic.w	r2, r2, #2
 800117e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001180:	f7ff ff90 	bl	80010a4 <HAL_GetTick>
 8001184:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001186:	e012      	b.n	80011ae <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001188:	f7ff ff8c 	bl	80010a4 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	2b0a      	cmp	r3, #10
 8001194:	d90b      	bls.n	80011ae <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2205      	movs	r2, #5
 80011a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e09f      	b.n	80012ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f003 0302 	and.w	r3, r3, #2
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d1e5      	bne.n	8001188 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	7e1b      	ldrb	r3, [r3, #24]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d108      	bne.n	80011d6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	e007      	b.n	80011e6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	7e5b      	ldrb	r3, [r3, #25]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d108      	bne.n	8001200 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	e007      	b.n	8001210 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800120e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	7e9b      	ldrb	r3, [r3, #26]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d108      	bne.n	800122a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f042 0220 	orr.w	r2, r2, #32
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	e007      	b.n	800123a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f022 0220 	bic.w	r2, r2, #32
 8001238:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	7edb      	ldrb	r3, [r3, #27]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d108      	bne.n	8001254 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f022 0210 	bic.w	r2, r2, #16
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	e007      	b.n	8001264 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f042 0210 	orr.w	r2, r2, #16
 8001262:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	7f1b      	ldrb	r3, [r3, #28]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d108      	bne.n	800127e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f042 0208 	orr.w	r2, r2, #8
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	e007      	b.n	800128e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f022 0208 	bic.w	r2, r2, #8
 800128c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	7f5b      	ldrb	r3, [r3, #29]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d108      	bne.n	80012a8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f042 0204 	orr.w	r2, r2, #4
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	e007      	b.n	80012b8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f022 0204 	bic.w	r2, r2, #4
 80012b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	689a      	ldr	r2, [r3, #8]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	431a      	orrs	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	691b      	ldr	r3, [r3, #16]
 80012c6:	431a      	orrs	r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	695b      	ldr	r3, [r3, #20]
 80012cc:	ea42 0103 	orr.w	r1, r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	1e5a      	subs	r2, r3, #1
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	430a      	orrs	r2, r1
 80012dc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2200      	movs	r2, #0
 80012e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2201      	movs	r2, #1
 80012e8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80012f6:	b480      	push	{r7}
 80012f8:	b087      	sub	sp, #28
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
 80012fe:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f893 3020 	ldrb.w	r3, [r3, #32]
 800130c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800130e:	7cfb      	ldrb	r3, [r7, #19]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d003      	beq.n	800131c <HAL_CAN_ConfigFilter+0x26>
 8001314:	7cfb      	ldrb	r3, [r7, #19]
 8001316:	2b02      	cmp	r3, #2
 8001318:	f040 80aa 	bne.w	8001470 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001322:	f043 0201 	orr.w	r2, r3, #1
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	695b      	ldr	r3, [r3, #20]
 8001330:	f003 031f 	and.w	r3, r3, #31
 8001334:	2201      	movs	r2, #1
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	43db      	mvns	r3, r3
 8001346:	401a      	ands	r2, r3
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	69db      	ldr	r3, [r3, #28]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d123      	bne.n	800139e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	43db      	mvns	r3, r3
 8001360:	401a      	ands	r2, r3
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001374:	683a      	ldr	r2, [r7, #0]
 8001376:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001378:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	3248      	adds	r2, #72	; 0x48
 800137e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001392:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001394:	6979      	ldr	r1, [r7, #20]
 8001396:	3348      	adds	r3, #72	; 0x48
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	440b      	add	r3, r1
 800139c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	69db      	ldr	r3, [r3, #28]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d122      	bne.n	80013ec <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	431a      	orrs	r2, r3
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013c2:	683a      	ldr	r2, [r7, #0]
 80013c4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80013c6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	3248      	adds	r2, #72	; 0x48
 80013cc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013e0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013e2:	6979      	ldr	r1, [r7, #20]
 80013e4:	3348      	adds	r3, #72	; 0x48
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	440b      	add	r3, r1
 80013ea:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d109      	bne.n	8001408 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	43db      	mvns	r3, r3
 80013fe:	401a      	ands	r2, r3
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001406:	e007      	b.n	8001418 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	431a      	orrs	r2, r3
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	691b      	ldr	r3, [r3, #16]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d109      	bne.n	8001434 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	43db      	mvns	r3, r3
 800142a:	401a      	ands	r2, r3
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001432:	e007      	b.n	8001444 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	431a      	orrs	r2, r3
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	6a1b      	ldr	r3, [r3, #32]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d107      	bne.n	800145c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	431a      	orrs	r2, r3
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001462:	f023 0201 	bic.w	r2, r3, #1
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800146c:	2300      	movs	r3, #0
 800146e:	e006      	b.n	800147e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001474:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
  }
}
 800147e:	4618      	mov	r0, r3
 8001480:	371c      	adds	r7, #28
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr

08001488 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001496:	b2db      	uxtb	r3, r3
 8001498:	2b01      	cmp	r3, #1
 800149a:	d12e      	bne.n	80014fa <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2202      	movs	r2, #2
 80014a0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f022 0201 	bic.w	r2, r2, #1
 80014b2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80014b4:	f7ff fdf6 	bl	80010a4 <HAL_GetTick>
 80014b8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80014ba:	e012      	b.n	80014e2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014bc:	f7ff fdf2 	bl	80010a4 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b0a      	cmp	r3, #10
 80014c8:	d90b      	bls.n	80014e2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2205      	movs	r2, #5
 80014da:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e012      	b.n	8001508 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d1e5      	bne.n	80014bc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80014f6:	2300      	movs	r3, #0
 80014f8:	e006      	b.n	8001508 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
  }
}
 8001508:	4618      	mov	r0, r3
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001510:	b480      	push	{r7}
 8001512:	b087      	sub	sp, #28
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
 800151c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001524:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001526:	7dfb      	ldrb	r3, [r7, #23]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d003      	beq.n	8001534 <HAL_CAN_GetRxMessage+0x24>
 800152c:	7dfb      	ldrb	r3, [r7, #23]
 800152e:	2b02      	cmp	r3, #2
 8001530:	f040 8103 	bne.w	800173a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d10e      	bne.n	8001558 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	f003 0303 	and.w	r3, r3, #3
 8001544:	2b00      	cmp	r3, #0
 8001546:	d116      	bne.n	8001576 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e0f7      	b.n	8001748 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	691b      	ldr	r3, [r3, #16]
 800155e:	f003 0303 	and.w	r3, r3, #3
 8001562:	2b00      	cmp	r3, #0
 8001564:	d107      	bne.n	8001576 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e0e8      	b.n	8001748 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	331b      	adds	r3, #27
 800157e:	011b      	lsls	r3, r3, #4
 8001580:	4413      	add	r3, r2
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0204 	and.w	r2, r3, #4
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d10c      	bne.n	80015ae <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	331b      	adds	r3, #27
 800159c:	011b      	lsls	r3, r3, #4
 800159e:	4413      	add	r3, r2
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	0d5b      	lsrs	r3, r3, #21
 80015a4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	e00b      	b.n	80015c6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	331b      	adds	r3, #27
 80015b6:	011b      	lsls	r3, r3, #4
 80015b8:	4413      	add	r3, r2
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	08db      	lsrs	r3, r3, #3
 80015be:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	331b      	adds	r3, #27
 80015ce:	011b      	lsls	r3, r3, #4
 80015d0:	4413      	add	r3, r2
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0202 	and.w	r2, r3, #2
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	331b      	adds	r3, #27
 80015e4:	011b      	lsls	r3, r3, #4
 80015e6:	4413      	add	r3, r2
 80015e8:	3304      	adds	r3, #4
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0308 	and.w	r3, r3, #8
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d003      	beq.n	80015fc <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2208      	movs	r2, #8
 80015f8:	611a      	str	r2, [r3, #16]
 80015fa:	e00b      	b.n	8001614 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	331b      	adds	r3, #27
 8001604:	011b      	lsls	r3, r3, #4
 8001606:	4413      	add	r3, r2
 8001608:	3304      	adds	r3, #4
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 020f 	and.w	r2, r3, #15
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	331b      	adds	r3, #27
 800161c:	011b      	lsls	r3, r3, #4
 800161e:	4413      	add	r3, r2
 8001620:	3304      	adds	r3, #4
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	0a1b      	lsrs	r3, r3, #8
 8001626:	b2da      	uxtb	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	331b      	adds	r3, #27
 8001634:	011b      	lsls	r3, r3, #4
 8001636:	4413      	add	r3, r2
 8001638:	3304      	adds	r3, #4
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	0c1b      	lsrs	r3, r3, #16
 800163e:	b29a      	uxth	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	011b      	lsls	r3, r3, #4
 800164c:	4413      	add	r3, r2
 800164e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	b2da      	uxtb	r2, r3
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	011b      	lsls	r3, r3, #4
 8001662:	4413      	add	r3, r2
 8001664:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	0a1a      	lsrs	r2, r3, #8
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	3301      	adds	r3, #1
 8001670:	b2d2      	uxtb	r2, r2
 8001672:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	011b      	lsls	r3, r3, #4
 800167c:	4413      	add	r3, r2
 800167e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	0c1a      	lsrs	r2, r3, #16
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	3302      	adds	r3, #2
 800168a:	b2d2      	uxtb	r2, r2
 800168c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	011b      	lsls	r3, r3, #4
 8001696:	4413      	add	r3, r2
 8001698:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	0e1a      	lsrs	r2, r3, #24
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	3303      	adds	r3, #3
 80016a4:	b2d2      	uxtb	r2, r2
 80016a6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	011b      	lsls	r3, r3, #4
 80016b0:	4413      	add	r3, r2
 80016b2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	3304      	adds	r3, #4
 80016bc:	b2d2      	uxtb	r2, r2
 80016be:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	011b      	lsls	r3, r3, #4
 80016c8:	4413      	add	r3, r2
 80016ca:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	0a1a      	lsrs	r2, r3, #8
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	3305      	adds	r3, #5
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	011b      	lsls	r3, r3, #4
 80016e2:	4413      	add	r3, r2
 80016e4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	0c1a      	lsrs	r2, r3, #16
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	3306      	adds	r3, #6
 80016f0:	b2d2      	uxtb	r2, r2
 80016f2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	011b      	lsls	r3, r3, #4
 80016fc:	4413      	add	r3, r2
 80016fe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	0e1a      	lsrs	r2, r3, #24
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	3307      	adds	r3, #7
 800170a:	b2d2      	uxtb	r2, r2
 800170c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d108      	bne.n	8001726 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	68da      	ldr	r2, [r3, #12]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f042 0220 	orr.w	r2, r2, #32
 8001722:	60da      	str	r2, [r3, #12]
 8001724:	e007      	b.n	8001736 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	691a      	ldr	r2, [r3, #16]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f042 0220 	orr.w	r2, r2, #32
 8001734:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001736:	2300      	movs	r3, #0
 8001738:	e006      	b.n	8001748 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
  }
}
 8001748:	4618      	mov	r0, r3
 800174a:	371c      	adds	r7, #28
 800174c:	46bd      	mov	sp, r7
 800174e:	bc80      	pop	{r7}
 8001750:	4770      	bx	lr

08001752 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8001752:	b480      	push	{r7}
 8001754:	b085      	sub	sp, #20
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
 800175a:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 800175c:	2300      	movs	r3, #0
 800175e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001766:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001768:	7afb      	ldrb	r3, [r7, #11]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d002      	beq.n	8001774 <HAL_CAN_GetRxFifoFillLevel+0x22>
 800176e:	7afb      	ldrb	r3, [r7, #11]
 8001770:	2b02      	cmp	r3, #2
 8001772:	d10f      	bne.n	8001794 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d106      	bne.n	8001788 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	f003 0303 	and.w	r3, r3, #3
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	e005      	b.n	8001794 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	f003 0303 	and.w	r3, r3, #3
 8001792:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8001794:	68fb      	ldr	r3, [r7, #12]
}
 8001796:	4618      	mov	r0, r3
 8001798:	3714      	adds	r7, #20
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr

080017a0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b08a      	sub	sp, #40	; 0x28
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80017a8:	2300      	movs	r3, #0
 80017aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	695b      	ldr	r3, [r3, #20]
 80017b2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	691b      	ldr	r3, [r3, #16]
 80017d2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80017dc:	6a3b      	ldr	r3, [r7, #32]
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d07c      	beq.n	80018e0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d023      	beq.n	8001838 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2201      	movs	r2, #1
 80017f6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d003      	beq.n	800180a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f000 f983 	bl	8001b0e <HAL_CAN_TxMailbox0CompleteCallback>
 8001808:	e016      	b.n	8001838 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	2b00      	cmp	r3, #0
 8001812:	d004      	beq.n	800181e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001816:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800181a:	627b      	str	r3, [r7, #36]	; 0x24
 800181c:	e00c      	b.n	8001838 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	f003 0308 	and.w	r3, r3, #8
 8001824:	2b00      	cmp	r3, #0
 8001826:	d004      	beq.n	8001832 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800182e:	627b      	str	r3, [r7, #36]	; 0x24
 8001830:	e002      	b.n	8001838 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f000 f986 	bl	8001b44 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800183e:	2b00      	cmp	r3, #0
 8001840:	d024      	beq.n	800188c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f44f 7280 	mov.w	r2, #256	; 0x100
 800184a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001852:	2b00      	cmp	r3, #0
 8001854:	d003      	beq.n	800185e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f000 f962 	bl	8001b20 <HAL_CAN_TxMailbox1CompleteCallback>
 800185c:	e016      	b.n	800188c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001864:	2b00      	cmp	r3, #0
 8001866:	d004      	beq.n	8001872 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800186e:	627b      	str	r3, [r7, #36]	; 0x24
 8001870:	e00c      	b.n	800188c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001878:	2b00      	cmp	r3, #0
 800187a:	d004      	beq.n	8001886 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800187c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001882:	627b      	str	r3, [r7, #36]	; 0x24
 8001884:	e002      	b.n	800188c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f000 f965 	bl	8001b56 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d024      	beq.n	80018e0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800189e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d003      	beq.n	80018b2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f000 f941 	bl	8001b32 <HAL_CAN_TxMailbox2CompleteCallback>
 80018b0:	e016      	b.n	80018e0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d004      	beq.n	80018c6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80018bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24
 80018c4:	e00c      	b.n	80018e0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d004      	beq.n	80018da <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80018d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d6:	627b      	str	r3, [r7, #36]	; 0x24
 80018d8:	e002      	b.n	80018e0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 f944 	bl	8001b68 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80018e0:	6a3b      	ldr	r3, [r7, #32]
 80018e2:	f003 0308 	and.w	r3, r3, #8
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d00c      	beq.n	8001904 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	f003 0310 	and.w	r3, r3, #16
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d007      	beq.n	8001904 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80018f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018fa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2210      	movs	r2, #16
 8001902:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001904:	6a3b      	ldr	r3, [r7, #32]
 8001906:	f003 0304 	and.w	r3, r3, #4
 800190a:	2b00      	cmp	r3, #0
 800190c:	d00b      	beq.n	8001926 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	f003 0308 	and.w	r3, r3, #8
 8001914:	2b00      	cmp	r3, #0
 8001916:	d006      	beq.n	8001926 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2208      	movs	r2, #8
 800191e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f000 f933 	bl	8001b8c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001926:	6a3b      	ldr	r3, [r7, #32]
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d009      	beq.n	8001944 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	f003 0303 	and.w	r3, r3, #3
 800193a:	2b00      	cmp	r3, #0
 800193c:	d002      	beq.n	8001944 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f000 f91b 	bl	8001b7a <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001944:	6a3b      	ldr	r3, [r7, #32]
 8001946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800194a:	2b00      	cmp	r3, #0
 800194c:	d00c      	beq.n	8001968 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	f003 0310 	and.w	r3, r3, #16
 8001954:	2b00      	cmp	r3, #0
 8001956:	d007      	beq.n	8001968 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800195e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2210      	movs	r2, #16
 8001966:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001968:	6a3b      	ldr	r3, [r7, #32]
 800196a:	f003 0320 	and.w	r3, r3, #32
 800196e:	2b00      	cmp	r3, #0
 8001970:	d00b      	beq.n	800198a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	f003 0308 	and.w	r3, r3, #8
 8001978:	2b00      	cmp	r3, #0
 800197a:	d006      	beq.n	800198a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2208      	movs	r2, #8
 8001982:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f000 f913 	bl	8001bb0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800198a:	6a3b      	ldr	r3, [r7, #32]
 800198c:	f003 0310 	and.w	r3, r3, #16
 8001990:	2b00      	cmp	r3, #0
 8001992:	d009      	beq.n	80019a8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	691b      	ldr	r3, [r3, #16]
 800199a:	f003 0303 	and.w	r3, r3, #3
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d002      	beq.n	80019a8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 f8fb 	bl	8001b9e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80019a8:	6a3b      	ldr	r3, [r7, #32]
 80019aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d00b      	beq.n	80019ca <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	f003 0310 	and.w	r3, r3, #16
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d006      	beq.n	80019ca <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2210      	movs	r2, #16
 80019c2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f000 f8fc 	bl	8001bc2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80019ca:	6a3b      	ldr	r3, [r7, #32]
 80019cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d00b      	beq.n	80019ec <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	f003 0308 	and.w	r3, r3, #8
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d006      	beq.n	80019ec <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2208      	movs	r2, #8
 80019e4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f000 f8f4 	bl	8001bd4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80019ec:	6a3b      	ldr	r3, [r7, #32]
 80019ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d07b      	beq.n	8001aee <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	f003 0304 	and.w	r3, r3, #4
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d072      	beq.n	8001ae6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001a00:	6a3b      	ldr	r3, [r7, #32]
 8001a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d008      	beq.n	8001a1c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d003      	beq.n	8001a1c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a16:	f043 0301 	orr.w	r3, r3, #1
 8001a1a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001a1c:	6a3b      	ldr	r3, [r7, #32]
 8001a1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d008      	beq.n	8001a38 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d003      	beq.n	8001a38 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a32:	f043 0302 	orr.w	r3, r3, #2
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001a38:	6a3b      	ldr	r3, [r7, #32]
 8001a3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d008      	beq.n	8001a54 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d003      	beq.n	8001a54 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4e:	f043 0304 	orr.w	r3, r3, #4
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001a54:	6a3b      	ldr	r3, [r7, #32]
 8001a56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d043      	beq.n	8001ae6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d03e      	beq.n	8001ae6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a6e:	2b60      	cmp	r3, #96	; 0x60
 8001a70:	d02b      	beq.n	8001aca <HAL_CAN_IRQHandler+0x32a>
 8001a72:	2b60      	cmp	r3, #96	; 0x60
 8001a74:	d82e      	bhi.n	8001ad4 <HAL_CAN_IRQHandler+0x334>
 8001a76:	2b50      	cmp	r3, #80	; 0x50
 8001a78:	d022      	beq.n	8001ac0 <HAL_CAN_IRQHandler+0x320>
 8001a7a:	2b50      	cmp	r3, #80	; 0x50
 8001a7c:	d82a      	bhi.n	8001ad4 <HAL_CAN_IRQHandler+0x334>
 8001a7e:	2b40      	cmp	r3, #64	; 0x40
 8001a80:	d019      	beq.n	8001ab6 <HAL_CAN_IRQHandler+0x316>
 8001a82:	2b40      	cmp	r3, #64	; 0x40
 8001a84:	d826      	bhi.n	8001ad4 <HAL_CAN_IRQHandler+0x334>
 8001a86:	2b30      	cmp	r3, #48	; 0x30
 8001a88:	d010      	beq.n	8001aac <HAL_CAN_IRQHandler+0x30c>
 8001a8a:	2b30      	cmp	r3, #48	; 0x30
 8001a8c:	d822      	bhi.n	8001ad4 <HAL_CAN_IRQHandler+0x334>
 8001a8e:	2b10      	cmp	r3, #16
 8001a90:	d002      	beq.n	8001a98 <HAL_CAN_IRQHandler+0x2f8>
 8001a92:	2b20      	cmp	r3, #32
 8001a94:	d005      	beq.n	8001aa2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001a96:	e01d      	b.n	8001ad4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9a:	f043 0308 	orr.w	r3, r3, #8
 8001a9e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001aa0:	e019      	b.n	8001ad6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa4:	f043 0310 	orr.w	r3, r3, #16
 8001aa8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001aaa:	e014      	b.n	8001ad6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aae:	f043 0320 	orr.w	r3, r3, #32
 8001ab2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ab4:	e00f      	b.n	8001ad6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001abe:	e00a      	b.n	8001ad6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ac6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ac8:	e005      	b.n	8001ad6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001acc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ad2:	e000      	b.n	8001ad6 <HAL_CAN_IRQHandler+0x336>
            break;
 8001ad4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	699a      	ldr	r2, [r3, #24]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001ae4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2204      	movs	r2, #4
 8001aec:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d008      	beq.n	8001b06 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afa:	431a      	orrs	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f000 f870 	bl	8001be6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001b06:	bf00      	nop
 8001b08:	3728      	adds	r7, #40	; 0x28
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b083      	sub	sp, #12
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr

08001b20 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001b28:	bf00      	nop
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bc80      	pop	{r7}
 8001b30:	4770      	bx	lr

08001b32 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b083      	sub	sp, #12
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr

08001b44 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bc80      	pop	{r7}
 8001b54:	4770      	bx	lr

08001b56 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b56:	b480      	push	{r7}
 8001b58:	b083      	sub	sp, #12
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr

08001b68 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bc80      	pop	{r7}
 8001b78:	4770      	bx	lr

08001b7a <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc80      	pop	{r7}
 8001b8a:	4770      	bx	lr

08001b8c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr

08001b9e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bc80      	pop	{r7}
 8001bae:	4770      	bx	lr

08001bb0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bc80      	pop	{r7}
 8001bc0:	4770      	bx	lr

08001bc2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b083      	sub	sp, #12
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr

08001bd4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bc80      	pop	{r7}
 8001be4:	4770      	bx	lr

08001be6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr

08001bf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c08:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <__NVIC_SetPriorityGrouping+0x44>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c0e:	68ba      	ldr	r2, [r7, #8]
 8001c10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c14:	4013      	ands	r3, r2
 8001c16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c2a:	4a04      	ldr	r2, [pc, #16]	; (8001c3c <__NVIC_SetPriorityGrouping+0x44>)
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	60d3      	str	r3, [r2, #12]
}
 8001c30:	bf00      	nop
 8001c32:	3714      	adds	r7, #20
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bc80      	pop	{r7}
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	e000ed00 	.word	0xe000ed00

08001c40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c44:	4b04      	ldr	r3, [pc, #16]	; (8001c58 <__NVIC_GetPriorityGrouping+0x18>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	0a1b      	lsrs	r3, r3, #8
 8001c4a:	f003 0307 	and.w	r3, r3, #7
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bc80      	pop	{r7}
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	e000ed00 	.word	0xe000ed00

08001c5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	db0b      	blt.n	8001c86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
 8001c70:	f003 021f 	and.w	r2, r3, #31
 8001c74:	4906      	ldr	r1, [pc, #24]	; (8001c90 <__NVIC_EnableIRQ+0x34>)
 8001c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7a:	095b      	lsrs	r3, r3, #5
 8001c7c:	2001      	movs	r0, #1
 8001c7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr
 8001c90:	e000e100 	.word	0xe000e100

08001c94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	6039      	str	r1, [r7, #0]
 8001c9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	db0a      	blt.n	8001cbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	b2da      	uxtb	r2, r3
 8001cac:	490c      	ldr	r1, [pc, #48]	; (8001ce0 <__NVIC_SetPriority+0x4c>)
 8001cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb2:	0112      	lsls	r2, r2, #4
 8001cb4:	b2d2      	uxtb	r2, r2
 8001cb6:	440b      	add	r3, r1
 8001cb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cbc:	e00a      	b.n	8001cd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	b2da      	uxtb	r2, r3
 8001cc2:	4908      	ldr	r1, [pc, #32]	; (8001ce4 <__NVIC_SetPriority+0x50>)
 8001cc4:	79fb      	ldrb	r3, [r7, #7]
 8001cc6:	f003 030f 	and.w	r3, r3, #15
 8001cca:	3b04      	subs	r3, #4
 8001ccc:	0112      	lsls	r2, r2, #4
 8001cce:	b2d2      	uxtb	r2, r2
 8001cd0:	440b      	add	r3, r1
 8001cd2:	761a      	strb	r2, [r3, #24]
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	e000e100 	.word	0xe000e100
 8001ce4:	e000ed00 	.word	0xe000ed00

08001ce8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b089      	sub	sp, #36	; 0x24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	f1c3 0307 	rsb	r3, r3, #7
 8001d02:	2b04      	cmp	r3, #4
 8001d04:	bf28      	it	cs
 8001d06:	2304      	movcs	r3, #4
 8001d08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	3304      	adds	r3, #4
 8001d0e:	2b06      	cmp	r3, #6
 8001d10:	d902      	bls.n	8001d18 <NVIC_EncodePriority+0x30>
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	3b03      	subs	r3, #3
 8001d16:	e000      	b.n	8001d1a <NVIC_EncodePriority+0x32>
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	43da      	mvns	r2, r3
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	401a      	ands	r2, r3
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d30:	f04f 31ff 	mov.w	r1, #4294967295
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3a:	43d9      	mvns	r1, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d40:	4313      	orrs	r3, r2
         );
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3724      	adds	r7, #36	; 0x24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr

08001d4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3b01      	subs	r3, #1
 8001d58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d5c:	d301      	bcc.n	8001d62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e00f      	b.n	8001d82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d62:	4a0a      	ldr	r2, [pc, #40]	; (8001d8c <SysTick_Config+0x40>)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3b01      	subs	r3, #1
 8001d68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d6a:	210f      	movs	r1, #15
 8001d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d70:	f7ff ff90 	bl	8001c94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d74:	4b05      	ldr	r3, [pc, #20]	; (8001d8c <SysTick_Config+0x40>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d7a:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <SysTick_Config+0x40>)
 8001d7c:	2207      	movs	r2, #7
 8001d7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	e000e010 	.word	0xe000e010

08001d90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f7ff ff2d 	bl	8001bf8 <__NVIC_SetPriorityGrouping>
}
 8001d9e:	bf00      	nop
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b086      	sub	sp, #24
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	4603      	mov	r3, r0
 8001dae:	60b9      	str	r1, [r7, #8]
 8001db0:	607a      	str	r2, [r7, #4]
 8001db2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001db4:	2300      	movs	r3, #0
 8001db6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001db8:	f7ff ff42 	bl	8001c40 <__NVIC_GetPriorityGrouping>
 8001dbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	68b9      	ldr	r1, [r7, #8]
 8001dc2:	6978      	ldr	r0, [r7, #20]
 8001dc4:	f7ff ff90 	bl	8001ce8 <NVIC_EncodePriority>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dce:	4611      	mov	r1, r2
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff ff5f 	bl	8001c94 <__NVIC_SetPriority>
}
 8001dd6:	bf00      	nop
 8001dd8:	3718      	adds	r7, #24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b082      	sub	sp, #8
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	4603      	mov	r3, r0
 8001de6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff ff35 	bl	8001c5c <__NVIC_EnableIRQ>
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b082      	sub	sp, #8
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7ff ffa2 	bl	8001d4c <SysTick_Config>
 8001e08:	4603      	mov	r3, r0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
	...

08001e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b08b      	sub	sp, #44	; 0x2c
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e22:	2300      	movs	r3, #0
 8001e24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e26:	e169      	b.n	80020fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e28:	2201      	movs	r2, #1
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	69fa      	ldr	r2, [r7, #28]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	f040 8158 	bne.w	80020f6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	4a9a      	ldr	r2, [pc, #616]	; (80020b4 <HAL_GPIO_Init+0x2a0>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d05e      	beq.n	8001f0e <HAL_GPIO_Init+0xfa>
 8001e50:	4a98      	ldr	r2, [pc, #608]	; (80020b4 <HAL_GPIO_Init+0x2a0>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d875      	bhi.n	8001f42 <HAL_GPIO_Init+0x12e>
 8001e56:	4a98      	ldr	r2, [pc, #608]	; (80020b8 <HAL_GPIO_Init+0x2a4>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d058      	beq.n	8001f0e <HAL_GPIO_Init+0xfa>
 8001e5c:	4a96      	ldr	r2, [pc, #600]	; (80020b8 <HAL_GPIO_Init+0x2a4>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d86f      	bhi.n	8001f42 <HAL_GPIO_Init+0x12e>
 8001e62:	4a96      	ldr	r2, [pc, #600]	; (80020bc <HAL_GPIO_Init+0x2a8>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d052      	beq.n	8001f0e <HAL_GPIO_Init+0xfa>
 8001e68:	4a94      	ldr	r2, [pc, #592]	; (80020bc <HAL_GPIO_Init+0x2a8>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d869      	bhi.n	8001f42 <HAL_GPIO_Init+0x12e>
 8001e6e:	4a94      	ldr	r2, [pc, #592]	; (80020c0 <HAL_GPIO_Init+0x2ac>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d04c      	beq.n	8001f0e <HAL_GPIO_Init+0xfa>
 8001e74:	4a92      	ldr	r2, [pc, #584]	; (80020c0 <HAL_GPIO_Init+0x2ac>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d863      	bhi.n	8001f42 <HAL_GPIO_Init+0x12e>
 8001e7a:	4a92      	ldr	r2, [pc, #584]	; (80020c4 <HAL_GPIO_Init+0x2b0>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d046      	beq.n	8001f0e <HAL_GPIO_Init+0xfa>
 8001e80:	4a90      	ldr	r2, [pc, #576]	; (80020c4 <HAL_GPIO_Init+0x2b0>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d85d      	bhi.n	8001f42 <HAL_GPIO_Init+0x12e>
 8001e86:	2b12      	cmp	r3, #18
 8001e88:	d82a      	bhi.n	8001ee0 <HAL_GPIO_Init+0xcc>
 8001e8a:	2b12      	cmp	r3, #18
 8001e8c:	d859      	bhi.n	8001f42 <HAL_GPIO_Init+0x12e>
 8001e8e:	a201      	add	r2, pc, #4	; (adr r2, 8001e94 <HAL_GPIO_Init+0x80>)
 8001e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e94:	08001f0f 	.word	0x08001f0f
 8001e98:	08001ee9 	.word	0x08001ee9
 8001e9c:	08001efb 	.word	0x08001efb
 8001ea0:	08001f3d 	.word	0x08001f3d
 8001ea4:	08001f43 	.word	0x08001f43
 8001ea8:	08001f43 	.word	0x08001f43
 8001eac:	08001f43 	.word	0x08001f43
 8001eb0:	08001f43 	.word	0x08001f43
 8001eb4:	08001f43 	.word	0x08001f43
 8001eb8:	08001f43 	.word	0x08001f43
 8001ebc:	08001f43 	.word	0x08001f43
 8001ec0:	08001f43 	.word	0x08001f43
 8001ec4:	08001f43 	.word	0x08001f43
 8001ec8:	08001f43 	.word	0x08001f43
 8001ecc:	08001f43 	.word	0x08001f43
 8001ed0:	08001f43 	.word	0x08001f43
 8001ed4:	08001f43 	.word	0x08001f43
 8001ed8:	08001ef1 	.word	0x08001ef1
 8001edc:	08001f05 	.word	0x08001f05
 8001ee0:	4a79      	ldr	r2, [pc, #484]	; (80020c8 <HAL_GPIO_Init+0x2b4>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d013      	beq.n	8001f0e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ee6:	e02c      	b.n	8001f42 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	623b      	str	r3, [r7, #32]
          break;
 8001eee:	e029      	b.n	8001f44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	3304      	adds	r3, #4
 8001ef6:	623b      	str	r3, [r7, #32]
          break;
 8001ef8:	e024      	b.n	8001f44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	3308      	adds	r3, #8
 8001f00:	623b      	str	r3, [r7, #32]
          break;
 8001f02:	e01f      	b.n	8001f44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	330c      	adds	r3, #12
 8001f0a:	623b      	str	r3, [r7, #32]
          break;
 8001f0c:	e01a      	b.n	8001f44 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d102      	bne.n	8001f1c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f16:	2304      	movs	r3, #4
 8001f18:	623b      	str	r3, [r7, #32]
          break;
 8001f1a:	e013      	b.n	8001f44 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d105      	bne.n	8001f30 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f24:	2308      	movs	r3, #8
 8001f26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	69fa      	ldr	r2, [r7, #28]
 8001f2c:	611a      	str	r2, [r3, #16]
          break;
 8001f2e:	e009      	b.n	8001f44 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f30:	2308      	movs	r3, #8
 8001f32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	69fa      	ldr	r2, [r7, #28]
 8001f38:	615a      	str	r2, [r3, #20]
          break;
 8001f3a:	e003      	b.n	8001f44 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	623b      	str	r3, [r7, #32]
          break;
 8001f40:	e000      	b.n	8001f44 <HAL_GPIO_Init+0x130>
          break;
 8001f42:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	2bff      	cmp	r3, #255	; 0xff
 8001f48:	d801      	bhi.n	8001f4e <HAL_GPIO_Init+0x13a>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	e001      	b.n	8001f52 <HAL_GPIO_Init+0x13e>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	3304      	adds	r3, #4
 8001f52:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	2bff      	cmp	r3, #255	; 0xff
 8001f58:	d802      	bhi.n	8001f60 <HAL_GPIO_Init+0x14c>
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	e002      	b.n	8001f66 <HAL_GPIO_Init+0x152>
 8001f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f62:	3b08      	subs	r3, #8
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	210f      	movs	r1, #15
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	fa01 f303 	lsl.w	r3, r1, r3
 8001f74:	43db      	mvns	r3, r3
 8001f76:	401a      	ands	r2, r3
 8001f78:	6a39      	ldr	r1, [r7, #32]
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f80:	431a      	orrs	r2, r3
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 80b1 	beq.w	80020f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f94:	4b4d      	ldr	r3, [pc, #308]	; (80020cc <HAL_GPIO_Init+0x2b8>)
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	4a4c      	ldr	r2, [pc, #304]	; (80020cc <HAL_GPIO_Init+0x2b8>)
 8001f9a:	f043 0301 	orr.w	r3, r3, #1
 8001f9e:	6193      	str	r3, [r2, #24]
 8001fa0:	4b4a      	ldr	r3, [pc, #296]	; (80020cc <HAL_GPIO_Init+0x2b8>)
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	60bb      	str	r3, [r7, #8]
 8001faa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fac:	4a48      	ldr	r2, [pc, #288]	; (80020d0 <HAL_GPIO_Init+0x2bc>)
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	089b      	lsrs	r3, r3, #2
 8001fb2:	3302      	adds	r3, #2
 8001fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fb8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbc:	f003 0303 	and.w	r3, r3, #3
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	220f      	movs	r2, #15
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a40      	ldr	r2, [pc, #256]	; (80020d4 <HAL_GPIO_Init+0x2c0>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d013      	beq.n	8002000 <HAL_GPIO_Init+0x1ec>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a3f      	ldr	r2, [pc, #252]	; (80020d8 <HAL_GPIO_Init+0x2c4>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d00d      	beq.n	8001ffc <HAL_GPIO_Init+0x1e8>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a3e      	ldr	r2, [pc, #248]	; (80020dc <HAL_GPIO_Init+0x2c8>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d007      	beq.n	8001ff8 <HAL_GPIO_Init+0x1e4>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a3d      	ldr	r2, [pc, #244]	; (80020e0 <HAL_GPIO_Init+0x2cc>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d101      	bne.n	8001ff4 <HAL_GPIO_Init+0x1e0>
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e006      	b.n	8002002 <HAL_GPIO_Init+0x1ee>
 8001ff4:	2304      	movs	r3, #4
 8001ff6:	e004      	b.n	8002002 <HAL_GPIO_Init+0x1ee>
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	e002      	b.n	8002002 <HAL_GPIO_Init+0x1ee>
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e000      	b.n	8002002 <HAL_GPIO_Init+0x1ee>
 8002000:	2300      	movs	r3, #0
 8002002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002004:	f002 0203 	and.w	r2, r2, #3
 8002008:	0092      	lsls	r2, r2, #2
 800200a:	4093      	lsls	r3, r2
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	4313      	orrs	r3, r2
 8002010:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002012:	492f      	ldr	r1, [pc, #188]	; (80020d0 <HAL_GPIO_Init+0x2bc>)
 8002014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002016:	089b      	lsrs	r3, r3, #2
 8002018:	3302      	adds	r3, #2
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d006      	beq.n	800203a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800202c:	4b2d      	ldr	r3, [pc, #180]	; (80020e4 <HAL_GPIO_Init+0x2d0>)
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	492c      	ldr	r1, [pc, #176]	; (80020e4 <HAL_GPIO_Init+0x2d0>)
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	4313      	orrs	r3, r2
 8002036:	608b      	str	r3, [r1, #8]
 8002038:	e006      	b.n	8002048 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800203a:	4b2a      	ldr	r3, [pc, #168]	; (80020e4 <HAL_GPIO_Init+0x2d0>)
 800203c:	689a      	ldr	r2, [r3, #8]
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	43db      	mvns	r3, r3
 8002042:	4928      	ldr	r1, [pc, #160]	; (80020e4 <HAL_GPIO_Init+0x2d0>)
 8002044:	4013      	ands	r3, r2
 8002046:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d006      	beq.n	8002062 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002054:	4b23      	ldr	r3, [pc, #140]	; (80020e4 <HAL_GPIO_Init+0x2d0>)
 8002056:	68da      	ldr	r2, [r3, #12]
 8002058:	4922      	ldr	r1, [pc, #136]	; (80020e4 <HAL_GPIO_Init+0x2d0>)
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	60cb      	str	r3, [r1, #12]
 8002060:	e006      	b.n	8002070 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002062:	4b20      	ldr	r3, [pc, #128]	; (80020e4 <HAL_GPIO_Init+0x2d0>)
 8002064:	68da      	ldr	r2, [r3, #12]
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	43db      	mvns	r3, r3
 800206a:	491e      	ldr	r1, [pc, #120]	; (80020e4 <HAL_GPIO_Init+0x2d0>)
 800206c:	4013      	ands	r3, r2
 800206e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d006      	beq.n	800208a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800207c:	4b19      	ldr	r3, [pc, #100]	; (80020e4 <HAL_GPIO_Init+0x2d0>)
 800207e:	685a      	ldr	r2, [r3, #4]
 8002080:	4918      	ldr	r1, [pc, #96]	; (80020e4 <HAL_GPIO_Init+0x2d0>)
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	4313      	orrs	r3, r2
 8002086:	604b      	str	r3, [r1, #4]
 8002088:	e006      	b.n	8002098 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800208a:	4b16      	ldr	r3, [pc, #88]	; (80020e4 <HAL_GPIO_Init+0x2d0>)
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	43db      	mvns	r3, r3
 8002092:	4914      	ldr	r1, [pc, #80]	; (80020e4 <HAL_GPIO_Init+0x2d0>)
 8002094:	4013      	ands	r3, r2
 8002096:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d021      	beq.n	80020e8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020a4:	4b0f      	ldr	r3, [pc, #60]	; (80020e4 <HAL_GPIO_Init+0x2d0>)
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	490e      	ldr	r1, [pc, #56]	; (80020e4 <HAL_GPIO_Init+0x2d0>)
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	600b      	str	r3, [r1, #0]
 80020b0:	e021      	b.n	80020f6 <HAL_GPIO_Init+0x2e2>
 80020b2:	bf00      	nop
 80020b4:	10320000 	.word	0x10320000
 80020b8:	10310000 	.word	0x10310000
 80020bc:	10220000 	.word	0x10220000
 80020c0:	10210000 	.word	0x10210000
 80020c4:	10120000 	.word	0x10120000
 80020c8:	10110000 	.word	0x10110000
 80020cc:	40021000 	.word	0x40021000
 80020d0:	40010000 	.word	0x40010000
 80020d4:	40010800 	.word	0x40010800
 80020d8:	40010c00 	.word	0x40010c00
 80020dc:	40011000 	.word	0x40011000
 80020e0:	40011400 	.word	0x40011400
 80020e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020e8:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <HAL_GPIO_Init+0x304>)
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	43db      	mvns	r3, r3
 80020f0:	4909      	ldr	r1, [pc, #36]	; (8002118 <HAL_GPIO_Init+0x304>)
 80020f2:	4013      	ands	r3, r2
 80020f4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80020f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f8:	3301      	adds	r3, #1
 80020fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	fa22 f303 	lsr.w	r3, r2, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	f47f ae8e 	bne.w	8001e28 <HAL_GPIO_Init+0x14>
  }
}
 800210c:	bf00      	nop
 800210e:	bf00      	nop
 8002110:	372c      	adds	r7, #44	; 0x2c
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr
 8002118:	40010400 	.word	0x40010400

0800211c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	460b      	mov	r3, r1
 8002126:	807b      	strh	r3, [r7, #2]
 8002128:	4613      	mov	r3, r2
 800212a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800212c:	787b      	ldrb	r3, [r7, #1]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002132:	887a      	ldrh	r2, [r7, #2]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002138:	e003      	b.n	8002142 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800213a:	887b      	ldrh	r3, [r7, #2]
 800213c:	041a      	lsls	r2, r3, #16
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	611a      	str	r2, [r3, #16]
}
 8002142:	bf00      	nop
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr

0800214c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	460b      	mov	r3, r1
 8002156:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800215e:	887a      	ldrh	r2, [r7, #2]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4013      	ands	r3, r2
 8002164:	041a      	lsls	r2, r3, #16
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	43d9      	mvns	r1, r3
 800216a:	887b      	ldrh	r3, [r7, #2]
 800216c:	400b      	ands	r3, r1
 800216e:	431a      	orrs	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	611a      	str	r2, [r3, #16]
}
 8002174:	bf00      	nop
 8002176:	3714      	adds	r7, #20
 8002178:	46bd      	mov	sp, r7
 800217a:	bc80      	pop	{r7}
 800217c:	4770      	bx	lr
	...

08002180 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e272      	b.n	8002678 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	2b00      	cmp	r3, #0
 800219c:	f000 8087 	beq.w	80022ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021a0:	4b92      	ldr	r3, [pc, #584]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 030c 	and.w	r3, r3, #12
 80021a8:	2b04      	cmp	r3, #4
 80021aa:	d00c      	beq.n	80021c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021ac:	4b8f      	ldr	r3, [pc, #572]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f003 030c 	and.w	r3, r3, #12
 80021b4:	2b08      	cmp	r3, #8
 80021b6:	d112      	bne.n	80021de <HAL_RCC_OscConfig+0x5e>
 80021b8:	4b8c      	ldr	r3, [pc, #560]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021c4:	d10b      	bne.n	80021de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c6:	4b89      	ldr	r3, [pc, #548]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d06c      	beq.n	80022ac <HAL_RCC_OscConfig+0x12c>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d168      	bne.n	80022ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e24c      	b.n	8002678 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021e6:	d106      	bne.n	80021f6 <HAL_RCC_OscConfig+0x76>
 80021e8:	4b80      	ldr	r3, [pc, #512]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a7f      	ldr	r2, [pc, #508]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 80021ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f2:	6013      	str	r3, [r2, #0]
 80021f4:	e02e      	b.n	8002254 <HAL_RCC_OscConfig+0xd4>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d10c      	bne.n	8002218 <HAL_RCC_OscConfig+0x98>
 80021fe:	4b7b      	ldr	r3, [pc, #492]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a7a      	ldr	r2, [pc, #488]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 8002204:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002208:	6013      	str	r3, [r2, #0]
 800220a:	4b78      	ldr	r3, [pc, #480]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a77      	ldr	r2, [pc, #476]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 8002210:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002214:	6013      	str	r3, [r2, #0]
 8002216:	e01d      	b.n	8002254 <HAL_RCC_OscConfig+0xd4>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002220:	d10c      	bne.n	800223c <HAL_RCC_OscConfig+0xbc>
 8002222:	4b72      	ldr	r3, [pc, #456]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a71      	ldr	r2, [pc, #452]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 8002228:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800222c:	6013      	str	r3, [r2, #0]
 800222e:	4b6f      	ldr	r3, [pc, #444]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a6e      	ldr	r2, [pc, #440]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 8002234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002238:	6013      	str	r3, [r2, #0]
 800223a:	e00b      	b.n	8002254 <HAL_RCC_OscConfig+0xd4>
 800223c:	4b6b      	ldr	r3, [pc, #428]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a6a      	ldr	r2, [pc, #424]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 8002242:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002246:	6013      	str	r3, [r2, #0]
 8002248:	4b68      	ldr	r3, [pc, #416]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a67      	ldr	r2, [pc, #412]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 800224e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002252:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d013      	beq.n	8002284 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225c:	f7fe ff22 	bl	80010a4 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002264:	f7fe ff1e 	bl	80010a4 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b64      	cmp	r3, #100	; 0x64
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e200      	b.n	8002678 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002276:	4b5d      	ldr	r3, [pc, #372]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d0f0      	beq.n	8002264 <HAL_RCC_OscConfig+0xe4>
 8002282:	e014      	b.n	80022ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002284:	f7fe ff0e 	bl	80010a4 <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800228c:	f7fe ff0a 	bl	80010a4 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b64      	cmp	r3, #100	; 0x64
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e1ec      	b.n	8002678 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800229e:	4b53      	ldr	r3, [pc, #332]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1f0      	bne.n	800228c <HAL_RCC_OscConfig+0x10c>
 80022aa:	e000      	b.n	80022ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d063      	beq.n	8002382 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022ba:	4b4c      	ldr	r3, [pc, #304]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f003 030c 	and.w	r3, r3, #12
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00b      	beq.n	80022de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022c6:	4b49      	ldr	r3, [pc, #292]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f003 030c 	and.w	r3, r3, #12
 80022ce:	2b08      	cmp	r3, #8
 80022d0:	d11c      	bne.n	800230c <HAL_RCC_OscConfig+0x18c>
 80022d2:	4b46      	ldr	r3, [pc, #280]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d116      	bne.n	800230c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022de:	4b43      	ldr	r3, [pc, #268]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d005      	beq.n	80022f6 <HAL_RCC_OscConfig+0x176>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d001      	beq.n	80022f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e1c0      	b.n	8002678 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f6:	4b3d      	ldr	r3, [pc, #244]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	4939      	ldr	r1, [pc, #228]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 8002306:	4313      	orrs	r3, r2
 8002308:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800230a:	e03a      	b.n	8002382 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d020      	beq.n	8002356 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002314:	4b36      	ldr	r3, [pc, #216]	; (80023f0 <HAL_RCC_OscConfig+0x270>)
 8002316:	2201      	movs	r2, #1
 8002318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231a:	f7fe fec3 	bl	80010a4 <HAL_GetTick>
 800231e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002320:	e008      	b.n	8002334 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002322:	f7fe febf 	bl	80010a4 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e1a1      	b.n	8002678 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002334:	4b2d      	ldr	r3, [pc, #180]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d0f0      	beq.n	8002322 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002340:	4b2a      	ldr	r3, [pc, #168]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	695b      	ldr	r3, [r3, #20]
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	4927      	ldr	r1, [pc, #156]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 8002350:	4313      	orrs	r3, r2
 8002352:	600b      	str	r3, [r1, #0]
 8002354:	e015      	b.n	8002382 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002356:	4b26      	ldr	r3, [pc, #152]	; (80023f0 <HAL_RCC_OscConfig+0x270>)
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235c:	f7fe fea2 	bl	80010a4 <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002364:	f7fe fe9e 	bl	80010a4 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e180      	b.n	8002678 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002376:	4b1d      	ldr	r3, [pc, #116]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1f0      	bne.n	8002364 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0308 	and.w	r3, r3, #8
 800238a:	2b00      	cmp	r3, #0
 800238c:	d03a      	beq.n	8002404 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d019      	beq.n	80023ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002396:	4b17      	ldr	r3, [pc, #92]	; (80023f4 <HAL_RCC_OscConfig+0x274>)
 8002398:	2201      	movs	r2, #1
 800239a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800239c:	f7fe fe82 	bl	80010a4 <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023a4:	f7fe fe7e 	bl	80010a4 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e160      	b.n	8002678 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023b6:	4b0d      	ldr	r3, [pc, #52]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 80023b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d0f0      	beq.n	80023a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023c2:	2001      	movs	r0, #1
 80023c4:	f000 face 	bl	8002964 <RCC_Delay>
 80023c8:	e01c      	b.n	8002404 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023ca:	4b0a      	ldr	r3, [pc, #40]	; (80023f4 <HAL_RCC_OscConfig+0x274>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d0:	f7fe fe68 	bl	80010a4 <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023d6:	e00f      	b.n	80023f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023d8:	f7fe fe64 	bl	80010a4 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d908      	bls.n	80023f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e146      	b.n	8002678 <HAL_RCC_OscConfig+0x4f8>
 80023ea:	bf00      	nop
 80023ec:	40021000 	.word	0x40021000
 80023f0:	42420000 	.word	0x42420000
 80023f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023f8:	4b92      	ldr	r3, [pc, #584]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 80023fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1e9      	bne.n	80023d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0304 	and.w	r3, r3, #4
 800240c:	2b00      	cmp	r3, #0
 800240e:	f000 80a6 	beq.w	800255e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002412:	2300      	movs	r3, #0
 8002414:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002416:	4b8b      	ldr	r3, [pc, #556]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10d      	bne.n	800243e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002422:	4b88      	ldr	r3, [pc, #544]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 8002424:	69db      	ldr	r3, [r3, #28]
 8002426:	4a87      	ldr	r2, [pc, #540]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 8002428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800242c:	61d3      	str	r3, [r2, #28]
 800242e:	4b85      	ldr	r3, [pc, #532]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002436:	60bb      	str	r3, [r7, #8]
 8002438:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800243a:	2301      	movs	r3, #1
 800243c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800243e:	4b82      	ldr	r3, [pc, #520]	; (8002648 <HAL_RCC_OscConfig+0x4c8>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002446:	2b00      	cmp	r3, #0
 8002448:	d118      	bne.n	800247c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800244a:	4b7f      	ldr	r3, [pc, #508]	; (8002648 <HAL_RCC_OscConfig+0x4c8>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a7e      	ldr	r2, [pc, #504]	; (8002648 <HAL_RCC_OscConfig+0x4c8>)
 8002450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002454:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002456:	f7fe fe25 	bl	80010a4 <HAL_GetTick>
 800245a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800245c:	e008      	b.n	8002470 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800245e:	f7fe fe21 	bl	80010a4 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b64      	cmp	r3, #100	; 0x64
 800246a:	d901      	bls.n	8002470 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e103      	b.n	8002678 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002470:	4b75      	ldr	r3, [pc, #468]	; (8002648 <HAL_RCC_OscConfig+0x4c8>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002478:	2b00      	cmp	r3, #0
 800247a:	d0f0      	beq.n	800245e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d106      	bne.n	8002492 <HAL_RCC_OscConfig+0x312>
 8002484:	4b6f      	ldr	r3, [pc, #444]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 8002486:	6a1b      	ldr	r3, [r3, #32]
 8002488:	4a6e      	ldr	r2, [pc, #440]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 800248a:	f043 0301 	orr.w	r3, r3, #1
 800248e:	6213      	str	r3, [r2, #32]
 8002490:	e02d      	b.n	80024ee <HAL_RCC_OscConfig+0x36e>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d10c      	bne.n	80024b4 <HAL_RCC_OscConfig+0x334>
 800249a:	4b6a      	ldr	r3, [pc, #424]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	4a69      	ldr	r2, [pc, #420]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 80024a0:	f023 0301 	bic.w	r3, r3, #1
 80024a4:	6213      	str	r3, [r2, #32]
 80024a6:	4b67      	ldr	r3, [pc, #412]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	4a66      	ldr	r2, [pc, #408]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 80024ac:	f023 0304 	bic.w	r3, r3, #4
 80024b0:	6213      	str	r3, [r2, #32]
 80024b2:	e01c      	b.n	80024ee <HAL_RCC_OscConfig+0x36e>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	2b05      	cmp	r3, #5
 80024ba:	d10c      	bne.n	80024d6 <HAL_RCC_OscConfig+0x356>
 80024bc:	4b61      	ldr	r3, [pc, #388]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	4a60      	ldr	r2, [pc, #384]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 80024c2:	f043 0304 	orr.w	r3, r3, #4
 80024c6:	6213      	str	r3, [r2, #32]
 80024c8:	4b5e      	ldr	r3, [pc, #376]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	4a5d      	ldr	r2, [pc, #372]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 80024ce:	f043 0301 	orr.w	r3, r3, #1
 80024d2:	6213      	str	r3, [r2, #32]
 80024d4:	e00b      	b.n	80024ee <HAL_RCC_OscConfig+0x36e>
 80024d6:	4b5b      	ldr	r3, [pc, #364]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	4a5a      	ldr	r2, [pc, #360]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 80024dc:	f023 0301 	bic.w	r3, r3, #1
 80024e0:	6213      	str	r3, [r2, #32]
 80024e2:	4b58      	ldr	r3, [pc, #352]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 80024e4:	6a1b      	ldr	r3, [r3, #32]
 80024e6:	4a57      	ldr	r2, [pc, #348]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 80024e8:	f023 0304 	bic.w	r3, r3, #4
 80024ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d015      	beq.n	8002522 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f6:	f7fe fdd5 	bl	80010a4 <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024fc:	e00a      	b.n	8002514 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024fe:	f7fe fdd1 	bl	80010a4 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	f241 3288 	movw	r2, #5000	; 0x1388
 800250c:	4293      	cmp	r3, r2
 800250e:	d901      	bls.n	8002514 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e0b1      	b.n	8002678 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002514:	4b4b      	ldr	r3, [pc, #300]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d0ee      	beq.n	80024fe <HAL_RCC_OscConfig+0x37e>
 8002520:	e014      	b.n	800254c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002522:	f7fe fdbf 	bl	80010a4 <HAL_GetTick>
 8002526:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002528:	e00a      	b.n	8002540 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800252a:	f7fe fdbb 	bl	80010a4 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	f241 3288 	movw	r2, #5000	; 0x1388
 8002538:	4293      	cmp	r3, r2
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e09b      	b.n	8002678 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002540:	4b40      	ldr	r3, [pc, #256]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1ee      	bne.n	800252a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800254c:	7dfb      	ldrb	r3, [r7, #23]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d105      	bne.n	800255e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002552:	4b3c      	ldr	r3, [pc, #240]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 8002554:	69db      	ldr	r3, [r3, #28]
 8002556:	4a3b      	ldr	r2, [pc, #236]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 8002558:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800255c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	69db      	ldr	r3, [r3, #28]
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 8087 	beq.w	8002676 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002568:	4b36      	ldr	r3, [pc, #216]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f003 030c 	and.w	r3, r3, #12
 8002570:	2b08      	cmp	r3, #8
 8002572:	d061      	beq.n	8002638 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	69db      	ldr	r3, [r3, #28]
 8002578:	2b02      	cmp	r3, #2
 800257a:	d146      	bne.n	800260a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800257c:	4b33      	ldr	r3, [pc, #204]	; (800264c <HAL_RCC_OscConfig+0x4cc>)
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002582:	f7fe fd8f 	bl	80010a4 <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002588:	e008      	b.n	800259c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800258a:	f7fe fd8b 	bl	80010a4 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e06d      	b.n	8002678 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800259c:	4b29      	ldr	r3, [pc, #164]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1f0      	bne.n	800258a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a1b      	ldr	r3, [r3, #32]
 80025ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025b0:	d108      	bne.n	80025c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025b2:	4b24      	ldr	r3, [pc, #144]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	4921      	ldr	r1, [pc, #132]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025c4:	4b1f      	ldr	r3, [pc, #124]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a19      	ldr	r1, [r3, #32]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d4:	430b      	orrs	r3, r1
 80025d6:	491b      	ldr	r1, [pc, #108]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025dc:	4b1b      	ldr	r3, [pc, #108]	; (800264c <HAL_RCC_OscConfig+0x4cc>)
 80025de:	2201      	movs	r2, #1
 80025e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e2:	f7fe fd5f 	bl	80010a4 <HAL_GetTick>
 80025e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025e8:	e008      	b.n	80025fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ea:	f7fe fd5b 	bl	80010a4 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e03d      	b.n	8002678 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025fc:	4b11      	ldr	r3, [pc, #68]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d0f0      	beq.n	80025ea <HAL_RCC_OscConfig+0x46a>
 8002608:	e035      	b.n	8002676 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800260a:	4b10      	ldr	r3, [pc, #64]	; (800264c <HAL_RCC_OscConfig+0x4cc>)
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002610:	f7fe fd48 	bl	80010a4 <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002618:	f7fe fd44 	bl	80010a4 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e026      	b.n	8002678 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800262a:	4b06      	ldr	r3, [pc, #24]	; (8002644 <HAL_RCC_OscConfig+0x4c4>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1f0      	bne.n	8002618 <HAL_RCC_OscConfig+0x498>
 8002636:	e01e      	b.n	8002676 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	69db      	ldr	r3, [r3, #28]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d107      	bne.n	8002650 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e019      	b.n	8002678 <HAL_RCC_OscConfig+0x4f8>
 8002644:	40021000 	.word	0x40021000
 8002648:	40007000 	.word	0x40007000
 800264c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002650:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <HAL_RCC_OscConfig+0x500>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	429a      	cmp	r2, r3
 8002662:	d106      	bne.n	8002672 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800266e:	429a      	cmp	r2, r3
 8002670:	d001      	beq.n	8002676 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e000      	b.n	8002678 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	3718      	adds	r7, #24
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40021000 	.word	0x40021000

08002684 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d101      	bne.n	8002698 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e0d0      	b.n	800283a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002698:	4b6a      	ldr	r3, [pc, #424]	; (8002844 <HAL_RCC_ClockConfig+0x1c0>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0307 	and.w	r3, r3, #7
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d910      	bls.n	80026c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026a6:	4b67      	ldr	r3, [pc, #412]	; (8002844 <HAL_RCC_ClockConfig+0x1c0>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f023 0207 	bic.w	r2, r3, #7
 80026ae:	4965      	ldr	r1, [pc, #404]	; (8002844 <HAL_RCC_ClockConfig+0x1c0>)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026b6:	4b63      	ldr	r3, [pc, #396]	; (8002844 <HAL_RCC_ClockConfig+0x1c0>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0307 	and.w	r3, r3, #7
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d001      	beq.n	80026c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e0b8      	b.n	800283a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d020      	beq.n	8002716 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0304 	and.w	r3, r3, #4
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d005      	beq.n	80026ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026e0:	4b59      	ldr	r3, [pc, #356]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	4a58      	ldr	r2, [pc, #352]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 80026e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0308 	and.w	r3, r3, #8
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d005      	beq.n	8002704 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026f8:	4b53      	ldr	r3, [pc, #332]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	4a52      	ldr	r2, [pc, #328]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 80026fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002702:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002704:	4b50      	ldr	r3, [pc, #320]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	494d      	ldr	r1, [pc, #308]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 8002712:	4313      	orrs	r3, r2
 8002714:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b00      	cmp	r3, #0
 8002720:	d040      	beq.n	80027a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d107      	bne.n	800273a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272a:	4b47      	ldr	r3, [pc, #284]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d115      	bne.n	8002762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e07f      	b.n	800283a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	2b02      	cmp	r3, #2
 8002740:	d107      	bne.n	8002752 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002742:	4b41      	ldr	r3, [pc, #260]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d109      	bne.n	8002762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e073      	b.n	800283a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002752:	4b3d      	ldr	r3, [pc, #244]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e06b      	b.n	800283a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002762:	4b39      	ldr	r3, [pc, #228]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f023 0203 	bic.w	r2, r3, #3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	4936      	ldr	r1, [pc, #216]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 8002770:	4313      	orrs	r3, r2
 8002772:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002774:	f7fe fc96 	bl	80010a4 <HAL_GetTick>
 8002778:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800277a:	e00a      	b.n	8002792 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800277c:	f7fe fc92 	bl	80010a4 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	f241 3288 	movw	r2, #5000	; 0x1388
 800278a:	4293      	cmp	r3, r2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e053      	b.n	800283a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002792:	4b2d      	ldr	r3, [pc, #180]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f003 020c 	and.w	r2, r3, #12
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d1eb      	bne.n	800277c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027a4:	4b27      	ldr	r3, [pc, #156]	; (8002844 <HAL_RCC_ClockConfig+0x1c0>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0307 	and.w	r3, r3, #7
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d210      	bcs.n	80027d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b2:	4b24      	ldr	r3, [pc, #144]	; (8002844 <HAL_RCC_ClockConfig+0x1c0>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f023 0207 	bic.w	r2, r3, #7
 80027ba:	4922      	ldr	r1, [pc, #136]	; (8002844 <HAL_RCC_ClockConfig+0x1c0>)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	4313      	orrs	r3, r2
 80027c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027c2:	4b20      	ldr	r3, [pc, #128]	; (8002844 <HAL_RCC_ClockConfig+0x1c0>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0307 	and.w	r3, r3, #7
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d001      	beq.n	80027d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e032      	b.n	800283a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0304 	and.w	r3, r3, #4
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d008      	beq.n	80027f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027e0:	4b19      	ldr	r3, [pc, #100]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	4916      	ldr	r1, [pc, #88]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0308 	and.w	r3, r3, #8
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d009      	beq.n	8002812 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027fe:	4b12      	ldr	r3, [pc, #72]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	490e      	ldr	r1, [pc, #56]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 800280e:	4313      	orrs	r3, r2
 8002810:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002812:	f000 f821 	bl	8002858 <HAL_RCC_GetSysClockFreq>
 8002816:	4602      	mov	r2, r0
 8002818:	4b0b      	ldr	r3, [pc, #44]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	091b      	lsrs	r3, r3, #4
 800281e:	f003 030f 	and.w	r3, r3, #15
 8002822:	490a      	ldr	r1, [pc, #40]	; (800284c <HAL_RCC_ClockConfig+0x1c8>)
 8002824:	5ccb      	ldrb	r3, [r1, r3]
 8002826:	fa22 f303 	lsr.w	r3, r2, r3
 800282a:	4a09      	ldr	r2, [pc, #36]	; (8002850 <HAL_RCC_ClockConfig+0x1cc>)
 800282c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800282e:	4b09      	ldr	r3, [pc, #36]	; (8002854 <HAL_RCC_ClockConfig+0x1d0>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4618      	mov	r0, r3
 8002834:	f7fe fbf4 	bl	8001020 <HAL_InitTick>

  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	40022000 	.word	0x40022000
 8002848:	40021000 	.word	0x40021000
 800284c:	08002e20 	.word	0x08002e20
 8002850:	20000000 	.word	0x20000000
 8002854:	20000004 	.word	0x20000004

08002858 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002858:	b480      	push	{r7}
 800285a:	b087      	sub	sp, #28
 800285c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800285e:	2300      	movs	r3, #0
 8002860:	60fb      	str	r3, [r7, #12]
 8002862:	2300      	movs	r3, #0
 8002864:	60bb      	str	r3, [r7, #8]
 8002866:	2300      	movs	r3, #0
 8002868:	617b      	str	r3, [r7, #20]
 800286a:	2300      	movs	r3, #0
 800286c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800286e:	2300      	movs	r3, #0
 8002870:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002872:	4b1e      	ldr	r3, [pc, #120]	; (80028ec <HAL_RCC_GetSysClockFreq+0x94>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f003 030c 	and.w	r3, r3, #12
 800287e:	2b04      	cmp	r3, #4
 8002880:	d002      	beq.n	8002888 <HAL_RCC_GetSysClockFreq+0x30>
 8002882:	2b08      	cmp	r3, #8
 8002884:	d003      	beq.n	800288e <HAL_RCC_GetSysClockFreq+0x36>
 8002886:	e027      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002888:	4b19      	ldr	r3, [pc, #100]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800288a:	613b      	str	r3, [r7, #16]
      break;
 800288c:	e027      	b.n	80028de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	0c9b      	lsrs	r3, r3, #18
 8002892:	f003 030f 	and.w	r3, r3, #15
 8002896:	4a17      	ldr	r2, [pc, #92]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002898:	5cd3      	ldrb	r3, [r2, r3]
 800289a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d010      	beq.n	80028c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028a6:	4b11      	ldr	r3, [pc, #68]	; (80028ec <HAL_RCC_GetSysClockFreq+0x94>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	0c5b      	lsrs	r3, r3, #17
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	4a11      	ldr	r2, [pc, #68]	; (80028f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80028b2:	5cd3      	ldrb	r3, [r2, r3]
 80028b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a0d      	ldr	r2, [pc, #52]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80028ba:	fb03 f202 	mul.w	r2, r3, r2
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c4:	617b      	str	r3, [r7, #20]
 80028c6:	e004      	b.n	80028d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a0c      	ldr	r2, [pc, #48]	; (80028fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80028cc:	fb02 f303 	mul.w	r3, r2, r3
 80028d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	613b      	str	r3, [r7, #16]
      break;
 80028d6:	e002      	b.n	80028de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028d8:	4b05      	ldr	r3, [pc, #20]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80028da:	613b      	str	r3, [r7, #16]
      break;
 80028dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028de:	693b      	ldr	r3, [r7, #16]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	371c      	adds	r7, #28
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bc80      	pop	{r7}
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	40021000 	.word	0x40021000
 80028f0:	007a1200 	.word	0x007a1200
 80028f4:	08002e38 	.word	0x08002e38
 80028f8:	08002e48 	.word	0x08002e48
 80028fc:	003d0900 	.word	0x003d0900

08002900 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002904:	4b02      	ldr	r3, [pc, #8]	; (8002910 <HAL_RCC_GetHCLKFreq+0x10>)
 8002906:	681b      	ldr	r3, [r3, #0]
}
 8002908:	4618      	mov	r0, r3
 800290a:	46bd      	mov	sp, r7
 800290c:	bc80      	pop	{r7}
 800290e:	4770      	bx	lr
 8002910:	20000000 	.word	0x20000000

08002914 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002918:	f7ff fff2 	bl	8002900 <HAL_RCC_GetHCLKFreq>
 800291c:	4602      	mov	r2, r0
 800291e:	4b05      	ldr	r3, [pc, #20]	; (8002934 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	0a1b      	lsrs	r3, r3, #8
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	4903      	ldr	r1, [pc, #12]	; (8002938 <HAL_RCC_GetPCLK1Freq+0x24>)
 800292a:	5ccb      	ldrb	r3, [r1, r3]
 800292c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002930:	4618      	mov	r0, r3
 8002932:	bd80      	pop	{r7, pc}
 8002934:	40021000 	.word	0x40021000
 8002938:	08002e30 	.word	0x08002e30

0800293c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002940:	f7ff ffde 	bl	8002900 <HAL_RCC_GetHCLKFreq>
 8002944:	4602      	mov	r2, r0
 8002946:	4b05      	ldr	r3, [pc, #20]	; (800295c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	0adb      	lsrs	r3, r3, #11
 800294c:	f003 0307 	and.w	r3, r3, #7
 8002950:	4903      	ldr	r1, [pc, #12]	; (8002960 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002952:	5ccb      	ldrb	r3, [r1, r3]
 8002954:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002958:	4618      	mov	r0, r3
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40021000 	.word	0x40021000
 8002960:	08002e30 	.word	0x08002e30

08002964 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800296c:	4b0a      	ldr	r3, [pc, #40]	; (8002998 <RCC_Delay+0x34>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a0a      	ldr	r2, [pc, #40]	; (800299c <RCC_Delay+0x38>)
 8002972:	fba2 2303 	umull	r2, r3, r2, r3
 8002976:	0a5b      	lsrs	r3, r3, #9
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	fb02 f303 	mul.w	r3, r2, r3
 800297e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002980:	bf00      	nop
  }
  while (Delay --);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	1e5a      	subs	r2, r3, #1
 8002986:	60fa      	str	r2, [r7, #12]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1f9      	bne.n	8002980 <RCC_Delay+0x1c>
}
 800298c:	bf00      	nop
 800298e:	bf00      	nop
 8002990:	3714      	adds	r7, #20
 8002992:	46bd      	mov	sp, r7
 8002994:	bc80      	pop	{r7}
 8002996:	4770      	bx	lr
 8002998:	20000000 	.word	0x20000000
 800299c:	10624dd3 	.word	0x10624dd3

080029a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e042      	b.n	8002a38 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d106      	bne.n	80029cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f7fe fa16 	bl	8000df8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2224      	movs	r2, #36	; 0x24
 80029d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68da      	ldr	r2, [r3, #12]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 f82b 	bl	8002a40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	691a      	ldr	r2, [r3, #16]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	695a      	ldr	r2, [r3, #20]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68da      	ldr	r2, [r3, #12]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2220      	movs	r2, #32
 8002a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2220      	movs	r2, #32
 8002a2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	68da      	ldr	r2, [r3, #12]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	689a      	ldr	r2, [r3, #8]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	431a      	orrs	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	695b      	ldr	r3, [r3, #20]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002a7a:	f023 030c 	bic.w	r3, r3, #12
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	6812      	ldr	r2, [r2, #0]
 8002a82:	68b9      	ldr	r1, [r7, #8]
 8002a84:	430b      	orrs	r3, r1
 8002a86:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	699a      	ldr	r2, [r3, #24]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a2c      	ldr	r2, [pc, #176]	; (8002b54 <UART_SetConfig+0x114>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d103      	bne.n	8002ab0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002aa8:	f7ff ff48 	bl	800293c <HAL_RCC_GetPCLK2Freq>
 8002aac:	60f8      	str	r0, [r7, #12]
 8002aae:	e002      	b.n	8002ab6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002ab0:	f7ff ff30 	bl	8002914 <HAL_RCC_GetPCLK1Freq>
 8002ab4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4413      	add	r3, r2
 8002abe:	009a      	lsls	r2, r3, #2
 8002ac0:	441a      	add	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002acc:	4a22      	ldr	r2, [pc, #136]	; (8002b58 <UART_SetConfig+0x118>)
 8002ace:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad2:	095b      	lsrs	r3, r3, #5
 8002ad4:	0119      	lsls	r1, r3, #4
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4413      	add	r3, r2
 8002ade:	009a      	lsls	r2, r3, #2
 8002ae0:	441a      	add	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002aec:	4b1a      	ldr	r3, [pc, #104]	; (8002b58 <UART_SetConfig+0x118>)
 8002aee:	fba3 0302 	umull	r0, r3, r3, r2
 8002af2:	095b      	lsrs	r3, r3, #5
 8002af4:	2064      	movs	r0, #100	; 0x64
 8002af6:	fb00 f303 	mul.w	r3, r0, r3
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	011b      	lsls	r3, r3, #4
 8002afe:	3332      	adds	r3, #50	; 0x32
 8002b00:	4a15      	ldr	r2, [pc, #84]	; (8002b58 <UART_SetConfig+0x118>)
 8002b02:	fba2 2303 	umull	r2, r3, r2, r3
 8002b06:	095b      	lsrs	r3, r3, #5
 8002b08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b0c:	4419      	add	r1, r3
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	4613      	mov	r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	4413      	add	r3, r2
 8002b16:	009a      	lsls	r2, r3, #2
 8002b18:	441a      	add	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b24:	4b0c      	ldr	r3, [pc, #48]	; (8002b58 <UART_SetConfig+0x118>)
 8002b26:	fba3 0302 	umull	r0, r3, r3, r2
 8002b2a:	095b      	lsrs	r3, r3, #5
 8002b2c:	2064      	movs	r0, #100	; 0x64
 8002b2e:	fb00 f303 	mul.w	r3, r0, r3
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	011b      	lsls	r3, r3, #4
 8002b36:	3332      	adds	r3, #50	; 0x32
 8002b38:	4a07      	ldr	r2, [pc, #28]	; (8002b58 <UART_SetConfig+0x118>)
 8002b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3e:	095b      	lsrs	r3, r3, #5
 8002b40:	f003 020f 	and.w	r2, r3, #15
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	440a      	add	r2, r1
 8002b4a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002b4c:	bf00      	nop
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40013800 	.word	0x40013800
 8002b58:	51eb851f 	.word	0x51eb851f

08002b5c <malloc>:
 8002b5c:	4b02      	ldr	r3, [pc, #8]	; (8002b68 <malloc+0xc>)
 8002b5e:	4601      	mov	r1, r0
 8002b60:	6818      	ldr	r0, [r3, #0]
 8002b62:	f000 b82b 	b.w	8002bbc <_malloc_r>
 8002b66:	bf00      	nop
 8002b68:	20000058 	.word	0x20000058

08002b6c <free>:
 8002b6c:	4b02      	ldr	r3, [pc, #8]	; (8002b78 <free+0xc>)
 8002b6e:	4601      	mov	r1, r0
 8002b70:	6818      	ldr	r0, [r3, #0]
 8002b72:	f000 b901 	b.w	8002d78 <_free_r>
 8002b76:	bf00      	nop
 8002b78:	20000058 	.word	0x20000058

08002b7c <sbrk_aligned>:
 8002b7c:	b570      	push	{r4, r5, r6, lr}
 8002b7e:	4e0e      	ldr	r6, [pc, #56]	; (8002bb8 <sbrk_aligned+0x3c>)
 8002b80:	460c      	mov	r4, r1
 8002b82:	6831      	ldr	r1, [r6, #0]
 8002b84:	4605      	mov	r5, r0
 8002b86:	b911      	cbnz	r1, 8002b8e <sbrk_aligned+0x12>
 8002b88:	f000 f8ac 	bl	8002ce4 <_sbrk_r>
 8002b8c:	6030      	str	r0, [r6, #0]
 8002b8e:	4621      	mov	r1, r4
 8002b90:	4628      	mov	r0, r5
 8002b92:	f000 f8a7 	bl	8002ce4 <_sbrk_r>
 8002b96:	1c43      	adds	r3, r0, #1
 8002b98:	d00a      	beq.n	8002bb0 <sbrk_aligned+0x34>
 8002b9a:	1cc4      	adds	r4, r0, #3
 8002b9c:	f024 0403 	bic.w	r4, r4, #3
 8002ba0:	42a0      	cmp	r0, r4
 8002ba2:	d007      	beq.n	8002bb4 <sbrk_aligned+0x38>
 8002ba4:	1a21      	subs	r1, r4, r0
 8002ba6:	4628      	mov	r0, r5
 8002ba8:	f000 f89c 	bl	8002ce4 <_sbrk_r>
 8002bac:	3001      	adds	r0, #1
 8002bae:	d101      	bne.n	8002bb4 <sbrk_aligned+0x38>
 8002bb0:	f04f 34ff 	mov.w	r4, #4294967295
 8002bb4:	4620      	mov	r0, r4
 8002bb6:	bd70      	pop	{r4, r5, r6, pc}
 8002bb8:	200000f4 	.word	0x200000f4

08002bbc <_malloc_r>:
 8002bbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002bc0:	1ccd      	adds	r5, r1, #3
 8002bc2:	f025 0503 	bic.w	r5, r5, #3
 8002bc6:	3508      	adds	r5, #8
 8002bc8:	2d0c      	cmp	r5, #12
 8002bca:	bf38      	it	cc
 8002bcc:	250c      	movcc	r5, #12
 8002bce:	2d00      	cmp	r5, #0
 8002bd0:	4607      	mov	r7, r0
 8002bd2:	db01      	blt.n	8002bd8 <_malloc_r+0x1c>
 8002bd4:	42a9      	cmp	r1, r5
 8002bd6:	d905      	bls.n	8002be4 <_malloc_r+0x28>
 8002bd8:	230c      	movs	r3, #12
 8002bda:	2600      	movs	r6, #0
 8002bdc:	603b      	str	r3, [r7, #0]
 8002bde:	4630      	mov	r0, r6
 8002be0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002be4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002cb8 <_malloc_r+0xfc>
 8002be8:	f000 f868 	bl	8002cbc <__malloc_lock>
 8002bec:	f8d8 3000 	ldr.w	r3, [r8]
 8002bf0:	461c      	mov	r4, r3
 8002bf2:	bb5c      	cbnz	r4, 8002c4c <_malloc_r+0x90>
 8002bf4:	4629      	mov	r1, r5
 8002bf6:	4638      	mov	r0, r7
 8002bf8:	f7ff ffc0 	bl	8002b7c <sbrk_aligned>
 8002bfc:	1c43      	adds	r3, r0, #1
 8002bfe:	4604      	mov	r4, r0
 8002c00:	d155      	bne.n	8002cae <_malloc_r+0xf2>
 8002c02:	f8d8 4000 	ldr.w	r4, [r8]
 8002c06:	4626      	mov	r6, r4
 8002c08:	2e00      	cmp	r6, #0
 8002c0a:	d145      	bne.n	8002c98 <_malloc_r+0xdc>
 8002c0c:	2c00      	cmp	r4, #0
 8002c0e:	d048      	beq.n	8002ca2 <_malloc_r+0xe6>
 8002c10:	6823      	ldr	r3, [r4, #0]
 8002c12:	4631      	mov	r1, r6
 8002c14:	4638      	mov	r0, r7
 8002c16:	eb04 0903 	add.w	r9, r4, r3
 8002c1a:	f000 f863 	bl	8002ce4 <_sbrk_r>
 8002c1e:	4581      	cmp	r9, r0
 8002c20:	d13f      	bne.n	8002ca2 <_malloc_r+0xe6>
 8002c22:	6821      	ldr	r1, [r4, #0]
 8002c24:	4638      	mov	r0, r7
 8002c26:	1a6d      	subs	r5, r5, r1
 8002c28:	4629      	mov	r1, r5
 8002c2a:	f7ff ffa7 	bl	8002b7c <sbrk_aligned>
 8002c2e:	3001      	adds	r0, #1
 8002c30:	d037      	beq.n	8002ca2 <_malloc_r+0xe6>
 8002c32:	6823      	ldr	r3, [r4, #0]
 8002c34:	442b      	add	r3, r5
 8002c36:	6023      	str	r3, [r4, #0]
 8002c38:	f8d8 3000 	ldr.w	r3, [r8]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d038      	beq.n	8002cb2 <_malloc_r+0xf6>
 8002c40:	685a      	ldr	r2, [r3, #4]
 8002c42:	42a2      	cmp	r2, r4
 8002c44:	d12b      	bne.n	8002c9e <_malloc_r+0xe2>
 8002c46:	2200      	movs	r2, #0
 8002c48:	605a      	str	r2, [r3, #4]
 8002c4a:	e00f      	b.n	8002c6c <_malloc_r+0xb0>
 8002c4c:	6822      	ldr	r2, [r4, #0]
 8002c4e:	1b52      	subs	r2, r2, r5
 8002c50:	d41f      	bmi.n	8002c92 <_malloc_r+0xd6>
 8002c52:	2a0b      	cmp	r2, #11
 8002c54:	d917      	bls.n	8002c86 <_malloc_r+0xca>
 8002c56:	1961      	adds	r1, r4, r5
 8002c58:	42a3      	cmp	r3, r4
 8002c5a:	6025      	str	r5, [r4, #0]
 8002c5c:	bf18      	it	ne
 8002c5e:	6059      	strne	r1, [r3, #4]
 8002c60:	6863      	ldr	r3, [r4, #4]
 8002c62:	bf08      	it	eq
 8002c64:	f8c8 1000 	streq.w	r1, [r8]
 8002c68:	5162      	str	r2, [r4, r5]
 8002c6a:	604b      	str	r3, [r1, #4]
 8002c6c:	4638      	mov	r0, r7
 8002c6e:	f104 060b 	add.w	r6, r4, #11
 8002c72:	f000 f829 	bl	8002cc8 <__malloc_unlock>
 8002c76:	f026 0607 	bic.w	r6, r6, #7
 8002c7a:	1d23      	adds	r3, r4, #4
 8002c7c:	1af2      	subs	r2, r6, r3
 8002c7e:	d0ae      	beq.n	8002bde <_malloc_r+0x22>
 8002c80:	1b9b      	subs	r3, r3, r6
 8002c82:	50a3      	str	r3, [r4, r2]
 8002c84:	e7ab      	b.n	8002bde <_malloc_r+0x22>
 8002c86:	42a3      	cmp	r3, r4
 8002c88:	6862      	ldr	r2, [r4, #4]
 8002c8a:	d1dd      	bne.n	8002c48 <_malloc_r+0x8c>
 8002c8c:	f8c8 2000 	str.w	r2, [r8]
 8002c90:	e7ec      	b.n	8002c6c <_malloc_r+0xb0>
 8002c92:	4623      	mov	r3, r4
 8002c94:	6864      	ldr	r4, [r4, #4]
 8002c96:	e7ac      	b.n	8002bf2 <_malloc_r+0x36>
 8002c98:	4634      	mov	r4, r6
 8002c9a:	6876      	ldr	r6, [r6, #4]
 8002c9c:	e7b4      	b.n	8002c08 <_malloc_r+0x4c>
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	e7cc      	b.n	8002c3c <_malloc_r+0x80>
 8002ca2:	230c      	movs	r3, #12
 8002ca4:	4638      	mov	r0, r7
 8002ca6:	603b      	str	r3, [r7, #0]
 8002ca8:	f000 f80e 	bl	8002cc8 <__malloc_unlock>
 8002cac:	e797      	b.n	8002bde <_malloc_r+0x22>
 8002cae:	6025      	str	r5, [r4, #0]
 8002cb0:	e7dc      	b.n	8002c6c <_malloc_r+0xb0>
 8002cb2:	605b      	str	r3, [r3, #4]
 8002cb4:	deff      	udf	#255	; 0xff
 8002cb6:	bf00      	nop
 8002cb8:	200000f0 	.word	0x200000f0

08002cbc <__malloc_lock>:
 8002cbc:	4801      	ldr	r0, [pc, #4]	; (8002cc4 <__malloc_lock+0x8>)
 8002cbe:	f000 b84b 	b.w	8002d58 <__retarget_lock_acquire_recursive>
 8002cc2:	bf00      	nop
 8002cc4:	20000234 	.word	0x20000234

08002cc8 <__malloc_unlock>:
 8002cc8:	4801      	ldr	r0, [pc, #4]	; (8002cd0 <__malloc_unlock+0x8>)
 8002cca:	f000 b846 	b.w	8002d5a <__retarget_lock_release_recursive>
 8002cce:	bf00      	nop
 8002cd0:	20000234 	.word	0x20000234

08002cd4 <memset>:
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	4402      	add	r2, r0
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d100      	bne.n	8002cde <memset+0xa>
 8002cdc:	4770      	bx	lr
 8002cde:	f803 1b01 	strb.w	r1, [r3], #1
 8002ce2:	e7f9      	b.n	8002cd8 <memset+0x4>

08002ce4 <_sbrk_r>:
 8002ce4:	b538      	push	{r3, r4, r5, lr}
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	4d05      	ldr	r5, [pc, #20]	; (8002d00 <_sbrk_r+0x1c>)
 8002cea:	4604      	mov	r4, r0
 8002cec:	4608      	mov	r0, r1
 8002cee:	602b      	str	r3, [r5, #0]
 8002cf0:	f7fe f91e 	bl	8000f30 <_sbrk>
 8002cf4:	1c43      	adds	r3, r0, #1
 8002cf6:	d102      	bne.n	8002cfe <_sbrk_r+0x1a>
 8002cf8:	682b      	ldr	r3, [r5, #0]
 8002cfa:	b103      	cbz	r3, 8002cfe <_sbrk_r+0x1a>
 8002cfc:	6023      	str	r3, [r4, #0]
 8002cfe:	bd38      	pop	{r3, r4, r5, pc}
 8002d00:	20000230 	.word	0x20000230

08002d04 <__errno>:
 8002d04:	4b01      	ldr	r3, [pc, #4]	; (8002d0c <__errno+0x8>)
 8002d06:	6818      	ldr	r0, [r3, #0]
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	20000058 	.word	0x20000058

08002d10 <__libc_init_array>:
 8002d10:	b570      	push	{r4, r5, r6, lr}
 8002d12:	2600      	movs	r6, #0
 8002d14:	4d0c      	ldr	r5, [pc, #48]	; (8002d48 <__libc_init_array+0x38>)
 8002d16:	4c0d      	ldr	r4, [pc, #52]	; (8002d4c <__libc_init_array+0x3c>)
 8002d18:	1b64      	subs	r4, r4, r5
 8002d1a:	10a4      	asrs	r4, r4, #2
 8002d1c:	42a6      	cmp	r6, r4
 8002d1e:	d109      	bne.n	8002d34 <__libc_init_array+0x24>
 8002d20:	f000 f872 	bl	8002e08 <_init>
 8002d24:	2600      	movs	r6, #0
 8002d26:	4d0a      	ldr	r5, [pc, #40]	; (8002d50 <__libc_init_array+0x40>)
 8002d28:	4c0a      	ldr	r4, [pc, #40]	; (8002d54 <__libc_init_array+0x44>)
 8002d2a:	1b64      	subs	r4, r4, r5
 8002d2c:	10a4      	asrs	r4, r4, #2
 8002d2e:	42a6      	cmp	r6, r4
 8002d30:	d105      	bne.n	8002d3e <__libc_init_array+0x2e>
 8002d32:	bd70      	pop	{r4, r5, r6, pc}
 8002d34:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d38:	4798      	blx	r3
 8002d3a:	3601      	adds	r6, #1
 8002d3c:	e7ee      	b.n	8002d1c <__libc_init_array+0xc>
 8002d3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d42:	4798      	blx	r3
 8002d44:	3601      	adds	r6, #1
 8002d46:	e7f2      	b.n	8002d2e <__libc_init_array+0x1e>
 8002d48:	08002e4c 	.word	0x08002e4c
 8002d4c:	08002e4c 	.word	0x08002e4c
 8002d50:	08002e4c 	.word	0x08002e4c
 8002d54:	08002e50 	.word	0x08002e50

08002d58 <__retarget_lock_acquire_recursive>:
 8002d58:	4770      	bx	lr

08002d5a <__retarget_lock_release_recursive>:
 8002d5a:	4770      	bx	lr

08002d5c <memcpy>:
 8002d5c:	440a      	add	r2, r1
 8002d5e:	4291      	cmp	r1, r2
 8002d60:	f100 33ff 	add.w	r3, r0, #4294967295
 8002d64:	d100      	bne.n	8002d68 <memcpy+0xc>
 8002d66:	4770      	bx	lr
 8002d68:	b510      	push	{r4, lr}
 8002d6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d6e:	4291      	cmp	r1, r2
 8002d70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002d74:	d1f9      	bne.n	8002d6a <memcpy+0xe>
 8002d76:	bd10      	pop	{r4, pc}

08002d78 <_free_r>:
 8002d78:	b538      	push	{r3, r4, r5, lr}
 8002d7a:	4605      	mov	r5, r0
 8002d7c:	2900      	cmp	r1, #0
 8002d7e:	d040      	beq.n	8002e02 <_free_r+0x8a>
 8002d80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d84:	1f0c      	subs	r4, r1, #4
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	bfb8      	it	lt
 8002d8a:	18e4      	addlt	r4, r4, r3
 8002d8c:	f7ff ff96 	bl	8002cbc <__malloc_lock>
 8002d90:	4a1c      	ldr	r2, [pc, #112]	; (8002e04 <_free_r+0x8c>)
 8002d92:	6813      	ldr	r3, [r2, #0]
 8002d94:	b933      	cbnz	r3, 8002da4 <_free_r+0x2c>
 8002d96:	6063      	str	r3, [r4, #4]
 8002d98:	6014      	str	r4, [r2, #0]
 8002d9a:	4628      	mov	r0, r5
 8002d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002da0:	f7ff bf92 	b.w	8002cc8 <__malloc_unlock>
 8002da4:	42a3      	cmp	r3, r4
 8002da6:	d908      	bls.n	8002dba <_free_r+0x42>
 8002da8:	6820      	ldr	r0, [r4, #0]
 8002daa:	1821      	adds	r1, r4, r0
 8002dac:	428b      	cmp	r3, r1
 8002dae:	bf01      	itttt	eq
 8002db0:	6819      	ldreq	r1, [r3, #0]
 8002db2:	685b      	ldreq	r3, [r3, #4]
 8002db4:	1809      	addeq	r1, r1, r0
 8002db6:	6021      	streq	r1, [r4, #0]
 8002db8:	e7ed      	b.n	8002d96 <_free_r+0x1e>
 8002dba:	461a      	mov	r2, r3
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	b10b      	cbz	r3, 8002dc4 <_free_r+0x4c>
 8002dc0:	42a3      	cmp	r3, r4
 8002dc2:	d9fa      	bls.n	8002dba <_free_r+0x42>
 8002dc4:	6811      	ldr	r1, [r2, #0]
 8002dc6:	1850      	adds	r0, r2, r1
 8002dc8:	42a0      	cmp	r0, r4
 8002dca:	d10b      	bne.n	8002de4 <_free_r+0x6c>
 8002dcc:	6820      	ldr	r0, [r4, #0]
 8002dce:	4401      	add	r1, r0
 8002dd0:	1850      	adds	r0, r2, r1
 8002dd2:	4283      	cmp	r3, r0
 8002dd4:	6011      	str	r1, [r2, #0]
 8002dd6:	d1e0      	bne.n	8002d9a <_free_r+0x22>
 8002dd8:	6818      	ldr	r0, [r3, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	4408      	add	r0, r1
 8002dde:	6010      	str	r0, [r2, #0]
 8002de0:	6053      	str	r3, [r2, #4]
 8002de2:	e7da      	b.n	8002d9a <_free_r+0x22>
 8002de4:	d902      	bls.n	8002dec <_free_r+0x74>
 8002de6:	230c      	movs	r3, #12
 8002de8:	602b      	str	r3, [r5, #0]
 8002dea:	e7d6      	b.n	8002d9a <_free_r+0x22>
 8002dec:	6820      	ldr	r0, [r4, #0]
 8002dee:	1821      	adds	r1, r4, r0
 8002df0:	428b      	cmp	r3, r1
 8002df2:	bf01      	itttt	eq
 8002df4:	6819      	ldreq	r1, [r3, #0]
 8002df6:	685b      	ldreq	r3, [r3, #4]
 8002df8:	1809      	addeq	r1, r1, r0
 8002dfa:	6021      	streq	r1, [r4, #0]
 8002dfc:	6063      	str	r3, [r4, #4]
 8002dfe:	6054      	str	r4, [r2, #4]
 8002e00:	e7cb      	b.n	8002d9a <_free_r+0x22>
 8002e02:	bd38      	pop	{r3, r4, r5, pc}
 8002e04:	200000f0 	.word	0x200000f0

08002e08 <_init>:
 8002e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e0a:	bf00      	nop
 8002e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e0e:	bc08      	pop	{r3}
 8002e10:	469e      	mov	lr, r3
 8002e12:	4770      	bx	lr

08002e14 <_fini>:
 8002e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e16:	bf00      	nop
 8002e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e1a:	bc08      	pop	{r3}
 8002e1c:	469e      	mov	lr, r3
 8002e1e:	4770      	bx	lr
