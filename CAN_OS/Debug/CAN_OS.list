
CAN_OS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ae8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08006bf8  08006bf8  00016bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d18  08006d18  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08006d18  08006d18  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006d18  08006d18  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d18  08006d18  00016d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d1c  08006d1c  00016d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08006d20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002210  20000060  08006d80  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002270  08006d80  00022270  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   000198ad  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040c8  00000000  00000000  00039979  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015e0  00000000  00000000  0003da48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010e2  00000000  00000000  0003f028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b328  00000000  00000000  0004010a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a937  00000000  00000000  0005b432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097211  00000000  00000000  00075d69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005ef8  00000000  00000000  0010cf7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  00112e74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08006be0 	.word	0x08006be0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08006be0 	.word	0x08006be0

08000150 <CAN_TXHeaderConfig>:
	for(int i=0; i<16;i++)
	{
		FlagInit->FlagID[i]=DefaultFlagID;
	}
}
void CAN_TXHeaderConfig(CAN_TxHeaderTypeDef *Txheader, uint32_t StdId) {
 8000150:	b480      	push	{r7}
 8000152:	b083      	sub	sp, #12
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
 8000158:	6039      	str	r1, [r7, #0]
	Txheader->DLC = 8;
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	2208      	movs	r2, #8
 800015e:	611a      	str	r2, [r3, #16]
	Txheader->RTR = CAN_RTR_DATA;
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	2200      	movs	r2, #0
 8000164:	60da      	str	r2, [r3, #12]
	Txheader->IDE = CAN_ID_STD;
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	2200      	movs	r2, #0
 800016a:	609a      	str	r2, [r3, #8]
	Txheader->StdId = StdId;
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	683a      	ldr	r2, [r7, #0]
 8000170:	601a      	str	r2, [r3, #0]
}
 8000172:	bf00      	nop
 8000174:	370c      	adds	r7, #12
 8000176:	46bd      	mov	sp, r7
 8000178:	bc80      	pop	{r7}
 800017a:	4770      	bx	lr

0800017c <CAN_Receive_Error_Handle>:
#include "CAN_Flag.h"
#include <stdlib.h>
#include "CAN_OSI.h"
extern CAN_HandleTypeDef hcan;

void CAN_Receive_Error_Handle(FlagRecNotification *FlagNoti,FlagFrameHandle *FlagHandle) {
 800017c:	b580      	push	{r7, lr}
 800017e:	b084      	sub	sp, #16
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
 8000184:	6039      	str	r1, [r7, #0]
	if(*FlagNoti==REC_FRAMEDATA_ERROR){
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	781b      	ldrb	r3, [r3, #0]
 800018a:	2b01      	cmp	r3, #1
 800018c:	d122      	bne.n	80001d4 <CAN_Receive_Error_Handle+0x58>
			for(uint8_t FrameType=0; FrameType<FlagHandle->NumberOfFrame;FrameType++)
 800018e:	2300      	movs	r3, #0
 8000190:	73fb      	strb	r3, [r7, #15]
 8000192:	e019      	b.n	80001c8 <CAN_Receive_Error_Handle+0x4c>
			{
				if(FlagHandle->FlagID[FlagHandle->ID].FrameError[FrameType]==1)
 8000194:	683b      	ldr	r3, [r7, #0]
 8000196:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800019a:	4618      	mov	r0, r3
 800019c:	7bfa      	ldrb	r2, [r7, #15]
 800019e:	6839      	ldr	r1, [r7, #0]
 80001a0:	4603      	mov	r3, r0
 80001a2:	011b      	lsls	r3, r3, #4
 80001a4:	4403      	add	r3, r0
 80001a6:	440b      	add	r3, r1
 80001a8:	4413      	add	r3, r2
 80001aa:	3309      	adds	r3, #9
 80001ac:	781b      	ldrb	r3, [r3, #0]
 80001ae:	2b01      	cmp	r3, #1
 80001b0:	d107      	bne.n	80001c2 <CAN_Receive_Error_Handle+0x46>
				{
					CAN_Send_Response(FlagHandle->ID,FRAME_ERROR,FrameType);
 80001b2:	683b      	ldr	r3, [r7, #0]
 80001b4:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80001b8:	7bfa      	ldrb	r2, [r7, #15]
 80001ba:	2103      	movs	r1, #3
 80001bc:	4618      	mov	r0, r3
 80001be:	f000 f80d 	bl	80001dc <CAN_Send_Response>
			for(uint8_t FrameType=0; FrameType<FlagHandle->NumberOfFrame;FrameType++)
 80001c2:	7bfb      	ldrb	r3, [r7, #15]
 80001c4:	3301      	adds	r3, #1
 80001c6:	73fb      	strb	r3, [r7, #15]
 80001c8:	683b      	ldr	r3, [r7, #0]
 80001ca:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 80001ce:	7bfa      	ldrb	r2, [r7, #15]
 80001d0:	429a      	cmp	r2, r3
 80001d2:	d3df      	bcc.n	8000194 <CAN_Receive_Error_Handle+0x18>
				}
			}
	}
}
 80001d4:	bf00      	nop
 80001d6:	3710      	adds	r7, #16
 80001d8:	46bd      	mov	sp, r7
 80001da:	bd80      	pop	{r7, pc}

080001dc <CAN_Send_Response>:
uint16_t CAN_Send_Response(uint8_t ID, uint8_t Opcode, uint8_t FrameType) {
 80001dc:	b580      	push	{r7, lr}
 80001de:	b08c      	sub	sp, #48	; 0x30
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	4603      	mov	r3, r0
 80001e4:	71fb      	strb	r3, [r7, #7]
 80001e6:	460b      	mov	r3, r1
 80001e8:	71bb      	strb	r3, [r7, #6]
 80001ea:	4613      	mov	r3, r2
 80001ec:	717b      	strb	r3, [r7, #5]
	CAN_TxHeaderTypeDef TxHeader;
	uint32_t Txmailbox;
	uint8_t OpcodeData[8] = { Opcode, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55 };
 80001ee:	79bb      	ldrb	r3, [r7, #6]
 80001f0:	723b      	strb	r3, [r7, #8]
 80001f2:	2355      	movs	r3, #85	; 0x55
 80001f4:	727b      	strb	r3, [r7, #9]
 80001f6:	2355      	movs	r3, #85	; 0x55
 80001f8:	72bb      	strb	r3, [r7, #10]
 80001fa:	2355      	movs	r3, #85	; 0x55
 80001fc:	72fb      	strb	r3, [r7, #11]
 80001fe:	2355      	movs	r3, #85	; 0x55
 8000200:	733b      	strb	r3, [r7, #12]
 8000202:	2355      	movs	r3, #85	; 0x55
 8000204:	737b      	strb	r3, [r7, #13]
 8000206:	2355      	movs	r3, #85	; 0x55
 8000208:	73bb      	strb	r3, [r7, #14]
 800020a:	2355      	movs	r3, #85	; 0x55
 800020c:	73fb      	strb	r3, [r7, #15]
	uint8_t StID = 0x00;
 800020e:	2300      	movs	r3, #0
 8000210:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	StID |= ID;
 8000214:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000218:	79fb      	ldrb	r3, [r7, #7]
 800021a:	4313      	orrs	r3, r2
 800021c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	StID = (StID << 3) | FrameType;
 8000220:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000224:	00db      	lsls	r3, r3, #3
 8000226:	b25a      	sxtb	r2, r3
 8000228:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800022c:	4313      	orrs	r3, r2
 800022e:	b25b      	sxtb	r3, r3
 8000230:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	CAN_TXHeaderConfig(&TxHeader, StID);
 8000234:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000238:	f107 0314 	add.w	r3, r7, #20
 800023c:	4611      	mov	r1, r2
 800023e:	4618      	mov	r0, r3
 8000240:	f7ff ff86 	bl	8000150 <CAN_TXHeaderConfig>
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, OpcodeData, &Txmailbox)
 8000244:	f107 0310 	add.w	r3, r7, #16
 8000248:	f107 0208 	add.w	r2, r7, #8
 800024c:	f107 0114 	add.w	r1, r7, #20
 8000250:	480a      	ldr	r0, [pc, #40]	; (800027c <CAN_Send_Response+0xa0>)
 8000252:	f001 faa1 	bl	8001798 <HAL_CAN_AddTxMessage>
 8000256:	4603      	mov	r3, r0
 8000258:	2b00      	cmp	r3, #0
 800025a:	d001      	beq.n	8000260 <CAN_Send_Response+0x84>
			!= HAL_OK) {
		Error_Handler();
 800025c:	f000 fe0a 	bl	8000e74 <Error_Handler>
	}
	while (HAL_CAN_IsTxMessagePending(&hcan, Txmailbox))
 8000260:	bf00      	nop
 8000262:	693b      	ldr	r3, [r7, #16]
 8000264:	4619      	mov	r1, r3
 8000266:	4805      	ldr	r0, [pc, #20]	; (800027c <CAN_Send_Response+0xa0>)
 8000268:	f001 fb65 	bl	8001936 <HAL_CAN_IsTxMessagePending>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d1f7      	bne.n	8000262 <CAN_Send_Response+0x86>
		;
	return HAL_OK;
 8000272:	2300      	movs	r3, #0
}
 8000274:	4618      	mov	r0, r3
 8000276:	3730      	adds	r7, #48	; 0x30
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}
 800027c:	2000007c 	.word	0x2000007c

08000280 <CAN_ProcessRxBuffer>:
				;
	}
}
void CAN_ProcessRxBuffer(FlagFrameHandle *FlagHandle, uint8_t ID,
		CANBufferHandleStruct *RxBuffer, uint8_t *DataPhysical,
		FlagRecNotification *FlagRecHandle) {
 8000280:	b580      	push	{r7, lr}
 8000282:	b088      	sub	sp, #32
 8000284:	af02      	add	r7, sp, #8
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	607a      	str	r2, [r7, #4]
 800028a:	603b      	str	r3, [r7, #0]
 800028c:	460b      	mov	r3, r1
 800028e:	72fb      	strb	r3, [r7, #11]
	uint8_t FrameType = 0;
 8000290:	2300      	movs	r3, #0
 8000292:	75fb      	strb	r3, [r7, #23]
	RxBuffer->NodeHandle[ID].NodeIndex++;
 8000294:	7afa      	ldrb	r2, [r7, #11]
 8000296:	6879      	ldr	r1, [r7, #4]
 8000298:	4613      	mov	r3, r2
 800029a:	00db      	lsls	r3, r3, #3
 800029c:	4413      	add	r3, r2
 800029e:	00db      	lsls	r3, r3, #3
 80002a0:	1a9b      	subs	r3, r3, r2
 80002a2:	440b      	add	r3, r1
 80002a4:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	3301      	adds	r3, #1
 80002ac:	b2d8      	uxtb	r0, r3
 80002ae:	6879      	ldr	r1, [r7, #4]
 80002b0:	4613      	mov	r3, r2
 80002b2:	00db      	lsls	r3, r3, #3
 80002b4:	4413      	add	r3, r2
 80002b6:	00db      	lsls	r3, r3, #3
 80002b8:	1a9b      	subs	r3, r3, r2
 80002ba:	440b      	add	r3, r1
 80002bc:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80002c0:	4602      	mov	r2, r0
 80002c2:	701a      	strb	r2, [r3, #0]
	for (; FrameType < RxBuffer->NodeHandle[ID].NumberOfFrame; FrameType++) {
 80002c4:	e00b      	b.n	80002de <CAN_ProcessRxBuffer+0x5e>
		CAN_ProcessFrame(FlagHandle, ID, RxBuffer, FrameType, DataPhysical);
 80002c6:	7dfa      	ldrb	r2, [r7, #23]
 80002c8:	7af9      	ldrb	r1, [r7, #11]
 80002ca:	683b      	ldr	r3, [r7, #0]
 80002cc:	9300      	str	r3, [sp, #0]
 80002ce:	4613      	mov	r3, r2
 80002d0:	687a      	ldr	r2, [r7, #4]
 80002d2:	68f8      	ldr	r0, [r7, #12]
 80002d4:	f000 f8c9 	bl	800046a <CAN_ProcessFrame>
	for (; FrameType < RxBuffer->NodeHandle[ID].NumberOfFrame; FrameType++) {
 80002d8:	7dfb      	ldrb	r3, [r7, #23]
 80002da:	3301      	adds	r3, #1
 80002dc:	75fb      	strb	r3, [r7, #23]
 80002de:	7afa      	ldrb	r2, [r7, #11]
 80002e0:	6879      	ldr	r1, [r7, #4]
 80002e2:	4613      	mov	r3, r2
 80002e4:	00db      	lsls	r3, r3, #3
 80002e6:	4413      	add	r3, r2
 80002e8:	00db      	lsls	r3, r3, #3
 80002ea:	1a9b      	subs	r3, r3, r2
 80002ec:	440b      	add	r3, r1
 80002ee:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	7dfa      	ldrb	r2, [r7, #23]
 80002f6:	429a      	cmp	r2, r3
 80002f8:	d3e5      	bcc.n	80002c6 <CAN_ProcessRxBuffer+0x46>
	}
	if (RxBuffer->NodeHandle[ID].NodeIndex
 80002fa:	7afa      	ldrb	r2, [r7, #11]
 80002fc:	6879      	ldr	r1, [r7, #4]
 80002fe:	4613      	mov	r3, r2
 8000300:	00db      	lsls	r3, r3, #3
 8000302:	4413      	add	r3, r2
 8000304:	00db      	lsls	r3, r3, #3
 8000306:	1a9b      	subs	r3, r3, r2
 8000308:	440b      	add	r3, r1
 800030a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800030e:	7819      	ldrb	r1, [r3, #0]
			== RxBuffer->NodeHandle[ID].NumberOfFrame) {
 8000310:	7afa      	ldrb	r2, [r7, #11]
 8000312:	6878      	ldr	r0, [r7, #4]
 8000314:	4613      	mov	r3, r2
 8000316:	00db      	lsls	r3, r3, #3
 8000318:	4413      	add	r3, r2
 800031a:	00db      	lsls	r3, r3, #3
 800031c:	1a9b      	subs	r3, r3, r2
 800031e:	4403      	add	r3, r0
 8000320:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8000324:	781b      	ldrb	r3, [r3, #0]
	if (RxBuffer->NodeHandle[ID].NodeIndex
 8000326:	4299      	cmp	r1, r3
 8000328:	f040 809b 	bne.w	8000462 <CAN_ProcessRxBuffer+0x1e2>
		if (FlagHandle->FlagID[ID].SumOfFlag
 800032c:	7afa      	ldrb	r2, [r7, #11]
 800032e:	68f9      	ldr	r1, [r7, #12]
 8000330:	4613      	mov	r3, r2
 8000332:	011b      	lsls	r3, r3, #4
 8000334:	4413      	add	r3, r2
 8000336:	440b      	add	r3, r1
 8000338:	3308      	adds	r3, #8
 800033a:	7819      	ldrb	r1, [r3, #0]
				== RxBuffer->NodeHandle[ID].NumberOfFrame) {
 800033c:	7afa      	ldrb	r2, [r7, #11]
 800033e:	6878      	ldr	r0, [r7, #4]
 8000340:	4613      	mov	r3, r2
 8000342:	00db      	lsls	r3, r3, #3
 8000344:	4413      	add	r3, r2
 8000346:	00db      	lsls	r3, r3, #3
 8000348:	1a9b      	subs	r3, r3, r2
 800034a:	4403      	add	r3, r0
 800034c:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8000350:	781b      	ldrb	r3, [r3, #0]
		if (FlagHandle->FlagID[ID].SumOfFlag
 8000352:	4299      	cmp	r1, r3
 8000354:	d142      	bne.n	80003dc <CAN_ProcessRxBuffer+0x15c>
			*FlagRecHandle = REC_FRAMEDATA_SUCCESS;
 8000356:	6a3b      	ldr	r3, [r7, #32]
 8000358:	2202      	movs	r2, #2
 800035a:	701a      	strb	r2, [r3, #0]
			RxBuffer->NodeHandle[ID].NodeIndex = 0;
 800035c:	7afa      	ldrb	r2, [r7, #11]
 800035e:	6879      	ldr	r1, [r7, #4]
 8000360:	4613      	mov	r3, r2
 8000362:	00db      	lsls	r3, r3, #3
 8000364:	4413      	add	r3, r2
 8000366:	00db      	lsls	r3, r3, #3
 8000368:	1a9b      	subs	r3, r3, r2
 800036a:	440b      	add	r3, r1
 800036c:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8000370:	2200      	movs	r2, #0
 8000372:	701a      	strb	r2, [r3, #0]
			RxBuffer->NodeHandle[ID].DuplicateFrame = 0;
 8000374:	7afa      	ldrb	r2, [r7, #11]
 8000376:	6879      	ldr	r1, [r7, #4]
 8000378:	4613      	mov	r3, r2
 800037a:	00db      	lsls	r3, r3, #3
 800037c:	4413      	add	r3, r2
 800037e:	00db      	lsls	r3, r3, #3
 8000380:	1a9b      	subs	r3, r3, r2
 8000382:	440b      	add	r3, r1
 8000384:	f203 130b 	addw	r3, r3, #267	; 0x10b
 8000388:	2200      	movs	r2, #0
 800038a:	701a      	strb	r2, [r3, #0]
			FlagHandle->FlagID[ID].SumOfFlag = 0;
 800038c:	7afa      	ldrb	r2, [r7, #11]
 800038e:	68f9      	ldr	r1, [r7, #12]
 8000390:	4613      	mov	r3, r2
 8000392:	011b      	lsls	r3, r3, #4
 8000394:	4413      	add	r3, r2
 8000396:	440b      	add	r3, r1
 8000398:	3308      	adds	r3, #8
 800039a:	2200      	movs	r2, #0
 800039c:	701a      	strb	r2, [r3, #0]
			for (FrameType = 0;
 800039e:	2300      	movs	r3, #0
 80003a0:	75fb      	strb	r3, [r7, #23]
 80003a2:	e00c      	b.n	80003be <CAN_ProcessRxBuffer+0x13e>
					FrameType < RxBuffer->NodeHandle[ID].NumberOfFrame;
					FrameType++) {
				FlagHandle->FlagID[ID].FlagFrameFull[FrameType] = 0;
 80003a4:	7afa      	ldrb	r2, [r7, #11]
 80003a6:	7df9      	ldrb	r1, [r7, #23]
 80003a8:	68f8      	ldr	r0, [r7, #12]
 80003aa:	4613      	mov	r3, r2
 80003ac:	011b      	lsls	r3, r3, #4
 80003ae:	4413      	add	r3, r2
 80003b0:	4403      	add	r3, r0
 80003b2:	440b      	add	r3, r1
 80003b4:	2200      	movs	r2, #0
 80003b6:	701a      	strb	r2, [r3, #0]
					FrameType++) {
 80003b8:	7dfb      	ldrb	r3, [r7, #23]
 80003ba:	3301      	adds	r3, #1
 80003bc:	75fb      	strb	r3, [r7, #23]
					FrameType < RxBuffer->NodeHandle[ID].NumberOfFrame;
 80003be:	7afa      	ldrb	r2, [r7, #11]
 80003c0:	6879      	ldr	r1, [r7, #4]
 80003c2:	4613      	mov	r3, r2
 80003c4:	00db      	lsls	r3, r3, #3
 80003c6:	4413      	add	r3, r2
 80003c8:	00db      	lsls	r3, r3, #3
 80003ca:	1a9b      	subs	r3, r3, r2
 80003cc:	440b      	add	r3, r1
 80003ce:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	7dfa      	ldrb	r2, [r7, #23]
 80003d6:	429a      	cmp	r2, r3
 80003d8:	d3e4      	bcc.n	80003a4 <CAN_ProcessRxBuffer+0x124>
					FlagHandle->NumberOfFrame=RxBuffer->NodeHandle[ID].NumberOfFrame;
				}
			}
		}
	}
}
 80003da:	e042      	b.n	8000462 <CAN_ProcessRxBuffer+0x1e2>
			*FlagRecHandle = REC_FRAMEDATA_ERROR;
 80003dc:	6a3b      	ldr	r3, [r7, #32]
 80003de:	2201      	movs	r2, #1
 80003e0:	701a      	strb	r2, [r3, #0]
			CAN_Receive_Error_Handle(FlagRecHandle, FlagHandle);
 80003e2:	68f9      	ldr	r1, [r7, #12]
 80003e4:	6a38      	ldr	r0, [r7, #32]
 80003e6:	f7ff fec9 	bl	800017c <CAN_Receive_Error_Handle>
			for (FrameType = 0;
 80003ea:	2300      	movs	r3, #0
 80003ec:	75fb      	strb	r3, [r7, #23]
 80003ee:	e02a      	b.n	8000446 <CAN_ProcessRxBuffer+0x1c6>
				if (FlagHandle->FlagID[ID].FlagFrameFull[FrameType] == 0) {
 80003f0:	7afa      	ldrb	r2, [r7, #11]
 80003f2:	7df9      	ldrb	r1, [r7, #23]
 80003f4:	68f8      	ldr	r0, [r7, #12]
 80003f6:	4613      	mov	r3, r2
 80003f8:	011b      	lsls	r3, r3, #4
 80003fa:	4413      	add	r3, r2
 80003fc:	4403      	add	r3, r0
 80003fe:	440b      	add	r3, r1
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b00      	cmp	r3, #0
 8000404:	d11c      	bne.n	8000440 <CAN_ProcessRxBuffer+0x1c0>
					FlagHandle->FlagID[ID].FrameError[FrameType] = 1;
 8000406:	7afa      	ldrb	r2, [r7, #11]
 8000408:	7df9      	ldrb	r1, [r7, #23]
 800040a:	68f8      	ldr	r0, [r7, #12]
 800040c:	4613      	mov	r3, r2
 800040e:	011b      	lsls	r3, r3, #4
 8000410:	4413      	add	r3, r2
 8000412:	4403      	add	r3, r0
 8000414:	440b      	add	r3, r1
 8000416:	3309      	adds	r3, #9
 8000418:	2201      	movs	r2, #1
 800041a:	701a      	strb	r2, [r3, #0]
					FlagHandle->ID=ID;
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	7afa      	ldrb	r2, [r7, #11]
 8000420:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
					FlagHandle->NumberOfFrame=RxBuffer->NodeHandle[ID].NumberOfFrame;
 8000424:	7afa      	ldrb	r2, [r7, #11]
 8000426:	6879      	ldr	r1, [r7, #4]
 8000428:	4613      	mov	r3, r2
 800042a:	00db      	lsls	r3, r3, #3
 800042c:	4413      	add	r3, r2
 800042e:	00db      	lsls	r3, r3, #3
 8000430:	1a9b      	subs	r3, r3, r2
 8000432:	440b      	add	r3, r1
 8000434:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8000438:	781a      	ldrb	r2, [r3, #0]
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
					FrameType++) {
 8000440:	7dfb      	ldrb	r3, [r7, #23]
 8000442:	3301      	adds	r3, #1
 8000444:	75fb      	strb	r3, [r7, #23]
					FrameType <= RxBuffer->NodeHandle[ID].NumberOfFrame;
 8000446:	7afa      	ldrb	r2, [r7, #11]
 8000448:	6879      	ldr	r1, [r7, #4]
 800044a:	4613      	mov	r3, r2
 800044c:	00db      	lsls	r3, r3, #3
 800044e:	4413      	add	r3, r2
 8000450:	00db      	lsls	r3, r3, #3
 8000452:	1a9b      	subs	r3, r3, r2
 8000454:	440b      	add	r3, r1
 8000456:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	7dfa      	ldrb	r2, [r7, #23]
 800045e:	429a      	cmp	r2, r3
 8000460:	d9c6      	bls.n	80003f0 <CAN_ProcessRxBuffer+0x170>
}
 8000462:	bf00      	nop
 8000464:	3718      	adds	r7, #24
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}

0800046a <CAN_ProcessFrame>:

void CAN_ProcessFrame(FlagFrameHandle *FlagHandle, uint8_t ID,
		CANBufferHandleStruct *RxBuffer, uint8_t FrameType, uint8_t *Data) {
 800046a:	b590      	push	{r4, r7, lr}
 800046c:	b085      	sub	sp, #20
 800046e:	af00      	add	r7, sp, #0
 8000470:	60f8      	str	r0, [r7, #12]
 8000472:	607a      	str	r2, [r7, #4]
 8000474:	461a      	mov	r2, r3
 8000476:	460b      	mov	r3, r1
 8000478:	72fb      	strb	r3, [r7, #11]
 800047a:	4613      	mov	r3, r2
 800047c:	72bb      	strb	r3, [r7, #10]
	if (RxBuffer->NodeHandle[ID].FrameType == FrameType
 800047e:	7afa      	ldrb	r2, [r7, #11]
 8000480:	6879      	ldr	r1, [r7, #4]
 8000482:	4613      	mov	r3, r2
 8000484:	00db      	lsls	r3, r3, #3
 8000486:	4413      	add	r3, r2
 8000488:	00db      	lsls	r3, r3, #3
 800048a:	1a9b      	subs	r3, r3, r2
 800048c:	440b      	add	r3, r1
 800048e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	7aba      	ldrb	r2, [r7, #10]
 8000496:	429a      	cmp	r2, r3
 8000498:	d14c      	bne.n	8000534 <CAN_ProcessFrame+0xca>
			&& FlagHandle->FlagID[ID].FlagFrameFull[FrameType] == 0) {
 800049a:	7afa      	ldrb	r2, [r7, #11]
 800049c:	7ab9      	ldrb	r1, [r7, #10]
 800049e:	68f8      	ldr	r0, [r7, #12]
 80004a0:	4613      	mov	r3, r2
 80004a2:	011b      	lsls	r3, r3, #4
 80004a4:	4413      	add	r3, r2
 80004a6:	4403      	add	r3, r0
 80004a8:	440b      	add	r3, r1
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d141      	bne.n	8000534 <CAN_ProcessFrame+0xca>
		memcpy(
				RxBuffer->NodeHandle[ID].NodeBuffer[RxBuffer->NodeHandle[ID].FrameType],
 80004b0:	7afa      	ldrb	r2, [r7, #11]
 80004b2:	7af9      	ldrb	r1, [r7, #11]
 80004b4:	6878      	ldr	r0, [r7, #4]
 80004b6:	460b      	mov	r3, r1
 80004b8:	00db      	lsls	r3, r3, #3
 80004ba:	440b      	add	r3, r1
 80004bc:	00db      	lsls	r3, r3, #3
 80004be:	1a5b      	subs	r3, r3, r1
 80004c0:	4403      	add	r3, r0
 80004c2:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	00d9      	lsls	r1, r3, #3
 80004ca:	4613      	mov	r3, r2
 80004cc:	00db      	lsls	r3, r3, #3
 80004ce:	4413      	add	r3, r2
 80004d0:	00db      	lsls	r3, r3, #3
 80004d2:	1a9b      	subs	r3, r3, r2
 80004d4:	440b      	add	r3, r1
 80004d6:	33c8      	adds	r3, #200	; 0xc8
 80004d8:	687a      	ldr	r2, [r7, #4]
 80004da:	4413      	add	r3, r2
 80004dc:	3303      	adds	r3, #3
		memcpy(
 80004de:	2208      	movs	r2, #8
 80004e0:	6a39      	ldr	r1, [r7, #32]
 80004e2:	4618      	mov	r0, r3
 80004e4:	f005 ffda 	bl	800649c <memcpy>
				Data, CAN_MAX_DATA);
		FlagHandle->FlagID[ID].FlagFrameFull[FrameType] = 1;
 80004e8:	7afa      	ldrb	r2, [r7, #11]
 80004ea:	7ab9      	ldrb	r1, [r7, #10]
 80004ec:	68f8      	ldr	r0, [r7, #12]
 80004ee:	4613      	mov	r3, r2
 80004f0:	011b      	lsls	r3, r3, #4
 80004f2:	4413      	add	r3, r2
 80004f4:	4403      	add	r3, r0
 80004f6:	440b      	add	r3, r1
 80004f8:	2201      	movs	r2, #1
 80004fa:	701a      	strb	r2, [r3, #0]
		FlagHandle->FlagID[ID].SumOfFlag +=
 80004fc:	7afa      	ldrb	r2, [r7, #11]
 80004fe:	68f9      	ldr	r1, [r7, #12]
 8000500:	4613      	mov	r3, r2
 8000502:	011b      	lsls	r3, r3, #4
 8000504:	4413      	add	r3, r2
 8000506:	440b      	add	r3, r1
 8000508:	3308      	adds	r3, #8
 800050a:	7819      	ldrb	r1, [r3, #0]
				FlagHandle->FlagID[ID].FlagFrameFull[FrameType];
 800050c:	7afa      	ldrb	r2, [r7, #11]
 800050e:	7ab8      	ldrb	r0, [r7, #10]
 8000510:	68fc      	ldr	r4, [r7, #12]
 8000512:	4613      	mov	r3, r2
 8000514:	011b      	lsls	r3, r3, #4
 8000516:	4413      	add	r3, r2
 8000518:	4423      	add	r3, r4
 800051a:	4403      	add	r3, r0
 800051c:	781b      	ldrb	r3, [r3, #0]
		FlagHandle->FlagID[ID].SumOfFlag +=
 800051e:	7afa      	ldrb	r2, [r7, #11]
 8000520:	440b      	add	r3, r1
 8000522:	b2d8      	uxtb	r0, r3
 8000524:	68f9      	ldr	r1, [r7, #12]
 8000526:	4613      	mov	r3, r2
 8000528:	011b      	lsls	r3, r3, #4
 800052a:	4413      	add	r3, r2
 800052c:	440b      	add	r3, r1
 800052e:	3308      	adds	r3, #8
 8000530:	4602      	mov	r2, r0
 8000532:	701a      	strb	r2, [r3, #0]
	}
}
 8000534:	bf00      	nop
 8000536:	3714      	adds	r7, #20
 8000538:	46bd      	mov	sp, r7
 800053a:	bd90      	pop	{r4, r7, pc}

0800053c <CAN_Recieve_Physical_FIFO0>:

	}
	return HAL_OK;
}

uint8_t CAN_Recieve_Physical_FIFO0(CAN_RxHeaderTypeDef *RxHeader, uint8_t *Data) {
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	6039      	str	r1, [r7, #0]

	while (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) == 0)
 8000546:	bf00      	nop
 8000548:	2100      	movs	r1, #0
 800054a:	480b      	ldr	r0, [pc, #44]	; (8000578 <CAN_Recieve_Physical_FIFO0+0x3c>)
 800054c:	f001 fb37 	bl	8001bbe <HAL_CAN_GetRxFifoFillLevel>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d0f8      	beq.n	8000548 <CAN_Recieve_Physical_FIFO0+0xc>
		;
	if (HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, RxHeader, Data) != HAL_OK) {
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	687a      	ldr	r2, [r7, #4]
 800055a:	2100      	movs	r1, #0
 800055c:	4806      	ldr	r0, [pc, #24]	; (8000578 <CAN_Recieve_Physical_FIFO0+0x3c>)
 800055e:	f001 fa0d 	bl	800197c <HAL_CAN_GetRxMessage>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <CAN_Recieve_Physical_FIFO0+0x30>
		Error_Handler(); //get message from RAM;
 8000568:	f000 fc84 	bl	8000e74 <Error_Handler>
	}
	return HAL_OK;
 800056c:	2300      	movs	r3, #0
}
 800056e:	4618      	mov	r0, r3
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	2000007c 	.word	0x2000007c

0800057c <CAN_Receive_DataLink>:
//	}
//	return HAL_OK;
//}

uint8_t CAN_Receive_DataLink(FlagFrameHandle *FlagHandle,
		CANBufferHandleStruct *RxBuffer, FlagRecNotification *FlagNotiHandle) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b090      	sub	sp, #64	; 0x40
 8000580:	af02      	add	r7, sp, #8
 8000582:	60f8      	str	r0, [r7, #12]
 8000584:	60b9      	str	r1, [r7, #8]
 8000586:	607a      	str	r2, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	*FlagNotiHandle = REC_DATA;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	2200      	movs	r2, #0
 800058c:	701a      	strb	r2, [r3, #0]
	uint8_t DataPhysical[CAN_MAX_DATA] = { 0 }; // init local DataPhysical for get data from receive
 800058e:	2300      	movs	r3, #0
 8000590:	613b      	str	r3, [r7, #16]
 8000592:	2300      	movs	r3, #0
 8000594:	617b      	str	r3, [r7, #20]
	uint16_t StdID = 0;
 8000596:	2300      	movs	r3, #0
 8000598:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint8_t ID = 0;
 800059a:	2300      	movs	r3, #0
 800059c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	CAN_Recieve_Physical_FIFO0(&RxHeader, DataPhysical);
 80005a0:	f107 0210 	add.w	r2, r7, #16
 80005a4:	f107 0318 	add.w	r3, r7, #24
 80005a8:	4611      	mov	r1, r2
 80005aa:	4618      	mov	r0, r3
 80005ac:	f7ff ffc6 	bl	800053c <CAN_Recieve_Physical_FIFO0>
	//CAN_Recieve_Physical_FIFO1(&RxHeader,DataPhysical);
	StdID = RxHeader.StdId;
 80005b0:	69bb      	ldr	r3, [r7, #24]
 80005b2:	86fb      	strh	r3, [r7, #54]	; 0x36
	ID = (StdID >> 3) & 15;
 80005b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80005b6:	08db      	lsrs	r3, r3, #3
 80005b8:	b29b      	uxth	r3, r3
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	f003 030f 	and.w	r3, r3, #15
 80005c0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	RxBuffer->RecvID = ID;
 80005c4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80005c8:	b29a      	uxth	r2, r3
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	RxBuffer->NodeHandle[ID].FrameType = StdID & 7; // get frame type store into Rxbuffer struct with Node ID manage frame type
 80005d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80005d8:	f003 0307 	and.w	r3, r3, #7
 80005dc:	b2d8      	uxtb	r0, r3
 80005de:	68b9      	ldr	r1, [r7, #8]
 80005e0:	4613      	mov	r3, r2
 80005e2:	00db      	lsls	r3, r3, #3
 80005e4:	4413      	add	r3, r2
 80005e6:	00db      	lsls	r3, r3, #3
 80005e8:	1a9b      	subs	r3, r3, r2
 80005ea:	440b      	add	r3, r1
 80005ec:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80005f0:	4602      	mov	r2, r0
 80005f2:	701a      	strb	r2, [r3, #0]
	if (RxBuffer->NodeHandle[ID].FrameType == SET_UP_FRAME
 80005f4:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80005f8:	68b9      	ldr	r1, [r7, #8]
 80005fa:	4613      	mov	r3, r2
 80005fc:	00db      	lsls	r3, r3, #3
 80005fe:	4413      	add	r3, r2
 8000600:	00db      	lsls	r3, r3, #3
 8000602:	1a9b      	subs	r3, r3, r2
 8000604:	440b      	add	r3, r1
 8000606:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2b00      	cmp	r3, #0
 800060e:	f040 8082 	bne.w	8000716 <CAN_Receive_DataLink+0x19a>
			&& RxBuffer->NodeHandle[ID].DuplicateFrame != 1) { // check if frame type = SET_UP_FRAME
 8000612:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8000616:	68b9      	ldr	r1, [r7, #8]
 8000618:	4613      	mov	r3, r2
 800061a:	00db      	lsls	r3, r3, #3
 800061c:	4413      	add	r3, r2
 800061e:	00db      	lsls	r3, r3, #3
 8000620:	1a9b      	subs	r3, r3, r2
 8000622:	440b      	add	r3, r1
 8000624:	f203 130b 	addw	r3, r3, #267	; 0x10b
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b01      	cmp	r3, #1
 800062c:	d073      	beq.n	8000716 <CAN_Receive_DataLink+0x19a>
		RxBuffer->NodeHandle[ID].DuplicateFrame = 1; // check send multiple SET_UP_frame
 800062e:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8000632:	68b9      	ldr	r1, [r7, #8]
 8000634:	4613      	mov	r3, r2
 8000636:	00db      	lsls	r3, r3, #3
 8000638:	4413      	add	r3, r2
 800063a:	00db      	lsls	r3, r3, #3
 800063c:	1a9b      	subs	r3, r3, r2
 800063e:	440b      	add	r3, r1
 8000640:	f203 130b 	addw	r3, r3, #267	; 0x10b
 8000644:	2201      	movs	r2, #1
 8000646:	701a      	strb	r2, [r3, #0]
		RxBuffer->NodeHandle[ID].PacketLength = DataPhysical[6];
 8000648:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800064c:	7db8      	ldrb	r0, [r7, #22]
 800064e:	68b9      	ldr	r1, [r7, #8]
 8000650:	4613      	mov	r3, r2
 8000652:	00db      	lsls	r3, r3, #3
 8000654:	4413      	add	r3, r2
 8000656:	00db      	lsls	r3, r3, #3
 8000658:	1a9b      	subs	r3, r3, r2
 800065a:	440b      	add	r3, r1
 800065c:	f203 130d 	addw	r3, r3, #269	; 0x10d
 8000660:	4602      	mov	r2, r0
 8000662:	701a      	strb	r2, [r3, #0]
		RxBuffer->NodeHandle[ID].CRCValue = DataPhysical[7];
 8000664:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8000668:	7df8      	ldrb	r0, [r7, #23]
 800066a:	68b9      	ldr	r1, [r7, #8]
 800066c:	4613      	mov	r3, r2
 800066e:	00db      	lsls	r3, r3, #3
 8000670:	4413      	add	r3, r2
 8000672:	00db      	lsls	r3, r3, #3
 8000674:	1a9b      	subs	r3, r3, r2
 8000676:	440b      	add	r3, r1
 8000678:	f203 130f 	addw	r3, r3, #271	; 0x10f
 800067c:	4602      	mov	r2, r0
 800067e:	701a      	strb	r2, [r3, #0]
		if (RxBuffer->NodeHandle[ID].PacketLength % 8 == 0) {
 8000680:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8000684:	68b9      	ldr	r1, [r7, #8]
 8000686:	4613      	mov	r3, r2
 8000688:	00db      	lsls	r3, r3, #3
 800068a:	4413      	add	r3, r2
 800068c:	00db      	lsls	r3, r3, #3
 800068e:	1a9b      	subs	r3, r3, r2
 8000690:	440b      	add	r3, r1
 8000692:	f203 130d 	addw	r3, r3, #269	; 0x10d
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	f003 0307 	and.w	r3, r3, #7
 800069c:	b2db      	uxtb	r3, r3
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d11b      	bne.n	80006da <CAN_Receive_DataLink+0x15e>
			RxBuffer->NodeHandle[ID].NumberOfFrame =
					(RxBuffer->NodeHandle[ID].PacketLength / 8);
 80006a2:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80006a6:	68b9      	ldr	r1, [r7, #8]
 80006a8:	4613      	mov	r3, r2
 80006aa:	00db      	lsls	r3, r3, #3
 80006ac:	4413      	add	r3, r2
 80006ae:	00db      	lsls	r3, r3, #3
 80006b0:	1a9b      	subs	r3, r3, r2
 80006b2:	440b      	add	r3, r1
 80006b4:	f203 130d 	addw	r3, r3, #269	; 0x10d
 80006b8:	781b      	ldrb	r3, [r3, #0]
			RxBuffer->NodeHandle[ID].NumberOfFrame =
 80006ba:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80006be:	08db      	lsrs	r3, r3, #3
 80006c0:	b2d8      	uxtb	r0, r3
 80006c2:	68b9      	ldr	r1, [r7, #8]
 80006c4:	4613      	mov	r3, r2
 80006c6:	00db      	lsls	r3, r3, #3
 80006c8:	4413      	add	r3, r2
 80006ca:	00db      	lsls	r3, r3, #3
 80006cc:	1a9b      	subs	r3, r3, r2
 80006ce:	440b      	add	r3, r1
 80006d0:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80006d4:	4602      	mov	r2, r0
 80006d6:	701a      	strb	r2, [r3, #0]
		if (RxBuffer->NodeHandle[ID].PacketLength % 8 == 0) {
 80006d8:	e04a      	b.n	8000770 <CAN_Receive_DataLink+0x1f4>
		} else {
			RxBuffer->NodeHandle[ID].NumberOfFrame =
					(RxBuffer->NodeHandle[ID].PacketLength / 8) + 1;
 80006da:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80006de:	68b9      	ldr	r1, [r7, #8]
 80006e0:	4613      	mov	r3, r2
 80006e2:	00db      	lsls	r3, r3, #3
 80006e4:	4413      	add	r3, r2
 80006e6:	00db      	lsls	r3, r3, #3
 80006e8:	1a9b      	subs	r3, r3, r2
 80006ea:	440b      	add	r3, r1
 80006ec:	f203 130d 	addw	r3, r3, #269	; 0x10d
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	08db      	lsrs	r3, r3, #3
 80006f4:	b2db      	uxtb	r3, r3
			RxBuffer->NodeHandle[ID].NumberOfFrame =
 80006f6:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
					(RxBuffer->NodeHandle[ID].PacketLength / 8) + 1;
 80006fa:	3301      	adds	r3, #1
 80006fc:	b2d8      	uxtb	r0, r3
			RxBuffer->NodeHandle[ID].NumberOfFrame =
 80006fe:	68b9      	ldr	r1, [r7, #8]
 8000700:	4613      	mov	r3, r2
 8000702:	00db      	lsls	r3, r3, #3
 8000704:	4413      	add	r3, r2
 8000706:	00db      	lsls	r3, r3, #3
 8000708:	1a9b      	subs	r3, r3, r2
 800070a:	440b      	add	r3, r1
 800070c:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8000710:	4602      	mov	r2, r0
 8000712:	701a      	strb	r2, [r3, #0]
		if (RxBuffer->NodeHandle[ID].PacketLength % 8 == 0) {
 8000714:	e02c      	b.n	8000770 <CAN_Receive_DataLink+0x1f4>
		}
	} else {
		if (RxBuffer->NodeHandle[ID].FrameType == SET_UP_FRAME) {
 8000716:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800071a:	68b9      	ldr	r1, [r7, #8]
 800071c:	4613      	mov	r3, r2
 800071e:	00db      	lsls	r3, r3, #3
 8000720:	4413      	add	r3, r2
 8000722:	00db      	lsls	r3, r3, #3
 8000724:	1a9b      	subs	r3, r3, r2
 8000726:	440b      	add	r3, r1
 8000728:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d11e      	bne.n	8000770 <CAN_Receive_DataLink+0x1f4>
			*FlagNotiHandle = REC_FRAMEDATA_ERROR;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2201      	movs	r2, #1
 8000736:	701a      	strb	r2, [r3, #0]
			CAN_Receive_Error_Handle(FlagNotiHandle, FlagHandle);
 8000738:	68f9      	ldr	r1, [r7, #12]
 800073a:	6878      	ldr	r0, [r7, #4]
 800073c:	f7ff fd1e 	bl	800017c <CAN_Receive_Error_Handle>
			FlagHandle->FlagID[ID].FrameError[RxBuffer->NodeHandle[ID].FrameType] =
 8000740:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000744:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8000748:	68b8      	ldr	r0, [r7, #8]
 800074a:	4613      	mov	r3, r2
 800074c:	00db      	lsls	r3, r3, #3
 800074e:	4413      	add	r3, r2
 8000750:	00db      	lsls	r3, r3, #3
 8000752:	1a9b      	subs	r3, r3, r2
 8000754:	4403      	add	r3, r0
 8000756:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	4618      	mov	r0, r3
 800075e:	68fa      	ldr	r2, [r7, #12]
 8000760:	460b      	mov	r3, r1
 8000762:	011b      	lsls	r3, r3, #4
 8000764:	440b      	add	r3, r1
 8000766:	4413      	add	r3, r2
 8000768:	4403      	add	r3, r0
 800076a:	3309      	adds	r3, #9
 800076c:	2201      	movs	r2, #1
 800076e:	701a      	strb	r2, [r3, #0]
					1;
		}
	}
	CAN_ProcessRxBuffer(FlagHandle, ID, RxBuffer, DataPhysical, FlagNotiHandle);
 8000770:	f107 0210 	add.w	r2, r7, #16
 8000774:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	9300      	str	r3, [sp, #0]
 800077c:	4613      	mov	r3, r2
 800077e:	68ba      	ldr	r2, [r7, #8]
 8000780:	68f8      	ldr	r0, [r7, #12]
 8000782:	f7ff fd7d 	bl	8000280 <CAN_ProcessRxBuffer>
	return HAL_OK;
 8000786:	2300      	movs	r3, #0
}
 8000788:	4618      	mov	r0, r3
 800078a:	3738      	adds	r7, #56	; 0x38
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}

08000790 <CAN_Receive_Network>:
uint8_t CAN_Receive_Network(CANBufferHandleStruct *NetBuffer,
		FlagFrameHandle *NetworkFlag, FlagRecNotification *FlagNotiHandle) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b088      	sub	sp, #32
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	607a      	str	r2, [r7, #4]
	CAN_Receive_DataLink(NetworkFlag, NetBuffer, FlagNotiHandle);
 800079c:	687a      	ldr	r2, [r7, #4]
 800079e:	68f9      	ldr	r1, [r7, #12]
 80007a0:	68b8      	ldr	r0, [r7, #8]
 80007a2:	f7ff feeb 	bl	800057c <CAN_Receive_DataLink>
	uint8_t FrameLength = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	77fb      	strb	r3, [r7, #31]
	uint8_t FrameType = 0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	77bb      	strb	r3, [r7, #30]
	uint8_t NetBufferIndex = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	777b      	strb	r3, [r7, #29]
	uint8_t DataLength = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	75fb      	strb	r3, [r7, #23]
	uint8_t CRCValue = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	75bb      	strb	r3, [r7, #22]
	uint8_t *NetData;
	FrameLength = NetBuffer->NodeHandle[NetBuffer->RecvID].NumberOfFrame;
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80007c0:	461a      	mov	r2, r3
 80007c2:	68f9      	ldr	r1, [r7, #12]
 80007c4:	4613      	mov	r3, r2
 80007c6:	00db      	lsls	r3, r3, #3
 80007c8:	4413      	add	r3, r2
 80007ca:	00db      	lsls	r3, r3, #3
 80007cc:	1a9b      	subs	r3, r3, r2
 80007ce:	440b      	add	r3, r1
 80007d0:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	77fb      	strb	r3, [r7, #31]
	uint8_t NumberofFrame = FrameLength;
 80007d8:	7ffb      	ldrb	r3, [r7, #31]
 80007da:	757b      	strb	r3, [r7, #21]
	FrameType = NetBuffer->NodeHandle[NetBuffer->RecvID].FrameType;
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80007e2:	461a      	mov	r2, r3
 80007e4:	68f9      	ldr	r1, [r7, #12]
 80007e6:	4613      	mov	r3, r2
 80007e8:	00db      	lsls	r3, r3, #3
 80007ea:	4413      	add	r3, r2
 80007ec:	00db      	lsls	r3, r3, #3
 80007ee:	1a9b      	subs	r3, r3, r2
 80007f0:	440b      	add	r3, r1
 80007f2:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	77bb      	strb	r3, [r7, #30]
	if (*FlagNotiHandle == REC_FRAMEDATA_SUCCESS) {
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	2b02      	cmp	r3, #2
 8000800:	f040 8087 	bne.w	8000912 <CAN_Receive_Network+0x182>
		for (; FrameLength > 0; FrameLength--) {
 8000804:	e021      	b.n	800084a <CAN_Receive_Network+0xba>
			memcpy(NetBuffer->Buffer[NetBufferIndex],
 8000806:	7f7b      	ldrb	r3, [r7, #29]
 8000808:	3309      	adds	r3, #9
 800080a:	00db      	lsls	r3, r3, #3
 800080c:	68fa      	ldr	r2, [r7, #12]
 800080e:	18d0      	adds	r0, r2, r3
					NetBuffer->NodeHandle[NetBuffer->RecvID].NodeBuffer[FrameType],
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8000816:	461a      	mov	r2, r3
 8000818:	7fbb      	ldrb	r3, [r7, #30]
 800081a:	00d9      	lsls	r1, r3, #3
 800081c:	4613      	mov	r3, r2
 800081e:	00db      	lsls	r3, r3, #3
 8000820:	4413      	add	r3, r2
 8000822:	00db      	lsls	r3, r3, #3
 8000824:	1a9b      	subs	r3, r3, r2
 8000826:	440b      	add	r3, r1
 8000828:	33c8      	adds	r3, #200	; 0xc8
 800082a:	68fa      	ldr	r2, [r7, #12]
 800082c:	4413      	add	r3, r2
 800082e:	3303      	adds	r3, #3
			memcpy(NetBuffer->Buffer[NetBufferIndex],
 8000830:	2208      	movs	r2, #8
 8000832:	4619      	mov	r1, r3
 8000834:	f005 fe32 	bl	800649c <memcpy>
					CAN_MAX_DATA);
			NetBufferIndex++;
 8000838:	7f7b      	ldrb	r3, [r7, #29]
 800083a:	3301      	adds	r3, #1
 800083c:	777b      	strb	r3, [r7, #29]
			FrameType--;
 800083e:	7fbb      	ldrb	r3, [r7, #30]
 8000840:	3b01      	subs	r3, #1
 8000842:	77bb      	strb	r3, [r7, #30]
		for (; FrameLength > 0; FrameLength--) {
 8000844:	7ffb      	ldrb	r3, [r7, #31]
 8000846:	3b01      	subs	r3, #1
 8000848:	77fb      	strb	r3, [r7, #31]
 800084a:	7ffb      	ldrb	r3, [r7, #31]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d1da      	bne.n	8000806 <CAN_Receive_Network+0x76>
		}
		DataLength = NetBuffer->NodeHandle[NetBuffer->RecvID].PacketLength - 2;
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8000856:	461a      	mov	r2, r3
 8000858:	68f9      	ldr	r1, [r7, #12]
 800085a:	4613      	mov	r3, r2
 800085c:	00db      	lsls	r3, r3, #3
 800085e:	4413      	add	r3, r2
 8000860:	00db      	lsls	r3, r3, #3
 8000862:	1a9b      	subs	r3, r3, r2
 8000864:	440b      	add	r3, r1
 8000866:	f203 130d 	addw	r3, r3, #269	; 0x10d
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	3b02      	subs	r3, #2
 800086e:	75fb      	strb	r3, [r7, #23]
		NetData = (uint8_t*) malloc(DataLength * sizeof(uint8_t));
 8000870:	7dfb      	ldrb	r3, [r7, #23]
 8000872:	4618      	mov	r0, r3
 8000874:	f005 fcf2 	bl	800625c <malloc>
 8000878:	4603      	mov	r3, r0
 800087a:	613b      	str	r3, [r7, #16]
		for (NetBufferIndex = 0; NetBufferIndex <= NumberofFrame;
 800087c:	2300      	movs	r3, #0
 800087e:	777b      	strb	r3, [r7, #29]
 8000880:	e01b      	b.n	80008ba <CAN_Receive_Network+0x12a>
				NetBufferIndex++) {
			for (int j = 0; j < 8; j++) {
 8000882:	2300      	movs	r3, #0
 8000884:	61bb      	str	r3, [r7, #24]
 8000886:	e012      	b.n	80008ae <CAN_Receive_Network+0x11e>
				NetData[NetBufferIndex * 8 + j] =
						NetBuffer->Buffer[NetBufferIndex][j];
 8000888:	7f7a      	ldrb	r2, [r7, #29]
				NetData[NetBufferIndex * 8 + j] =
 800088a:	7f7b      	ldrb	r3, [r7, #29]
 800088c:	00d9      	lsls	r1, r3, #3
 800088e:	69bb      	ldr	r3, [r7, #24]
 8000890:	440b      	add	r3, r1
 8000892:	4619      	mov	r1, r3
 8000894:	693b      	ldr	r3, [r7, #16]
 8000896:	440b      	add	r3, r1
						NetBuffer->Buffer[NetBufferIndex][j];
 8000898:	68f9      	ldr	r1, [r7, #12]
 800089a:	00d2      	lsls	r2, r2, #3
 800089c:	4411      	add	r1, r2
 800089e:	69ba      	ldr	r2, [r7, #24]
 80008a0:	440a      	add	r2, r1
 80008a2:	3248      	adds	r2, #72	; 0x48
 80008a4:	7812      	ldrb	r2, [r2, #0]
				NetData[NetBufferIndex * 8 + j] =
 80008a6:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < 8; j++) {
 80008a8:	69bb      	ldr	r3, [r7, #24]
 80008aa:	3301      	adds	r3, #1
 80008ac:	61bb      	str	r3, [r7, #24]
 80008ae:	69bb      	ldr	r3, [r7, #24]
 80008b0:	2b07      	cmp	r3, #7
 80008b2:	dde9      	ble.n	8000888 <CAN_Receive_Network+0xf8>
				NetBufferIndex++) {
 80008b4:	7f7b      	ldrb	r3, [r7, #29]
 80008b6:	3301      	adds	r3, #1
 80008b8:	777b      	strb	r3, [r7, #29]
		for (NetBufferIndex = 0; NetBufferIndex <= NumberofFrame;
 80008ba:	7f7a      	ldrb	r2, [r7, #29]
 80008bc:	7d7b      	ldrb	r3, [r7, #21]
 80008be:	429a      	cmp	r2, r3
 80008c0:	d9df      	bls.n	8000882 <CAN_Receive_Network+0xf2>
			}
		}
		CRCValue = crc_8(NetData, DataLength);
 80008c2:	7dfb      	ldrb	r3, [r7, #23]
 80008c4:	4619      	mov	r1, r3
 80008c6:	6938      	ldr	r0, [r7, #16]
 80008c8:	f000 f880 	bl	80009cc <crc_8>
 80008cc:	4603      	mov	r3, r0
 80008ce:	75bb      	strb	r3, [r7, #22]
		if (CRCValue == NetBuffer->NodeHandle[NetBuffer->RecvID].CRCValue) {
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80008d6:	461a      	mov	r2, r3
 80008d8:	68f9      	ldr	r1, [r7, #12]
 80008da:	4613      	mov	r3, r2
 80008dc:	00db      	lsls	r3, r3, #3
 80008de:	4413      	add	r3, r2
 80008e0:	00db      	lsls	r3, r3, #3
 80008e2:	1a9b      	subs	r3, r3, r2
 80008e4:	440b      	add	r3, r1
 80008e6:	f203 130f 	addw	r3, r3, #271	; 0x10f
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	7dba      	ldrb	r2, [r7, #22]
 80008ee:	429a      	cmp	r2, r3
 80008f0:	d109      	bne.n	8000906 <CAN_Receive_Network+0x176>
			*FlagNotiHandle = REC_PACKET_SUCCESS;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2204      	movs	r2, #4
 80008f6:	701a      	strb	r2, [r3, #0]
			memcpy(NetBuffer->NetworkBuffer, NetData, DataLength);
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	7dfa      	ldrb	r2, [r7, #23]
 80008fc:	6939      	ldr	r1, [r7, #16]
 80008fe:	4618      	mov	r0, r3
 8000900:	f005 fdcc 	bl	800649c <memcpy>
 8000904:	e002      	b.n	800090c <CAN_Receive_Network+0x17c>
		} else {
			*FlagNotiHandle = REC_PACKET_ERROR;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	2203      	movs	r2, #3
 800090a:	701a      	strb	r2, [r3, #0]
		}
		free(NetData);
 800090c:	6938      	ldr	r0, [r7, #16]
 800090e:	f005 fcad 	bl	800626c <free>
	}
	return HAL_OK;
 8000912:	2300      	movs	r3, #0
}
 8000914:	4618      	mov	r0, r3
 8000916:	3720      	adds	r7, #32
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <CAN_Receive_Application>:

uint8_t CAN_Receive_Application(CANBufferHandleStruct *AppBuffer, uint8_t *Data,
		FlagFrameHandle *FlagFrame, FlagRecNotification *FlagNotification) {
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	607a      	str	r2, [r7, #4]
 8000928:	603b      	str	r3, [r7, #0]
	uint8_t AppDataLength =
			AppBuffer->NodeHandle[AppBuffer->RecvID].PacketLength - 2;
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8000930:	461a      	mov	r2, r3
 8000932:	68f9      	ldr	r1, [r7, #12]
 8000934:	4613      	mov	r3, r2
 8000936:	00db      	lsls	r3, r3, #3
 8000938:	4413      	add	r3, r2
 800093a:	00db      	lsls	r3, r3, #3
 800093c:	1a9b      	subs	r3, r3, r2
 800093e:	440b      	add	r3, r1
 8000940:	f203 130d 	addw	r3, r3, #269	; 0x10d
 8000944:	781b      	ldrb	r3, [r3, #0]
	uint8_t AppDataLength =
 8000946:	3b02      	subs	r3, #2
 8000948:	75fb      	strb	r3, [r7, #23]
	CAN_Receive_Network(AppBuffer, FlagFrame, FlagNotification);
 800094a:	683a      	ldr	r2, [r7, #0]
 800094c:	6879      	ldr	r1, [r7, #4]
 800094e:	68f8      	ldr	r0, [r7, #12]
 8000950:	f7ff ff1e 	bl	8000790 <CAN_Receive_Network>
	if (*FlagNotification == REC_PACKET_SUCCESS) {
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b04      	cmp	r3, #4
 800095a:	d108      	bne.n	800096e <CAN_Receive_Application+0x52>
		memcpy(Data, AppBuffer->NetworkBuffer, AppDataLength);
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	7dfa      	ldrb	r2, [r7, #23]
 8000960:	4619      	mov	r1, r3
 8000962:	68b8      	ldr	r0, [r7, #8]
 8000964:	f005 fd9a 	bl	800649c <memcpy>
		*FlagNotification =REC_SUCCESS;
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	2205      	movs	r2, #5
 800096c:	701a      	strb	r2, [r3, #0]
	}
	return HAL_OK;
 800096e:	2300      	movs	r3, #0
}
 8000970:	4618      	mov	r0, r3
 8000972:	3718      	adds	r7, #24
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}

08000978 <CAN_Config_filtering>:
//  if(HAL_CAN_ConfigFilter(&hcan,&Can_filter_init)!=HAL_OK)
//  {
//    Error_Handler();
//  }
//}
uint32_t CAN_Config_filtering(uint8_t FIFO) {
 8000978:	b580      	push	{r7, lr}
 800097a:	b08c      	sub	sp, #48	; 0x30
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	71fb      	strb	r3, [r7, #7]
  CAN_FilterTypeDef Can_filter_init;
  Can_filter_init.FilterActivation = ENABLE;
 8000982:	2301      	movs	r3, #1
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
  Can_filter_init.FilterBank = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	61fb      	str	r3, [r7, #28]
  Can_filter_init.FilterFIFOAssignment = FIFO;
 800098a:	79fb      	ldrb	r3, [r7, #7]
 800098c:	61bb      	str	r3, [r7, #24]
  Can_filter_init.FilterIdHigh = 0x0000;
 800098e:	2300      	movs	r3, #0
 8000990:	60bb      	str	r3, [r7, #8]
  Can_filter_init.FilterIdLow = 0x0000;
 8000992:	2300      	movs	r3, #0
 8000994:	60fb      	str	r3, [r7, #12]
  Can_filter_init.FilterMaskIdHigh = 0x0000;
 8000996:	2300      	movs	r3, #0
 8000998:	613b      	str	r3, [r7, #16]
  Can_filter_init.FilterMaskIdLow = 0x0000;
 800099a:	2300      	movs	r3, #0
 800099c:	617b      	str	r3, [r7, #20]
  Can_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 800099e:	2300      	movs	r3, #0
 80009a0:	623b      	str	r3, [r7, #32]
  Can_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 80009a2:	2301      	movs	r3, #1
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_CAN_ConfigFilter(&hcan, &Can_filter_init) != HAL_OK) {
 80009a6:	f107 0308 	add.w	r3, r7, #8
 80009aa:	4619      	mov	r1, r3
 80009ac:	4806      	ldr	r0, [pc, #24]	; (80009c8 <CAN_Config_filtering+0x50>)
 80009ae:	f000 fde6 	bl	800157e <HAL_CAN_ConfigFilter>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <CAN_Config_filtering+0x44>
    Error_Handler();
 80009b8:	f000 fa5c 	bl	8000e74 <Error_Handler>
  }
  return HAL_OK;
 80009bc:	2300      	movs	r3, #0
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3730      	adds	r7, #48	; 0x30
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	2000007c 	.word	0x2000007c

080009cc <crc_8>:

#include "CRC.h"
#include "stdint.h"
unsigned char table[256] = {0};

uint8_t crc_8(uint8_t* data, uint8_t len) {
 80009cc:	b480      	push	{r7}
 80009ce:	b087      	sub	sp, #28
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	460b      	mov	r3, r1
 80009d6:	70fb      	strb	r3, [r7, #3]
  unsigned crc = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]
  int i, j;
  for (j = len; j; j--, data++) {
 80009dc:	78fb      	ldrb	r3, [r7, #3]
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	e023      	b.n	8000a2a <crc_8+0x5e>
    crc ^= (*data << 8);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	021b      	lsls	r3, r3, #8
 80009e8:	461a      	mov	r2, r3
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	4053      	eors	r3, r2
 80009ee:	617b      	str	r3, [r7, #20]
    for(i = 8; i; i--) {
 80009f0:	2308      	movs	r3, #8
 80009f2:	613b      	str	r3, [r7, #16]
 80009f4:	e010      	b.n	8000a18 <crc_8+0x4c>
      if (crc & 0x8000)
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d005      	beq.n	8000a0c <crc_8+0x40>
        crc ^= (0x1070 << 3);
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	f483 4303 	eor.w	r3, r3, #33536	; 0x8300
 8000a06:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 8000a0a:	617b      	str	r3, [r7, #20]
      crc <<= 1;
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	617b      	str	r3, [r7, #20]
    for(i = 8; i; i--) {
 8000a12:	693b      	ldr	r3, [r7, #16]
 8000a14:	3b01      	subs	r3, #1
 8000a16:	613b      	str	r3, [r7, #16]
 8000a18:	693b      	ldr	r3, [r7, #16]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d1eb      	bne.n	80009f6 <crc_8+0x2a>
  for (j = len; j; j--, data++) {
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	3b01      	subs	r3, #1
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	3301      	adds	r3, #1
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d1d8      	bne.n	80009e2 <crc_8+0x16>
    }
  }
  return (uint8_t)(crc >> 8);
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	0a1b      	lsrs	r3, r3, #8
 8000a34:	b2db      	uxtb	r3, r3
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	371c      	adds	r7, #28
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr

08000a40 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000a44:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <MX_CAN_Init+0x68>)
 8000a46:	4a19      	ldr	r2, [pc, #100]	; (8000aac <MX_CAN_Init+0x6c>)
 8000a48:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000a4a:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <MX_CAN_Init+0x68>)
 8000a4c:	2204      	movs	r2, #4
 8000a4e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000a50:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <MX_CAN_Init+0x68>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000a56:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <MX_CAN_Init+0x68>)
 8000a58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000a5c:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_14TQ;
 8000a5e:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <MX_CAN_Init+0x68>)
 8000a60:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 8000a64:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000a66:	4b10      	ldr	r3, [pc, #64]	; (8000aa8 <MX_CAN_Init+0x68>)
 8000a68:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000a6c:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <MX_CAN_Init+0x68>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000a74:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <MX_CAN_Init+0x68>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <MX_CAN_Init+0x68>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000a80:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <MX_CAN_Init+0x68>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000a86:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <MX_CAN_Init+0x68>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <MX_CAN_Init+0x68>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000a92:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <MX_CAN_Init+0x68>)
 8000a94:	f000 fc78 	bl	8001388 <HAL_CAN_Init>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000a9e:	f000 f9e9 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	2000007c 	.word	0x2000007c
 8000aac:	40006400 	.word	0x40006400

08000ab0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b088      	sub	sp, #32
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab8:	f107 0310 	add.w	r3, r7, #16
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a2c      	ldr	r2, [pc, #176]	; (8000b7c <HAL_CAN_MspInit+0xcc>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d151      	bne.n	8000b74 <HAL_CAN_MspInit+0xc4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ad0:	4b2b      	ldr	r3, [pc, #172]	; (8000b80 <HAL_CAN_MspInit+0xd0>)
 8000ad2:	69db      	ldr	r3, [r3, #28]
 8000ad4:	4a2a      	ldr	r2, [pc, #168]	; (8000b80 <HAL_CAN_MspInit+0xd0>)
 8000ad6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ada:	61d3      	str	r3, [r2, #28]
 8000adc:	4b28      	ldr	r3, [pc, #160]	; (8000b80 <HAL_CAN_MspInit+0xd0>)
 8000ade:	69db      	ldr	r3, [r3, #28]
 8000ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae8:	4b25      	ldr	r3, [pc, #148]	; (8000b80 <HAL_CAN_MspInit+0xd0>)
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	4a24      	ldr	r2, [pc, #144]	; (8000b80 <HAL_CAN_MspInit+0xd0>)
 8000aee:	f043 0304 	orr.w	r3, r3, #4
 8000af2:	6193      	str	r3, [r2, #24]
 8000af4:	4b22      	ldr	r3, [pc, #136]	; (8000b80 <HAL_CAN_MspInit+0xd0>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	f003 0304 	and.w	r3, r3, #4
 8000afc:	60bb      	str	r3, [r7, #8]
 8000afe:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000b00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b04:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b06:	2300      	movs	r3, #0
 8000b08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0e:	f107 0310 	add.w	r3, r7, #16
 8000b12:	4619      	mov	r1, r3
 8000b14:	481b      	ldr	r0, [pc, #108]	; (8000b84 <HAL_CAN_MspInit+0xd4>)
 8000b16:	f001 fb85 	bl	8002224 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b20:	2302      	movs	r3, #2
 8000b22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b24:	2303      	movs	r3, #3
 8000b26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b28:	f107 0310 	add.w	r3, r7, #16
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4815      	ldr	r0, [pc, #84]	; (8000b84 <HAL_CAN_MspInit+0xd4>)
 8000b30:	f001 fb78 	bl	8002224 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 5, 0);
 8000b34:	2200      	movs	r2, #0
 8000b36:	2105      	movs	r1, #5
 8000b38:	2013      	movs	r0, #19
 8000b3a:	f001 fb48 	bl	80021ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8000b3e:	2013      	movs	r0, #19
 8000b40:	f001 fb61 	bl	8002206 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8000b44:	2200      	movs	r2, #0
 8000b46:	2105      	movs	r1, #5
 8000b48:	2014      	movs	r0, #20
 8000b4a:	f001 fb40 	bl	80021ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000b4e:	2014      	movs	r0, #20
 8000b50:	f001 fb59 	bl	8002206 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8000b54:	2200      	movs	r2, #0
 8000b56:	2105      	movs	r1, #5
 8000b58:	2015      	movs	r0, #21
 8000b5a:	f001 fb38 	bl	80021ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000b5e:	2015      	movs	r0, #21
 8000b60:	f001 fb51 	bl	8002206 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 8000b64:	2200      	movs	r2, #0
 8000b66:	2105      	movs	r1, #5
 8000b68:	2016      	movs	r0, #22
 8000b6a:	f001 fb30 	bl	80021ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000b6e:	2016      	movs	r0, #22
 8000b70:	f001 fb49 	bl	8002206 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000b74:	bf00      	nop
 8000b76:	3720      	adds	r7, #32
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40006400 	.word	0x40006400
 8000b80:	40021000 	.word	0x40021000
 8000b84:	40010800 	.word	0x40010800

08000b88 <MX_FREERTOS_Init>:
/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of mMainTask */
  mMainTaskHandle = osThreadNew(MainTask, NULL, &mMainTask_attributes);
 8000b8c:	4a0c      	ldr	r2, [pc, #48]	; (8000bc0 <MX_FREERTOS_Init+0x38>)
 8000b8e:	2100      	movs	r1, #0
 8000b90:	480c      	ldr	r0, [pc, #48]	; (8000bc4 <MX_FREERTOS_Init+0x3c>)
 8000b92:	f002 ff57 	bl	8003a44 <osThreadNew>
 8000b96:	4603      	mov	r3, r0
 8000b98:	4a0b      	ldr	r2, [pc, #44]	; (8000bc8 <MX_FREERTOS_Init+0x40>)
 8000b9a:	6013      	str	r3, [r2, #0]

  /* creation of mCanRecv */
  mCanRecvHandle = osThreadNew(CanRecv, NULL, &mCanRecv_attributes);
 8000b9c:	4a0b      	ldr	r2, [pc, #44]	; (8000bcc <MX_FREERTOS_Init+0x44>)
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	480b      	ldr	r0, [pc, #44]	; (8000bd0 <MX_FREERTOS_Init+0x48>)
 8000ba2:	f002 ff4f 	bl	8003a44 <osThreadNew>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	4a0a      	ldr	r2, [pc, #40]	; (8000bd4 <MX_FREERTOS_Init+0x4c>)
 8000baa:	6013      	str	r3, [r2, #0]

  /* creation of mDataProcessing */
  mDataProcessingHandle = osThreadNew(DataProcessing, NULL,
 8000bac:	4a0a      	ldr	r2, [pc, #40]	; (8000bd8 <MX_FREERTOS_Init+0x50>)
 8000bae:	2100      	movs	r1, #0
 8000bb0:	480a      	ldr	r0, [pc, #40]	; (8000bdc <MX_FREERTOS_Init+0x54>)
 8000bb2:	f002 ff47 	bl	8003a44 <osThreadNew>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	4a09      	ldr	r2, [pc, #36]	; (8000be0 <MX_FREERTOS_Init+0x58>)
 8000bba:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	08006c4c 	.word	0x08006c4c
 8000bc4:	08000be5 	.word	0x08000be5
 8000bc8:	200006f4 	.word	0x200006f4
 8000bcc:	08006c70 	.word	0x08006c70
 8000bd0:	08000c19 	.word	0x08000c19
 8000bd4:	200006f8 	.word	0x200006f8
 8000bd8:	08006c94 	.word	0x08006c94
 8000bdc:	08000c99 	.word	0x08000c99
 8000be0:	200006fc 	.word	0x200006fc

08000be4 <MainTask>:
 * @brief  Function implementing the mMainTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_MainTask */
void MainTask(void *argument) {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b09e      	sub	sp, #120	; 0x78
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MainTask */
  CANConfigIDTxtypedef pIDtype;
  pIDtype.MessageType = COMMAND_FRAME;
 8000bec:	2301      	movs	r3, #1
 8000bee:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
  pIDtype.SenderID = OBSTALCE6;
 8000bf2:	230d      	movs	r3, #13
 8000bf4:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint8_t sendData[100] = { 0 };
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60bb      	str	r3, [r7, #8]
 8000bfc:	f107 030c 	add.w	r3, r7, #12
 8000c00:	2260      	movs	r2, #96	; 0x60
 8000c02:	2100      	movs	r1, #0
 8000c04:	4618      	mov	r0, r3
 8000c06:	f005 fc05 	bl	8006414 <memset>
  uint8_t len = 0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  uint32_t cnt = 0;
 8000c10:	2300      	movs	r3, #0
 8000c12:	673b      	str	r3, [r7, #112]	; 0x70
//  /* Infinite loop */
  for (;;) {
 8000c14:	e7fe      	b.n	8000c14 <MainTask+0x30>
	...

08000c18 <CanRecv>:
 * @brief Function implementing the mCanRecv thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_CanRecv */
void CanRecv(void *argument) {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b0aa      	sub	sp, #168	; 0xa8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CanRecv */
  uint8_t mess[50]={0};
 8000c20:	2300      	movs	r3, #0
 8000c22:	677b      	str	r3, [r7, #116]	; 0x74
 8000c24:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000c28:	222e      	movs	r2, #46	; 0x2e
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f005 fbf1 	bl	8006414 <memset>
  char Print[100]={0};
 8000c32:	2300      	movs	r3, #0
 8000c34:	613b      	str	r3, [r7, #16]
 8000c36:	f107 0314 	add.w	r3, r7, #20
 8000c3a:	2260      	movs	r2, #96	; 0x60
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f005 fbe8 	bl	8006414 <memset>
  FlagRecNotification FlagRec;
  /* Infinite loop */
  for (;;) {
    CAN_Receive_Application(&Rx_Buffer, mess, &Flag, &FlagRec);
 8000c44:	f107 030f 	add.w	r3, r7, #15
 8000c48:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8000c4c:	4a0e      	ldr	r2, [pc, #56]	; (8000c88 <CanRecv+0x70>)
 8000c4e:	480f      	ldr	r0, [pc, #60]	; (8000c8c <CanRecv+0x74>)
 8000c50:	f7ff fe64 	bl	800091c <CAN_Receive_Application>
      if(FlagRec==REC_SUCCESS)
 8000c54:	7bfb      	ldrb	r3, [r7, #15]
 8000c56:	2b05      	cmp	r3, #5
 8000c58:	d1f4      	bne.n	8000c44 <CanRecv+0x2c>
      {
       uint8_t len = sprintf(Print, "Node 2 Rcv: %s\r\n", mess);
 8000c5a:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8000c5e:	f107 0310 	add.w	r3, r7, #16
 8000c62:	490b      	ldr	r1, [pc, #44]	; (8000c90 <CanRecv+0x78>)
 8000c64:	4618      	mov	r0, r3
 8000c66:	f005 fbb5 	bl	80063d4 <siprintf>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        HAL_UART_Transmit(&huart1,Print,len,HAL_MAX_DELAY);
 8000c70:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000c74:	b29a      	uxth	r2, r3
 8000c76:	f107 0110 	add.w	r1, r7, #16
 8000c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7e:	4805      	ldr	r0, [pc, #20]	; (8000c94 <CanRecv+0x7c>)
 8000c80:	f002 fcfa 	bl	8003678 <HAL_UART_Transmit>
    CAN_Receive_Application(&Rx_Buffer, mess, &Flag, &FlagRec);
 8000c84:	e7de      	b.n	8000c44 <CanRecv+0x2c>
 8000c86:	bf00      	nop
 8000c88:	200005e0 	.word	0x200005e0
 8000c8c:	200000a4 	.word	0x200000a4
 8000c90:	08006c20 	.word	0x08006c20
 8000c94:	20000794 	.word	0x20000794

08000c98 <DataProcessing>:
 * @brief Function implementing the mDataProcessing thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_DataProcessing */
void DataProcessing(void *argument) {
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DataProcessing */
  /* Infinite loop */
  for (;;) {
 8000ca0:	e7fe      	b.n	8000ca0 <DataProcessing+0x8>
	...

08000ca4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b088      	sub	sp, #32
 8000ca8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000caa:	f107 0310 	add.w	r3, r7, #16
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	605a      	str	r2, [r3, #4]
 8000cb4:	609a      	str	r2, [r3, #8]
 8000cb6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb8:	4b2e      	ldr	r3, [pc, #184]	; (8000d74 <MX_GPIO_Init+0xd0>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	4a2d      	ldr	r2, [pc, #180]	; (8000d74 <MX_GPIO_Init+0xd0>)
 8000cbe:	f043 0310 	orr.w	r3, r3, #16
 8000cc2:	6193      	str	r3, [r2, #24]
 8000cc4:	4b2b      	ldr	r3, [pc, #172]	; (8000d74 <MX_GPIO_Init+0xd0>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	f003 0310 	and.w	r3, r3, #16
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cd0:	4b28      	ldr	r3, [pc, #160]	; (8000d74 <MX_GPIO_Init+0xd0>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	4a27      	ldr	r2, [pc, #156]	; (8000d74 <MX_GPIO_Init+0xd0>)
 8000cd6:	f043 0320 	orr.w	r3, r3, #32
 8000cda:	6193      	str	r3, [r2, #24]
 8000cdc:	4b25      	ldr	r3, [pc, #148]	; (8000d74 <MX_GPIO_Init+0xd0>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	f003 0320 	and.w	r3, r3, #32
 8000ce4:	60bb      	str	r3, [r7, #8]
 8000ce6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce8:	4b22      	ldr	r3, [pc, #136]	; (8000d74 <MX_GPIO_Init+0xd0>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	4a21      	ldr	r2, [pc, #132]	; (8000d74 <MX_GPIO_Init+0xd0>)
 8000cee:	f043 0308 	orr.w	r3, r3, #8
 8000cf2:	6193      	str	r3, [r2, #24]
 8000cf4:	4b1f      	ldr	r3, [pc, #124]	; (8000d74 <MX_GPIO_Init+0xd0>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	f003 0308 	and.w	r3, r3, #8
 8000cfc:	607b      	str	r3, [r7, #4]
 8000cfe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d00:	4b1c      	ldr	r3, [pc, #112]	; (8000d74 <MX_GPIO_Init+0xd0>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	4a1b      	ldr	r2, [pc, #108]	; (8000d74 <MX_GPIO_Init+0xd0>)
 8000d06:	f043 0304 	orr.w	r3, r3, #4
 8000d0a:	6193      	str	r3, [r2, #24]
 8000d0c:	4b19      	ldr	r3, [pc, #100]	; (8000d74 <MX_GPIO_Init+0xd0>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	f003 0304 	and.w	r3, r3, #4
 8000d14:	603b      	str	r3, [r7, #0]
 8000d16:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED13_GPIO_Port, LED13_Pin, GPIO_PIN_RESET);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d1e:	4816      	ldr	r0, [pc, #88]	; (8000d78 <MX_GPIO_Init+0xd4>)
 8000d20:	f001 fc04 	bl	800252c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDB_Pin|LEDG_Pin|LEDR_Pin, GPIO_PIN_RESET);
 8000d24:	2200      	movs	r2, #0
 8000d26:	f640 4102 	movw	r1, #3074	; 0xc02
 8000d2a:	4814      	ldr	r0, [pc, #80]	; (8000d7c <MX_GPIO_Init+0xd8>)
 8000d2c:	f001 fbfe 	bl	800252c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED13_Pin;
 8000d30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d36:	2301      	movs	r3, #1
 8000d38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED13_GPIO_Port, &GPIO_InitStruct);
 8000d42:	f107 0310 	add.w	r3, r7, #16
 8000d46:	4619      	mov	r1, r3
 8000d48:	480b      	ldr	r0, [pc, #44]	; (8000d78 <MX_GPIO_Init+0xd4>)
 8000d4a:	f001 fa6b 	bl	8002224 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LEDB_Pin|LEDG_Pin|LEDR_Pin;
 8000d4e:	f640 4302 	movw	r3, #3074	; 0xc02
 8000d52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d54:	2301      	movs	r3, #1
 8000d56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d60:	f107 0310 	add.w	r3, r7, #16
 8000d64:	4619      	mov	r1, r3
 8000d66:	4805      	ldr	r0, [pc, #20]	; (8000d7c <MX_GPIO_Init+0xd8>)
 8000d68:	f001 fa5c 	bl	8002224 <HAL_GPIO_Init>

}
 8000d6c:	bf00      	nop
 8000d6e:	3720      	adds	r7, #32
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40021000 	.word	0x40021000
 8000d78:	40011000 	.word	0x40011000
 8000d7c:	40010c00 	.word	0x40010c00

08000d80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d84:	f000 face 	bl	8001324 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d88:	f000 f81c 	bl	8000dc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d8c:	f7ff ff8a 	bl	8000ca4 <MX_GPIO_Init>
  MX_CAN_Init();
 8000d90:	f7ff fe56 	bl	8000a40 <MX_CAN_Init>
  MX_TIM3_Init();
 8000d94:	f000 f9b8 	bl	8001108 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000d98:	f000 fa28 	bl	80011ec <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  CAN_Config_filtering(CAN_FILTER_FIFO0);
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	f7ff fdeb 	bl	8000978 <CAN_Config_filtering>
      if(HAL_CAN_Start(&hcan)!=HAL_OK)
 8000da2:	4807      	ldr	r0, [pc, #28]	; (8000dc0 <main+0x40>)
 8000da4:	f000 fcb4 	bl	8001710 <HAL_CAN_Start>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <main+0x32>
          {
           Error_Handler();
 8000dae:	f000 f861 	bl	8000e74 <Error_Handler>
          }
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000db2:	f002 fde1 	bl	8003978 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000db6:	f7ff fee7 	bl	8000b88 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000dba:	f002 fe0f 	bl	80039dc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000dbe:	e7fe      	b.n	8000dbe <main+0x3e>
 8000dc0:	2000007c 	.word	0x2000007c

08000dc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b090      	sub	sp, #64	; 0x40
 8000dc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dca:	f107 0318 	add.w	r3, r7, #24
 8000dce:	2228      	movs	r2, #40	; 0x28
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f005 fb1e 	bl	8006414 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dd8:	1d3b      	adds	r3, r7, #4
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	609a      	str	r2, [r3, #8]
 8000de2:	60da      	str	r2, [r3, #12]
 8000de4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000de6:	2301      	movs	r3, #1
 8000de8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000df0:	2300      	movs	r3, #0
 8000df2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000df4:	2301      	movs	r3, #1
 8000df6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e00:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e02:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e06:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e08:	f107 0318 	add.w	r3, r7, #24
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f001 fba5 	bl	800255c <HAL_RCC_OscConfig>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000e18:	f000 f82c 	bl	8000e74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e1c:	230f      	movs	r3, #15
 8000e1e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e20:	2302      	movs	r3, #2
 8000e22:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e24:	2300      	movs	r3, #0
 8000e26:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	2102      	movs	r1, #2
 8000e36:	4618      	mov	r0, r3
 8000e38:	f001 fe12 	bl	8002a60 <HAL_RCC_ClockConfig>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e42:	f000 f817 	bl	8000e74 <Error_Handler>
  }
}
 8000e46:	bf00      	nop
 8000e48:	3740      	adds	r7, #64	; 0x40
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a04      	ldr	r2, [pc, #16]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d101      	bne.n	8000e66 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e62:	f000 fa75 	bl	8001350 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40000800 	.word	0x40000800

08000e74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e78:	b672      	cpsid	i
}
 8000e7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <Error_Handler+0x8>
	...

08000e80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e86:	4b18      	ldr	r3, [pc, #96]	; (8000ee8 <HAL_MspInit+0x68>)
 8000e88:	699b      	ldr	r3, [r3, #24]
 8000e8a:	4a17      	ldr	r2, [pc, #92]	; (8000ee8 <HAL_MspInit+0x68>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6193      	str	r3, [r2, #24]
 8000e92:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <HAL_MspInit+0x68>)
 8000e94:	699b      	ldr	r3, [r3, #24]
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	60bb      	str	r3, [r7, #8]
 8000e9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9e:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <HAL_MspInit+0x68>)
 8000ea0:	69db      	ldr	r3, [r3, #28]
 8000ea2:	4a11      	ldr	r2, [pc, #68]	; (8000ee8 <HAL_MspInit+0x68>)
 8000ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea8:	61d3      	str	r3, [r2, #28]
 8000eaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <HAL_MspInit+0x68>)
 8000eac:	69db      	ldr	r3, [r3, #28]
 8000eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	210f      	movs	r1, #15
 8000eba:	f06f 0001 	mvn.w	r0, #1
 8000ebe:	f001 f986 	bl	80021ce <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ec2:	4b0a      	ldr	r3, [pc, #40]	; (8000eec <HAL_MspInit+0x6c>)
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	4a04      	ldr	r2, [pc, #16]	; (8000eec <HAL_MspInit+0x6c>)
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	40010000 	.word	0x40010000

08000ef0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08e      	sub	sp, #56	; 0x38
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000efc:	2300      	movs	r3, #0
 8000efe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000f00:	2300      	movs	r3, #0
 8000f02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000f06:	4b34      	ldr	r3, [pc, #208]	; (8000fd8 <HAL_InitTick+0xe8>)
 8000f08:	69db      	ldr	r3, [r3, #28]
 8000f0a:	4a33      	ldr	r2, [pc, #204]	; (8000fd8 <HAL_InitTick+0xe8>)
 8000f0c:	f043 0304 	orr.w	r3, r3, #4
 8000f10:	61d3      	str	r3, [r2, #28]
 8000f12:	4b31      	ldr	r3, [pc, #196]	; (8000fd8 <HAL_InitTick+0xe8>)
 8000f14:	69db      	ldr	r3, [r3, #28]
 8000f16:	f003 0304 	and.w	r3, r3, #4
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f1e:	f107 0210 	add.w	r2, r7, #16
 8000f22:	f107 0314 	add.w	r3, r7, #20
 8000f26:	4611      	mov	r1, r2
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f001 ff09 	bl	8002d40 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f2e:	6a3b      	ldr	r3, [r7, #32]
 8000f30:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d103      	bne.n	8000f40 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f38:	f001 feda 	bl	8002cf0 <HAL_RCC_GetPCLK1Freq>
 8000f3c:	6378      	str	r0, [r7, #52]	; 0x34
 8000f3e:	e004      	b.n	8000f4a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f40:	f001 fed6 	bl	8002cf0 <HAL_RCC_GetPCLK1Freq>
 8000f44:	4603      	mov	r3, r0
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f4c:	4a23      	ldr	r2, [pc, #140]	; (8000fdc <HAL_InitTick+0xec>)
 8000f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f52:	0c9b      	lsrs	r3, r3, #18
 8000f54:	3b01      	subs	r3, #1
 8000f56:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000f58:	4b21      	ldr	r3, [pc, #132]	; (8000fe0 <HAL_InitTick+0xf0>)
 8000f5a:	4a22      	ldr	r2, [pc, #136]	; (8000fe4 <HAL_InitTick+0xf4>)
 8000f5c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000f5e:	4b20      	ldr	r3, [pc, #128]	; (8000fe0 <HAL_InitTick+0xf0>)
 8000f60:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f64:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000f66:	4a1e      	ldr	r2, [pc, #120]	; (8000fe0 <HAL_InitTick+0xf0>)
 8000f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f6a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000f6c:	4b1c      	ldr	r3, [pc, #112]	; (8000fe0 <HAL_InitTick+0xf0>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f72:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <HAL_InitTick+0xf0>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f78:	4b19      	ldr	r3, [pc, #100]	; (8000fe0 <HAL_InitTick+0xf0>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000f7e:	4818      	ldr	r0, [pc, #96]	; (8000fe0 <HAL_InitTick+0xf0>)
 8000f80:	f001 ff2c 	bl	8002ddc <HAL_TIM_Base_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000f8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d11b      	bne.n	8000fca <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000f92:	4813      	ldr	r0, [pc, #76]	; (8000fe0 <HAL_InitTick+0xf0>)
 8000f94:	f001 ff72 	bl	8002e7c <HAL_TIM_Base_Start_IT>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000f9e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d111      	bne.n	8000fca <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000fa6:	201e      	movs	r0, #30
 8000fa8:	f001 f92d 	bl	8002206 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b0f      	cmp	r3, #15
 8000fb0:	d808      	bhi.n	8000fc4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	6879      	ldr	r1, [r7, #4]
 8000fb6:	201e      	movs	r0, #30
 8000fb8:	f001 f909 	bl	80021ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fbc:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <HAL_InitTick+0xf8>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6013      	str	r3, [r2, #0]
 8000fc2:	e002      	b.n	8000fca <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000fca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3738      	adds	r7, #56	; 0x38
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	431bde83 	.word	0x431bde83
 8000fe0:	20000700 	.word	0x20000700
 8000fe4:	40000800 	.word	0x40000800
 8000fe8:	20000004 	.word	0x20000004

08000fec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <NMI_Handler+0x4>

08000ff2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ff6:	e7fe      	b.n	8000ff6 <HardFault_Handler+0x4>

08000ff8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ffc:	e7fe      	b.n	8000ffc <MemManage_Handler+0x4>

08000ffe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001002:	e7fe      	b.n	8001002 <BusFault_Handler+0x4>

08001004 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001008:	e7fe      	b.n	8001008 <UsageFault_Handler+0x4>

0800100a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	46bd      	mov	sp, r7
 8001012:	bc80      	pop	{r7}
 8001014:	4770      	bx	lr
	...

08001018 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800101c:	4802      	ldr	r0, [pc, #8]	; (8001028 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 800101e:	f000 fdf5 	bl	8001c0c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	2000007c 	.word	0x2000007c

0800102c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001030:	4802      	ldr	r0, [pc, #8]	; (800103c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001032:	f000 fdeb 	bl	8001c0c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	2000007c 	.word	0x2000007c

08001040 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001044:	4802      	ldr	r0, [pc, #8]	; (8001050 <CAN1_RX1_IRQHandler+0x10>)
 8001046:	f000 fde1 	bl	8001c0c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	2000007c 	.word	0x2000007c

08001054 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001058:	4802      	ldr	r0, [pc, #8]	; (8001064 <CAN1_SCE_IRQHandler+0x10>)
 800105a:	f000 fdd7 	bl	8001c0c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	2000007c 	.word	0x2000007c

08001068 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800106c:	4802      	ldr	r0, [pc, #8]	; (8001078 <TIM3_IRQHandler+0x10>)
 800106e:	f001 ff57 	bl	8002f20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	2000074c 	.word	0x2000074c

0800107c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001080:	4802      	ldr	r0, [pc, #8]	; (800108c <TIM4_IRQHandler+0x10>)
 8001082:	f001 ff4d 	bl	8002f20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000700 	.word	0x20000700

08001090 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001098:	4a14      	ldr	r2, [pc, #80]	; (80010ec <_sbrk+0x5c>)
 800109a:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <_sbrk+0x60>)
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010a4:	4b13      	ldr	r3, [pc, #76]	; (80010f4 <_sbrk+0x64>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d102      	bne.n	80010b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010ac:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <_sbrk+0x64>)
 80010ae:	4a12      	ldr	r2, [pc, #72]	; (80010f8 <_sbrk+0x68>)
 80010b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010b2:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <_sbrk+0x64>)
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4413      	add	r3, r2
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d207      	bcs.n	80010d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010c0:	f005 f9c0 	bl	8006444 <__errno>
 80010c4:	4603      	mov	r3, r0
 80010c6:	220c      	movs	r2, #12
 80010c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ca:	f04f 33ff 	mov.w	r3, #4294967295
 80010ce:	e009      	b.n	80010e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010d0:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <_sbrk+0x64>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010d6:	4b07      	ldr	r3, [pc, #28]	; (80010f4 <_sbrk+0x64>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4413      	add	r3, r2
 80010de:	4a05      	ldr	r2, [pc, #20]	; (80010f4 <_sbrk+0x64>)
 80010e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010e2:	68fb      	ldr	r3, [r7, #12]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3718      	adds	r7, #24
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20005000 	.word	0x20005000
 80010f0:	00000400 	.word	0x00000400
 80010f4:	20000748 	.word	0x20000748
 80010f8:	20002270 	.word	0x20002270

080010fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr

08001108 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800110e:	f107 0308 	add.w	r3, r7, #8
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800111c:	463b      	mov	r3, r7
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001124:	4b1c      	ldr	r3, [pc, #112]	; (8001198 <MX_TIM3_Init+0x90>)
 8001126:	4a1d      	ldr	r2, [pc, #116]	; (800119c <MX_TIM3_Init+0x94>)
 8001128:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 800112a:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <MX_TIM3_Init+0x90>)
 800112c:	2247      	movs	r2, #71	; 0x47
 800112e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001130:	4b19      	ldr	r3, [pc, #100]	; (8001198 <MX_TIM3_Init+0x90>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 209;
 8001136:	4b18      	ldr	r3, [pc, #96]	; (8001198 <MX_TIM3_Init+0x90>)
 8001138:	22d1      	movs	r2, #209	; 0xd1
 800113a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800113c:	4b16      	ldr	r3, [pc, #88]	; (8001198 <MX_TIM3_Init+0x90>)
 800113e:	2200      	movs	r2, #0
 8001140:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001142:	4b15      	ldr	r3, [pc, #84]	; (8001198 <MX_TIM3_Init+0x90>)
 8001144:	2200      	movs	r2, #0
 8001146:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001148:	4813      	ldr	r0, [pc, #76]	; (8001198 <MX_TIM3_Init+0x90>)
 800114a:	f001 fe47 	bl	8002ddc <HAL_TIM_Base_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8001154:	f7ff fe8e 	bl	8000e74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001158:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800115c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800115e:	f107 0308 	add.w	r3, r7, #8
 8001162:	4619      	mov	r1, r3
 8001164:	480c      	ldr	r0, [pc, #48]	; (8001198 <MX_TIM3_Init+0x90>)
 8001166:	f001 ffe3 	bl	8003130 <HAL_TIM_ConfigClockSource>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8001170:	f7ff fe80 	bl	8000e74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001174:	2300      	movs	r3, #0
 8001176:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001178:	2300      	movs	r3, #0
 800117a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800117c:	463b      	mov	r3, r7
 800117e:	4619      	mov	r1, r3
 8001180:	4805      	ldr	r0, [pc, #20]	; (8001198 <MX_TIM3_Init+0x90>)
 8001182:	f002 f9b9 	bl	80034f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 800118c:	f7ff fe72 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	3718      	adds	r7, #24
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	2000074c 	.word	0x2000074c
 800119c:	40000400 	.word	0x40000400

080011a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a0d      	ldr	r2, [pc, #52]	; (80011e4 <HAL_TIM_Base_MspInit+0x44>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d113      	bne.n	80011da <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011b2:	4b0d      	ldr	r3, [pc, #52]	; (80011e8 <HAL_TIM_Base_MspInit+0x48>)
 80011b4:	69db      	ldr	r3, [r3, #28]
 80011b6:	4a0c      	ldr	r2, [pc, #48]	; (80011e8 <HAL_TIM_Base_MspInit+0x48>)
 80011b8:	f043 0302 	orr.w	r3, r3, #2
 80011bc:	61d3      	str	r3, [r2, #28]
 80011be:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <HAL_TIM_Base_MspInit+0x48>)
 80011c0:	69db      	ldr	r3, [r3, #28]
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2105      	movs	r1, #5
 80011ce:	201d      	movs	r0, #29
 80011d0:	f000 fffd 	bl	80021ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80011d4:	201d      	movs	r0, #29
 80011d6:	f001 f816 	bl	8002206 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80011da:	bf00      	nop
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40000400 	.word	0x40000400
 80011e8:	40021000 	.word	0x40021000

080011ec <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011f0:	4b11      	ldr	r3, [pc, #68]	; (8001238 <MX_USART1_UART_Init+0x4c>)
 80011f2:	4a12      	ldr	r2, [pc, #72]	; (800123c <MX_USART1_UART_Init+0x50>)
 80011f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011f6:	4b10      	ldr	r3, [pc, #64]	; (8001238 <MX_USART1_UART_Init+0x4c>)
 80011f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011fe:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <MX_USART1_UART_Init+0x4c>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001204:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <MX_USART1_UART_Init+0x4c>)
 8001206:	2200      	movs	r2, #0
 8001208:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800120a:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <MX_USART1_UART_Init+0x4c>)
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001210:	4b09      	ldr	r3, [pc, #36]	; (8001238 <MX_USART1_UART_Init+0x4c>)
 8001212:	220c      	movs	r2, #12
 8001214:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001216:	4b08      	ldr	r3, [pc, #32]	; (8001238 <MX_USART1_UART_Init+0x4c>)
 8001218:	2200      	movs	r2, #0
 800121a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <MX_USART1_UART_Init+0x4c>)
 800121e:	2200      	movs	r2, #0
 8001220:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001222:	4805      	ldr	r0, [pc, #20]	; (8001238 <MX_USART1_UART_Init+0x4c>)
 8001224:	f002 f9d8 	bl	80035d8 <HAL_UART_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800122e:	f7ff fe21 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000794 	.word	0x20000794
 800123c:	40013800 	.word	0x40013800

08001240 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b088      	sub	sp, #32
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	f107 0310 	add.w	r3, r7, #16
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a1c      	ldr	r2, [pc, #112]	; (80012cc <HAL_UART_MspInit+0x8c>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d131      	bne.n	80012c4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001260:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <HAL_UART_MspInit+0x90>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	4a1a      	ldr	r2, [pc, #104]	; (80012d0 <HAL_UART_MspInit+0x90>)
 8001266:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800126a:	6193      	str	r3, [r2, #24]
 800126c:	4b18      	ldr	r3, [pc, #96]	; (80012d0 <HAL_UART_MspInit+0x90>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001278:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <HAL_UART_MspInit+0x90>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	4a14      	ldr	r2, [pc, #80]	; (80012d0 <HAL_UART_MspInit+0x90>)
 800127e:	f043 0304 	orr.w	r3, r3, #4
 8001282:	6193      	str	r3, [r2, #24]
 8001284:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <HAL_UART_MspInit+0x90>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	f003 0304 	and.w	r3, r3, #4
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001290:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001294:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001296:	2302      	movs	r3, #2
 8001298:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800129a:	2303      	movs	r3, #3
 800129c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129e:	f107 0310 	add.w	r3, r7, #16
 80012a2:	4619      	mov	r1, r3
 80012a4:	480b      	ldr	r0, [pc, #44]	; (80012d4 <HAL_UART_MspInit+0x94>)
 80012a6:	f000 ffbd 	bl	8002224 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b8:	f107 0310 	add.w	r3, r7, #16
 80012bc:	4619      	mov	r1, r3
 80012be:	4805      	ldr	r0, [pc, #20]	; (80012d4 <HAL_UART_MspInit+0x94>)
 80012c0:	f000 ffb0 	bl	8002224 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80012c4:	bf00      	nop
 80012c6:	3720      	adds	r7, #32
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40013800 	.word	0x40013800
 80012d0:	40021000 	.word	0x40021000
 80012d4:	40010800 	.word	0x40010800

080012d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012d8:	f7ff ff10 	bl	80010fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012dc:	480b      	ldr	r0, [pc, #44]	; (800130c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80012de:	490c      	ldr	r1, [pc, #48]	; (8001310 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80012e0:	4a0c      	ldr	r2, [pc, #48]	; (8001314 <LoopFillZerobss+0x16>)
  movs r3, #0
 80012e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012e4:	e002      	b.n	80012ec <LoopCopyDataInit>

080012e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ea:	3304      	adds	r3, #4

080012ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012f0:	d3f9      	bcc.n	80012e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012f2:	4a09      	ldr	r2, [pc, #36]	; (8001318 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80012f4:	4c09      	ldr	r4, [pc, #36]	; (800131c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012f8:	e001      	b.n	80012fe <LoopFillZerobss>

080012fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012fc:	3204      	adds	r2, #4

080012fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001300:	d3fb      	bcc.n	80012fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001302:	f005 f8a5 	bl	8006450 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001306:	f7ff fd3b 	bl	8000d80 <main>
  bx lr
 800130a:	4770      	bx	lr
  ldr r0, =_sdata
 800130c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001310:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001314:	08006d20 	.word	0x08006d20
  ldr r2, =_sbss
 8001318:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800131c:	20002270 	.word	0x20002270

08001320 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001320:	e7fe      	b.n	8001320 <ADC1_2_IRQHandler>
	...

08001324 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001328:	4b08      	ldr	r3, [pc, #32]	; (800134c <HAL_Init+0x28>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a07      	ldr	r2, [pc, #28]	; (800134c <HAL_Init+0x28>)
 800132e:	f043 0310 	orr.w	r3, r3, #16
 8001332:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001334:	2003      	movs	r0, #3
 8001336:	f000 ff3f 	bl	80021b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800133a:	200f      	movs	r0, #15
 800133c:	f7ff fdd8 	bl	8000ef0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001340:	f7ff fd9e 	bl	8000e80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40022000 	.word	0x40022000

08001350 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001354:	4b05      	ldr	r3, [pc, #20]	; (800136c <HAL_IncTick+0x1c>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	461a      	mov	r2, r3
 800135a:	4b05      	ldr	r3, [pc, #20]	; (8001370 <HAL_IncTick+0x20>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4413      	add	r3, r2
 8001360:	4a03      	ldr	r2, [pc, #12]	; (8001370 <HAL_IncTick+0x20>)
 8001362:	6013      	str	r3, [r2, #0]
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr
 800136c:	20000008 	.word	0x20000008
 8001370:	200007dc 	.word	0x200007dc

08001374 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  return uwTick;
 8001378:	4b02      	ldr	r3, [pc, #8]	; (8001384 <HAL_GetTick+0x10>)
 800137a:	681b      	ldr	r3, [r3, #0]
}
 800137c:	4618      	mov	r0, r3
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr
 8001384:	200007dc 	.word	0x200007dc

08001388 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e0ed      	b.n	8001576 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d102      	bne.n	80013ac <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff fb82 	bl	8000ab0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f042 0201 	orr.w	r2, r2, #1
 80013ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013bc:	f7ff ffda 	bl	8001374 <HAL_GetTick>
 80013c0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80013c2:	e012      	b.n	80013ea <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013c4:	f7ff ffd6 	bl	8001374 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b0a      	cmp	r3, #10
 80013d0:	d90b      	bls.n	80013ea <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2205      	movs	r2, #5
 80013e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e0c5      	b.n	8001576 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d0e5      	beq.n	80013c4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f022 0202 	bic.w	r2, r2, #2
 8001406:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001408:	f7ff ffb4 	bl	8001374 <HAL_GetTick>
 800140c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800140e:	e012      	b.n	8001436 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001410:	f7ff ffb0 	bl	8001374 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b0a      	cmp	r3, #10
 800141c:	d90b      	bls.n	8001436 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001422:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2205      	movs	r2, #5
 800142e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e09f      	b.n	8001576 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f003 0302 	and.w	r3, r3, #2
 8001440:	2b00      	cmp	r3, #0
 8001442:	d1e5      	bne.n	8001410 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	7e1b      	ldrb	r3, [r3, #24]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d108      	bne.n	800145e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	e007      	b.n	800146e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800146c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	7e5b      	ldrb	r3, [r3, #25]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d108      	bne.n	8001488 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	e007      	b.n	8001498 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001496:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	7e9b      	ldrb	r3, [r3, #26]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d108      	bne.n	80014b2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f042 0220 	orr.w	r2, r2, #32
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	e007      	b.n	80014c2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f022 0220 	bic.w	r2, r2, #32
 80014c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	7edb      	ldrb	r3, [r3, #27]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d108      	bne.n	80014dc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f022 0210 	bic.w	r2, r2, #16
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	e007      	b.n	80014ec <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f042 0210 	orr.w	r2, r2, #16
 80014ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	7f1b      	ldrb	r3, [r3, #28]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d108      	bne.n	8001506 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f042 0208 	orr.w	r2, r2, #8
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	e007      	b.n	8001516 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f022 0208 	bic.w	r2, r2, #8
 8001514:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	7f5b      	ldrb	r3, [r3, #29]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d108      	bne.n	8001530 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f042 0204 	orr.w	r2, r2, #4
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	e007      	b.n	8001540 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f022 0204 	bic.w	r2, r2, #4
 800153e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689a      	ldr	r2, [r3, #8]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	431a      	orrs	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	691b      	ldr	r3, [r3, #16]
 800154e:	431a      	orrs	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	695b      	ldr	r3, [r3, #20]
 8001554:	ea42 0103 	orr.w	r1, r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	1e5a      	subs	r2, r3, #1
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	430a      	orrs	r2, r1
 8001564:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2201      	movs	r2, #1
 8001570:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800157e:	b480      	push	{r7}
 8001580:	b087      	sub	sp, #28
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
 8001586:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001594:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001596:	7cfb      	ldrb	r3, [r7, #19]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d003      	beq.n	80015a4 <HAL_CAN_ConfigFilter+0x26>
 800159c:	7cfb      	ldrb	r3, [r7, #19]
 800159e:	2b02      	cmp	r3, #2
 80015a0:	f040 80aa 	bne.w	80016f8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80015aa:	f043 0201 	orr.w	r2, r3, #1
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	695b      	ldr	r3, [r3, #20]
 80015b8:	f003 031f 	and.w	r3, r3, #31
 80015bc:	2201      	movs	r2, #1
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	43db      	mvns	r3, r3
 80015ce:	401a      	ands	r2, r3
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d123      	bne.n	8001626 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	43db      	mvns	r3, r3
 80015e8:	401a      	ands	r2, r3
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001600:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	3248      	adds	r2, #72	; 0x48
 8001606:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800161a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800161c:	6979      	ldr	r1, [r7, #20]
 800161e:	3348      	adds	r3, #72	; 0x48
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	440b      	add	r3, r1
 8001624:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	69db      	ldr	r3, [r3, #28]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d122      	bne.n	8001674 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	431a      	orrs	r2, r3
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800164a:	683a      	ldr	r2, [r7, #0]
 800164c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800164e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	3248      	adds	r2, #72	; 0x48
 8001654:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001668:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800166a:	6979      	ldr	r1, [r7, #20]
 800166c:	3348      	adds	r3, #72	; 0x48
 800166e:	00db      	lsls	r3, r3, #3
 8001670:	440b      	add	r3, r1
 8001672:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d109      	bne.n	8001690 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	43db      	mvns	r3, r3
 8001686:	401a      	ands	r2, r3
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800168e:	e007      	b.n	80016a0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	431a      	orrs	r2, r3
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	691b      	ldr	r3, [r3, #16]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d109      	bne.n	80016bc <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	43db      	mvns	r3, r3
 80016b2:	401a      	ands	r2, r3
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80016ba:	e007      	b.n	80016cc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	431a      	orrs	r2, r3
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	6a1b      	ldr	r3, [r3, #32]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d107      	bne.n	80016e4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	431a      	orrs	r2, r3
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80016ea:	f023 0201 	bic.w	r2, r3, #1
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80016f4:	2300      	movs	r3, #0
 80016f6:	e006      	b.n	8001706 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
  }
}
 8001706:	4618      	mov	r0, r3
 8001708:	371c      	adds	r7, #28
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr

08001710 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800171e:	b2db      	uxtb	r3, r3
 8001720:	2b01      	cmp	r3, #1
 8001722:	d12e      	bne.n	8001782 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2202      	movs	r2, #2
 8001728:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f022 0201 	bic.w	r2, r2, #1
 800173a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800173c:	f7ff fe1a 	bl	8001374 <HAL_GetTick>
 8001740:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001742:	e012      	b.n	800176a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001744:	f7ff fe16 	bl	8001374 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b0a      	cmp	r3, #10
 8001750:	d90b      	bls.n	800176a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001756:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2205      	movs	r2, #5
 8001762:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e012      	b.n	8001790 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f003 0301 	and.w	r3, r3, #1
 8001774:	2b00      	cmp	r3, #0
 8001776:	d1e5      	bne.n	8001744 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800177e:	2300      	movs	r3, #0
 8001780:	e006      	b.n	8001790 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001786:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
  }
}
 8001790:	4618      	mov	r0, r3
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001798:	b480      	push	{r7}
 800179a:	b089      	sub	sp, #36	; 0x24
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
 80017a4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017ac:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80017b6:	7ffb      	ldrb	r3, [r7, #31]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d003      	beq.n	80017c4 <HAL_CAN_AddTxMessage+0x2c>
 80017bc:	7ffb      	ldrb	r3, [r7, #31]
 80017be:	2b02      	cmp	r3, #2
 80017c0:	f040 80ad 	bne.w	800191e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d10a      	bne.n	80017e4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d105      	bne.n	80017e4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f000 8095 	beq.w	800190e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	0e1b      	lsrs	r3, r3, #24
 80017e8:	f003 0303 	and.w	r3, r3, #3
 80017ec:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80017ee:	2201      	movs	r2, #1
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	409a      	lsls	r2, r3
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d10d      	bne.n	800181c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800180a:	68f9      	ldr	r1, [r7, #12]
 800180c:	6809      	ldr	r1, [r1, #0]
 800180e:	431a      	orrs	r2, r3
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	3318      	adds	r3, #24
 8001814:	011b      	lsls	r3, r3, #4
 8001816:	440b      	add	r3, r1
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	e00f      	b.n	800183c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001826:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800182c:	68f9      	ldr	r1, [r7, #12]
 800182e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001830:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	3318      	adds	r3, #24
 8001836:	011b      	lsls	r3, r3, #4
 8001838:	440b      	add	r3, r1
 800183a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6819      	ldr	r1, [r3, #0]
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	691a      	ldr	r2, [r3, #16]
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	3318      	adds	r3, #24
 8001848:	011b      	lsls	r3, r3, #4
 800184a:	440b      	add	r3, r1
 800184c:	3304      	adds	r3, #4
 800184e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	7d1b      	ldrb	r3, [r3, #20]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d111      	bne.n	800187c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	3318      	adds	r3, #24
 8001860:	011b      	lsls	r3, r3, #4
 8001862:	4413      	add	r3, r2
 8001864:	3304      	adds	r3, #4
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	6811      	ldr	r1, [r2, #0]
 800186c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	3318      	adds	r3, #24
 8001874:	011b      	lsls	r3, r3, #4
 8001876:	440b      	add	r3, r1
 8001878:	3304      	adds	r3, #4
 800187a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3307      	adds	r3, #7
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	061a      	lsls	r2, r3, #24
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	3306      	adds	r3, #6
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	041b      	lsls	r3, r3, #16
 800188c:	431a      	orrs	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	3305      	adds	r3, #5
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	021b      	lsls	r3, r3, #8
 8001896:	4313      	orrs	r3, r2
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	3204      	adds	r2, #4
 800189c:	7812      	ldrb	r2, [r2, #0]
 800189e:	4610      	mov	r0, r2
 80018a0:	68fa      	ldr	r2, [r7, #12]
 80018a2:	6811      	ldr	r1, [r2, #0]
 80018a4:	ea43 0200 	orr.w	r2, r3, r0
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	011b      	lsls	r3, r3, #4
 80018ac:	440b      	add	r3, r1
 80018ae:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80018b2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3303      	adds	r3, #3
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	061a      	lsls	r2, r3, #24
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3302      	adds	r3, #2
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	041b      	lsls	r3, r3, #16
 80018c4:	431a      	orrs	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	3301      	adds	r3, #1
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	021b      	lsls	r3, r3, #8
 80018ce:	4313      	orrs	r3, r2
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	7812      	ldrb	r2, [r2, #0]
 80018d4:	4610      	mov	r0, r2
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	6811      	ldr	r1, [r2, #0]
 80018da:	ea43 0200 	orr.w	r2, r3, r0
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	011b      	lsls	r3, r3, #4
 80018e2:	440b      	add	r3, r1
 80018e4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80018e8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	3318      	adds	r3, #24
 80018f2:	011b      	lsls	r3, r3, #4
 80018f4:	4413      	add	r3, r2
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	68fa      	ldr	r2, [r7, #12]
 80018fa:	6811      	ldr	r1, [r2, #0]
 80018fc:	f043 0201 	orr.w	r2, r3, #1
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	3318      	adds	r3, #24
 8001904:	011b      	lsls	r3, r3, #4
 8001906:	440b      	add	r3, r1
 8001908:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800190a:	2300      	movs	r3, #0
 800190c:	e00e      	b.n	800192c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001912:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e006      	b.n	800192c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001922:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
  }
}
 800192c:	4618      	mov	r0, r3
 800192e:	3724      	adds	r7, #36	; 0x24
 8001930:	46bd      	mov	sp, r7
 8001932:	bc80      	pop	{r7}
 8001934:	4770      	bx	lr

08001936 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8001936:	b480      	push	{r7}
 8001938:	b085      	sub	sp, #20
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
 800193e:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8001940:	2300      	movs	r3, #0
 8001942:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f893 3020 	ldrb.w	r3, [r3, #32]
 800194a:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 800194c:	7afb      	ldrb	r3, [r7, #11]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d002      	beq.n	8001958 <HAL_CAN_IsTxMessagePending+0x22>
 8001952:	7afb      	ldrb	r3, [r7, #11]
 8001954:	2b02      	cmp	r3, #2
 8001956:	d10b      	bne.n	8001970 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	689a      	ldr	r2, [r3, #8]
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	069b      	lsls	r3, r3, #26
 8001962:	401a      	ands	r2, r3
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	069b      	lsls	r3, r3, #26
 8001968:	429a      	cmp	r2, r3
 800196a:	d001      	beq.n	8001970 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 800196c:	2301      	movs	r3, #1
 800196e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8001970:	68fb      	ldr	r3, [r7, #12]
}
 8001972:	4618      	mov	r0, r3
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr

0800197c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800197c:	b480      	push	{r7}
 800197e:	b087      	sub	sp, #28
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
 8001988:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001990:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001992:	7dfb      	ldrb	r3, [r7, #23]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d003      	beq.n	80019a0 <HAL_CAN_GetRxMessage+0x24>
 8001998:	7dfb      	ldrb	r3, [r7, #23]
 800199a:	2b02      	cmp	r3, #2
 800199c:	f040 8103 	bne.w	8001ba6 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d10e      	bne.n	80019c4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	f003 0303 	and.w	r3, r3, #3
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d116      	bne.n	80019e2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e0f7      	b.n	8001bb4 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	691b      	ldr	r3, [r3, #16]
 80019ca:	f003 0303 	and.w	r3, r3, #3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d107      	bne.n	80019e2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e0e8      	b.n	8001bb4 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	331b      	adds	r3, #27
 80019ea:	011b      	lsls	r3, r3, #4
 80019ec:	4413      	add	r3, r2
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0204 	and.w	r2, r3, #4
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d10c      	bne.n	8001a1a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	331b      	adds	r3, #27
 8001a08:	011b      	lsls	r3, r3, #4
 8001a0a:	4413      	add	r3, r2
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	0d5b      	lsrs	r3, r3, #21
 8001a10:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	e00b      	b.n	8001a32 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	331b      	adds	r3, #27
 8001a22:	011b      	lsls	r3, r3, #4
 8001a24:	4413      	add	r3, r2
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	08db      	lsrs	r3, r3, #3
 8001a2a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	331b      	adds	r3, #27
 8001a3a:	011b      	lsls	r3, r3, #4
 8001a3c:	4413      	add	r3, r2
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0202 	and.w	r2, r3, #2
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	331b      	adds	r3, #27
 8001a50:	011b      	lsls	r3, r3, #4
 8001a52:	4413      	add	r3, r2
 8001a54:	3304      	adds	r3, #4
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0308 	and.w	r3, r3, #8
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d003      	beq.n	8001a68 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2208      	movs	r2, #8
 8001a64:	611a      	str	r2, [r3, #16]
 8001a66:	e00b      	b.n	8001a80 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	331b      	adds	r3, #27
 8001a70:	011b      	lsls	r3, r3, #4
 8001a72:	4413      	add	r3, r2
 8001a74:	3304      	adds	r3, #4
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 020f 	and.w	r2, r3, #15
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	331b      	adds	r3, #27
 8001a88:	011b      	lsls	r3, r3, #4
 8001a8a:	4413      	add	r3, r2
 8001a8c:	3304      	adds	r3, #4
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	0a1b      	lsrs	r3, r3, #8
 8001a92:	b2da      	uxtb	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	331b      	adds	r3, #27
 8001aa0:	011b      	lsls	r3, r3, #4
 8001aa2:	4413      	add	r3, r2
 8001aa4:	3304      	adds	r3, #4
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	0c1b      	lsrs	r3, r3, #16
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	011b      	lsls	r3, r3, #4
 8001ab8:	4413      	add	r3, r2
 8001aba:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	011b      	lsls	r3, r3, #4
 8001ace:	4413      	add	r3, r2
 8001ad0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	0a1a      	lsrs	r2, r3, #8
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	3301      	adds	r3, #1
 8001adc:	b2d2      	uxtb	r2, r2
 8001ade:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	011b      	lsls	r3, r3, #4
 8001ae8:	4413      	add	r3, r2
 8001aea:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	0c1a      	lsrs	r2, r3, #16
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	3302      	adds	r3, #2
 8001af6:	b2d2      	uxtb	r2, r2
 8001af8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	011b      	lsls	r3, r3, #4
 8001b02:	4413      	add	r3, r2
 8001b04:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	0e1a      	lsrs	r2, r3, #24
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	3303      	adds	r3, #3
 8001b10:	b2d2      	uxtb	r2, r2
 8001b12:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	011b      	lsls	r3, r3, #4
 8001b1c:	4413      	add	r3, r2
 8001b1e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	3304      	adds	r3, #4
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	011b      	lsls	r3, r3, #4
 8001b34:	4413      	add	r3, r2
 8001b36:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	0a1a      	lsrs	r2, r3, #8
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	3305      	adds	r3, #5
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	011b      	lsls	r3, r3, #4
 8001b4e:	4413      	add	r3, r2
 8001b50:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	0c1a      	lsrs	r2, r3, #16
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	3306      	adds	r3, #6
 8001b5c:	b2d2      	uxtb	r2, r2
 8001b5e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	011b      	lsls	r3, r3, #4
 8001b68:	4413      	add	r3, r2
 8001b6a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	0e1a      	lsrs	r2, r3, #24
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	3307      	adds	r3, #7
 8001b76:	b2d2      	uxtb	r2, r2
 8001b78:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d108      	bne.n	8001b92 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68da      	ldr	r2, [r3, #12]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f042 0220 	orr.w	r2, r2, #32
 8001b8e:	60da      	str	r2, [r3, #12]
 8001b90:	e007      	b.n	8001ba2 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	691a      	ldr	r2, [r3, #16]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f042 0220 	orr.w	r2, r2, #32
 8001ba0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	e006      	b.n	8001bb4 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001baa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
  }
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	371c      	adds	r7, #28
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr

08001bbe <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b085      	sub	sp, #20
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
 8001bc6:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bd2:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001bd4:	7afb      	ldrb	r3, [r7, #11]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d002      	beq.n	8001be0 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8001bda:	7afb      	ldrb	r3, [r7, #11]
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d10f      	bne.n	8001c00 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d106      	bne.n	8001bf4 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	f003 0303 	and.w	r3, r3, #3
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	e005      	b.n	8001c00 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	f003 0303 	and.w	r3, r3, #3
 8001bfe:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8001c00:	68fb      	ldr	r3, [r7, #12]
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr

08001c0c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08a      	sub	sp, #40	; 0x28
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001c14:	2300      	movs	r3, #0
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	695b      	ldr	r3, [r3, #20]
 8001c1e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001c48:	6a3b      	ldr	r3, [r7, #32]
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d07c      	beq.n	8001d4c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d023      	beq.n	8001ca4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2201      	movs	r2, #1
 8001c62:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f983 	bl	8001f7a <HAL_CAN_TxMailbox0CompleteCallback>
 8001c74:	e016      	b.n	8001ca4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d004      	beq.n	8001c8a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c82:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c86:	627b      	str	r3, [r7, #36]	; 0x24
 8001c88:	e00c      	b.n	8001ca4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	f003 0308 	and.w	r3, r3, #8
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d004      	beq.n	8001c9e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c96:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c9a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c9c:	e002      	b.n	8001ca4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 f986 	bl	8001fb0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d024      	beq.n	8001cf8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cb6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 f962 	bl	8001f8c <HAL_CAN_TxMailbox1CompleteCallback>
 8001cc8:	e016      	b.n	8001cf8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d004      	beq.n	8001cde <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24
 8001cdc:	e00c      	b.n	8001cf8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d004      	beq.n	8001cf2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cee:	627b      	str	r3, [r7, #36]	; 0x24
 8001cf0:	e002      	b.n	8001cf8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f965 	bl	8001fc2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d024      	beq.n	8001d4c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d0a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f941 	bl	8001f9e <HAL_CAN_TxMailbox2CompleteCallback>
 8001d1c:	e016      	b.n	8001d4c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d004      	beq.n	8001d32 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d30:	e00c      	b.n	8001d4c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d004      	beq.n	8001d46 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d42:	627b      	str	r3, [r7, #36]	; 0x24
 8001d44:	e002      	b.n	8001d4c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 f944 	bl	8001fd4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001d4c:	6a3b      	ldr	r3, [r7, #32]
 8001d4e:	f003 0308 	and.w	r3, r3, #8
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d00c      	beq.n	8001d70 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	f003 0310 	and.w	r3, r3, #16
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d007      	beq.n	8001d70 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d66:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2210      	movs	r2, #16
 8001d6e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001d70:	6a3b      	ldr	r3, [r7, #32]
 8001d72:	f003 0304 	and.w	r3, r3, #4
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d00b      	beq.n	8001d92 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	f003 0308 	and.w	r3, r3, #8
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d006      	beq.n	8001d92 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2208      	movs	r2, #8
 8001d8a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 f933 	bl	8001ff8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001d92:	6a3b      	ldr	r3, [r7, #32]
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d009      	beq.n	8001db0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	f003 0303 	and.w	r3, r3, #3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d002      	beq.n	8001db0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f91b 	bl	8001fe6 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001db0:	6a3b      	ldr	r3, [r7, #32]
 8001db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d00c      	beq.n	8001dd4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	f003 0310 	and.w	r3, r3, #16
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d007      	beq.n	8001dd4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dca:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2210      	movs	r2, #16
 8001dd2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001dd4:	6a3b      	ldr	r3, [r7, #32]
 8001dd6:	f003 0320 	and.w	r3, r3, #32
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00b      	beq.n	8001df6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	f003 0308 	and.w	r3, r3, #8
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d006      	beq.n	8001df6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2208      	movs	r2, #8
 8001dee:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 f913 	bl	800201c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001df6:	6a3b      	ldr	r3, [r7, #32]
 8001df8:	f003 0310 	and.w	r3, r3, #16
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d009      	beq.n	8001e14 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	f003 0303 	and.w	r3, r3, #3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d002      	beq.n	8001e14 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f8fb 	bl	800200a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001e14:	6a3b      	ldr	r3, [r7, #32]
 8001e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d00b      	beq.n	8001e36 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	f003 0310 	and.w	r3, r3, #16
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d006      	beq.n	8001e36 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2210      	movs	r2, #16
 8001e2e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 f8fc 	bl	800202e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001e36:	6a3b      	ldr	r3, [r7, #32]
 8001e38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d00b      	beq.n	8001e58 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	f003 0308 	and.w	r3, r3, #8
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d006      	beq.n	8001e58 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2208      	movs	r2, #8
 8001e50:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 f8f4 	bl	8002040 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001e58:	6a3b      	ldr	r3, [r7, #32]
 8001e5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d07b      	beq.n	8001f5a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	f003 0304 	and.w	r3, r3, #4
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d072      	beq.n	8001f52 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e6c:	6a3b      	ldr	r3, [r7, #32]
 8001e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d008      	beq.n	8001e88 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d003      	beq.n	8001e88 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e82:	f043 0301 	orr.w	r3, r3, #1
 8001e86:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e88:	6a3b      	ldr	r3, [r7, #32]
 8001e8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d008      	beq.n	8001ea4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9e:	f043 0302 	orr.w	r3, r3, #2
 8001ea2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ea4:	6a3b      	ldr	r3, [r7, #32]
 8001ea6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d008      	beq.n	8001ec0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d003      	beq.n	8001ec0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	f043 0304 	orr.w	r3, r3, #4
 8001ebe:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ec0:	6a3b      	ldr	r3, [r7, #32]
 8001ec2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d043      	beq.n	8001f52 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d03e      	beq.n	8001f52 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001eda:	2b60      	cmp	r3, #96	; 0x60
 8001edc:	d02b      	beq.n	8001f36 <HAL_CAN_IRQHandler+0x32a>
 8001ede:	2b60      	cmp	r3, #96	; 0x60
 8001ee0:	d82e      	bhi.n	8001f40 <HAL_CAN_IRQHandler+0x334>
 8001ee2:	2b50      	cmp	r3, #80	; 0x50
 8001ee4:	d022      	beq.n	8001f2c <HAL_CAN_IRQHandler+0x320>
 8001ee6:	2b50      	cmp	r3, #80	; 0x50
 8001ee8:	d82a      	bhi.n	8001f40 <HAL_CAN_IRQHandler+0x334>
 8001eea:	2b40      	cmp	r3, #64	; 0x40
 8001eec:	d019      	beq.n	8001f22 <HAL_CAN_IRQHandler+0x316>
 8001eee:	2b40      	cmp	r3, #64	; 0x40
 8001ef0:	d826      	bhi.n	8001f40 <HAL_CAN_IRQHandler+0x334>
 8001ef2:	2b30      	cmp	r3, #48	; 0x30
 8001ef4:	d010      	beq.n	8001f18 <HAL_CAN_IRQHandler+0x30c>
 8001ef6:	2b30      	cmp	r3, #48	; 0x30
 8001ef8:	d822      	bhi.n	8001f40 <HAL_CAN_IRQHandler+0x334>
 8001efa:	2b10      	cmp	r3, #16
 8001efc:	d002      	beq.n	8001f04 <HAL_CAN_IRQHandler+0x2f8>
 8001efe:	2b20      	cmp	r3, #32
 8001f00:	d005      	beq.n	8001f0e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001f02:	e01d      	b.n	8001f40 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f06:	f043 0308 	orr.w	r3, r3, #8
 8001f0a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f0c:	e019      	b.n	8001f42 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f10:	f043 0310 	orr.w	r3, r3, #16
 8001f14:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f16:	e014      	b.n	8001f42 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1a:	f043 0320 	orr.w	r3, r3, #32
 8001f1e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f20:	e00f      	b.n	8001f42 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f28:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f2a:	e00a      	b.n	8001f42 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f34:	e005      	b.n	8001f42 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f3c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f3e:	e000      	b.n	8001f42 <HAL_CAN_IRQHandler+0x336>
            break;
 8001f40:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	699a      	ldr	r2, [r3, #24]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001f50:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2204      	movs	r2, #4
 8001f58:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d008      	beq.n	8001f72 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f66:	431a      	orrs	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 f870 	bl	8002052 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001f72:	bf00      	nop
 8001f74:	3728      	adds	r7, #40	; 0x28
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b083      	sub	sp, #12
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bc80      	pop	{r7}
 8001f8a:	4770      	bx	lr

08001f8c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bc80      	pop	{r7}
 8001f9c:	4770      	bx	lr

08001f9e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr

08001fb0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc80      	pop	{r7}
 8001fc0:	4770      	bx	lr

08001fc2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bc80      	pop	{r7}
 8001fd2:	4770      	bx	lr

08001fd4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bc80      	pop	{r7}
 8001fe4:	4770      	bx	lr

08001fe6 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bc80      	pop	{r7}
 8001ff6:	4770      	bx	lr

08001ff8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	bc80      	pop	{r7}
 8002008:	4770      	bx	lr

0800200a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800200a:	b480      	push	{r7}
 800200c:	b083      	sub	sp, #12
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr

0800201c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	bc80      	pop	{r7}
 800202c:	4770      	bx	lr

0800202e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr

08002040 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	bc80      	pop	{r7}
 8002050:	4770      	bx	lr

08002052 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	bc80      	pop	{r7}
 8002062:	4770      	bx	lr

08002064 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002074:	4b0c      	ldr	r3, [pc, #48]	; (80020a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002080:	4013      	ands	r3, r2
 8002082:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800208c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002090:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002094:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002096:	4a04      	ldr	r2, [pc, #16]	; (80020a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	60d3      	str	r3, [r2, #12]
}
 800209c:	bf00      	nop
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bc80      	pop	{r7}
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020b0:	4b04      	ldr	r3, [pc, #16]	; (80020c4 <__NVIC_GetPriorityGrouping+0x18>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	0a1b      	lsrs	r3, r3, #8
 80020b6:	f003 0307 	and.w	r3, r3, #7
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	46bd      	mov	sp, r7
 80020be:	bc80      	pop	{r7}
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	db0b      	blt.n	80020f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020da:	79fb      	ldrb	r3, [r7, #7]
 80020dc:	f003 021f 	and.w	r2, r3, #31
 80020e0:	4906      	ldr	r1, [pc, #24]	; (80020fc <__NVIC_EnableIRQ+0x34>)
 80020e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e6:	095b      	lsrs	r3, r3, #5
 80020e8:	2001      	movs	r0, #1
 80020ea:	fa00 f202 	lsl.w	r2, r0, r2
 80020ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bc80      	pop	{r7}
 80020fa:	4770      	bx	lr
 80020fc:	e000e100 	.word	0xe000e100

08002100 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	4603      	mov	r3, r0
 8002108:	6039      	str	r1, [r7, #0]
 800210a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800210c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002110:	2b00      	cmp	r3, #0
 8002112:	db0a      	blt.n	800212a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	b2da      	uxtb	r2, r3
 8002118:	490c      	ldr	r1, [pc, #48]	; (800214c <__NVIC_SetPriority+0x4c>)
 800211a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211e:	0112      	lsls	r2, r2, #4
 8002120:	b2d2      	uxtb	r2, r2
 8002122:	440b      	add	r3, r1
 8002124:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002128:	e00a      	b.n	8002140 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	b2da      	uxtb	r2, r3
 800212e:	4908      	ldr	r1, [pc, #32]	; (8002150 <__NVIC_SetPriority+0x50>)
 8002130:	79fb      	ldrb	r3, [r7, #7]
 8002132:	f003 030f 	and.w	r3, r3, #15
 8002136:	3b04      	subs	r3, #4
 8002138:	0112      	lsls	r2, r2, #4
 800213a:	b2d2      	uxtb	r2, r2
 800213c:	440b      	add	r3, r1
 800213e:	761a      	strb	r2, [r3, #24]
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	bc80      	pop	{r7}
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	e000e100 	.word	0xe000e100
 8002150:	e000ed00 	.word	0xe000ed00

08002154 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002154:	b480      	push	{r7}
 8002156:	b089      	sub	sp, #36	; 0x24
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	f1c3 0307 	rsb	r3, r3, #7
 800216e:	2b04      	cmp	r3, #4
 8002170:	bf28      	it	cs
 8002172:	2304      	movcs	r3, #4
 8002174:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	3304      	adds	r3, #4
 800217a:	2b06      	cmp	r3, #6
 800217c:	d902      	bls.n	8002184 <NVIC_EncodePriority+0x30>
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	3b03      	subs	r3, #3
 8002182:	e000      	b.n	8002186 <NVIC_EncodePriority+0x32>
 8002184:	2300      	movs	r3, #0
 8002186:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002188:	f04f 32ff 	mov.w	r2, #4294967295
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	43da      	mvns	r2, r3
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	401a      	ands	r2, r3
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800219c:	f04f 31ff 	mov.w	r1, #4294967295
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	fa01 f303 	lsl.w	r3, r1, r3
 80021a6:	43d9      	mvns	r1, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021ac:	4313      	orrs	r3, r2
         );
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3724      	adds	r7, #36	; 0x24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr

080021b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f7ff ff4f 	bl	8002064 <__NVIC_SetPriorityGrouping>
}
 80021c6:	bf00      	nop
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b086      	sub	sp, #24
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	4603      	mov	r3, r0
 80021d6:	60b9      	str	r1, [r7, #8]
 80021d8:	607a      	str	r2, [r7, #4]
 80021da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021dc:	2300      	movs	r3, #0
 80021de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021e0:	f7ff ff64 	bl	80020ac <__NVIC_GetPriorityGrouping>
 80021e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	68b9      	ldr	r1, [r7, #8]
 80021ea:	6978      	ldr	r0, [r7, #20]
 80021ec:	f7ff ffb2 	bl	8002154 <NVIC_EncodePriority>
 80021f0:	4602      	mov	r2, r0
 80021f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021f6:	4611      	mov	r1, r2
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff ff81 	bl	8002100 <__NVIC_SetPriority>
}
 80021fe:	bf00      	nop
 8002200:	3718      	adds	r7, #24
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b082      	sub	sp, #8
 800220a:	af00      	add	r7, sp, #0
 800220c:	4603      	mov	r3, r0
 800220e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff ff57 	bl	80020c8 <__NVIC_EnableIRQ>
}
 800221a:	bf00      	nop
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
	...

08002224 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002224:	b480      	push	{r7}
 8002226:	b08b      	sub	sp, #44	; 0x2c
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800222e:	2300      	movs	r3, #0
 8002230:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002232:	2300      	movs	r3, #0
 8002234:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002236:	e169      	b.n	800250c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002238:	2201      	movs	r2, #1
 800223a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	69fa      	ldr	r2, [r7, #28]
 8002248:	4013      	ands	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	429a      	cmp	r2, r3
 8002252:	f040 8158 	bne.w	8002506 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	4a9a      	ldr	r2, [pc, #616]	; (80024c4 <HAL_GPIO_Init+0x2a0>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d05e      	beq.n	800231e <HAL_GPIO_Init+0xfa>
 8002260:	4a98      	ldr	r2, [pc, #608]	; (80024c4 <HAL_GPIO_Init+0x2a0>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d875      	bhi.n	8002352 <HAL_GPIO_Init+0x12e>
 8002266:	4a98      	ldr	r2, [pc, #608]	; (80024c8 <HAL_GPIO_Init+0x2a4>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d058      	beq.n	800231e <HAL_GPIO_Init+0xfa>
 800226c:	4a96      	ldr	r2, [pc, #600]	; (80024c8 <HAL_GPIO_Init+0x2a4>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d86f      	bhi.n	8002352 <HAL_GPIO_Init+0x12e>
 8002272:	4a96      	ldr	r2, [pc, #600]	; (80024cc <HAL_GPIO_Init+0x2a8>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d052      	beq.n	800231e <HAL_GPIO_Init+0xfa>
 8002278:	4a94      	ldr	r2, [pc, #592]	; (80024cc <HAL_GPIO_Init+0x2a8>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d869      	bhi.n	8002352 <HAL_GPIO_Init+0x12e>
 800227e:	4a94      	ldr	r2, [pc, #592]	; (80024d0 <HAL_GPIO_Init+0x2ac>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d04c      	beq.n	800231e <HAL_GPIO_Init+0xfa>
 8002284:	4a92      	ldr	r2, [pc, #584]	; (80024d0 <HAL_GPIO_Init+0x2ac>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d863      	bhi.n	8002352 <HAL_GPIO_Init+0x12e>
 800228a:	4a92      	ldr	r2, [pc, #584]	; (80024d4 <HAL_GPIO_Init+0x2b0>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d046      	beq.n	800231e <HAL_GPIO_Init+0xfa>
 8002290:	4a90      	ldr	r2, [pc, #576]	; (80024d4 <HAL_GPIO_Init+0x2b0>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d85d      	bhi.n	8002352 <HAL_GPIO_Init+0x12e>
 8002296:	2b12      	cmp	r3, #18
 8002298:	d82a      	bhi.n	80022f0 <HAL_GPIO_Init+0xcc>
 800229a:	2b12      	cmp	r3, #18
 800229c:	d859      	bhi.n	8002352 <HAL_GPIO_Init+0x12e>
 800229e:	a201      	add	r2, pc, #4	; (adr r2, 80022a4 <HAL_GPIO_Init+0x80>)
 80022a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a4:	0800231f 	.word	0x0800231f
 80022a8:	080022f9 	.word	0x080022f9
 80022ac:	0800230b 	.word	0x0800230b
 80022b0:	0800234d 	.word	0x0800234d
 80022b4:	08002353 	.word	0x08002353
 80022b8:	08002353 	.word	0x08002353
 80022bc:	08002353 	.word	0x08002353
 80022c0:	08002353 	.word	0x08002353
 80022c4:	08002353 	.word	0x08002353
 80022c8:	08002353 	.word	0x08002353
 80022cc:	08002353 	.word	0x08002353
 80022d0:	08002353 	.word	0x08002353
 80022d4:	08002353 	.word	0x08002353
 80022d8:	08002353 	.word	0x08002353
 80022dc:	08002353 	.word	0x08002353
 80022e0:	08002353 	.word	0x08002353
 80022e4:	08002353 	.word	0x08002353
 80022e8:	08002301 	.word	0x08002301
 80022ec:	08002315 	.word	0x08002315
 80022f0:	4a79      	ldr	r2, [pc, #484]	; (80024d8 <HAL_GPIO_Init+0x2b4>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d013      	beq.n	800231e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80022f6:	e02c      	b.n	8002352 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	623b      	str	r3, [r7, #32]
          break;
 80022fe:	e029      	b.n	8002354 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	3304      	adds	r3, #4
 8002306:	623b      	str	r3, [r7, #32]
          break;
 8002308:	e024      	b.n	8002354 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	3308      	adds	r3, #8
 8002310:	623b      	str	r3, [r7, #32]
          break;
 8002312:	e01f      	b.n	8002354 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	330c      	adds	r3, #12
 800231a:	623b      	str	r3, [r7, #32]
          break;
 800231c:	e01a      	b.n	8002354 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d102      	bne.n	800232c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002326:	2304      	movs	r3, #4
 8002328:	623b      	str	r3, [r7, #32]
          break;
 800232a:	e013      	b.n	8002354 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d105      	bne.n	8002340 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002334:	2308      	movs	r3, #8
 8002336:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	69fa      	ldr	r2, [r7, #28]
 800233c:	611a      	str	r2, [r3, #16]
          break;
 800233e:	e009      	b.n	8002354 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002340:	2308      	movs	r3, #8
 8002342:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	69fa      	ldr	r2, [r7, #28]
 8002348:	615a      	str	r2, [r3, #20]
          break;
 800234a:	e003      	b.n	8002354 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800234c:	2300      	movs	r3, #0
 800234e:	623b      	str	r3, [r7, #32]
          break;
 8002350:	e000      	b.n	8002354 <HAL_GPIO_Init+0x130>
          break;
 8002352:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	2bff      	cmp	r3, #255	; 0xff
 8002358:	d801      	bhi.n	800235e <HAL_GPIO_Init+0x13a>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	e001      	b.n	8002362 <HAL_GPIO_Init+0x13e>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	3304      	adds	r3, #4
 8002362:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	2bff      	cmp	r3, #255	; 0xff
 8002368:	d802      	bhi.n	8002370 <HAL_GPIO_Init+0x14c>
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	e002      	b.n	8002376 <HAL_GPIO_Init+0x152>
 8002370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002372:	3b08      	subs	r3, #8
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	210f      	movs	r1, #15
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	fa01 f303 	lsl.w	r3, r1, r3
 8002384:	43db      	mvns	r3, r3
 8002386:	401a      	ands	r2, r3
 8002388:	6a39      	ldr	r1, [r7, #32]
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	fa01 f303 	lsl.w	r3, r1, r3
 8002390:	431a      	orrs	r2, r3
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f000 80b1 	beq.w	8002506 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80023a4:	4b4d      	ldr	r3, [pc, #308]	; (80024dc <HAL_GPIO_Init+0x2b8>)
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	4a4c      	ldr	r2, [pc, #304]	; (80024dc <HAL_GPIO_Init+0x2b8>)
 80023aa:	f043 0301 	orr.w	r3, r3, #1
 80023ae:	6193      	str	r3, [r2, #24]
 80023b0:	4b4a      	ldr	r3, [pc, #296]	; (80024dc <HAL_GPIO_Init+0x2b8>)
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	f003 0301 	and.w	r3, r3, #1
 80023b8:	60bb      	str	r3, [r7, #8]
 80023ba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80023bc:	4a48      	ldr	r2, [pc, #288]	; (80024e0 <HAL_GPIO_Init+0x2bc>)
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	089b      	lsrs	r3, r3, #2
 80023c2:	3302      	adds	r3, #2
 80023c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023cc:	f003 0303 	and.w	r3, r3, #3
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	220f      	movs	r2, #15
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	43db      	mvns	r3, r3
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	4013      	ands	r3, r2
 80023de:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a40      	ldr	r2, [pc, #256]	; (80024e4 <HAL_GPIO_Init+0x2c0>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d013      	beq.n	8002410 <HAL_GPIO_Init+0x1ec>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a3f      	ldr	r2, [pc, #252]	; (80024e8 <HAL_GPIO_Init+0x2c4>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d00d      	beq.n	800240c <HAL_GPIO_Init+0x1e8>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a3e      	ldr	r2, [pc, #248]	; (80024ec <HAL_GPIO_Init+0x2c8>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d007      	beq.n	8002408 <HAL_GPIO_Init+0x1e4>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a3d      	ldr	r2, [pc, #244]	; (80024f0 <HAL_GPIO_Init+0x2cc>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d101      	bne.n	8002404 <HAL_GPIO_Init+0x1e0>
 8002400:	2303      	movs	r3, #3
 8002402:	e006      	b.n	8002412 <HAL_GPIO_Init+0x1ee>
 8002404:	2304      	movs	r3, #4
 8002406:	e004      	b.n	8002412 <HAL_GPIO_Init+0x1ee>
 8002408:	2302      	movs	r3, #2
 800240a:	e002      	b.n	8002412 <HAL_GPIO_Init+0x1ee>
 800240c:	2301      	movs	r3, #1
 800240e:	e000      	b.n	8002412 <HAL_GPIO_Init+0x1ee>
 8002410:	2300      	movs	r3, #0
 8002412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002414:	f002 0203 	and.w	r2, r2, #3
 8002418:	0092      	lsls	r2, r2, #2
 800241a:	4093      	lsls	r3, r2
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	4313      	orrs	r3, r2
 8002420:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002422:	492f      	ldr	r1, [pc, #188]	; (80024e0 <HAL_GPIO_Init+0x2bc>)
 8002424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002426:	089b      	lsrs	r3, r3, #2
 8002428:	3302      	adds	r3, #2
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d006      	beq.n	800244a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800243c:	4b2d      	ldr	r3, [pc, #180]	; (80024f4 <HAL_GPIO_Init+0x2d0>)
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	492c      	ldr	r1, [pc, #176]	; (80024f4 <HAL_GPIO_Init+0x2d0>)
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	4313      	orrs	r3, r2
 8002446:	608b      	str	r3, [r1, #8]
 8002448:	e006      	b.n	8002458 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800244a:	4b2a      	ldr	r3, [pc, #168]	; (80024f4 <HAL_GPIO_Init+0x2d0>)
 800244c:	689a      	ldr	r2, [r3, #8]
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	43db      	mvns	r3, r3
 8002452:	4928      	ldr	r1, [pc, #160]	; (80024f4 <HAL_GPIO_Init+0x2d0>)
 8002454:	4013      	ands	r3, r2
 8002456:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d006      	beq.n	8002472 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002464:	4b23      	ldr	r3, [pc, #140]	; (80024f4 <HAL_GPIO_Init+0x2d0>)
 8002466:	68da      	ldr	r2, [r3, #12]
 8002468:	4922      	ldr	r1, [pc, #136]	; (80024f4 <HAL_GPIO_Init+0x2d0>)
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	4313      	orrs	r3, r2
 800246e:	60cb      	str	r3, [r1, #12]
 8002470:	e006      	b.n	8002480 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002472:	4b20      	ldr	r3, [pc, #128]	; (80024f4 <HAL_GPIO_Init+0x2d0>)
 8002474:	68da      	ldr	r2, [r3, #12]
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	43db      	mvns	r3, r3
 800247a:	491e      	ldr	r1, [pc, #120]	; (80024f4 <HAL_GPIO_Init+0x2d0>)
 800247c:	4013      	ands	r3, r2
 800247e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d006      	beq.n	800249a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800248c:	4b19      	ldr	r3, [pc, #100]	; (80024f4 <HAL_GPIO_Init+0x2d0>)
 800248e:	685a      	ldr	r2, [r3, #4]
 8002490:	4918      	ldr	r1, [pc, #96]	; (80024f4 <HAL_GPIO_Init+0x2d0>)
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	4313      	orrs	r3, r2
 8002496:	604b      	str	r3, [r1, #4]
 8002498:	e006      	b.n	80024a8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800249a:	4b16      	ldr	r3, [pc, #88]	; (80024f4 <HAL_GPIO_Init+0x2d0>)
 800249c:	685a      	ldr	r2, [r3, #4]
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	43db      	mvns	r3, r3
 80024a2:	4914      	ldr	r1, [pc, #80]	; (80024f4 <HAL_GPIO_Init+0x2d0>)
 80024a4:	4013      	ands	r3, r2
 80024a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d021      	beq.n	80024f8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024b4:	4b0f      	ldr	r3, [pc, #60]	; (80024f4 <HAL_GPIO_Init+0x2d0>)
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	490e      	ldr	r1, [pc, #56]	; (80024f4 <HAL_GPIO_Init+0x2d0>)
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	4313      	orrs	r3, r2
 80024be:	600b      	str	r3, [r1, #0]
 80024c0:	e021      	b.n	8002506 <HAL_GPIO_Init+0x2e2>
 80024c2:	bf00      	nop
 80024c4:	10320000 	.word	0x10320000
 80024c8:	10310000 	.word	0x10310000
 80024cc:	10220000 	.word	0x10220000
 80024d0:	10210000 	.word	0x10210000
 80024d4:	10120000 	.word	0x10120000
 80024d8:	10110000 	.word	0x10110000
 80024dc:	40021000 	.word	0x40021000
 80024e0:	40010000 	.word	0x40010000
 80024e4:	40010800 	.word	0x40010800
 80024e8:	40010c00 	.word	0x40010c00
 80024ec:	40011000 	.word	0x40011000
 80024f0:	40011400 	.word	0x40011400
 80024f4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024f8:	4b0b      	ldr	r3, [pc, #44]	; (8002528 <HAL_GPIO_Init+0x304>)
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	43db      	mvns	r3, r3
 8002500:	4909      	ldr	r1, [pc, #36]	; (8002528 <HAL_GPIO_Init+0x304>)
 8002502:	4013      	ands	r3, r2
 8002504:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	3301      	adds	r3, #1
 800250a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002512:	fa22 f303 	lsr.w	r3, r2, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	f47f ae8e 	bne.w	8002238 <HAL_GPIO_Init+0x14>
  }
}
 800251c:	bf00      	nop
 800251e:	bf00      	nop
 8002520:	372c      	adds	r7, #44	; 0x2c
 8002522:	46bd      	mov	sp, r7
 8002524:	bc80      	pop	{r7}
 8002526:	4770      	bx	lr
 8002528:	40010400 	.word	0x40010400

0800252c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	460b      	mov	r3, r1
 8002536:	807b      	strh	r3, [r7, #2]
 8002538:	4613      	mov	r3, r2
 800253a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800253c:	787b      	ldrb	r3, [r7, #1]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002542:	887a      	ldrh	r2, [r7, #2]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002548:	e003      	b.n	8002552 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800254a:	887b      	ldrh	r3, [r7, #2]
 800254c:	041a      	lsls	r2, r3, #16
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	611a      	str	r2, [r3, #16]
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	bc80      	pop	{r7}
 800255a:	4770      	bx	lr

0800255c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e272      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	f000 8087 	beq.w	800268a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800257c:	4b92      	ldr	r3, [pc, #584]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f003 030c 	and.w	r3, r3, #12
 8002584:	2b04      	cmp	r3, #4
 8002586:	d00c      	beq.n	80025a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002588:	4b8f      	ldr	r3, [pc, #572]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f003 030c 	and.w	r3, r3, #12
 8002590:	2b08      	cmp	r3, #8
 8002592:	d112      	bne.n	80025ba <HAL_RCC_OscConfig+0x5e>
 8002594:	4b8c      	ldr	r3, [pc, #560]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800259c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025a0:	d10b      	bne.n	80025ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a2:	4b89      	ldr	r3, [pc, #548]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d06c      	beq.n	8002688 <HAL_RCC_OscConfig+0x12c>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d168      	bne.n	8002688 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e24c      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025c2:	d106      	bne.n	80025d2 <HAL_RCC_OscConfig+0x76>
 80025c4:	4b80      	ldr	r3, [pc, #512]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a7f      	ldr	r2, [pc, #508]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 80025ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ce:	6013      	str	r3, [r2, #0]
 80025d0:	e02e      	b.n	8002630 <HAL_RCC_OscConfig+0xd4>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d10c      	bne.n	80025f4 <HAL_RCC_OscConfig+0x98>
 80025da:	4b7b      	ldr	r3, [pc, #492]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a7a      	ldr	r2, [pc, #488]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 80025e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025e4:	6013      	str	r3, [r2, #0]
 80025e6:	4b78      	ldr	r3, [pc, #480]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a77      	ldr	r2, [pc, #476]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 80025ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025f0:	6013      	str	r3, [r2, #0]
 80025f2:	e01d      	b.n	8002630 <HAL_RCC_OscConfig+0xd4>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025fc:	d10c      	bne.n	8002618 <HAL_RCC_OscConfig+0xbc>
 80025fe:	4b72      	ldr	r3, [pc, #456]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a71      	ldr	r2, [pc, #452]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 8002604:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002608:	6013      	str	r3, [r2, #0]
 800260a:	4b6f      	ldr	r3, [pc, #444]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a6e      	ldr	r2, [pc, #440]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 8002610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002614:	6013      	str	r3, [r2, #0]
 8002616:	e00b      	b.n	8002630 <HAL_RCC_OscConfig+0xd4>
 8002618:	4b6b      	ldr	r3, [pc, #428]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a6a      	ldr	r2, [pc, #424]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 800261e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002622:	6013      	str	r3, [r2, #0]
 8002624:	4b68      	ldr	r3, [pc, #416]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a67      	ldr	r2, [pc, #412]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 800262a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800262e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d013      	beq.n	8002660 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002638:	f7fe fe9c 	bl	8001374 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002640:	f7fe fe98 	bl	8001374 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b64      	cmp	r3, #100	; 0x64
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e200      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002652:	4b5d      	ldr	r3, [pc, #372]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d0f0      	beq.n	8002640 <HAL_RCC_OscConfig+0xe4>
 800265e:	e014      	b.n	800268a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002660:	f7fe fe88 	bl	8001374 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002668:	f7fe fe84 	bl	8001374 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b64      	cmp	r3, #100	; 0x64
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e1ec      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800267a:	4b53      	ldr	r3, [pc, #332]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1f0      	bne.n	8002668 <HAL_RCC_OscConfig+0x10c>
 8002686:	e000      	b.n	800268a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002688:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d063      	beq.n	800275e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002696:	4b4c      	ldr	r3, [pc, #304]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f003 030c 	and.w	r3, r3, #12
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00b      	beq.n	80026ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80026a2:	4b49      	ldr	r3, [pc, #292]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f003 030c 	and.w	r3, r3, #12
 80026aa:	2b08      	cmp	r3, #8
 80026ac:	d11c      	bne.n	80026e8 <HAL_RCC_OscConfig+0x18c>
 80026ae:	4b46      	ldr	r3, [pc, #280]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d116      	bne.n	80026e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ba:	4b43      	ldr	r3, [pc, #268]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d005      	beq.n	80026d2 <HAL_RCC_OscConfig+0x176>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d001      	beq.n	80026d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e1c0      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d2:	4b3d      	ldr	r3, [pc, #244]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	4939      	ldr	r1, [pc, #228]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026e6:	e03a      	b.n	800275e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d020      	beq.n	8002732 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026f0:	4b36      	ldr	r3, [pc, #216]	; (80027cc <HAL_RCC_OscConfig+0x270>)
 80026f2:	2201      	movs	r2, #1
 80026f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f6:	f7fe fe3d 	bl	8001374 <HAL_GetTick>
 80026fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026fc:	e008      	b.n	8002710 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026fe:	f7fe fe39 	bl	8001374 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e1a1      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002710:	4b2d      	ldr	r3, [pc, #180]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d0f0      	beq.n	80026fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800271c:	4b2a      	ldr	r3, [pc, #168]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	4927      	ldr	r1, [pc, #156]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 800272c:	4313      	orrs	r3, r2
 800272e:	600b      	str	r3, [r1, #0]
 8002730:	e015      	b.n	800275e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002732:	4b26      	ldr	r3, [pc, #152]	; (80027cc <HAL_RCC_OscConfig+0x270>)
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002738:	f7fe fe1c 	bl	8001374 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002740:	f7fe fe18 	bl	8001374 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e180      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002752:	4b1d      	ldr	r3, [pc, #116]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1f0      	bne.n	8002740 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0308 	and.w	r3, r3, #8
 8002766:	2b00      	cmp	r3, #0
 8002768:	d03a      	beq.n	80027e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d019      	beq.n	80027a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002772:	4b17      	ldr	r3, [pc, #92]	; (80027d0 <HAL_RCC_OscConfig+0x274>)
 8002774:	2201      	movs	r2, #1
 8002776:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002778:	f7fe fdfc 	bl	8001374 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002780:	f7fe fdf8 	bl	8001374 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e160      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002792:	4b0d      	ldr	r3, [pc, #52]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 8002794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0f0      	beq.n	8002780 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800279e:	2001      	movs	r0, #1
 80027a0:	f000 fafe 	bl	8002da0 <RCC_Delay>
 80027a4:	e01c      	b.n	80027e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027a6:	4b0a      	ldr	r3, [pc, #40]	; (80027d0 <HAL_RCC_OscConfig+0x274>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ac:	f7fe fde2 	bl	8001374 <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027b2:	e00f      	b.n	80027d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027b4:	f7fe fdde 	bl	8001374 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d908      	bls.n	80027d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e146      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
 80027c6:	bf00      	nop
 80027c8:	40021000 	.word	0x40021000
 80027cc:	42420000 	.word	0x42420000
 80027d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027d4:	4b92      	ldr	r3, [pc, #584]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 80027d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1e9      	bne.n	80027b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0304 	and.w	r3, r3, #4
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f000 80a6 	beq.w	800293a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ee:	2300      	movs	r3, #0
 80027f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027f2:	4b8b      	ldr	r3, [pc, #556]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10d      	bne.n	800281a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027fe:	4b88      	ldr	r3, [pc, #544]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 8002800:	69db      	ldr	r3, [r3, #28]
 8002802:	4a87      	ldr	r2, [pc, #540]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 8002804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002808:	61d3      	str	r3, [r2, #28]
 800280a:	4b85      	ldr	r3, [pc, #532]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002812:	60bb      	str	r3, [r7, #8]
 8002814:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002816:	2301      	movs	r3, #1
 8002818:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800281a:	4b82      	ldr	r3, [pc, #520]	; (8002a24 <HAL_RCC_OscConfig+0x4c8>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002822:	2b00      	cmp	r3, #0
 8002824:	d118      	bne.n	8002858 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002826:	4b7f      	ldr	r3, [pc, #508]	; (8002a24 <HAL_RCC_OscConfig+0x4c8>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a7e      	ldr	r2, [pc, #504]	; (8002a24 <HAL_RCC_OscConfig+0x4c8>)
 800282c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002830:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002832:	f7fe fd9f 	bl	8001374 <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002838:	e008      	b.n	800284c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800283a:	f7fe fd9b 	bl	8001374 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b64      	cmp	r3, #100	; 0x64
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e103      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800284c:	4b75      	ldr	r3, [pc, #468]	; (8002a24 <HAL_RCC_OscConfig+0x4c8>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002854:	2b00      	cmp	r3, #0
 8002856:	d0f0      	beq.n	800283a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d106      	bne.n	800286e <HAL_RCC_OscConfig+0x312>
 8002860:	4b6f      	ldr	r3, [pc, #444]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	4a6e      	ldr	r2, [pc, #440]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 8002866:	f043 0301 	orr.w	r3, r3, #1
 800286a:	6213      	str	r3, [r2, #32]
 800286c:	e02d      	b.n	80028ca <HAL_RCC_OscConfig+0x36e>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10c      	bne.n	8002890 <HAL_RCC_OscConfig+0x334>
 8002876:	4b6a      	ldr	r3, [pc, #424]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	4a69      	ldr	r2, [pc, #420]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 800287c:	f023 0301 	bic.w	r3, r3, #1
 8002880:	6213      	str	r3, [r2, #32]
 8002882:	4b67      	ldr	r3, [pc, #412]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	4a66      	ldr	r2, [pc, #408]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 8002888:	f023 0304 	bic.w	r3, r3, #4
 800288c:	6213      	str	r3, [r2, #32]
 800288e:	e01c      	b.n	80028ca <HAL_RCC_OscConfig+0x36e>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	2b05      	cmp	r3, #5
 8002896:	d10c      	bne.n	80028b2 <HAL_RCC_OscConfig+0x356>
 8002898:	4b61      	ldr	r3, [pc, #388]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	4a60      	ldr	r2, [pc, #384]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 800289e:	f043 0304 	orr.w	r3, r3, #4
 80028a2:	6213      	str	r3, [r2, #32]
 80028a4:	4b5e      	ldr	r3, [pc, #376]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	4a5d      	ldr	r2, [pc, #372]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 80028aa:	f043 0301 	orr.w	r3, r3, #1
 80028ae:	6213      	str	r3, [r2, #32]
 80028b0:	e00b      	b.n	80028ca <HAL_RCC_OscConfig+0x36e>
 80028b2:	4b5b      	ldr	r3, [pc, #364]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	4a5a      	ldr	r2, [pc, #360]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 80028b8:	f023 0301 	bic.w	r3, r3, #1
 80028bc:	6213      	str	r3, [r2, #32]
 80028be:	4b58      	ldr	r3, [pc, #352]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	4a57      	ldr	r2, [pc, #348]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 80028c4:	f023 0304 	bic.w	r3, r3, #4
 80028c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d015      	beq.n	80028fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028d2:	f7fe fd4f 	bl	8001374 <HAL_GetTick>
 80028d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d8:	e00a      	b.n	80028f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028da:	f7fe fd4b 	bl	8001374 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e0b1      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028f0:	4b4b      	ldr	r3, [pc, #300]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0ee      	beq.n	80028da <HAL_RCC_OscConfig+0x37e>
 80028fc:	e014      	b.n	8002928 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028fe:	f7fe fd39 	bl	8001374 <HAL_GetTick>
 8002902:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002904:	e00a      	b.n	800291c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002906:	f7fe fd35 	bl	8001374 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	f241 3288 	movw	r2, #5000	; 0x1388
 8002914:	4293      	cmp	r3, r2
 8002916:	d901      	bls.n	800291c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e09b      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800291c:	4b40      	ldr	r3, [pc, #256]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d1ee      	bne.n	8002906 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002928:	7dfb      	ldrb	r3, [r7, #23]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d105      	bne.n	800293a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800292e:	4b3c      	ldr	r3, [pc, #240]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 8002930:	69db      	ldr	r3, [r3, #28]
 8002932:	4a3b      	ldr	r2, [pc, #236]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 8002934:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002938:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	69db      	ldr	r3, [r3, #28]
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 8087 	beq.w	8002a52 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002944:	4b36      	ldr	r3, [pc, #216]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f003 030c 	and.w	r3, r3, #12
 800294c:	2b08      	cmp	r3, #8
 800294e:	d061      	beq.n	8002a14 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	69db      	ldr	r3, [r3, #28]
 8002954:	2b02      	cmp	r3, #2
 8002956:	d146      	bne.n	80029e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002958:	4b33      	ldr	r3, [pc, #204]	; (8002a28 <HAL_RCC_OscConfig+0x4cc>)
 800295a:	2200      	movs	r2, #0
 800295c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295e:	f7fe fd09 	bl	8001374 <HAL_GetTick>
 8002962:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002964:	e008      	b.n	8002978 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002966:	f7fe fd05 	bl	8001374 <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b02      	cmp	r3, #2
 8002972:	d901      	bls.n	8002978 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e06d      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002978:	4b29      	ldr	r3, [pc, #164]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d1f0      	bne.n	8002966 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800298c:	d108      	bne.n	80029a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800298e:	4b24      	ldr	r3, [pc, #144]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	4921      	ldr	r1, [pc, #132]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 800299c:	4313      	orrs	r3, r2
 800299e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029a0:	4b1f      	ldr	r3, [pc, #124]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a19      	ldr	r1, [r3, #32]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b0:	430b      	orrs	r3, r1
 80029b2:	491b      	ldr	r1, [pc, #108]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029b8:	4b1b      	ldr	r3, [pc, #108]	; (8002a28 <HAL_RCC_OscConfig+0x4cc>)
 80029ba:	2201      	movs	r2, #1
 80029bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029be:	f7fe fcd9 	bl	8001374 <HAL_GetTick>
 80029c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029c4:	e008      	b.n	80029d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029c6:	f7fe fcd5 	bl	8001374 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e03d      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029d8:	4b11      	ldr	r3, [pc, #68]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d0f0      	beq.n	80029c6 <HAL_RCC_OscConfig+0x46a>
 80029e4:	e035      	b.n	8002a52 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029e6:	4b10      	ldr	r3, [pc, #64]	; (8002a28 <HAL_RCC_OscConfig+0x4cc>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ec:	f7fe fcc2 	bl	8001374 <HAL_GetTick>
 80029f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029f4:	f7fe fcbe 	bl	8001374 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e026      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a06:	4b06      	ldr	r3, [pc, #24]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1f0      	bne.n	80029f4 <HAL_RCC_OscConfig+0x498>
 8002a12:	e01e      	b.n	8002a52 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	69db      	ldr	r3, [r3, #28]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d107      	bne.n	8002a2c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e019      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
 8002a20:	40021000 	.word	0x40021000
 8002a24:	40007000 	.word	0x40007000
 8002a28:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a2c:	4b0b      	ldr	r3, [pc, #44]	; (8002a5c <HAL_RCC_OscConfig+0x500>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a1b      	ldr	r3, [r3, #32]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d106      	bne.n	8002a4e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d001      	beq.n	8002a52 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e000      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3718      	adds	r7, #24
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	40021000 	.word	0x40021000

08002a60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e0d0      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a74:	4b6a      	ldr	r3, [pc, #424]	; (8002c20 <HAL_RCC_ClockConfig+0x1c0>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d910      	bls.n	8002aa4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a82:	4b67      	ldr	r3, [pc, #412]	; (8002c20 <HAL_RCC_ClockConfig+0x1c0>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f023 0207 	bic.w	r2, r3, #7
 8002a8a:	4965      	ldr	r1, [pc, #404]	; (8002c20 <HAL_RCC_ClockConfig+0x1c0>)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a92:	4b63      	ldr	r3, [pc, #396]	; (8002c20 <HAL_RCC_ClockConfig+0x1c0>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0307 	and.w	r3, r3, #7
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d001      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e0b8      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d020      	beq.n	8002af2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0304 	and.w	r3, r3, #4
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d005      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002abc:	4b59      	ldr	r3, [pc, #356]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	4a58      	ldr	r2, [pc, #352]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ac6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0308 	and.w	r3, r3, #8
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d005      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ad4:	4b53      	ldr	r3, [pc, #332]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	4a52      	ldr	r2, [pc, #328]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002ada:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ade:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ae0:	4b50      	ldr	r3, [pc, #320]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	494d      	ldr	r1, [pc, #308]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d040      	beq.n	8002b80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d107      	bne.n	8002b16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b06:	4b47      	ldr	r3, [pc, #284]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d115      	bne.n	8002b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e07f      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d107      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b1e:	4b41      	ldr	r3, [pc, #260]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d109      	bne.n	8002b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e073      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b2e:	4b3d      	ldr	r3, [pc, #244]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e06b      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b3e:	4b39      	ldr	r3, [pc, #228]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f023 0203 	bic.w	r2, r3, #3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	4936      	ldr	r1, [pc, #216]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b50:	f7fe fc10 	bl	8001374 <HAL_GetTick>
 8002b54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b56:	e00a      	b.n	8002b6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b58:	f7fe fc0c 	bl	8001374 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e053      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b6e:	4b2d      	ldr	r3, [pc, #180]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f003 020c 	and.w	r2, r3, #12
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d1eb      	bne.n	8002b58 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b80:	4b27      	ldr	r3, [pc, #156]	; (8002c20 <HAL_RCC_ClockConfig+0x1c0>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d210      	bcs.n	8002bb0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b8e:	4b24      	ldr	r3, [pc, #144]	; (8002c20 <HAL_RCC_ClockConfig+0x1c0>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f023 0207 	bic.w	r2, r3, #7
 8002b96:	4922      	ldr	r1, [pc, #136]	; (8002c20 <HAL_RCC_ClockConfig+0x1c0>)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b9e:	4b20      	ldr	r3, [pc, #128]	; (8002c20 <HAL_RCC_ClockConfig+0x1c0>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d001      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e032      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d008      	beq.n	8002bce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bbc:	4b19      	ldr	r3, [pc, #100]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	4916      	ldr	r1, [pc, #88]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0308 	and.w	r3, r3, #8
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d009      	beq.n	8002bee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bda:	4b12      	ldr	r3, [pc, #72]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	490e      	ldr	r1, [pc, #56]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bee:	f000 f821 	bl	8002c34 <HAL_RCC_GetSysClockFreq>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	4b0b      	ldr	r3, [pc, #44]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	091b      	lsrs	r3, r3, #4
 8002bfa:	f003 030f 	and.w	r3, r3, #15
 8002bfe:	490a      	ldr	r1, [pc, #40]	; (8002c28 <HAL_RCC_ClockConfig+0x1c8>)
 8002c00:	5ccb      	ldrb	r3, [r1, r3]
 8002c02:	fa22 f303 	lsr.w	r3, r2, r3
 8002c06:	4a09      	ldr	r2, [pc, #36]	; (8002c2c <HAL_RCC_ClockConfig+0x1cc>)
 8002c08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c0a:	4b09      	ldr	r3, [pc, #36]	; (8002c30 <HAL_RCC_ClockConfig+0x1d0>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7fe f96e 	bl	8000ef0 <HAL_InitTick>

  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	40022000 	.word	0x40022000
 8002c24:	40021000 	.word	0x40021000
 8002c28:	08006cb8 	.word	0x08006cb8
 8002c2c:	20000000 	.word	0x20000000
 8002c30:	20000004 	.word	0x20000004

08002c34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b087      	sub	sp, #28
 8002c38:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	60fb      	str	r3, [r7, #12]
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60bb      	str	r3, [r7, #8]
 8002c42:	2300      	movs	r3, #0
 8002c44:	617b      	str	r3, [r7, #20]
 8002c46:	2300      	movs	r3, #0
 8002c48:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c4e:	4b1e      	ldr	r3, [pc, #120]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f003 030c 	and.w	r3, r3, #12
 8002c5a:	2b04      	cmp	r3, #4
 8002c5c:	d002      	beq.n	8002c64 <HAL_RCC_GetSysClockFreq+0x30>
 8002c5e:	2b08      	cmp	r3, #8
 8002c60:	d003      	beq.n	8002c6a <HAL_RCC_GetSysClockFreq+0x36>
 8002c62:	e027      	b.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c64:	4b19      	ldr	r3, [pc, #100]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x98>)
 8002c66:	613b      	str	r3, [r7, #16]
      break;
 8002c68:	e027      	b.n	8002cba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	0c9b      	lsrs	r3, r3, #18
 8002c6e:	f003 030f 	and.w	r3, r3, #15
 8002c72:	4a17      	ldr	r2, [pc, #92]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c74:	5cd3      	ldrb	r3, [r2, r3]
 8002c76:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d010      	beq.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c82:	4b11      	ldr	r3, [pc, #68]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	0c5b      	lsrs	r3, r3, #17
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	4a11      	ldr	r2, [pc, #68]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c8e:	5cd3      	ldrb	r3, [r2, r3]
 8002c90:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a0d      	ldr	r2, [pc, #52]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x98>)
 8002c96:	fb03 f202 	mul.w	r2, r3, r2
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca0:	617b      	str	r3, [r7, #20]
 8002ca2:	e004      	b.n	8002cae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a0c      	ldr	r2, [pc, #48]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ca8:	fb02 f303 	mul.w	r3, r2, r3
 8002cac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	613b      	str	r3, [r7, #16]
      break;
 8002cb2:	e002      	b.n	8002cba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cb4:	4b05      	ldr	r3, [pc, #20]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x98>)
 8002cb6:	613b      	str	r3, [r7, #16]
      break;
 8002cb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cba:	693b      	ldr	r3, [r7, #16]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	371c      	adds	r7, #28
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bc80      	pop	{r7}
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	007a1200 	.word	0x007a1200
 8002cd0:	08006cd0 	.word	0x08006cd0
 8002cd4:	08006ce0 	.word	0x08006ce0
 8002cd8:	003d0900 	.word	0x003d0900

08002cdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ce0:	4b02      	ldr	r3, [pc, #8]	; (8002cec <HAL_RCC_GetHCLKFreq+0x10>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bc80      	pop	{r7}
 8002cea:	4770      	bx	lr
 8002cec:	20000000 	.word	0x20000000

08002cf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cf4:	f7ff fff2 	bl	8002cdc <HAL_RCC_GetHCLKFreq>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	4b05      	ldr	r3, [pc, #20]	; (8002d10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	0a1b      	lsrs	r3, r3, #8
 8002d00:	f003 0307 	and.w	r3, r3, #7
 8002d04:	4903      	ldr	r1, [pc, #12]	; (8002d14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d06:	5ccb      	ldrb	r3, [r1, r3]
 8002d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	40021000 	.word	0x40021000
 8002d14:	08006cc8 	.word	0x08006cc8

08002d18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d1c:	f7ff ffde 	bl	8002cdc <HAL_RCC_GetHCLKFreq>
 8002d20:	4602      	mov	r2, r0
 8002d22:	4b05      	ldr	r3, [pc, #20]	; (8002d38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	0adb      	lsrs	r3, r3, #11
 8002d28:	f003 0307 	and.w	r3, r3, #7
 8002d2c:	4903      	ldr	r1, [pc, #12]	; (8002d3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d2e:	5ccb      	ldrb	r3, [r1, r3]
 8002d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	08006cc8 	.word	0x08006cc8

08002d40 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	220f      	movs	r2, #15
 8002d4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d50:	4b11      	ldr	r3, [pc, #68]	; (8002d98 <HAL_RCC_GetClockConfig+0x58>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f003 0203 	and.w	r2, r3, #3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002d5c:	4b0e      	ldr	r3, [pc, #56]	; (8002d98 <HAL_RCC_GetClockConfig+0x58>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002d68:	4b0b      	ldr	r3, [pc, #44]	; (8002d98 <HAL_RCC_GetClockConfig+0x58>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002d74:	4b08      	ldr	r3, [pc, #32]	; (8002d98 <HAL_RCC_GetClockConfig+0x58>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	08db      	lsrs	r3, r3, #3
 8002d7a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002d82:	4b06      	ldr	r3, [pc, #24]	; (8002d9c <HAL_RCC_GetClockConfig+0x5c>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0207 	and.w	r2, r3, #7
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bc80      	pop	{r7}
 8002d96:	4770      	bx	lr
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	40022000 	.word	0x40022000

08002da0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002da8:	4b0a      	ldr	r3, [pc, #40]	; (8002dd4 <RCC_Delay+0x34>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a0a      	ldr	r2, [pc, #40]	; (8002dd8 <RCC_Delay+0x38>)
 8002dae:	fba2 2303 	umull	r2, r3, r2, r3
 8002db2:	0a5b      	lsrs	r3, r3, #9
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	fb02 f303 	mul.w	r3, r2, r3
 8002dba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002dbc:	bf00      	nop
  }
  while (Delay --);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	1e5a      	subs	r2, r3, #1
 8002dc2:	60fa      	str	r2, [r7, #12]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d1f9      	bne.n	8002dbc <RCC_Delay+0x1c>
}
 8002dc8:	bf00      	nop
 8002dca:	bf00      	nop
 8002dcc:	3714      	adds	r7, #20
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bc80      	pop	{r7}
 8002dd2:	4770      	bx	lr
 8002dd4:	20000000 	.word	0x20000000
 8002dd8:	10624dd3 	.word	0x10624dd3

08002ddc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e041      	b.n	8002e72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d106      	bne.n	8002e08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7fe f9cc 	bl	80011a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	3304      	adds	r3, #4
 8002e18:	4619      	mov	r1, r3
 8002e1a:	4610      	mov	r0, r2
 8002e1c:	f000 fa74 	bl	8003308 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
	...

08002e7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d001      	beq.n	8002e94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e03a      	b.n	8002f0a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2202      	movs	r2, #2
 8002e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68da      	ldr	r2, [r3, #12]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f042 0201 	orr.w	r2, r2, #1
 8002eaa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a18      	ldr	r2, [pc, #96]	; (8002f14 <HAL_TIM_Base_Start_IT+0x98>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d00e      	beq.n	8002ed4 <HAL_TIM_Base_Start_IT+0x58>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ebe:	d009      	beq.n	8002ed4 <HAL_TIM_Base_Start_IT+0x58>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a14      	ldr	r2, [pc, #80]	; (8002f18 <HAL_TIM_Base_Start_IT+0x9c>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d004      	beq.n	8002ed4 <HAL_TIM_Base_Start_IT+0x58>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a13      	ldr	r2, [pc, #76]	; (8002f1c <HAL_TIM_Base_Start_IT+0xa0>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d111      	bne.n	8002ef8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2b06      	cmp	r3, #6
 8002ee4:	d010      	beq.n	8002f08 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f042 0201 	orr.w	r2, r2, #1
 8002ef4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ef6:	e007      	b.n	8002f08 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f042 0201 	orr.w	r2, r2, #1
 8002f06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3714      	adds	r7, #20
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bc80      	pop	{r7}
 8002f12:	4770      	bx	lr
 8002f14:	40012c00 	.word	0x40012c00
 8002f18:	40000400 	.word	0x40000400
 8002f1c:	40000800 	.word	0x40000800

08002f20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d122      	bne.n	8002f7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d11b      	bne.n	8002f7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f06f 0202 	mvn.w	r2, #2
 8002f4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	f003 0303 	and.w	r3, r3, #3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f9b4 	bl	80032d0 <HAL_TIM_IC_CaptureCallback>
 8002f68:	e005      	b.n	8002f76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 f9a7 	bl	80032be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 f9b6 	bl	80032e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	f003 0304 	and.w	r3, r3, #4
 8002f86:	2b04      	cmp	r3, #4
 8002f88:	d122      	bne.n	8002fd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	f003 0304 	and.w	r3, r3, #4
 8002f94:	2b04      	cmp	r3, #4
 8002f96:	d11b      	bne.n	8002fd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f06f 0204 	mvn.w	r2, #4
 8002fa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2202      	movs	r2, #2
 8002fa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 f98a 	bl	80032d0 <HAL_TIM_IC_CaptureCallback>
 8002fbc:	e005      	b.n	8002fca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f97d 	bl	80032be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 f98c 	bl	80032e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	f003 0308 	and.w	r3, r3, #8
 8002fda:	2b08      	cmp	r3, #8
 8002fdc:	d122      	bne.n	8003024 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	f003 0308 	and.w	r3, r3, #8
 8002fe8:	2b08      	cmp	r3, #8
 8002fea:	d11b      	bne.n	8003024 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f06f 0208 	mvn.w	r2, #8
 8002ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2204      	movs	r2, #4
 8002ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	f003 0303 	and.w	r3, r3, #3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f960 	bl	80032d0 <HAL_TIM_IC_CaptureCallback>
 8003010:	e005      	b.n	800301e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f953 	bl	80032be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 f962 	bl	80032e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	f003 0310 	and.w	r3, r3, #16
 800302e:	2b10      	cmp	r3, #16
 8003030:	d122      	bne.n	8003078 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	f003 0310 	and.w	r3, r3, #16
 800303c:	2b10      	cmp	r3, #16
 800303e:	d11b      	bne.n	8003078 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f06f 0210 	mvn.w	r2, #16
 8003048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2208      	movs	r2, #8
 800304e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800305a:	2b00      	cmp	r3, #0
 800305c:	d003      	beq.n	8003066 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f936 	bl	80032d0 <HAL_TIM_IC_CaptureCallback>
 8003064:	e005      	b.n	8003072 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f929 	bl	80032be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 f938 	bl	80032e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b01      	cmp	r3, #1
 8003084:	d10e      	bne.n	80030a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b01      	cmp	r3, #1
 8003092:	d107      	bne.n	80030a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f06f 0201 	mvn.w	r2, #1
 800309c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7fd fed6 	bl	8000e50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ae:	2b80      	cmp	r3, #128	; 0x80
 80030b0:	d10e      	bne.n	80030d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030bc:	2b80      	cmp	r3, #128	; 0x80
 80030be:	d107      	bne.n	80030d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 fa7b 	bl	80035c6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030da:	2b40      	cmp	r3, #64	; 0x40
 80030dc:	d10e      	bne.n	80030fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e8:	2b40      	cmp	r3, #64	; 0x40
 80030ea:	d107      	bne.n	80030fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 f8fc 	bl	80032f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	f003 0320 	and.w	r3, r3, #32
 8003106:	2b20      	cmp	r3, #32
 8003108:	d10e      	bne.n	8003128 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	f003 0320 	and.w	r3, r3, #32
 8003114:	2b20      	cmp	r3, #32
 8003116:	d107      	bne.n	8003128 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f06f 0220 	mvn.w	r2, #32
 8003120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 fa46 	bl	80035b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003128:	bf00      	nop
 800312a:	3708      	adds	r7, #8
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800313a:	2300      	movs	r3, #0
 800313c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003144:	2b01      	cmp	r3, #1
 8003146:	d101      	bne.n	800314c <HAL_TIM_ConfigClockSource+0x1c>
 8003148:	2302      	movs	r3, #2
 800314a:	e0b4      	b.n	80032b6 <HAL_TIM_ConfigClockSource+0x186>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2202      	movs	r2, #2
 8003158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800316a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003172:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68ba      	ldr	r2, [r7, #8]
 800317a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003184:	d03e      	beq.n	8003204 <HAL_TIM_ConfigClockSource+0xd4>
 8003186:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800318a:	f200 8087 	bhi.w	800329c <HAL_TIM_ConfigClockSource+0x16c>
 800318e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003192:	f000 8086 	beq.w	80032a2 <HAL_TIM_ConfigClockSource+0x172>
 8003196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800319a:	d87f      	bhi.n	800329c <HAL_TIM_ConfigClockSource+0x16c>
 800319c:	2b70      	cmp	r3, #112	; 0x70
 800319e:	d01a      	beq.n	80031d6 <HAL_TIM_ConfigClockSource+0xa6>
 80031a0:	2b70      	cmp	r3, #112	; 0x70
 80031a2:	d87b      	bhi.n	800329c <HAL_TIM_ConfigClockSource+0x16c>
 80031a4:	2b60      	cmp	r3, #96	; 0x60
 80031a6:	d050      	beq.n	800324a <HAL_TIM_ConfigClockSource+0x11a>
 80031a8:	2b60      	cmp	r3, #96	; 0x60
 80031aa:	d877      	bhi.n	800329c <HAL_TIM_ConfigClockSource+0x16c>
 80031ac:	2b50      	cmp	r3, #80	; 0x50
 80031ae:	d03c      	beq.n	800322a <HAL_TIM_ConfigClockSource+0xfa>
 80031b0:	2b50      	cmp	r3, #80	; 0x50
 80031b2:	d873      	bhi.n	800329c <HAL_TIM_ConfigClockSource+0x16c>
 80031b4:	2b40      	cmp	r3, #64	; 0x40
 80031b6:	d058      	beq.n	800326a <HAL_TIM_ConfigClockSource+0x13a>
 80031b8:	2b40      	cmp	r3, #64	; 0x40
 80031ba:	d86f      	bhi.n	800329c <HAL_TIM_ConfigClockSource+0x16c>
 80031bc:	2b30      	cmp	r3, #48	; 0x30
 80031be:	d064      	beq.n	800328a <HAL_TIM_ConfigClockSource+0x15a>
 80031c0:	2b30      	cmp	r3, #48	; 0x30
 80031c2:	d86b      	bhi.n	800329c <HAL_TIM_ConfigClockSource+0x16c>
 80031c4:	2b20      	cmp	r3, #32
 80031c6:	d060      	beq.n	800328a <HAL_TIM_ConfigClockSource+0x15a>
 80031c8:	2b20      	cmp	r3, #32
 80031ca:	d867      	bhi.n	800329c <HAL_TIM_ConfigClockSource+0x16c>
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d05c      	beq.n	800328a <HAL_TIM_ConfigClockSource+0x15a>
 80031d0:	2b10      	cmp	r3, #16
 80031d2:	d05a      	beq.n	800328a <HAL_TIM_ConfigClockSource+0x15a>
 80031d4:	e062      	b.n	800329c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031e6:	f000 f968 	bl	80034ba <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80031f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	609a      	str	r2, [r3, #8]
      break;
 8003202:	e04f      	b.n	80032a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003214:	f000 f951 	bl	80034ba <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689a      	ldr	r2, [r3, #8]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003226:	609a      	str	r2, [r3, #8]
      break;
 8003228:	e03c      	b.n	80032a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003236:	461a      	mov	r2, r3
 8003238:	f000 f8c8 	bl	80033cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2150      	movs	r1, #80	; 0x50
 8003242:	4618      	mov	r0, r3
 8003244:	f000 f91f 	bl	8003486 <TIM_ITRx_SetConfig>
      break;
 8003248:	e02c      	b.n	80032a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003256:	461a      	mov	r2, r3
 8003258:	f000 f8e6 	bl	8003428 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2160      	movs	r1, #96	; 0x60
 8003262:	4618      	mov	r0, r3
 8003264:	f000 f90f 	bl	8003486 <TIM_ITRx_SetConfig>
      break;
 8003268:	e01c      	b.n	80032a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003276:	461a      	mov	r2, r3
 8003278:	f000 f8a8 	bl	80033cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2140      	movs	r1, #64	; 0x40
 8003282:	4618      	mov	r0, r3
 8003284:	f000 f8ff 	bl	8003486 <TIM_ITRx_SetConfig>
      break;
 8003288:	e00c      	b.n	80032a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4619      	mov	r1, r3
 8003294:	4610      	mov	r0, r2
 8003296:	f000 f8f6 	bl	8003486 <TIM_ITRx_SetConfig>
      break;
 800329a:	e003      	b.n	80032a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	73fb      	strb	r3, [r7, #15]
      break;
 80032a0:	e000      	b.n	80032a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80032a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80032b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032be:	b480      	push	{r7}
 80032c0:	b083      	sub	sp, #12
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032c6:	bf00      	nop
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bc80      	pop	{r7}
 80032ce:	4770      	bx	lr

080032d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	bc80      	pop	{r7}
 80032e0:	4770      	bx	lr

080032e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032e2:	b480      	push	{r7}
 80032e4:	b083      	sub	sp, #12
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032ea:	bf00      	nop
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bc80      	pop	{r7}
 80032f2:	4770      	bx	lr

080032f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	bc80      	pop	{r7}
 8003304:	4770      	bx	lr
	...

08003308 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a29      	ldr	r2, [pc, #164]	; (80033c0 <TIM_Base_SetConfig+0xb8>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d00b      	beq.n	8003338 <TIM_Base_SetConfig+0x30>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003326:	d007      	beq.n	8003338 <TIM_Base_SetConfig+0x30>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a26      	ldr	r2, [pc, #152]	; (80033c4 <TIM_Base_SetConfig+0xbc>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d003      	beq.n	8003338 <TIM_Base_SetConfig+0x30>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a25      	ldr	r2, [pc, #148]	; (80033c8 <TIM_Base_SetConfig+0xc0>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d108      	bne.n	800334a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800333e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	4313      	orrs	r3, r2
 8003348:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a1c      	ldr	r2, [pc, #112]	; (80033c0 <TIM_Base_SetConfig+0xb8>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d00b      	beq.n	800336a <TIM_Base_SetConfig+0x62>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003358:	d007      	beq.n	800336a <TIM_Base_SetConfig+0x62>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a19      	ldr	r2, [pc, #100]	; (80033c4 <TIM_Base_SetConfig+0xbc>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d003      	beq.n	800336a <TIM_Base_SetConfig+0x62>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a18      	ldr	r2, [pc, #96]	; (80033c8 <TIM_Base_SetConfig+0xc0>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d108      	bne.n	800337c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003370:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	4313      	orrs	r3, r2
 800337a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	4313      	orrs	r3, r2
 8003388:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	689a      	ldr	r2, [r3, #8]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a07      	ldr	r2, [pc, #28]	; (80033c0 <TIM_Base_SetConfig+0xb8>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d103      	bne.n	80033b0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	691a      	ldr	r2, [r3, #16]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	615a      	str	r2, [r3, #20]
}
 80033b6:	bf00      	nop
 80033b8:	3714      	adds	r7, #20
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bc80      	pop	{r7}
 80033be:	4770      	bx	lr
 80033c0:	40012c00 	.word	0x40012c00
 80033c4:	40000400 	.word	0x40000400
 80033c8:	40000800 	.word	0x40000800

080033cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b087      	sub	sp, #28
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	f023 0201 	bic.w	r2, r3, #1
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	011b      	lsls	r3, r3, #4
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	4313      	orrs	r3, r2
 8003400:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	f023 030a 	bic.w	r3, r3, #10
 8003408:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	4313      	orrs	r3, r2
 8003410:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	697a      	ldr	r2, [r7, #20]
 800341c:	621a      	str	r2, [r3, #32]
}
 800341e:	bf00      	nop
 8003420:	371c      	adds	r7, #28
 8003422:	46bd      	mov	sp, r7
 8003424:	bc80      	pop	{r7}
 8003426:	4770      	bx	lr

08003428 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003428:	b480      	push	{r7}
 800342a:	b087      	sub	sp, #28
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6a1b      	ldr	r3, [r3, #32]
 8003438:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	f023 0210 	bic.w	r2, r3, #16
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003452:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	031b      	lsls	r3, r3, #12
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	4313      	orrs	r3, r2
 800345c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003464:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	011b      	lsls	r3, r3, #4
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	4313      	orrs	r3, r2
 800346e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	697a      	ldr	r2, [r7, #20]
 800347a:	621a      	str	r2, [r3, #32]
}
 800347c:	bf00      	nop
 800347e:	371c      	adds	r7, #28
 8003480:	46bd      	mov	sp, r7
 8003482:	bc80      	pop	{r7}
 8003484:	4770      	bx	lr

08003486 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003486:	b480      	push	{r7}
 8003488:	b085      	sub	sp, #20
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
 800348e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800349c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800349e:	683a      	ldr	r2, [r7, #0]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	f043 0307 	orr.w	r3, r3, #7
 80034a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	609a      	str	r2, [r3, #8]
}
 80034b0:	bf00      	nop
 80034b2:	3714      	adds	r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bc80      	pop	{r7}
 80034b8:	4770      	bx	lr

080034ba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034ba:	b480      	push	{r7}
 80034bc:	b087      	sub	sp, #28
 80034be:	af00      	add	r7, sp, #0
 80034c0:	60f8      	str	r0, [r7, #12]
 80034c2:	60b9      	str	r1, [r7, #8]
 80034c4:	607a      	str	r2, [r7, #4]
 80034c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034d4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	021a      	lsls	r2, r3, #8
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	431a      	orrs	r2, r3
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	609a      	str	r2, [r3, #8]
}
 80034ee:	bf00      	nop
 80034f0:	371c      	adds	r7, #28
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bc80      	pop	{r7}
 80034f6:	4770      	bx	lr

080034f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003508:	2b01      	cmp	r3, #1
 800350a:	d101      	bne.n	8003510 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800350c:	2302      	movs	r3, #2
 800350e:	e046      	b.n	800359e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2202      	movs	r2, #2
 800351c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003536:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	4313      	orrs	r3, r2
 8003540:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a16      	ldr	r2, [pc, #88]	; (80035a8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d00e      	beq.n	8003572 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800355c:	d009      	beq.n	8003572 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a12      	ldr	r2, [pc, #72]	; (80035ac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d004      	beq.n	8003572 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a10      	ldr	r2, [pc, #64]	; (80035b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d10c      	bne.n	800358c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003578:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	68ba      	ldr	r2, [r7, #8]
 8003580:	4313      	orrs	r3, r2
 8003582:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68ba      	ldr	r2, [r7, #8]
 800358a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3714      	adds	r7, #20
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bc80      	pop	{r7}
 80035a6:	4770      	bx	lr
 80035a8:	40012c00 	.word	0x40012c00
 80035ac:	40000400 	.word	0x40000400
 80035b0:	40000800 	.word	0x40000800

080035b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bc80      	pop	{r7}
 80035c4:	4770      	bx	lr

080035c6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035c6:	b480      	push	{r7}
 80035c8:	b083      	sub	sp, #12
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035ce:	bf00      	nop
 80035d0:	370c      	adds	r7, #12
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bc80      	pop	{r7}
 80035d6:	4770      	bx	lr

080035d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e042      	b.n	8003670 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d106      	bne.n	8003604 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f7fd fe1e 	bl	8001240 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2224      	movs	r2, #36	; 0x24
 8003608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68da      	ldr	r2, [r3, #12]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800361a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 f91d 	bl	800385c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	691a      	ldr	r2, [r3, #16]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003630:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	695a      	ldr	r2, [r3, #20]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003640:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68da      	ldr	r2, [r3, #12]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003650:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2220      	movs	r2, #32
 800365c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2220      	movs	r2, #32
 8003664:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3708      	adds	r7, #8
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b08a      	sub	sp, #40	; 0x28
 800367c:	af02      	add	r7, sp, #8
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	603b      	str	r3, [r7, #0]
 8003684:	4613      	mov	r3, r2
 8003686:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003688:	2300      	movs	r3, #0
 800368a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b20      	cmp	r3, #32
 8003696:	d16d      	bne.n	8003774 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d002      	beq.n	80036a4 <HAL_UART_Transmit+0x2c>
 800369e:	88fb      	ldrh	r3, [r7, #6]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d101      	bne.n	80036a8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e066      	b.n	8003776 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2221      	movs	r2, #33	; 0x21
 80036b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036b6:	f7fd fe5d 	bl	8001374 <HAL_GetTick>
 80036ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	88fa      	ldrh	r2, [r7, #6]
 80036c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	88fa      	ldrh	r2, [r7, #6]
 80036c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036d0:	d108      	bne.n	80036e4 <HAL_UART_Transmit+0x6c>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d104      	bne.n	80036e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80036da:	2300      	movs	r3, #0
 80036dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	61bb      	str	r3, [r7, #24]
 80036e2:	e003      	b.n	80036ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036e8:	2300      	movs	r3, #0
 80036ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80036ec:	e02a      	b.n	8003744 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	2200      	movs	r2, #0
 80036f6:	2180      	movs	r1, #128	; 0x80
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f000 f840 	bl	800377e <UART_WaitOnFlagUntilTimeout>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e036      	b.n	8003776 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10b      	bne.n	8003726 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	881b      	ldrh	r3, [r3, #0]
 8003712:	461a      	mov	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800371c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	3302      	adds	r3, #2
 8003722:	61bb      	str	r3, [r7, #24]
 8003724:	e007      	b.n	8003736 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	781a      	ldrb	r2, [r3, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	3301      	adds	r3, #1
 8003734:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800373a:	b29b      	uxth	r3, r3
 800373c:	3b01      	subs	r3, #1
 800373e:	b29a      	uxth	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003748:	b29b      	uxth	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1cf      	bne.n	80036ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	2200      	movs	r2, #0
 8003756:	2140      	movs	r1, #64	; 0x40
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	f000 f810 	bl	800377e <UART_WaitOnFlagUntilTimeout>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d001      	beq.n	8003768 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e006      	b.n	8003776 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2220      	movs	r2, #32
 800376c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003770:	2300      	movs	r3, #0
 8003772:	e000      	b.n	8003776 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003774:	2302      	movs	r3, #2
  }
}
 8003776:	4618      	mov	r0, r3
 8003778:	3720      	adds	r7, #32
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b090      	sub	sp, #64	; 0x40
 8003782:	af00      	add	r7, sp, #0
 8003784:	60f8      	str	r0, [r7, #12]
 8003786:	60b9      	str	r1, [r7, #8]
 8003788:	603b      	str	r3, [r7, #0]
 800378a:	4613      	mov	r3, r2
 800378c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800378e:	e050      	b.n	8003832 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003790:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003796:	d04c      	beq.n	8003832 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003798:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800379a:	2b00      	cmp	r3, #0
 800379c:	d007      	beq.n	80037ae <UART_WaitOnFlagUntilTimeout+0x30>
 800379e:	f7fd fde9 	bl	8001374 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d241      	bcs.n	8003832 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	330c      	adds	r3, #12
 80037b4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b8:	e853 3f00 	ldrex	r3, [r3]
 80037bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	330c      	adds	r3, #12
 80037cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037ce:	637a      	str	r2, [r7, #52]	; 0x34
 80037d0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037d6:	e841 2300 	strex	r3, r2, [r1]
 80037da:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80037dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1e5      	bne.n	80037ae <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	3314      	adds	r3, #20
 80037e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	e853 3f00 	ldrex	r3, [r3]
 80037f0:	613b      	str	r3, [r7, #16]
   return(result);
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	f023 0301 	bic.w	r3, r3, #1
 80037f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	3314      	adds	r3, #20
 8003800:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003802:	623a      	str	r2, [r7, #32]
 8003804:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003806:	69f9      	ldr	r1, [r7, #28]
 8003808:	6a3a      	ldr	r2, [r7, #32]
 800380a:	e841 2300 	strex	r3, r2, [r1]
 800380e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1e5      	bne.n	80037e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2220      	movs	r2, #32
 800381a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2220      	movs	r2, #32
 8003822:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e00f      	b.n	8003852 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	4013      	ands	r3, r2
 800383c:	68ba      	ldr	r2, [r7, #8]
 800383e:	429a      	cmp	r2, r3
 8003840:	bf0c      	ite	eq
 8003842:	2301      	moveq	r3, #1
 8003844:	2300      	movne	r3, #0
 8003846:	b2db      	uxtb	r3, r3
 8003848:	461a      	mov	r2, r3
 800384a:	79fb      	ldrb	r3, [r7, #7]
 800384c:	429a      	cmp	r2, r3
 800384e:	d09f      	beq.n	8003790 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3740      	adds	r7, #64	; 0x40
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
	...

0800385c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	68da      	ldr	r2, [r3, #12]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	430a      	orrs	r2, r1
 8003878:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	689a      	ldr	r2, [r3, #8]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	431a      	orrs	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	695b      	ldr	r3, [r3, #20]
 8003888:	4313      	orrs	r3, r2
 800388a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003896:	f023 030c 	bic.w	r3, r3, #12
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	6812      	ldr	r2, [r2, #0]
 800389e:	68b9      	ldr	r1, [r7, #8]
 80038a0:	430b      	orrs	r3, r1
 80038a2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	695b      	ldr	r3, [r3, #20]
 80038aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	699a      	ldr	r2, [r3, #24]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	430a      	orrs	r2, r1
 80038b8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a2c      	ldr	r2, [pc, #176]	; (8003970 <UART_SetConfig+0x114>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d103      	bne.n	80038cc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80038c4:	f7ff fa28 	bl	8002d18 <HAL_RCC_GetPCLK2Freq>
 80038c8:	60f8      	str	r0, [r7, #12]
 80038ca:	e002      	b.n	80038d2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80038cc:	f7ff fa10 	bl	8002cf0 <HAL_RCC_GetPCLK1Freq>
 80038d0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	4613      	mov	r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	4413      	add	r3, r2
 80038da:	009a      	lsls	r2, r3, #2
 80038dc:	441a      	add	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e8:	4a22      	ldr	r2, [pc, #136]	; (8003974 <UART_SetConfig+0x118>)
 80038ea:	fba2 2303 	umull	r2, r3, r2, r3
 80038ee:	095b      	lsrs	r3, r3, #5
 80038f0:	0119      	lsls	r1, r3, #4
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	4613      	mov	r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	4413      	add	r3, r2
 80038fa:	009a      	lsls	r2, r3, #2
 80038fc:	441a      	add	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	fbb2 f2f3 	udiv	r2, r2, r3
 8003908:	4b1a      	ldr	r3, [pc, #104]	; (8003974 <UART_SetConfig+0x118>)
 800390a:	fba3 0302 	umull	r0, r3, r3, r2
 800390e:	095b      	lsrs	r3, r3, #5
 8003910:	2064      	movs	r0, #100	; 0x64
 8003912:	fb00 f303 	mul.w	r3, r0, r3
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	011b      	lsls	r3, r3, #4
 800391a:	3332      	adds	r3, #50	; 0x32
 800391c:	4a15      	ldr	r2, [pc, #84]	; (8003974 <UART_SetConfig+0x118>)
 800391e:	fba2 2303 	umull	r2, r3, r2, r3
 8003922:	095b      	lsrs	r3, r3, #5
 8003924:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003928:	4419      	add	r1, r3
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	4613      	mov	r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	4413      	add	r3, r2
 8003932:	009a      	lsls	r2, r3, #2
 8003934:	441a      	add	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003940:	4b0c      	ldr	r3, [pc, #48]	; (8003974 <UART_SetConfig+0x118>)
 8003942:	fba3 0302 	umull	r0, r3, r3, r2
 8003946:	095b      	lsrs	r3, r3, #5
 8003948:	2064      	movs	r0, #100	; 0x64
 800394a:	fb00 f303 	mul.w	r3, r0, r3
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	011b      	lsls	r3, r3, #4
 8003952:	3332      	adds	r3, #50	; 0x32
 8003954:	4a07      	ldr	r2, [pc, #28]	; (8003974 <UART_SetConfig+0x118>)
 8003956:	fba2 2303 	umull	r2, r3, r2, r3
 800395a:	095b      	lsrs	r3, r3, #5
 800395c:	f003 020f 	and.w	r2, r3, #15
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	440a      	add	r2, r1
 8003966:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003968:	bf00      	nop
 800396a:	3710      	adds	r7, #16
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	40013800 	.word	0x40013800
 8003974:	51eb851f 	.word	0x51eb851f

08003978 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800397e:	f3ef 8305 	mrs	r3, IPSR
 8003982:	60bb      	str	r3, [r7, #8]
  return(result);
 8003984:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10f      	bne.n	80039aa <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800398a:	f3ef 8310 	mrs	r3, PRIMASK
 800398e:	607b      	str	r3, [r7, #4]
  return(result);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d109      	bne.n	80039aa <osKernelInitialize+0x32>
 8003996:	4b10      	ldr	r3, [pc, #64]	; (80039d8 <osKernelInitialize+0x60>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2b02      	cmp	r3, #2
 800399c:	d109      	bne.n	80039b2 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800399e:	f3ef 8311 	mrs	r3, BASEPRI
 80039a2:	603b      	str	r3, [r7, #0]
  return(result);
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80039aa:	f06f 0305 	mvn.w	r3, #5
 80039ae:	60fb      	str	r3, [r7, #12]
 80039b0:	e00c      	b.n	80039cc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80039b2:	4b09      	ldr	r3, [pc, #36]	; (80039d8 <osKernelInitialize+0x60>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d105      	bne.n	80039c6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80039ba:	4b07      	ldr	r3, [pc, #28]	; (80039d8 <osKernelInitialize+0x60>)
 80039bc:	2201      	movs	r2, #1
 80039be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80039c0:	2300      	movs	r3, #0
 80039c2:	60fb      	str	r3, [r7, #12]
 80039c4:	e002      	b.n	80039cc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80039c6:	f04f 33ff 	mov.w	r3, #4294967295
 80039ca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80039cc:	68fb      	ldr	r3, [r7, #12]
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3714      	adds	r7, #20
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bc80      	pop	{r7}
 80039d6:	4770      	bx	lr
 80039d8:	200007e0 	.word	0x200007e0

080039dc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039e2:	f3ef 8305 	mrs	r3, IPSR
 80039e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80039e8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d10f      	bne.n	8003a0e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039ee:	f3ef 8310 	mrs	r3, PRIMASK
 80039f2:	607b      	str	r3, [r7, #4]
  return(result);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d109      	bne.n	8003a0e <osKernelStart+0x32>
 80039fa:	4b11      	ldr	r3, [pc, #68]	; (8003a40 <osKernelStart+0x64>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d109      	bne.n	8003a16 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003a02:	f3ef 8311 	mrs	r3, BASEPRI
 8003a06:	603b      	str	r3, [r7, #0]
  return(result);
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d003      	beq.n	8003a16 <osKernelStart+0x3a>
    stat = osErrorISR;
 8003a0e:	f06f 0305 	mvn.w	r3, #5
 8003a12:	60fb      	str	r3, [r7, #12]
 8003a14:	e00e      	b.n	8003a34 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003a16:	4b0a      	ldr	r3, [pc, #40]	; (8003a40 <osKernelStart+0x64>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d107      	bne.n	8003a2e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003a1e:	4b08      	ldr	r3, [pc, #32]	; (8003a40 <osKernelStart+0x64>)
 8003a20:	2202      	movs	r2, #2
 8003a22:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003a24:	f001 f816 	bl	8004a54 <vTaskStartScheduler>
      stat = osOK;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	60fb      	str	r3, [r7, #12]
 8003a2c:	e002      	b.n	8003a34 <osKernelStart+0x58>
    } else {
      stat = osError;
 8003a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a32:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003a34:	68fb      	ldr	r3, [r7, #12]
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	200007e0 	.word	0x200007e0

08003a44 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b092      	sub	sp, #72	; 0x48
 8003a48:	af04      	add	r7, sp, #16
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003a50:	2300      	movs	r3, #0
 8003a52:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a54:	f3ef 8305 	mrs	r3, IPSR
 8003a58:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f040 8094 	bne.w	8003b8a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a62:	f3ef 8310 	mrs	r3, PRIMASK
 8003a66:	623b      	str	r3, [r7, #32]
  return(result);
 8003a68:	6a3b      	ldr	r3, [r7, #32]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f040 808d 	bne.w	8003b8a <osThreadNew+0x146>
 8003a70:	4b48      	ldr	r3, [pc, #288]	; (8003b94 <osThreadNew+0x150>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d106      	bne.n	8003a86 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003a78:	f3ef 8311 	mrs	r3, BASEPRI
 8003a7c:	61fb      	str	r3, [r7, #28]
  return(result);
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f040 8082 	bne.w	8003b8a <osThreadNew+0x146>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d07e      	beq.n	8003b8a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003a8c:	2380      	movs	r3, #128	; 0x80
 8003a8e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003a90:	2318      	movs	r3, #24
 8003a92:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003a94:	2300      	movs	r3, #0
 8003a96:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003a98:	f107 031b 	add.w	r3, r7, #27
 8003a9c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8003a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8003aa2:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d045      	beq.n	8003b36 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d002      	beq.n	8003ab8 <osThreadNew+0x74>
        name = attr->name;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d002      	beq.n	8003ac6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d008      	beq.n	8003ade <osThreadNew+0x9a>
 8003acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ace:	2b38      	cmp	r3, #56	; 0x38
 8003ad0:	d805      	bhi.n	8003ade <osThreadNew+0x9a>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <osThreadNew+0x9e>
        return (NULL);
 8003ade:	2300      	movs	r3, #0
 8003ae0:	e054      	b.n	8003b8c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	089b      	lsrs	r3, r3, #2
 8003af0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00e      	beq.n	8003b18 <osThreadNew+0xd4>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	2b5b      	cmp	r3, #91	; 0x5b
 8003b00:	d90a      	bls.n	8003b18 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d006      	beq.n	8003b18 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d002      	beq.n	8003b18 <osThreadNew+0xd4>
        mem = 1;
 8003b12:	2301      	movs	r3, #1
 8003b14:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b16:	e010      	b.n	8003b3a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d10c      	bne.n	8003b3a <osThreadNew+0xf6>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d108      	bne.n	8003b3a <osThreadNew+0xf6>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d104      	bne.n	8003b3a <osThreadNew+0xf6>
          mem = 0;
 8003b30:	2300      	movs	r3, #0
 8003b32:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b34:	e001      	b.n	8003b3a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003b36:	2300      	movs	r3, #0
 8003b38:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8003b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d110      	bne.n	8003b62 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003b48:	9202      	str	r2, [sp, #8]
 8003b4a:	9301      	str	r3, [sp, #4]
 8003b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b54:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f000 fde4 	bl	8004724 <xTaskCreateStatic>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	617b      	str	r3, [r7, #20]
 8003b60:	e013      	b.n	8003b8a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d110      	bne.n	8003b8a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	f107 0314 	add.w	r3, r7, #20
 8003b70:	9301      	str	r3, [sp, #4]
 8003b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b74:	9300      	str	r3, [sp, #0]
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003b7a:	68f8      	ldr	r0, [r7, #12]
 8003b7c:	f000 fe2e 	bl	80047dc <xTaskCreate>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d001      	beq.n	8003b8a <osThreadNew+0x146>
          hTask = NULL;
 8003b86:	2300      	movs	r3, #0
 8003b88:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003b8a:	697b      	ldr	r3, [r7, #20]
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3738      	adds	r7, #56	; 0x38
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	200007e0 	.word	0x200007e0

08003b98 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	4a06      	ldr	r2, [pc, #24]	; (8003bc0 <vApplicationGetIdleTaskMemory+0x28>)
 8003ba8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	4a05      	ldr	r2, [pc, #20]	; (8003bc4 <vApplicationGetIdleTaskMemory+0x2c>)
 8003bae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2280      	movs	r2, #128	; 0x80
 8003bb4:	601a      	str	r2, [r3, #0]
}
 8003bb6:	bf00      	nop
 8003bb8:	3714      	adds	r7, #20
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bc80      	pop	{r7}
 8003bbe:	4770      	bx	lr
 8003bc0:	200007e4 	.word	0x200007e4
 8003bc4:	20000840 	.word	0x20000840

08003bc8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	4a07      	ldr	r2, [pc, #28]	; (8003bf4 <vApplicationGetTimerTaskMemory+0x2c>)
 8003bd8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	4a06      	ldr	r2, [pc, #24]	; (8003bf8 <vApplicationGetTimerTaskMemory+0x30>)
 8003bde:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003be6:	601a      	str	r2, [r3, #0]
}
 8003be8:	bf00      	nop
 8003bea:	3714      	adds	r7, #20
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bc80      	pop	{r7}
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	20000a40 	.word	0x20000a40
 8003bf8:	20000a9c 	.word	0x20000a9c

08003bfc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f103 0208 	add.w	r2, r3, #8
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f04f 32ff 	mov.w	r2, #4294967295
 8003c14:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f103 0208 	add.w	r2, r3, #8
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f103 0208 	add.w	r2, r3, #8
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bc80      	pop	{r7}
 8003c38:	4770      	bx	lr

08003c3a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b083      	sub	sp, #12
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003c48:	bf00      	nop
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bc80      	pop	{r7}
 8003c50:	4770      	bx	lr

08003c52 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c52:	b480      	push	{r7}
 8003c54:	b085      	sub	sp, #20
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
 8003c5a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	689a      	ldr	r2, [r3, #8]
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	683a      	ldr	r2, [r7, #0]
 8003c76:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	1c5a      	adds	r2, r3, #1
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	601a      	str	r2, [r3, #0]
}
 8003c8e:	bf00      	nop
 8003c90:	3714      	adds	r7, #20
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bc80      	pop	{r7}
 8003c96:	4770      	bx	lr

08003c98 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cae:	d103      	bne.n	8003cb8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	60fb      	str	r3, [r7, #12]
 8003cb6:	e00c      	b.n	8003cd2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	3308      	adds	r3, #8
 8003cbc:	60fb      	str	r3, [r7, #12]
 8003cbe:	e002      	b.n	8003cc6 <vListInsert+0x2e>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	60fb      	str	r3, [r7, #12]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d2f6      	bcs.n	8003cc0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	683a      	ldr	r2, [r7, #0]
 8003cec:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	1c5a      	adds	r2, r3, #1
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	601a      	str	r2, [r3, #0]
}
 8003cfe:	bf00      	nop
 8003d00:	3714      	adds	r7, #20
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bc80      	pop	{r7}
 8003d06:	4770      	bx	lr

08003d08 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b085      	sub	sp, #20
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	6892      	ldr	r2, [r2, #8]
 8003d1e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	6852      	ldr	r2, [r2, #4]
 8003d28:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d103      	bne.n	8003d3c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	689a      	ldr	r2, [r3, #8]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	1e5a      	subs	r2, r3, #1
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3714      	adds	r7, #20
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bc80      	pop	{r7}
 8003d58:	4770      	bx	lr
	...

08003d5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d10a      	bne.n	8003d86 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d74:	f383 8811 	msr	BASEPRI, r3
 8003d78:	f3bf 8f6f 	isb	sy
 8003d7c:	f3bf 8f4f 	dsb	sy
 8003d80:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003d82:	bf00      	nop
 8003d84:	e7fe      	b.n	8003d84 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003d86:	f001 ff91 	bl	8005cac <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d92:	68f9      	ldr	r1, [r7, #12]
 8003d94:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003d96:	fb01 f303 	mul.w	r3, r1, r3
 8003d9a:	441a      	add	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2200      	movs	r2, #0
 8003da4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003db6:	3b01      	subs	r3, #1
 8003db8:	68f9      	ldr	r1, [r7, #12]
 8003dba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003dbc:	fb01 f303 	mul.w	r3, r1, r3
 8003dc0:	441a      	add	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	22ff      	movs	r2, #255	; 0xff
 8003dca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	22ff      	movs	r2, #255	; 0xff
 8003dd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d114      	bne.n	8003e06 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d01a      	beq.n	8003e1a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	3310      	adds	r3, #16
 8003de8:	4618      	mov	r0, r3
 8003dea:	f001 f8bd 	bl	8004f68 <xTaskRemoveFromEventList>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d012      	beq.n	8003e1a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003df4:	4b0c      	ldr	r3, [pc, #48]	; (8003e28 <xQueueGenericReset+0xcc>)
 8003df6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dfa:	601a      	str	r2, [r3, #0]
 8003dfc:	f3bf 8f4f 	dsb	sy
 8003e00:	f3bf 8f6f 	isb	sy
 8003e04:	e009      	b.n	8003e1a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	3310      	adds	r3, #16
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7ff fef6 	bl	8003bfc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	3324      	adds	r3, #36	; 0x24
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7ff fef1 	bl	8003bfc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003e1a:	f001 ff77 	bl	8005d0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003e1e:	2301      	movs	r3, #1
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3710      	adds	r7, #16
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	e000ed04 	.word	0xe000ed04

08003e2c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b08e      	sub	sp, #56	; 0x38
 8003e30:	af02      	add	r7, sp, #8
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]
 8003e38:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d10a      	bne.n	8003e56 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e44:	f383 8811 	msr	BASEPRI, r3
 8003e48:	f3bf 8f6f 	isb	sy
 8003e4c:	f3bf 8f4f 	dsb	sy
 8003e50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003e52:	bf00      	nop
 8003e54:	e7fe      	b.n	8003e54 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d10a      	bne.n	8003e72 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e60:	f383 8811 	msr	BASEPRI, r3
 8003e64:	f3bf 8f6f 	isb	sy
 8003e68:	f3bf 8f4f 	dsb	sy
 8003e6c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003e6e:	bf00      	nop
 8003e70:	e7fe      	b.n	8003e70 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d002      	beq.n	8003e7e <xQueueGenericCreateStatic+0x52>
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <xQueueGenericCreateStatic+0x56>
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e000      	b.n	8003e84 <xQueueGenericCreateStatic+0x58>
 8003e82:	2300      	movs	r3, #0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d10a      	bne.n	8003e9e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e8c:	f383 8811 	msr	BASEPRI, r3
 8003e90:	f3bf 8f6f 	isb	sy
 8003e94:	f3bf 8f4f 	dsb	sy
 8003e98:	623b      	str	r3, [r7, #32]
}
 8003e9a:	bf00      	nop
 8003e9c:	e7fe      	b.n	8003e9c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d102      	bne.n	8003eaa <xQueueGenericCreateStatic+0x7e>
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <xQueueGenericCreateStatic+0x82>
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e000      	b.n	8003eb0 <xQueueGenericCreateStatic+0x84>
 8003eae:	2300      	movs	r3, #0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d10a      	bne.n	8003eca <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb8:	f383 8811 	msr	BASEPRI, r3
 8003ebc:	f3bf 8f6f 	isb	sy
 8003ec0:	f3bf 8f4f 	dsb	sy
 8003ec4:	61fb      	str	r3, [r7, #28]
}
 8003ec6:	bf00      	nop
 8003ec8:	e7fe      	b.n	8003ec8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003eca:	2350      	movs	r3, #80	; 0x50
 8003ecc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	2b50      	cmp	r3, #80	; 0x50
 8003ed2:	d00a      	beq.n	8003eea <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed8:	f383 8811 	msr	BASEPRI, r3
 8003edc:	f3bf 8f6f 	isb	sy
 8003ee0:	f3bf 8f4f 	dsb	sy
 8003ee4:	61bb      	str	r3, [r7, #24]
}
 8003ee6:	bf00      	nop
 8003ee8:	e7fe      	b.n	8003ee8 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00d      	beq.n	8003f10 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003efc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f02:	9300      	str	r3, [sp, #0]
 8003f04:	4613      	mov	r3, r2
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	68b9      	ldr	r1, [r7, #8]
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	f000 f805 	bl	8003f1a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3730      	adds	r7, #48	; 0x30
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b084      	sub	sp, #16
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	60f8      	str	r0, [r7, #12]
 8003f22:	60b9      	str	r1, [r7, #8]
 8003f24:	607a      	str	r2, [r7, #4]
 8003f26:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d103      	bne.n	8003f36 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	69ba      	ldr	r2, [r7, #24]
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	e002      	b.n	8003f3c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	68ba      	ldr	r2, [r7, #8]
 8003f46:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003f48:	2101      	movs	r1, #1
 8003f4a:	69b8      	ldr	r0, [r7, #24]
 8003f4c:	f7ff ff06 	bl	8003d5c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	78fa      	ldrb	r2, [r7, #3]
 8003f54:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003f58:	bf00      	nop
 8003f5a:	3710      	adds	r7, #16
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b08e      	sub	sp, #56	; 0x38
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]
 8003f6c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d10a      	bne.n	8003f92 <xQueueGenericSend+0x32>
	__asm volatile
 8003f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f80:	f383 8811 	msr	BASEPRI, r3
 8003f84:	f3bf 8f6f 	isb	sy
 8003f88:	f3bf 8f4f 	dsb	sy
 8003f8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003f8e:	bf00      	nop
 8003f90:	e7fe      	b.n	8003f90 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d103      	bne.n	8003fa0 <xQueueGenericSend+0x40>
 8003f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <xQueueGenericSend+0x44>
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e000      	b.n	8003fa6 <xQueueGenericSend+0x46>
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d10a      	bne.n	8003fc0 <xQueueGenericSend+0x60>
	__asm volatile
 8003faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fae:	f383 8811 	msr	BASEPRI, r3
 8003fb2:	f3bf 8f6f 	isb	sy
 8003fb6:	f3bf 8f4f 	dsb	sy
 8003fba:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003fbc:	bf00      	nop
 8003fbe:	e7fe      	b.n	8003fbe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d103      	bne.n	8003fce <xQueueGenericSend+0x6e>
 8003fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d101      	bne.n	8003fd2 <xQueueGenericSend+0x72>
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e000      	b.n	8003fd4 <xQueueGenericSend+0x74>
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d10a      	bne.n	8003fee <xQueueGenericSend+0x8e>
	__asm volatile
 8003fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fdc:	f383 8811 	msr	BASEPRI, r3
 8003fe0:	f3bf 8f6f 	isb	sy
 8003fe4:	f3bf 8f4f 	dsb	sy
 8003fe8:	623b      	str	r3, [r7, #32]
}
 8003fea:	bf00      	nop
 8003fec:	e7fe      	b.n	8003fec <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003fee:	f001 f97d 	bl	80052ec <xTaskGetSchedulerState>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d102      	bne.n	8003ffe <xQueueGenericSend+0x9e>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d101      	bne.n	8004002 <xQueueGenericSend+0xa2>
 8003ffe:	2301      	movs	r3, #1
 8004000:	e000      	b.n	8004004 <xQueueGenericSend+0xa4>
 8004002:	2300      	movs	r3, #0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d10a      	bne.n	800401e <xQueueGenericSend+0xbe>
	__asm volatile
 8004008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800400c:	f383 8811 	msr	BASEPRI, r3
 8004010:	f3bf 8f6f 	isb	sy
 8004014:	f3bf 8f4f 	dsb	sy
 8004018:	61fb      	str	r3, [r7, #28]
}
 800401a:	bf00      	nop
 800401c:	e7fe      	b.n	800401c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800401e:	f001 fe45 	bl	8005cac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004024:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800402a:	429a      	cmp	r2, r3
 800402c:	d302      	bcc.n	8004034 <xQueueGenericSend+0xd4>
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	2b02      	cmp	r3, #2
 8004032:	d129      	bne.n	8004088 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004034:	683a      	ldr	r2, [r7, #0]
 8004036:	68b9      	ldr	r1, [r7, #8]
 8004038:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800403a:	f000 fa07 	bl	800444c <prvCopyDataToQueue>
 800403e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004044:	2b00      	cmp	r3, #0
 8004046:	d010      	beq.n	800406a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800404a:	3324      	adds	r3, #36	; 0x24
 800404c:	4618      	mov	r0, r3
 800404e:	f000 ff8b 	bl	8004f68 <xTaskRemoveFromEventList>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d013      	beq.n	8004080 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004058:	4b3f      	ldr	r3, [pc, #252]	; (8004158 <xQueueGenericSend+0x1f8>)
 800405a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800405e:	601a      	str	r2, [r3, #0]
 8004060:	f3bf 8f4f 	dsb	sy
 8004064:	f3bf 8f6f 	isb	sy
 8004068:	e00a      	b.n	8004080 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800406a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800406c:	2b00      	cmp	r3, #0
 800406e:	d007      	beq.n	8004080 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004070:	4b39      	ldr	r3, [pc, #228]	; (8004158 <xQueueGenericSend+0x1f8>)
 8004072:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004076:	601a      	str	r2, [r3, #0]
 8004078:	f3bf 8f4f 	dsb	sy
 800407c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004080:	f001 fe44 	bl	8005d0c <vPortExitCritical>
				return pdPASS;
 8004084:	2301      	movs	r3, #1
 8004086:	e063      	b.n	8004150 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d103      	bne.n	8004096 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800408e:	f001 fe3d 	bl	8005d0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004092:	2300      	movs	r3, #0
 8004094:	e05c      	b.n	8004150 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004098:	2b00      	cmp	r3, #0
 800409a:	d106      	bne.n	80040aa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800409c:	f107 0314 	add.w	r3, r7, #20
 80040a0:	4618      	mov	r0, r3
 80040a2:	f000 ffc5 	bl	8005030 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80040a6:	2301      	movs	r3, #1
 80040a8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80040aa:	f001 fe2f 	bl	8005d0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80040ae:	f000 fd37 	bl	8004b20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80040b2:	f001 fdfb 	bl	8005cac <vPortEnterCritical>
 80040b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040bc:	b25b      	sxtb	r3, r3
 80040be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c2:	d103      	bne.n	80040cc <xQueueGenericSend+0x16c>
 80040c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040d2:	b25b      	sxtb	r3, r3
 80040d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d8:	d103      	bne.n	80040e2 <xQueueGenericSend+0x182>
 80040da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040e2:	f001 fe13 	bl	8005d0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80040e6:	1d3a      	adds	r2, r7, #4
 80040e8:	f107 0314 	add.w	r3, r7, #20
 80040ec:	4611      	mov	r1, r2
 80040ee:	4618      	mov	r0, r3
 80040f0:	f000 ffb4 	bl	800505c <xTaskCheckForTimeOut>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d124      	bne.n	8004144 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80040fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040fc:	f000 fa9e 	bl	800463c <prvIsQueueFull>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d018      	beq.n	8004138 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004108:	3310      	adds	r3, #16
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	4611      	mov	r1, r2
 800410e:	4618      	mov	r0, r3
 8004110:	f000 feda 	bl	8004ec8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004114:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004116:	f000 fa29 	bl	800456c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800411a:	f000 fd0f 	bl	8004b3c <xTaskResumeAll>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	f47f af7c 	bne.w	800401e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004126:	4b0c      	ldr	r3, [pc, #48]	; (8004158 <xQueueGenericSend+0x1f8>)
 8004128:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800412c:	601a      	str	r2, [r3, #0]
 800412e:	f3bf 8f4f 	dsb	sy
 8004132:	f3bf 8f6f 	isb	sy
 8004136:	e772      	b.n	800401e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004138:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800413a:	f000 fa17 	bl	800456c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800413e:	f000 fcfd 	bl	8004b3c <xTaskResumeAll>
 8004142:	e76c      	b.n	800401e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004144:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004146:	f000 fa11 	bl	800456c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800414a:	f000 fcf7 	bl	8004b3c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800414e:	2300      	movs	r3, #0
		}
	}
}
 8004150:	4618      	mov	r0, r3
 8004152:	3738      	adds	r7, #56	; 0x38
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	e000ed04 	.word	0xe000ed04

0800415c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b08e      	sub	sp, #56	; 0x38
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]
 8004168:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800416e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10a      	bne.n	800418a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004178:	f383 8811 	msr	BASEPRI, r3
 800417c:	f3bf 8f6f 	isb	sy
 8004180:	f3bf 8f4f 	dsb	sy
 8004184:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004186:	bf00      	nop
 8004188:	e7fe      	b.n	8004188 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d103      	bne.n	8004198 <xQueueGenericSendFromISR+0x3c>
 8004190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004194:	2b00      	cmp	r3, #0
 8004196:	d101      	bne.n	800419c <xQueueGenericSendFromISR+0x40>
 8004198:	2301      	movs	r3, #1
 800419a:	e000      	b.n	800419e <xQueueGenericSendFromISR+0x42>
 800419c:	2300      	movs	r3, #0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d10a      	bne.n	80041b8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80041a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a6:	f383 8811 	msr	BASEPRI, r3
 80041aa:	f3bf 8f6f 	isb	sy
 80041ae:	f3bf 8f4f 	dsb	sy
 80041b2:	623b      	str	r3, [r7, #32]
}
 80041b4:	bf00      	nop
 80041b6:	e7fe      	b.n	80041b6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d103      	bne.n	80041c6 <xQueueGenericSendFromISR+0x6a>
 80041be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d101      	bne.n	80041ca <xQueueGenericSendFromISR+0x6e>
 80041c6:	2301      	movs	r3, #1
 80041c8:	e000      	b.n	80041cc <xQueueGenericSendFromISR+0x70>
 80041ca:	2300      	movs	r3, #0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d10a      	bne.n	80041e6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80041d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d4:	f383 8811 	msr	BASEPRI, r3
 80041d8:	f3bf 8f6f 	isb	sy
 80041dc:	f3bf 8f4f 	dsb	sy
 80041e0:	61fb      	str	r3, [r7, #28]
}
 80041e2:	bf00      	nop
 80041e4:	e7fe      	b.n	80041e4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80041e6:	f001 fe23 	bl	8005e30 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80041ea:	f3ef 8211 	mrs	r2, BASEPRI
 80041ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f2:	f383 8811 	msr	BASEPRI, r3
 80041f6:	f3bf 8f6f 	isb	sy
 80041fa:	f3bf 8f4f 	dsb	sy
 80041fe:	61ba      	str	r2, [r7, #24]
 8004200:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004202:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004204:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004208:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800420a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800420c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800420e:	429a      	cmp	r2, r3
 8004210:	d302      	bcc.n	8004218 <xQueueGenericSendFromISR+0xbc>
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	2b02      	cmp	r3, #2
 8004216:	d12c      	bne.n	8004272 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800421e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004222:	683a      	ldr	r2, [r7, #0]
 8004224:	68b9      	ldr	r1, [r7, #8]
 8004226:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004228:	f000 f910 	bl	800444c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800422c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004234:	d112      	bne.n	800425c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423a:	2b00      	cmp	r3, #0
 800423c:	d016      	beq.n	800426c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800423e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004240:	3324      	adds	r3, #36	; 0x24
 8004242:	4618      	mov	r0, r3
 8004244:	f000 fe90 	bl	8004f68 <xTaskRemoveFromEventList>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00e      	beq.n	800426c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00b      	beq.n	800426c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	601a      	str	r2, [r3, #0]
 800425a:	e007      	b.n	800426c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800425c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004260:	3301      	adds	r3, #1
 8004262:	b2db      	uxtb	r3, r3
 8004264:	b25a      	sxtb	r2, r3
 8004266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004268:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800426c:	2301      	movs	r3, #1
 800426e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004270:	e001      	b.n	8004276 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004272:	2300      	movs	r3, #0
 8004274:	637b      	str	r3, [r7, #52]	; 0x34
 8004276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004278:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004280:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004284:	4618      	mov	r0, r3
 8004286:	3738      	adds	r7, #56	; 0x38
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b08c      	sub	sp, #48	; 0x30
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004298:	2300      	movs	r3, #0
 800429a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80042a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10a      	bne.n	80042bc <xQueueReceive+0x30>
	__asm volatile
 80042a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042aa:	f383 8811 	msr	BASEPRI, r3
 80042ae:	f3bf 8f6f 	isb	sy
 80042b2:	f3bf 8f4f 	dsb	sy
 80042b6:	623b      	str	r3, [r7, #32]
}
 80042b8:	bf00      	nop
 80042ba:	e7fe      	b.n	80042ba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d103      	bne.n	80042ca <xQueueReceive+0x3e>
 80042c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d101      	bne.n	80042ce <xQueueReceive+0x42>
 80042ca:	2301      	movs	r3, #1
 80042cc:	e000      	b.n	80042d0 <xQueueReceive+0x44>
 80042ce:	2300      	movs	r3, #0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d10a      	bne.n	80042ea <xQueueReceive+0x5e>
	__asm volatile
 80042d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d8:	f383 8811 	msr	BASEPRI, r3
 80042dc:	f3bf 8f6f 	isb	sy
 80042e0:	f3bf 8f4f 	dsb	sy
 80042e4:	61fb      	str	r3, [r7, #28]
}
 80042e6:	bf00      	nop
 80042e8:	e7fe      	b.n	80042e8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80042ea:	f000 ffff 	bl	80052ec <xTaskGetSchedulerState>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d102      	bne.n	80042fa <xQueueReceive+0x6e>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d101      	bne.n	80042fe <xQueueReceive+0x72>
 80042fa:	2301      	movs	r3, #1
 80042fc:	e000      	b.n	8004300 <xQueueReceive+0x74>
 80042fe:	2300      	movs	r3, #0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d10a      	bne.n	800431a <xQueueReceive+0x8e>
	__asm volatile
 8004304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004308:	f383 8811 	msr	BASEPRI, r3
 800430c:	f3bf 8f6f 	isb	sy
 8004310:	f3bf 8f4f 	dsb	sy
 8004314:	61bb      	str	r3, [r7, #24]
}
 8004316:	bf00      	nop
 8004318:	e7fe      	b.n	8004318 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800431a:	f001 fcc7 	bl	8005cac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800431e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004322:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004326:	2b00      	cmp	r3, #0
 8004328:	d01f      	beq.n	800436a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800432a:	68b9      	ldr	r1, [r7, #8]
 800432c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800432e:	f000 f8f7 	bl	8004520 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004334:	1e5a      	subs	r2, r3, #1
 8004336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004338:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800433a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00f      	beq.n	8004362 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004344:	3310      	adds	r3, #16
 8004346:	4618      	mov	r0, r3
 8004348:	f000 fe0e 	bl	8004f68 <xTaskRemoveFromEventList>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d007      	beq.n	8004362 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004352:	4b3d      	ldr	r3, [pc, #244]	; (8004448 <xQueueReceive+0x1bc>)
 8004354:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004358:	601a      	str	r2, [r3, #0]
 800435a:	f3bf 8f4f 	dsb	sy
 800435e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004362:	f001 fcd3 	bl	8005d0c <vPortExitCritical>
				return pdPASS;
 8004366:	2301      	movs	r3, #1
 8004368:	e069      	b.n	800443e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d103      	bne.n	8004378 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004370:	f001 fccc 	bl	8005d0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004374:	2300      	movs	r3, #0
 8004376:	e062      	b.n	800443e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800437a:	2b00      	cmp	r3, #0
 800437c:	d106      	bne.n	800438c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800437e:	f107 0310 	add.w	r3, r7, #16
 8004382:	4618      	mov	r0, r3
 8004384:	f000 fe54 	bl	8005030 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004388:	2301      	movs	r3, #1
 800438a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800438c:	f001 fcbe 	bl	8005d0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004390:	f000 fbc6 	bl	8004b20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004394:	f001 fc8a 	bl	8005cac <vPortEnterCritical>
 8004398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800439e:	b25b      	sxtb	r3, r3
 80043a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a4:	d103      	bne.n	80043ae <xQueueReceive+0x122>
 80043a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043b4:	b25b      	sxtb	r3, r3
 80043b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ba:	d103      	bne.n	80043c4 <xQueueReceive+0x138>
 80043bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043c4:	f001 fca2 	bl	8005d0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80043c8:	1d3a      	adds	r2, r7, #4
 80043ca:	f107 0310 	add.w	r3, r7, #16
 80043ce:	4611      	mov	r1, r2
 80043d0:	4618      	mov	r0, r3
 80043d2:	f000 fe43 	bl	800505c <xTaskCheckForTimeOut>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d123      	bne.n	8004424 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80043dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043de:	f000 f917 	bl	8004610 <prvIsQueueEmpty>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d017      	beq.n	8004418 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80043e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ea:	3324      	adds	r3, #36	; 0x24
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	4611      	mov	r1, r2
 80043f0:	4618      	mov	r0, r3
 80043f2:	f000 fd69 	bl	8004ec8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80043f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043f8:	f000 f8b8 	bl	800456c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80043fc:	f000 fb9e 	bl	8004b3c <xTaskResumeAll>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d189      	bne.n	800431a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004406:	4b10      	ldr	r3, [pc, #64]	; (8004448 <xQueueReceive+0x1bc>)
 8004408:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800440c:	601a      	str	r2, [r3, #0]
 800440e:	f3bf 8f4f 	dsb	sy
 8004412:	f3bf 8f6f 	isb	sy
 8004416:	e780      	b.n	800431a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004418:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800441a:	f000 f8a7 	bl	800456c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800441e:	f000 fb8d 	bl	8004b3c <xTaskResumeAll>
 8004422:	e77a      	b.n	800431a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004424:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004426:	f000 f8a1 	bl	800456c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800442a:	f000 fb87 	bl	8004b3c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800442e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004430:	f000 f8ee 	bl	8004610 <prvIsQueueEmpty>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	f43f af6f 	beq.w	800431a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800443c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800443e:	4618      	mov	r0, r3
 8004440:	3730      	adds	r7, #48	; 0x30
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	e000ed04 	.word	0xe000ed04

0800444c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004458:	2300      	movs	r3, #0
 800445a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004460:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004466:	2b00      	cmp	r3, #0
 8004468:	d10d      	bne.n	8004486 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d14d      	bne.n	800450e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	4618      	mov	r0, r3
 8004478:	f000 ff56 	bl	8005328 <xTaskPriorityDisinherit>
 800447c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	605a      	str	r2, [r3, #4]
 8004484:	e043      	b.n	800450e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d119      	bne.n	80044c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6898      	ldr	r0, [r3, #8]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004494:	461a      	mov	r2, r3
 8004496:	68b9      	ldr	r1, [r7, #8]
 8004498:	f002 f800 	bl	800649c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	689a      	ldr	r2, [r3, #8]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a4:	441a      	add	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	689a      	ldr	r2, [r3, #8]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d32b      	bcc.n	800450e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	609a      	str	r2, [r3, #8]
 80044be:	e026      	b.n	800450e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	68d8      	ldr	r0, [r3, #12]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c8:	461a      	mov	r2, r3
 80044ca:	68b9      	ldr	r1, [r7, #8]
 80044cc:	f001 ffe6 	bl	800649c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	68da      	ldr	r2, [r3, #12]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d8:	425b      	negs	r3, r3
 80044da:	441a      	add	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	68da      	ldr	r2, [r3, #12]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d207      	bcs.n	80044fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	685a      	ldr	r2, [r3, #4]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f4:	425b      	negs	r3, r3
 80044f6:	441a      	add	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d105      	bne.n	800450e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d002      	beq.n	800450e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	3b01      	subs	r3, #1
 800450c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	1c5a      	adds	r2, r3, #1
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004516:	697b      	ldr	r3, [r7, #20]
}
 8004518:	4618      	mov	r0, r3
 800451a:	3718      	adds	r7, #24
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452e:	2b00      	cmp	r3, #0
 8004530:	d018      	beq.n	8004564 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68da      	ldr	r2, [r3, #12]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453a:	441a      	add	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	68da      	ldr	r2, [r3, #12]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	429a      	cmp	r2, r3
 800454a:	d303      	bcc.n	8004554 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	68d9      	ldr	r1, [r3, #12]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455c:	461a      	mov	r2, r3
 800455e:	6838      	ldr	r0, [r7, #0]
 8004560:	f001 ff9c 	bl	800649c <memcpy>
	}
}
 8004564:	bf00      	nop
 8004566:	3708      	adds	r7, #8
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004574:	f001 fb9a 	bl	8005cac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800457e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004580:	e011      	b.n	80045a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004586:	2b00      	cmp	r3, #0
 8004588:	d012      	beq.n	80045b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	3324      	adds	r3, #36	; 0x24
 800458e:	4618      	mov	r0, r3
 8004590:	f000 fcea 	bl	8004f68 <xTaskRemoveFromEventList>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800459a:	f000 fdc1 	bl	8005120 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800459e:	7bfb      	ldrb	r3, [r7, #15]
 80045a0:	3b01      	subs	r3, #1
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80045a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	dce9      	bgt.n	8004582 <prvUnlockQueue+0x16>
 80045ae:	e000      	b.n	80045b2 <prvUnlockQueue+0x46>
					break;
 80045b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	22ff      	movs	r2, #255	; 0xff
 80045b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80045ba:	f001 fba7 	bl	8005d0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80045be:	f001 fb75 	bl	8005cac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80045ca:	e011      	b.n	80045f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d012      	beq.n	80045fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	3310      	adds	r3, #16
 80045d8:	4618      	mov	r0, r3
 80045da:	f000 fcc5 	bl	8004f68 <xTaskRemoveFromEventList>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d001      	beq.n	80045e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80045e4:	f000 fd9c 	bl	8005120 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80045e8:	7bbb      	ldrb	r3, [r7, #14]
 80045ea:	3b01      	subs	r3, #1
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80045f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	dce9      	bgt.n	80045cc <prvUnlockQueue+0x60>
 80045f8:	e000      	b.n	80045fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80045fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	22ff      	movs	r2, #255	; 0xff
 8004600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004604:	f001 fb82 	bl	8005d0c <vPortExitCritical>
}
 8004608:	bf00      	nop
 800460a:	3710      	adds	r7, #16
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004618:	f001 fb48 	bl	8005cac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004620:	2b00      	cmp	r3, #0
 8004622:	d102      	bne.n	800462a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004624:	2301      	movs	r3, #1
 8004626:	60fb      	str	r3, [r7, #12]
 8004628:	e001      	b.n	800462e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800462a:	2300      	movs	r3, #0
 800462c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800462e:	f001 fb6d 	bl	8005d0c <vPortExitCritical>

	return xReturn;
 8004632:	68fb      	ldr	r3, [r7, #12]
}
 8004634:	4618      	mov	r0, r3
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004644:	f001 fb32 	bl	8005cac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004650:	429a      	cmp	r2, r3
 8004652:	d102      	bne.n	800465a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004654:	2301      	movs	r3, #1
 8004656:	60fb      	str	r3, [r7, #12]
 8004658:	e001      	b.n	800465e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800465a:	2300      	movs	r3, #0
 800465c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800465e:	f001 fb55 	bl	8005d0c <vPortExitCritical>

	return xReturn;
 8004662:	68fb      	ldr	r3, [r7, #12]
}
 8004664:	4618      	mov	r0, r3
 8004666:	3710      	adds	r7, #16
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004676:	2300      	movs	r3, #0
 8004678:	60fb      	str	r3, [r7, #12]
 800467a:	e014      	b.n	80046a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800467c:	4a0e      	ldr	r2, [pc, #56]	; (80046b8 <vQueueAddToRegistry+0x4c>)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10b      	bne.n	80046a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004688:	490b      	ldr	r1, [pc, #44]	; (80046b8 <vQueueAddToRegistry+0x4c>)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	683a      	ldr	r2, [r7, #0]
 800468e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004692:	4a09      	ldr	r2, [pc, #36]	; (80046b8 <vQueueAddToRegistry+0x4c>)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	00db      	lsls	r3, r3, #3
 8004698:	4413      	add	r3, r2
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800469e:	e006      	b.n	80046ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	3301      	adds	r3, #1
 80046a4:	60fb      	str	r3, [r7, #12]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2b07      	cmp	r3, #7
 80046aa:	d9e7      	bls.n	800467c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80046ac:	bf00      	nop
 80046ae:	bf00      	nop
 80046b0:	3714      	adds	r7, #20
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bc80      	pop	{r7}
 80046b6:	4770      	bx	lr
 80046b8:	20000e9c 	.word	0x20000e9c

080046bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b086      	sub	sp, #24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80046cc:	f001 faee 	bl	8005cac <vPortEnterCritical>
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046d6:	b25b      	sxtb	r3, r3
 80046d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046dc:	d103      	bne.n	80046e6 <vQueueWaitForMessageRestricted+0x2a>
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046ec:	b25b      	sxtb	r3, r3
 80046ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f2:	d103      	bne.n	80046fc <vQueueWaitForMessageRestricted+0x40>
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046fc:	f001 fb06 	bl	8005d0c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004704:	2b00      	cmp	r3, #0
 8004706:	d106      	bne.n	8004716 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	3324      	adds	r3, #36	; 0x24
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	68b9      	ldr	r1, [r7, #8]
 8004710:	4618      	mov	r0, r3
 8004712:	f000 fbfd 	bl	8004f10 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004716:	6978      	ldr	r0, [r7, #20]
 8004718:	f7ff ff28 	bl	800456c <prvUnlockQueue>
	}
 800471c:	bf00      	nop
 800471e:	3718      	adds	r7, #24
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004724:	b580      	push	{r7, lr}
 8004726:	b08e      	sub	sp, #56	; 0x38
 8004728:	af04      	add	r7, sp, #16
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
 8004730:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004734:	2b00      	cmp	r3, #0
 8004736:	d10a      	bne.n	800474e <xTaskCreateStatic+0x2a>
	__asm volatile
 8004738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473c:	f383 8811 	msr	BASEPRI, r3
 8004740:	f3bf 8f6f 	isb	sy
 8004744:	f3bf 8f4f 	dsb	sy
 8004748:	623b      	str	r3, [r7, #32]
}
 800474a:	bf00      	nop
 800474c:	e7fe      	b.n	800474c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800474e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004750:	2b00      	cmp	r3, #0
 8004752:	d10a      	bne.n	800476a <xTaskCreateStatic+0x46>
	__asm volatile
 8004754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004758:	f383 8811 	msr	BASEPRI, r3
 800475c:	f3bf 8f6f 	isb	sy
 8004760:	f3bf 8f4f 	dsb	sy
 8004764:	61fb      	str	r3, [r7, #28]
}
 8004766:	bf00      	nop
 8004768:	e7fe      	b.n	8004768 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800476a:	235c      	movs	r3, #92	; 0x5c
 800476c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	2b5c      	cmp	r3, #92	; 0x5c
 8004772:	d00a      	beq.n	800478a <xTaskCreateStatic+0x66>
	__asm volatile
 8004774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004778:	f383 8811 	msr	BASEPRI, r3
 800477c:	f3bf 8f6f 	isb	sy
 8004780:	f3bf 8f4f 	dsb	sy
 8004784:	61bb      	str	r3, [r7, #24]
}
 8004786:	bf00      	nop
 8004788:	e7fe      	b.n	8004788 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800478a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800478c:	2b00      	cmp	r3, #0
 800478e:	d01e      	beq.n	80047ce <xTaskCreateStatic+0xaa>
 8004790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004792:	2b00      	cmp	r3, #0
 8004794:	d01b      	beq.n	80047ce <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004798:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800479a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800479e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80047a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a2:	2202      	movs	r2, #2
 80047a4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80047a8:	2300      	movs	r3, #0
 80047aa:	9303      	str	r3, [sp, #12]
 80047ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ae:	9302      	str	r3, [sp, #8]
 80047b0:	f107 0314 	add.w	r3, r7, #20
 80047b4:	9301      	str	r3, [sp, #4]
 80047b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b8:	9300      	str	r3, [sp, #0]
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	68b9      	ldr	r1, [r7, #8]
 80047c0:	68f8      	ldr	r0, [r7, #12]
 80047c2:	f000 f850 	bl	8004866 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80047c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80047c8:	f000 f8d4 	bl	8004974 <prvAddNewTaskToReadyList>
 80047cc:	e001      	b.n	80047d2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80047ce:	2300      	movs	r3, #0
 80047d0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80047d2:	697b      	ldr	r3, [r7, #20]
	}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3728      	adds	r7, #40	; 0x28
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b08c      	sub	sp, #48	; 0x30
 80047e0:	af04      	add	r7, sp, #16
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	603b      	str	r3, [r7, #0]
 80047e8:	4613      	mov	r3, r2
 80047ea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047ec:	88fb      	ldrh	r3, [r7, #6]
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	4618      	mov	r0, r3
 80047f2:	f001 fb5b 	bl	8005eac <pvPortMalloc>
 80047f6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00e      	beq.n	800481c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80047fe:	205c      	movs	r0, #92	; 0x5c
 8004800:	f001 fb54 	bl	8005eac <pvPortMalloc>
 8004804:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d003      	beq.n	8004814 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	631a      	str	r2, [r3, #48]	; 0x30
 8004812:	e005      	b.n	8004820 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004814:	6978      	ldr	r0, [r7, #20]
 8004816:	f001 fc0d 	bl	8006034 <vPortFree>
 800481a:	e001      	b.n	8004820 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800481c:	2300      	movs	r3, #0
 800481e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d017      	beq.n	8004856 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800482e:	88fa      	ldrh	r2, [r7, #6]
 8004830:	2300      	movs	r3, #0
 8004832:	9303      	str	r3, [sp, #12]
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	9302      	str	r3, [sp, #8]
 8004838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800483a:	9301      	str	r3, [sp, #4]
 800483c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483e:	9300      	str	r3, [sp, #0]
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	68b9      	ldr	r1, [r7, #8]
 8004844:	68f8      	ldr	r0, [r7, #12]
 8004846:	f000 f80e 	bl	8004866 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800484a:	69f8      	ldr	r0, [r7, #28]
 800484c:	f000 f892 	bl	8004974 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004850:	2301      	movs	r3, #1
 8004852:	61bb      	str	r3, [r7, #24]
 8004854:	e002      	b.n	800485c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004856:	f04f 33ff 	mov.w	r3, #4294967295
 800485a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800485c:	69bb      	ldr	r3, [r7, #24]
	}
 800485e:	4618      	mov	r0, r3
 8004860:	3720      	adds	r7, #32
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}

08004866 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004866:	b580      	push	{r7, lr}
 8004868:	b088      	sub	sp, #32
 800486a:	af00      	add	r7, sp, #0
 800486c:	60f8      	str	r0, [r7, #12]
 800486e:	60b9      	str	r1, [r7, #8]
 8004870:	607a      	str	r2, [r7, #4]
 8004872:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004876:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	461a      	mov	r2, r3
 800487e:	21a5      	movs	r1, #165	; 0xa5
 8004880:	f001 fdc8 	bl	8006414 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004886:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800488e:	3b01      	subs	r3, #1
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	4413      	add	r3, r2
 8004894:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	f023 0307 	bic.w	r3, r3, #7
 800489c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	f003 0307 	and.w	r3, r3, #7
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00a      	beq.n	80048be <prvInitialiseNewTask+0x58>
	__asm volatile
 80048a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ac:	f383 8811 	msr	BASEPRI, r3
 80048b0:	f3bf 8f6f 	isb	sy
 80048b4:	f3bf 8f4f 	dsb	sy
 80048b8:	617b      	str	r3, [r7, #20]
}
 80048ba:	bf00      	nop
 80048bc:	e7fe      	b.n	80048bc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80048be:	2300      	movs	r3, #0
 80048c0:	61fb      	str	r3, [r7, #28]
 80048c2:	e012      	b.n	80048ea <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80048c4:	68ba      	ldr	r2, [r7, #8]
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	4413      	add	r3, r2
 80048ca:	7819      	ldrb	r1, [r3, #0]
 80048cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	4413      	add	r3, r2
 80048d2:	3334      	adds	r3, #52	; 0x34
 80048d4:	460a      	mov	r2, r1
 80048d6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80048d8:	68ba      	ldr	r2, [r7, #8]
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	4413      	add	r3, r2
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d006      	beq.n	80048f2 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	3301      	adds	r3, #1
 80048e8:	61fb      	str	r3, [r7, #28]
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	2b0f      	cmp	r3, #15
 80048ee:	d9e9      	bls.n	80048c4 <prvInitialiseNewTask+0x5e>
 80048f0:	e000      	b.n	80048f4 <prvInitialiseNewTask+0x8e>
		{
			break;
 80048f2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80048f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80048fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fe:	2b37      	cmp	r3, #55	; 0x37
 8004900:	d901      	bls.n	8004906 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004902:	2337      	movs	r3, #55	; 0x37
 8004904:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004908:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800490a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800490c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004910:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004914:	2200      	movs	r2, #0
 8004916:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800491a:	3304      	adds	r3, #4
 800491c:	4618      	mov	r0, r3
 800491e:	f7ff f98c 	bl	8003c3a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004924:	3318      	adds	r3, #24
 8004926:	4618      	mov	r0, r3
 8004928:	f7ff f987 	bl	8003c3a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800492c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004930:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004934:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800493c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004940:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004944:	2200      	movs	r2, #0
 8004946:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800494a:	2200      	movs	r2, #0
 800494c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004950:	683a      	ldr	r2, [r7, #0]
 8004952:	68f9      	ldr	r1, [r7, #12]
 8004954:	69b8      	ldr	r0, [r7, #24]
 8004956:	f001 f8bb 	bl	8005ad0 <pxPortInitialiseStack>
 800495a:	4602      	mov	r2, r0
 800495c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004962:	2b00      	cmp	r3, #0
 8004964:	d002      	beq.n	800496c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004968:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800496a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800496c:	bf00      	nop
 800496e:	3720      	adds	r7, #32
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800497c:	f001 f996 	bl	8005cac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004980:	4b2d      	ldr	r3, [pc, #180]	; (8004a38 <prvAddNewTaskToReadyList+0xc4>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	3301      	adds	r3, #1
 8004986:	4a2c      	ldr	r2, [pc, #176]	; (8004a38 <prvAddNewTaskToReadyList+0xc4>)
 8004988:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800498a:	4b2c      	ldr	r3, [pc, #176]	; (8004a3c <prvAddNewTaskToReadyList+0xc8>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d109      	bne.n	80049a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004992:	4a2a      	ldr	r2, [pc, #168]	; (8004a3c <prvAddNewTaskToReadyList+0xc8>)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004998:	4b27      	ldr	r3, [pc, #156]	; (8004a38 <prvAddNewTaskToReadyList+0xc4>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d110      	bne.n	80049c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80049a0:	f000 fbe2 	bl	8005168 <prvInitialiseTaskLists>
 80049a4:	e00d      	b.n	80049c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80049a6:	4b26      	ldr	r3, [pc, #152]	; (8004a40 <prvAddNewTaskToReadyList+0xcc>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d109      	bne.n	80049c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80049ae:	4b23      	ldr	r3, [pc, #140]	; (8004a3c <prvAddNewTaskToReadyList+0xc8>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d802      	bhi.n	80049c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80049bc:	4a1f      	ldr	r2, [pc, #124]	; (8004a3c <prvAddNewTaskToReadyList+0xc8>)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80049c2:	4b20      	ldr	r3, [pc, #128]	; (8004a44 <prvAddNewTaskToReadyList+0xd0>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	3301      	adds	r3, #1
 80049c8:	4a1e      	ldr	r2, [pc, #120]	; (8004a44 <prvAddNewTaskToReadyList+0xd0>)
 80049ca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80049cc:	4b1d      	ldr	r3, [pc, #116]	; (8004a44 <prvAddNewTaskToReadyList+0xd0>)
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049d8:	4b1b      	ldr	r3, [pc, #108]	; (8004a48 <prvAddNewTaskToReadyList+0xd4>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d903      	bls.n	80049e8 <prvAddNewTaskToReadyList+0x74>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e4:	4a18      	ldr	r2, [pc, #96]	; (8004a48 <prvAddNewTaskToReadyList+0xd4>)
 80049e6:	6013      	str	r3, [r2, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ec:	4613      	mov	r3, r2
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	4413      	add	r3, r2
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	4a15      	ldr	r2, [pc, #84]	; (8004a4c <prvAddNewTaskToReadyList+0xd8>)
 80049f6:	441a      	add	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	3304      	adds	r3, #4
 80049fc:	4619      	mov	r1, r3
 80049fe:	4610      	mov	r0, r2
 8004a00:	f7ff f927 	bl	8003c52 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004a04:	f001 f982 	bl	8005d0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004a08:	4b0d      	ldr	r3, [pc, #52]	; (8004a40 <prvAddNewTaskToReadyList+0xcc>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00e      	beq.n	8004a2e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004a10:	4b0a      	ldr	r3, [pc, #40]	; (8004a3c <prvAddNewTaskToReadyList+0xc8>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d207      	bcs.n	8004a2e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004a1e:	4b0c      	ldr	r3, [pc, #48]	; (8004a50 <prvAddNewTaskToReadyList+0xdc>)
 8004a20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a24:	601a      	str	r2, [r3, #0]
 8004a26:	f3bf 8f4f 	dsb	sy
 8004a2a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a2e:	bf00      	nop
 8004a30:	3708      	adds	r7, #8
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	200013b0 	.word	0x200013b0
 8004a3c:	20000edc 	.word	0x20000edc
 8004a40:	200013bc 	.word	0x200013bc
 8004a44:	200013cc 	.word	0x200013cc
 8004a48:	200013b8 	.word	0x200013b8
 8004a4c:	20000ee0 	.word	0x20000ee0
 8004a50:	e000ed04 	.word	0xe000ed04

08004a54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b08a      	sub	sp, #40	; 0x28
 8004a58:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004a62:	463a      	mov	r2, r7
 8004a64:	1d39      	adds	r1, r7, #4
 8004a66:	f107 0308 	add.w	r3, r7, #8
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7ff f894 	bl	8003b98 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004a70:	6839      	ldr	r1, [r7, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	68ba      	ldr	r2, [r7, #8]
 8004a76:	9202      	str	r2, [sp, #8]
 8004a78:	9301      	str	r3, [sp, #4]
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	9300      	str	r3, [sp, #0]
 8004a7e:	2300      	movs	r3, #0
 8004a80:	460a      	mov	r2, r1
 8004a82:	4921      	ldr	r1, [pc, #132]	; (8004b08 <vTaskStartScheduler+0xb4>)
 8004a84:	4821      	ldr	r0, [pc, #132]	; (8004b0c <vTaskStartScheduler+0xb8>)
 8004a86:	f7ff fe4d 	bl	8004724 <xTaskCreateStatic>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	4a20      	ldr	r2, [pc, #128]	; (8004b10 <vTaskStartScheduler+0xbc>)
 8004a8e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004a90:	4b1f      	ldr	r3, [pc, #124]	; (8004b10 <vTaskStartScheduler+0xbc>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d002      	beq.n	8004a9e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	617b      	str	r3, [r7, #20]
 8004a9c:	e001      	b.n	8004aa2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d102      	bne.n	8004aae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004aa8:	f000 fd00 	bl	80054ac <xTimerCreateTimerTask>
 8004aac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d116      	bne.n	8004ae2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab8:	f383 8811 	msr	BASEPRI, r3
 8004abc:	f3bf 8f6f 	isb	sy
 8004ac0:	f3bf 8f4f 	dsb	sy
 8004ac4:	613b      	str	r3, [r7, #16]
}
 8004ac6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004ac8:	4b12      	ldr	r3, [pc, #72]	; (8004b14 <vTaskStartScheduler+0xc0>)
 8004aca:	f04f 32ff 	mov.w	r2, #4294967295
 8004ace:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004ad0:	4b11      	ldr	r3, [pc, #68]	; (8004b18 <vTaskStartScheduler+0xc4>)
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004ad6:	4b11      	ldr	r3, [pc, #68]	; (8004b1c <vTaskStartScheduler+0xc8>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004adc:	f001 f874 	bl	8005bc8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004ae0:	e00e      	b.n	8004b00 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae8:	d10a      	bne.n	8004b00 <vTaskStartScheduler+0xac>
	__asm volatile
 8004aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aee:	f383 8811 	msr	BASEPRI, r3
 8004af2:	f3bf 8f6f 	isb	sy
 8004af6:	f3bf 8f4f 	dsb	sy
 8004afa:	60fb      	str	r3, [r7, #12]
}
 8004afc:	bf00      	nop
 8004afe:	e7fe      	b.n	8004afe <vTaskStartScheduler+0xaa>
}
 8004b00:	bf00      	nop
 8004b02:	3718      	adds	r7, #24
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	08006c34 	.word	0x08006c34
 8004b0c:	08005139 	.word	0x08005139
 8004b10:	200013d4 	.word	0x200013d4
 8004b14:	200013d0 	.word	0x200013d0
 8004b18:	200013bc 	.word	0x200013bc
 8004b1c:	200013b4 	.word	0x200013b4

08004b20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004b20:	b480      	push	{r7}
 8004b22:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004b24:	4b04      	ldr	r3, [pc, #16]	; (8004b38 <vTaskSuspendAll+0x18>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	3301      	adds	r3, #1
 8004b2a:	4a03      	ldr	r2, [pc, #12]	; (8004b38 <vTaskSuspendAll+0x18>)
 8004b2c:	6013      	str	r3, [r2, #0]
}
 8004b2e:	bf00      	nop
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bc80      	pop	{r7}
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	200013d8 	.word	0x200013d8

08004b3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004b42:	2300      	movs	r3, #0
 8004b44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004b46:	2300      	movs	r3, #0
 8004b48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004b4a:	4b42      	ldr	r3, [pc, #264]	; (8004c54 <xTaskResumeAll+0x118>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d10a      	bne.n	8004b68 <xTaskResumeAll+0x2c>
	__asm volatile
 8004b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b56:	f383 8811 	msr	BASEPRI, r3
 8004b5a:	f3bf 8f6f 	isb	sy
 8004b5e:	f3bf 8f4f 	dsb	sy
 8004b62:	603b      	str	r3, [r7, #0]
}
 8004b64:	bf00      	nop
 8004b66:	e7fe      	b.n	8004b66 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004b68:	f001 f8a0 	bl	8005cac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004b6c:	4b39      	ldr	r3, [pc, #228]	; (8004c54 <xTaskResumeAll+0x118>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	3b01      	subs	r3, #1
 8004b72:	4a38      	ldr	r2, [pc, #224]	; (8004c54 <xTaskResumeAll+0x118>)
 8004b74:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b76:	4b37      	ldr	r3, [pc, #220]	; (8004c54 <xTaskResumeAll+0x118>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d162      	bne.n	8004c44 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004b7e:	4b36      	ldr	r3, [pc, #216]	; (8004c58 <xTaskResumeAll+0x11c>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d05e      	beq.n	8004c44 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b86:	e02f      	b.n	8004be8 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004b88:	4b34      	ldr	r3, [pc, #208]	; (8004c5c <xTaskResumeAll+0x120>)
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	3318      	adds	r3, #24
 8004b94:	4618      	mov	r0, r3
 8004b96:	f7ff f8b7 	bl	8003d08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	3304      	adds	r3, #4
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7ff f8b2 	bl	8003d08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ba8:	4b2d      	ldr	r3, [pc, #180]	; (8004c60 <xTaskResumeAll+0x124>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d903      	bls.n	8004bb8 <xTaskResumeAll+0x7c>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb4:	4a2a      	ldr	r2, [pc, #168]	; (8004c60 <xTaskResumeAll+0x124>)
 8004bb6:	6013      	str	r3, [r2, #0]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4413      	add	r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	4a27      	ldr	r2, [pc, #156]	; (8004c64 <xTaskResumeAll+0x128>)
 8004bc6:	441a      	add	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	3304      	adds	r3, #4
 8004bcc:	4619      	mov	r1, r3
 8004bce:	4610      	mov	r0, r2
 8004bd0:	f7ff f83f 	bl	8003c52 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bd8:	4b23      	ldr	r3, [pc, #140]	; (8004c68 <xTaskResumeAll+0x12c>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d302      	bcc.n	8004be8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004be2:	4b22      	ldr	r3, [pc, #136]	; (8004c6c <xTaskResumeAll+0x130>)
 8004be4:	2201      	movs	r2, #1
 8004be6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004be8:	4b1c      	ldr	r3, [pc, #112]	; (8004c5c <xTaskResumeAll+0x120>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1cb      	bne.n	8004b88 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d001      	beq.n	8004bfa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004bf6:	f000 fb55 	bl	80052a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004bfa:	4b1d      	ldr	r3, [pc, #116]	; (8004c70 <xTaskResumeAll+0x134>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d010      	beq.n	8004c28 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004c06:	f000 f845 	bl	8004c94 <xTaskIncrementTick>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d002      	beq.n	8004c16 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004c10:	4b16      	ldr	r3, [pc, #88]	; (8004c6c <xTaskResumeAll+0x130>)
 8004c12:	2201      	movs	r2, #1
 8004c14:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1f1      	bne.n	8004c06 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8004c22:	4b13      	ldr	r3, [pc, #76]	; (8004c70 <xTaskResumeAll+0x134>)
 8004c24:	2200      	movs	r2, #0
 8004c26:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004c28:	4b10      	ldr	r3, [pc, #64]	; (8004c6c <xTaskResumeAll+0x130>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d009      	beq.n	8004c44 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004c30:	2301      	movs	r3, #1
 8004c32:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004c34:	4b0f      	ldr	r3, [pc, #60]	; (8004c74 <xTaskResumeAll+0x138>)
 8004c36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c3a:	601a      	str	r2, [r3, #0]
 8004c3c:	f3bf 8f4f 	dsb	sy
 8004c40:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c44:	f001 f862 	bl	8005d0c <vPortExitCritical>

	return xAlreadyYielded;
 8004c48:	68bb      	ldr	r3, [r7, #8]
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	200013d8 	.word	0x200013d8
 8004c58:	200013b0 	.word	0x200013b0
 8004c5c:	20001370 	.word	0x20001370
 8004c60:	200013b8 	.word	0x200013b8
 8004c64:	20000ee0 	.word	0x20000ee0
 8004c68:	20000edc 	.word	0x20000edc
 8004c6c:	200013c4 	.word	0x200013c4
 8004c70:	200013c0 	.word	0x200013c0
 8004c74:	e000ed04 	.word	0xe000ed04

08004c78 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004c7e:	4b04      	ldr	r3, [pc, #16]	; (8004c90 <xTaskGetTickCount+0x18>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004c84:	687b      	ldr	r3, [r7, #4]
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	370c      	adds	r7, #12
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bc80      	pop	{r7}
 8004c8e:	4770      	bx	lr
 8004c90:	200013b4 	.word	0x200013b4

08004c94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b086      	sub	sp, #24
 8004c98:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c9e:	4b51      	ldr	r3, [pc, #324]	; (8004de4 <xTaskIncrementTick+0x150>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	f040 808e 	bne.w	8004dc4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004ca8:	4b4f      	ldr	r3, [pc, #316]	; (8004de8 <xTaskIncrementTick+0x154>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	3301      	adds	r3, #1
 8004cae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004cb0:	4a4d      	ldr	r2, [pc, #308]	; (8004de8 <xTaskIncrementTick+0x154>)
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d120      	bne.n	8004cfe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004cbc:	4b4b      	ldr	r3, [pc, #300]	; (8004dec <xTaskIncrementTick+0x158>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00a      	beq.n	8004cdc <xTaskIncrementTick+0x48>
	__asm volatile
 8004cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cca:	f383 8811 	msr	BASEPRI, r3
 8004cce:	f3bf 8f6f 	isb	sy
 8004cd2:	f3bf 8f4f 	dsb	sy
 8004cd6:	603b      	str	r3, [r7, #0]
}
 8004cd8:	bf00      	nop
 8004cda:	e7fe      	b.n	8004cda <xTaskIncrementTick+0x46>
 8004cdc:	4b43      	ldr	r3, [pc, #268]	; (8004dec <xTaskIncrementTick+0x158>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	60fb      	str	r3, [r7, #12]
 8004ce2:	4b43      	ldr	r3, [pc, #268]	; (8004df0 <xTaskIncrementTick+0x15c>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a41      	ldr	r2, [pc, #260]	; (8004dec <xTaskIncrementTick+0x158>)
 8004ce8:	6013      	str	r3, [r2, #0]
 8004cea:	4a41      	ldr	r2, [pc, #260]	; (8004df0 <xTaskIncrementTick+0x15c>)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6013      	str	r3, [r2, #0]
 8004cf0:	4b40      	ldr	r3, [pc, #256]	; (8004df4 <xTaskIncrementTick+0x160>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	4a3f      	ldr	r2, [pc, #252]	; (8004df4 <xTaskIncrementTick+0x160>)
 8004cf8:	6013      	str	r3, [r2, #0]
 8004cfa:	f000 fad3 	bl	80052a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004cfe:	4b3e      	ldr	r3, [pc, #248]	; (8004df8 <xTaskIncrementTick+0x164>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d34e      	bcc.n	8004da6 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d08:	4b38      	ldr	r3, [pc, #224]	; (8004dec <xTaskIncrementTick+0x158>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d101      	bne.n	8004d16 <xTaskIncrementTick+0x82>
 8004d12:	2301      	movs	r3, #1
 8004d14:	e000      	b.n	8004d18 <xTaskIncrementTick+0x84>
 8004d16:	2300      	movs	r3, #0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d004      	beq.n	8004d26 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d1c:	4b36      	ldr	r3, [pc, #216]	; (8004df8 <xTaskIncrementTick+0x164>)
 8004d1e:	f04f 32ff 	mov.w	r2, #4294967295
 8004d22:	601a      	str	r2, [r3, #0]
					break;
 8004d24:	e03f      	b.n	8004da6 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004d26:	4b31      	ldr	r3, [pc, #196]	; (8004dec <xTaskIncrementTick+0x158>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004d36:	693a      	ldr	r2, [r7, #16]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d203      	bcs.n	8004d46 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004d3e:	4a2e      	ldr	r2, [pc, #184]	; (8004df8 <xTaskIncrementTick+0x164>)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6013      	str	r3, [r2, #0]
						break;
 8004d44:	e02f      	b.n	8004da6 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	3304      	adds	r3, #4
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7fe ffdc 	bl	8003d08 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d004      	beq.n	8004d62 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	3318      	adds	r3, #24
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7fe ffd3 	bl	8003d08 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d66:	4b25      	ldr	r3, [pc, #148]	; (8004dfc <xTaskIncrementTick+0x168>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d903      	bls.n	8004d76 <xTaskIncrementTick+0xe2>
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d72:	4a22      	ldr	r2, [pc, #136]	; (8004dfc <xTaskIncrementTick+0x168>)
 8004d74:	6013      	str	r3, [r2, #0]
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	4413      	add	r3, r2
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	4a1f      	ldr	r2, [pc, #124]	; (8004e00 <xTaskIncrementTick+0x16c>)
 8004d84:	441a      	add	r2, r3
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	3304      	adds	r3, #4
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	4610      	mov	r0, r2
 8004d8e:	f7fe ff60 	bl	8003c52 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d96:	4b1b      	ldr	r3, [pc, #108]	; (8004e04 <xTaskIncrementTick+0x170>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d3b3      	bcc.n	8004d08 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004da0:	2301      	movs	r3, #1
 8004da2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004da4:	e7b0      	b.n	8004d08 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004da6:	4b17      	ldr	r3, [pc, #92]	; (8004e04 <xTaskIncrementTick+0x170>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dac:	4914      	ldr	r1, [pc, #80]	; (8004e00 <xTaskIncrementTick+0x16c>)
 8004dae:	4613      	mov	r3, r2
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	4413      	add	r3, r2
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	440b      	add	r3, r1
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d907      	bls.n	8004dce <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	617b      	str	r3, [r7, #20]
 8004dc2:	e004      	b.n	8004dce <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004dc4:	4b10      	ldr	r3, [pc, #64]	; (8004e08 <xTaskIncrementTick+0x174>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	3301      	adds	r3, #1
 8004dca:	4a0f      	ldr	r2, [pc, #60]	; (8004e08 <xTaskIncrementTick+0x174>)
 8004dcc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004dce:	4b0f      	ldr	r3, [pc, #60]	; (8004e0c <xTaskIncrementTick+0x178>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d001      	beq.n	8004dda <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004dda:	697b      	ldr	r3, [r7, #20]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3718      	adds	r7, #24
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	200013d8 	.word	0x200013d8
 8004de8:	200013b4 	.word	0x200013b4
 8004dec:	20001368 	.word	0x20001368
 8004df0:	2000136c 	.word	0x2000136c
 8004df4:	200013c8 	.word	0x200013c8
 8004df8:	200013d0 	.word	0x200013d0
 8004dfc:	200013b8 	.word	0x200013b8
 8004e00:	20000ee0 	.word	0x20000ee0
 8004e04:	20000edc 	.word	0x20000edc
 8004e08:	200013c0 	.word	0x200013c0
 8004e0c:	200013c4 	.word	0x200013c4

08004e10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004e10:	b480      	push	{r7}
 8004e12:	b085      	sub	sp, #20
 8004e14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004e16:	4b27      	ldr	r3, [pc, #156]	; (8004eb4 <vTaskSwitchContext+0xa4>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d003      	beq.n	8004e26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004e1e:	4b26      	ldr	r3, [pc, #152]	; (8004eb8 <vTaskSwitchContext+0xa8>)
 8004e20:	2201      	movs	r2, #1
 8004e22:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004e24:	e041      	b.n	8004eaa <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004e26:	4b24      	ldr	r3, [pc, #144]	; (8004eb8 <vTaskSwitchContext+0xa8>)
 8004e28:	2200      	movs	r2, #0
 8004e2a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004e2c:	4b23      	ldr	r3, [pc, #140]	; (8004ebc <vTaskSwitchContext+0xac>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	60fb      	str	r3, [r7, #12]
 8004e32:	e010      	b.n	8004e56 <vTaskSwitchContext+0x46>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10a      	bne.n	8004e50 <vTaskSwitchContext+0x40>
	__asm volatile
 8004e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3e:	f383 8811 	msr	BASEPRI, r3
 8004e42:	f3bf 8f6f 	isb	sy
 8004e46:	f3bf 8f4f 	dsb	sy
 8004e4a:	607b      	str	r3, [r7, #4]
}
 8004e4c:	bf00      	nop
 8004e4e:	e7fe      	b.n	8004e4e <vTaskSwitchContext+0x3e>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	3b01      	subs	r3, #1
 8004e54:	60fb      	str	r3, [r7, #12]
 8004e56:	491a      	ldr	r1, [pc, #104]	; (8004ec0 <vTaskSwitchContext+0xb0>)
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	4413      	add	r3, r2
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	440b      	add	r3, r1
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d0e4      	beq.n	8004e34 <vTaskSwitchContext+0x24>
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	4413      	add	r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	4a12      	ldr	r2, [pc, #72]	; (8004ec0 <vTaskSwitchContext+0xb0>)
 8004e76:	4413      	add	r3, r2
 8004e78:	60bb      	str	r3, [r7, #8]
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	685a      	ldr	r2, [r3, #4]
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	605a      	str	r2, [r3, #4]
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	3308      	adds	r3, #8
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d104      	bne.n	8004e9a <vTaskSwitchContext+0x8a>
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	685a      	ldr	r2, [r3, #4]
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	605a      	str	r2, [r3, #4]
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	4a08      	ldr	r2, [pc, #32]	; (8004ec4 <vTaskSwitchContext+0xb4>)
 8004ea2:	6013      	str	r3, [r2, #0]
 8004ea4:	4a05      	ldr	r2, [pc, #20]	; (8004ebc <vTaskSwitchContext+0xac>)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6013      	str	r3, [r2, #0]
}
 8004eaa:	bf00      	nop
 8004eac:	3714      	adds	r7, #20
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bc80      	pop	{r7}
 8004eb2:	4770      	bx	lr
 8004eb4:	200013d8 	.word	0x200013d8
 8004eb8:	200013c4 	.word	0x200013c4
 8004ebc:	200013b8 	.word	0x200013b8
 8004ec0:	20000ee0 	.word	0x20000ee0
 8004ec4:	20000edc 	.word	0x20000edc

08004ec8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d10a      	bne.n	8004eee <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004edc:	f383 8811 	msr	BASEPRI, r3
 8004ee0:	f3bf 8f6f 	isb	sy
 8004ee4:	f3bf 8f4f 	dsb	sy
 8004ee8:	60fb      	str	r3, [r7, #12]
}
 8004eea:	bf00      	nop
 8004eec:	e7fe      	b.n	8004eec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004eee:	4b07      	ldr	r3, [pc, #28]	; (8004f0c <vTaskPlaceOnEventList+0x44>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	3318      	adds	r3, #24
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f7fe fece 	bl	8003c98 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004efc:	2101      	movs	r1, #1
 8004efe:	6838      	ldr	r0, [r7, #0]
 8004f00:	f000 fa80 	bl	8005404 <prvAddCurrentTaskToDelayedList>
}
 8004f04:	bf00      	nop
 8004f06:	3710      	adds	r7, #16
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	20000edc 	.word	0x20000edc

08004f10 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b086      	sub	sp, #24
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d10a      	bne.n	8004f38 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f26:	f383 8811 	msr	BASEPRI, r3
 8004f2a:	f3bf 8f6f 	isb	sy
 8004f2e:	f3bf 8f4f 	dsb	sy
 8004f32:	617b      	str	r3, [r7, #20]
}
 8004f34:	bf00      	nop
 8004f36:	e7fe      	b.n	8004f36 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004f38:	4b0a      	ldr	r3, [pc, #40]	; (8004f64 <vTaskPlaceOnEventListRestricted+0x54>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	3318      	adds	r3, #24
 8004f3e:	4619      	mov	r1, r3
 8004f40:	68f8      	ldr	r0, [r7, #12]
 8004f42:	f7fe fe86 	bl	8003c52 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d002      	beq.n	8004f52 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8004f50:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004f52:	6879      	ldr	r1, [r7, #4]
 8004f54:	68b8      	ldr	r0, [r7, #8]
 8004f56:	f000 fa55 	bl	8005404 <prvAddCurrentTaskToDelayedList>
	}
 8004f5a:	bf00      	nop
 8004f5c:	3718      	adds	r7, #24
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	20000edc 	.word	0x20000edc

08004f68 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d10a      	bne.n	8004f94 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f82:	f383 8811 	msr	BASEPRI, r3
 8004f86:	f3bf 8f6f 	isb	sy
 8004f8a:	f3bf 8f4f 	dsb	sy
 8004f8e:	60fb      	str	r3, [r7, #12]
}
 8004f90:	bf00      	nop
 8004f92:	e7fe      	b.n	8004f92 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	3318      	adds	r3, #24
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f7fe feb5 	bl	8003d08 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f9e:	4b1e      	ldr	r3, [pc, #120]	; (8005018 <xTaskRemoveFromEventList+0xb0>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d11d      	bne.n	8004fe2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	3304      	adds	r3, #4
 8004faa:	4618      	mov	r0, r3
 8004fac:	f7fe feac 	bl	8003d08 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fb4:	4b19      	ldr	r3, [pc, #100]	; (800501c <xTaskRemoveFromEventList+0xb4>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d903      	bls.n	8004fc4 <xTaskRemoveFromEventList+0x5c>
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc0:	4a16      	ldr	r2, [pc, #88]	; (800501c <xTaskRemoveFromEventList+0xb4>)
 8004fc2:	6013      	str	r3, [r2, #0]
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fc8:	4613      	mov	r3, r2
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	4413      	add	r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	4a13      	ldr	r2, [pc, #76]	; (8005020 <xTaskRemoveFromEventList+0xb8>)
 8004fd2:	441a      	add	r2, r3
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	3304      	adds	r3, #4
 8004fd8:	4619      	mov	r1, r3
 8004fda:	4610      	mov	r0, r2
 8004fdc:	f7fe fe39 	bl	8003c52 <vListInsertEnd>
 8004fe0:	e005      	b.n	8004fee <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	3318      	adds	r3, #24
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	480e      	ldr	r0, [pc, #56]	; (8005024 <xTaskRemoveFromEventList+0xbc>)
 8004fea:	f7fe fe32 	bl	8003c52 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ff2:	4b0d      	ldr	r3, [pc, #52]	; (8005028 <xTaskRemoveFromEventList+0xc0>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d905      	bls.n	8005008 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005000:	4b0a      	ldr	r3, [pc, #40]	; (800502c <xTaskRemoveFromEventList+0xc4>)
 8005002:	2201      	movs	r2, #1
 8005004:	601a      	str	r2, [r3, #0]
 8005006:	e001      	b.n	800500c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005008:	2300      	movs	r3, #0
 800500a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800500c:	697b      	ldr	r3, [r7, #20]
}
 800500e:	4618      	mov	r0, r3
 8005010:	3718      	adds	r7, #24
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	200013d8 	.word	0x200013d8
 800501c:	200013b8 	.word	0x200013b8
 8005020:	20000ee0 	.word	0x20000ee0
 8005024:	20001370 	.word	0x20001370
 8005028:	20000edc 	.word	0x20000edc
 800502c:	200013c4 	.word	0x200013c4

08005030 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005038:	4b06      	ldr	r3, [pc, #24]	; (8005054 <vTaskInternalSetTimeOutState+0x24>)
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005040:	4b05      	ldr	r3, [pc, #20]	; (8005058 <vTaskInternalSetTimeOutState+0x28>)
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	605a      	str	r2, [r3, #4]
}
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	bc80      	pop	{r7}
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	200013c8 	.word	0x200013c8
 8005058:	200013b4 	.word	0x200013b4

0800505c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b088      	sub	sp, #32
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d10a      	bne.n	8005082 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800506c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005070:	f383 8811 	msr	BASEPRI, r3
 8005074:	f3bf 8f6f 	isb	sy
 8005078:	f3bf 8f4f 	dsb	sy
 800507c:	613b      	str	r3, [r7, #16]
}
 800507e:	bf00      	nop
 8005080:	e7fe      	b.n	8005080 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d10a      	bne.n	800509e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800508c:	f383 8811 	msr	BASEPRI, r3
 8005090:	f3bf 8f6f 	isb	sy
 8005094:	f3bf 8f4f 	dsb	sy
 8005098:	60fb      	str	r3, [r7, #12]
}
 800509a:	bf00      	nop
 800509c:	e7fe      	b.n	800509c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800509e:	f000 fe05 	bl	8005cac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80050a2:	4b1d      	ldr	r3, [pc, #116]	; (8005118 <xTaskCheckForTimeOut+0xbc>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	69ba      	ldr	r2, [r7, #24]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ba:	d102      	bne.n	80050c2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80050bc:	2300      	movs	r3, #0
 80050be:	61fb      	str	r3, [r7, #28]
 80050c0:	e023      	b.n	800510a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	4b15      	ldr	r3, [pc, #84]	; (800511c <xTaskCheckForTimeOut+0xc0>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d007      	beq.n	80050de <xTaskCheckForTimeOut+0x82>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	69ba      	ldr	r2, [r7, #24]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d302      	bcc.n	80050de <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80050d8:	2301      	movs	r3, #1
 80050da:	61fb      	str	r3, [r7, #28]
 80050dc:	e015      	b.n	800510a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d20b      	bcs.n	8005100 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	1ad2      	subs	r2, r2, r3
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f7ff ff9b 	bl	8005030 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80050fa:	2300      	movs	r3, #0
 80050fc:	61fb      	str	r3, [r7, #28]
 80050fe:	e004      	b.n	800510a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	2200      	movs	r2, #0
 8005104:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005106:	2301      	movs	r3, #1
 8005108:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800510a:	f000 fdff 	bl	8005d0c <vPortExitCritical>

	return xReturn;
 800510e:	69fb      	ldr	r3, [r7, #28]
}
 8005110:	4618      	mov	r0, r3
 8005112:	3720      	adds	r7, #32
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	200013b4 	.word	0x200013b4
 800511c:	200013c8 	.word	0x200013c8

08005120 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005120:	b480      	push	{r7}
 8005122:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005124:	4b03      	ldr	r3, [pc, #12]	; (8005134 <vTaskMissedYield+0x14>)
 8005126:	2201      	movs	r2, #1
 8005128:	601a      	str	r2, [r3, #0]
}
 800512a:	bf00      	nop
 800512c:	46bd      	mov	sp, r7
 800512e:	bc80      	pop	{r7}
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	200013c4 	.word	0x200013c4

08005138 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005140:	f000 f852 	bl	80051e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005144:	4b06      	ldr	r3, [pc, #24]	; (8005160 <prvIdleTask+0x28>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2b01      	cmp	r3, #1
 800514a:	d9f9      	bls.n	8005140 <prvIdleTask+0x8>
			{
				taskYIELD();
 800514c:	4b05      	ldr	r3, [pc, #20]	; (8005164 <prvIdleTask+0x2c>)
 800514e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005152:	601a      	str	r2, [r3, #0]
 8005154:	f3bf 8f4f 	dsb	sy
 8005158:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800515c:	e7f0      	b.n	8005140 <prvIdleTask+0x8>
 800515e:	bf00      	nop
 8005160:	20000ee0 	.word	0x20000ee0
 8005164:	e000ed04 	.word	0xe000ed04

08005168 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800516e:	2300      	movs	r3, #0
 8005170:	607b      	str	r3, [r7, #4]
 8005172:	e00c      	b.n	800518e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	4613      	mov	r3, r2
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	4413      	add	r3, r2
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	4a12      	ldr	r2, [pc, #72]	; (80051c8 <prvInitialiseTaskLists+0x60>)
 8005180:	4413      	add	r3, r2
 8005182:	4618      	mov	r0, r3
 8005184:	f7fe fd3a 	bl	8003bfc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	3301      	adds	r3, #1
 800518c:	607b      	str	r3, [r7, #4]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2b37      	cmp	r3, #55	; 0x37
 8005192:	d9ef      	bls.n	8005174 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005194:	480d      	ldr	r0, [pc, #52]	; (80051cc <prvInitialiseTaskLists+0x64>)
 8005196:	f7fe fd31 	bl	8003bfc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800519a:	480d      	ldr	r0, [pc, #52]	; (80051d0 <prvInitialiseTaskLists+0x68>)
 800519c:	f7fe fd2e 	bl	8003bfc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80051a0:	480c      	ldr	r0, [pc, #48]	; (80051d4 <prvInitialiseTaskLists+0x6c>)
 80051a2:	f7fe fd2b 	bl	8003bfc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80051a6:	480c      	ldr	r0, [pc, #48]	; (80051d8 <prvInitialiseTaskLists+0x70>)
 80051a8:	f7fe fd28 	bl	8003bfc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80051ac:	480b      	ldr	r0, [pc, #44]	; (80051dc <prvInitialiseTaskLists+0x74>)
 80051ae:	f7fe fd25 	bl	8003bfc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80051b2:	4b0b      	ldr	r3, [pc, #44]	; (80051e0 <prvInitialiseTaskLists+0x78>)
 80051b4:	4a05      	ldr	r2, [pc, #20]	; (80051cc <prvInitialiseTaskLists+0x64>)
 80051b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80051b8:	4b0a      	ldr	r3, [pc, #40]	; (80051e4 <prvInitialiseTaskLists+0x7c>)
 80051ba:	4a05      	ldr	r2, [pc, #20]	; (80051d0 <prvInitialiseTaskLists+0x68>)
 80051bc:	601a      	str	r2, [r3, #0]
}
 80051be:	bf00      	nop
 80051c0:	3708      	adds	r7, #8
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	20000ee0 	.word	0x20000ee0
 80051cc:	20001340 	.word	0x20001340
 80051d0:	20001354 	.word	0x20001354
 80051d4:	20001370 	.word	0x20001370
 80051d8:	20001384 	.word	0x20001384
 80051dc:	2000139c 	.word	0x2000139c
 80051e0:	20001368 	.word	0x20001368
 80051e4:	2000136c 	.word	0x2000136c

080051e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80051ee:	e019      	b.n	8005224 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80051f0:	f000 fd5c 	bl	8005cac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80051f4:	4b10      	ldr	r3, [pc, #64]	; (8005238 <prvCheckTasksWaitingTermination+0x50>)
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	3304      	adds	r3, #4
 8005200:	4618      	mov	r0, r3
 8005202:	f7fe fd81 	bl	8003d08 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005206:	4b0d      	ldr	r3, [pc, #52]	; (800523c <prvCheckTasksWaitingTermination+0x54>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	3b01      	subs	r3, #1
 800520c:	4a0b      	ldr	r2, [pc, #44]	; (800523c <prvCheckTasksWaitingTermination+0x54>)
 800520e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005210:	4b0b      	ldr	r3, [pc, #44]	; (8005240 <prvCheckTasksWaitingTermination+0x58>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	3b01      	subs	r3, #1
 8005216:	4a0a      	ldr	r2, [pc, #40]	; (8005240 <prvCheckTasksWaitingTermination+0x58>)
 8005218:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800521a:	f000 fd77 	bl	8005d0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 f810 	bl	8005244 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005224:	4b06      	ldr	r3, [pc, #24]	; (8005240 <prvCheckTasksWaitingTermination+0x58>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1e1      	bne.n	80051f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800522c:	bf00      	nop
 800522e:	bf00      	nop
 8005230:	3708      	adds	r7, #8
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	20001384 	.word	0x20001384
 800523c:	200013b0 	.word	0x200013b0
 8005240:	20001398 	.word	0x20001398

08005244 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005252:	2b00      	cmp	r3, #0
 8005254:	d108      	bne.n	8005268 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525a:	4618      	mov	r0, r3
 800525c:	f000 feea 	bl	8006034 <vPortFree>
				vPortFree( pxTCB );
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 fee7 	bl	8006034 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005266:	e018      	b.n	800529a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800526e:	2b01      	cmp	r3, #1
 8005270:	d103      	bne.n	800527a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 fede 	bl	8006034 <vPortFree>
	}
 8005278:	e00f      	b.n	800529a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005280:	2b02      	cmp	r3, #2
 8005282:	d00a      	beq.n	800529a <prvDeleteTCB+0x56>
	__asm volatile
 8005284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005288:	f383 8811 	msr	BASEPRI, r3
 800528c:	f3bf 8f6f 	isb	sy
 8005290:	f3bf 8f4f 	dsb	sy
 8005294:	60fb      	str	r3, [r7, #12]
}
 8005296:	bf00      	nop
 8005298:	e7fe      	b.n	8005298 <prvDeleteTCB+0x54>
	}
 800529a:	bf00      	nop
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
	...

080052a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052aa:	4b0e      	ldr	r3, [pc, #56]	; (80052e4 <prvResetNextTaskUnblockTime+0x40>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d101      	bne.n	80052b8 <prvResetNextTaskUnblockTime+0x14>
 80052b4:	2301      	movs	r3, #1
 80052b6:	e000      	b.n	80052ba <prvResetNextTaskUnblockTime+0x16>
 80052b8:	2300      	movs	r3, #0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d004      	beq.n	80052c8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80052be:	4b0a      	ldr	r3, [pc, #40]	; (80052e8 <prvResetNextTaskUnblockTime+0x44>)
 80052c0:	f04f 32ff 	mov.w	r2, #4294967295
 80052c4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80052c6:	e008      	b.n	80052da <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80052c8:	4b06      	ldr	r3, [pc, #24]	; (80052e4 <prvResetNextTaskUnblockTime+0x40>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	4a04      	ldr	r2, [pc, #16]	; (80052e8 <prvResetNextTaskUnblockTime+0x44>)
 80052d8:	6013      	str	r3, [r2, #0]
}
 80052da:	bf00      	nop
 80052dc:	370c      	adds	r7, #12
 80052de:	46bd      	mov	sp, r7
 80052e0:	bc80      	pop	{r7}
 80052e2:	4770      	bx	lr
 80052e4:	20001368 	.word	0x20001368
 80052e8:	200013d0 	.word	0x200013d0

080052ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80052f2:	4b0b      	ldr	r3, [pc, #44]	; (8005320 <xTaskGetSchedulerState+0x34>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d102      	bne.n	8005300 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80052fa:	2301      	movs	r3, #1
 80052fc:	607b      	str	r3, [r7, #4]
 80052fe:	e008      	b.n	8005312 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005300:	4b08      	ldr	r3, [pc, #32]	; (8005324 <xTaskGetSchedulerState+0x38>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d102      	bne.n	800530e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005308:	2302      	movs	r3, #2
 800530a:	607b      	str	r3, [r7, #4]
 800530c:	e001      	b.n	8005312 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800530e:	2300      	movs	r3, #0
 8005310:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005312:	687b      	ldr	r3, [r7, #4]
	}
 8005314:	4618      	mov	r0, r3
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	bc80      	pop	{r7}
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	200013bc 	.word	0x200013bc
 8005324:	200013d8 	.word	0x200013d8

08005328 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005328:	b580      	push	{r7, lr}
 800532a:	b086      	sub	sp, #24
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005334:	2300      	movs	r3, #0
 8005336:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d056      	beq.n	80053ec <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800533e:	4b2e      	ldr	r3, [pc, #184]	; (80053f8 <xTaskPriorityDisinherit+0xd0>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	429a      	cmp	r2, r3
 8005346:	d00a      	beq.n	800535e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800534c:	f383 8811 	msr	BASEPRI, r3
 8005350:	f3bf 8f6f 	isb	sy
 8005354:	f3bf 8f4f 	dsb	sy
 8005358:	60fb      	str	r3, [r7, #12]
}
 800535a:	bf00      	nop
 800535c:	e7fe      	b.n	800535c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005362:	2b00      	cmp	r3, #0
 8005364:	d10a      	bne.n	800537c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800536a:	f383 8811 	msr	BASEPRI, r3
 800536e:	f3bf 8f6f 	isb	sy
 8005372:	f3bf 8f4f 	dsb	sy
 8005376:	60bb      	str	r3, [r7, #8]
}
 8005378:	bf00      	nop
 800537a:	e7fe      	b.n	800537a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005380:	1e5a      	subs	r2, r3, #1
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800538e:	429a      	cmp	r2, r3
 8005390:	d02c      	beq.n	80053ec <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005396:	2b00      	cmp	r3, #0
 8005398:	d128      	bne.n	80053ec <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	3304      	adds	r3, #4
 800539e:	4618      	mov	r0, r3
 80053a0:	f7fe fcb2 	bl	8003d08 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053bc:	4b0f      	ldr	r3, [pc, #60]	; (80053fc <xTaskPriorityDisinherit+0xd4>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d903      	bls.n	80053cc <xTaskPriorityDisinherit+0xa4>
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c8:	4a0c      	ldr	r2, [pc, #48]	; (80053fc <xTaskPriorityDisinherit+0xd4>)
 80053ca:	6013      	str	r3, [r2, #0]
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053d0:	4613      	mov	r3, r2
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	4413      	add	r3, r2
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	4a09      	ldr	r2, [pc, #36]	; (8005400 <xTaskPriorityDisinherit+0xd8>)
 80053da:	441a      	add	r2, r3
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	3304      	adds	r3, #4
 80053e0:	4619      	mov	r1, r3
 80053e2:	4610      	mov	r0, r2
 80053e4:	f7fe fc35 	bl	8003c52 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80053e8:	2301      	movs	r3, #1
 80053ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80053ec:	697b      	ldr	r3, [r7, #20]
	}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3718      	adds	r7, #24
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	20000edc 	.word	0x20000edc
 80053fc:	200013b8 	.word	0x200013b8
 8005400:	20000ee0 	.word	0x20000ee0

08005404 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800540e:	4b21      	ldr	r3, [pc, #132]	; (8005494 <prvAddCurrentTaskToDelayedList+0x90>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005414:	4b20      	ldr	r3, [pc, #128]	; (8005498 <prvAddCurrentTaskToDelayedList+0x94>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	3304      	adds	r3, #4
 800541a:	4618      	mov	r0, r3
 800541c:	f7fe fc74 	bl	8003d08 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005426:	d10a      	bne.n	800543e <prvAddCurrentTaskToDelayedList+0x3a>
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d007      	beq.n	800543e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800542e:	4b1a      	ldr	r3, [pc, #104]	; (8005498 <prvAddCurrentTaskToDelayedList+0x94>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	3304      	adds	r3, #4
 8005434:	4619      	mov	r1, r3
 8005436:	4819      	ldr	r0, [pc, #100]	; (800549c <prvAddCurrentTaskToDelayedList+0x98>)
 8005438:	f7fe fc0b 	bl	8003c52 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800543c:	e026      	b.n	800548c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4413      	add	r3, r2
 8005444:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005446:	4b14      	ldr	r3, [pc, #80]	; (8005498 <prvAddCurrentTaskToDelayedList+0x94>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800544e:	68ba      	ldr	r2, [r7, #8]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	429a      	cmp	r2, r3
 8005454:	d209      	bcs.n	800546a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005456:	4b12      	ldr	r3, [pc, #72]	; (80054a0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	4b0f      	ldr	r3, [pc, #60]	; (8005498 <prvAddCurrentTaskToDelayedList+0x94>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	3304      	adds	r3, #4
 8005460:	4619      	mov	r1, r3
 8005462:	4610      	mov	r0, r2
 8005464:	f7fe fc18 	bl	8003c98 <vListInsert>
}
 8005468:	e010      	b.n	800548c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800546a:	4b0e      	ldr	r3, [pc, #56]	; (80054a4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	4b0a      	ldr	r3, [pc, #40]	; (8005498 <prvAddCurrentTaskToDelayedList+0x94>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	3304      	adds	r3, #4
 8005474:	4619      	mov	r1, r3
 8005476:	4610      	mov	r0, r2
 8005478:	f7fe fc0e 	bl	8003c98 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800547c:	4b0a      	ldr	r3, [pc, #40]	; (80054a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	429a      	cmp	r2, r3
 8005484:	d202      	bcs.n	800548c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005486:	4a08      	ldr	r2, [pc, #32]	; (80054a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	6013      	str	r3, [r2, #0]
}
 800548c:	bf00      	nop
 800548e:	3710      	adds	r7, #16
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}
 8005494:	200013b4 	.word	0x200013b4
 8005498:	20000edc 	.word	0x20000edc
 800549c:	2000139c 	.word	0x2000139c
 80054a0:	2000136c 	.word	0x2000136c
 80054a4:	20001368 	.word	0x20001368
 80054a8:	200013d0 	.word	0x200013d0

080054ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b08a      	sub	sp, #40	; 0x28
 80054b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80054b2:	2300      	movs	r3, #0
 80054b4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80054b6:	f000 facb 	bl	8005a50 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80054ba:	4b1c      	ldr	r3, [pc, #112]	; (800552c <xTimerCreateTimerTask+0x80>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d021      	beq.n	8005506 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80054c2:	2300      	movs	r3, #0
 80054c4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80054c6:	2300      	movs	r3, #0
 80054c8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80054ca:	1d3a      	adds	r2, r7, #4
 80054cc:	f107 0108 	add.w	r1, r7, #8
 80054d0:	f107 030c 	add.w	r3, r7, #12
 80054d4:	4618      	mov	r0, r3
 80054d6:	f7fe fb77 	bl	8003bc8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80054da:	6879      	ldr	r1, [r7, #4]
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	9202      	str	r2, [sp, #8]
 80054e2:	9301      	str	r3, [sp, #4]
 80054e4:	2302      	movs	r3, #2
 80054e6:	9300      	str	r3, [sp, #0]
 80054e8:	2300      	movs	r3, #0
 80054ea:	460a      	mov	r2, r1
 80054ec:	4910      	ldr	r1, [pc, #64]	; (8005530 <xTimerCreateTimerTask+0x84>)
 80054ee:	4811      	ldr	r0, [pc, #68]	; (8005534 <xTimerCreateTimerTask+0x88>)
 80054f0:	f7ff f918 	bl	8004724 <xTaskCreateStatic>
 80054f4:	4603      	mov	r3, r0
 80054f6:	4a10      	ldr	r2, [pc, #64]	; (8005538 <xTimerCreateTimerTask+0x8c>)
 80054f8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80054fa:	4b0f      	ldr	r3, [pc, #60]	; (8005538 <xTimerCreateTimerTask+0x8c>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d001      	beq.n	8005506 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005502:	2301      	movs	r3, #1
 8005504:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d10a      	bne.n	8005522 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800550c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005510:	f383 8811 	msr	BASEPRI, r3
 8005514:	f3bf 8f6f 	isb	sy
 8005518:	f3bf 8f4f 	dsb	sy
 800551c:	613b      	str	r3, [r7, #16]
}
 800551e:	bf00      	nop
 8005520:	e7fe      	b.n	8005520 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005522:	697b      	ldr	r3, [r7, #20]
}
 8005524:	4618      	mov	r0, r3
 8005526:	3718      	adds	r7, #24
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}
 800552c:	2000140c 	.word	0x2000140c
 8005530:	08006c3c 	.word	0x08006c3c
 8005534:	08005659 	.word	0x08005659
 8005538:	20001410 	.word	0x20001410

0800553c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b08a      	sub	sp, #40	; 0x28
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
 8005548:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800554a:	2300      	movs	r3, #0
 800554c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d10a      	bne.n	800556a <xTimerGenericCommand+0x2e>
	__asm volatile
 8005554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005558:	f383 8811 	msr	BASEPRI, r3
 800555c:	f3bf 8f6f 	isb	sy
 8005560:	f3bf 8f4f 	dsb	sy
 8005564:	623b      	str	r3, [r7, #32]
}
 8005566:	bf00      	nop
 8005568:	e7fe      	b.n	8005568 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800556a:	4b1a      	ldr	r3, [pc, #104]	; (80055d4 <xTimerGenericCommand+0x98>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d02a      	beq.n	80055c8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	2b05      	cmp	r3, #5
 8005582:	dc18      	bgt.n	80055b6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005584:	f7ff feb2 	bl	80052ec <xTaskGetSchedulerState>
 8005588:	4603      	mov	r3, r0
 800558a:	2b02      	cmp	r3, #2
 800558c:	d109      	bne.n	80055a2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800558e:	4b11      	ldr	r3, [pc, #68]	; (80055d4 <xTimerGenericCommand+0x98>)
 8005590:	6818      	ldr	r0, [r3, #0]
 8005592:	f107 0110 	add.w	r1, r7, #16
 8005596:	2300      	movs	r3, #0
 8005598:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800559a:	f7fe fce1 	bl	8003f60 <xQueueGenericSend>
 800559e:	6278      	str	r0, [r7, #36]	; 0x24
 80055a0:	e012      	b.n	80055c8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80055a2:	4b0c      	ldr	r3, [pc, #48]	; (80055d4 <xTimerGenericCommand+0x98>)
 80055a4:	6818      	ldr	r0, [r3, #0]
 80055a6:	f107 0110 	add.w	r1, r7, #16
 80055aa:	2300      	movs	r3, #0
 80055ac:	2200      	movs	r2, #0
 80055ae:	f7fe fcd7 	bl	8003f60 <xQueueGenericSend>
 80055b2:	6278      	str	r0, [r7, #36]	; 0x24
 80055b4:	e008      	b.n	80055c8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80055b6:	4b07      	ldr	r3, [pc, #28]	; (80055d4 <xTimerGenericCommand+0x98>)
 80055b8:	6818      	ldr	r0, [r3, #0]
 80055ba:	f107 0110 	add.w	r1, r7, #16
 80055be:	2300      	movs	r3, #0
 80055c0:	683a      	ldr	r2, [r7, #0]
 80055c2:	f7fe fdcb 	bl	800415c <xQueueGenericSendFromISR>
 80055c6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80055c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3728      	adds	r7, #40	; 0x28
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	2000140c 	.word	0x2000140c

080055d8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b088      	sub	sp, #32
 80055dc:	af02      	add	r7, sp, #8
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80055e2:	4b1c      	ldr	r3, [pc, #112]	; (8005654 <prvProcessExpiredTimer+0x7c>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	3304      	adds	r3, #4
 80055f0:	4618      	mov	r0, r3
 80055f2:	f7fe fb89 	bl	8003d08 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	69db      	ldr	r3, [r3, #28]
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d122      	bne.n	8005644 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	699a      	ldr	r2, [r3, #24]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	18d1      	adds	r1, r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	683a      	ldr	r2, [r7, #0]
 800560a:	6978      	ldr	r0, [r7, #20]
 800560c:	f000 f8c8 	bl	80057a0 <prvInsertTimerInActiveList>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d016      	beq.n	8005644 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005616:	2300      	movs	r3, #0
 8005618:	9300      	str	r3, [sp, #0]
 800561a:	2300      	movs	r3, #0
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	2100      	movs	r1, #0
 8005620:	6978      	ldr	r0, [r7, #20]
 8005622:	f7ff ff8b 	bl	800553c <xTimerGenericCommand>
 8005626:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d10a      	bne.n	8005644 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800562e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005632:	f383 8811 	msr	BASEPRI, r3
 8005636:	f3bf 8f6f 	isb	sy
 800563a:	f3bf 8f4f 	dsb	sy
 800563e:	60fb      	str	r3, [r7, #12]
}
 8005640:	bf00      	nop
 8005642:	e7fe      	b.n	8005642 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005648:	6978      	ldr	r0, [r7, #20]
 800564a:	4798      	blx	r3
}
 800564c:	bf00      	nop
 800564e:	3718      	adds	r7, #24
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}
 8005654:	20001404 	.word	0x20001404

08005658 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005660:	f107 0308 	add.w	r3, r7, #8
 8005664:	4618      	mov	r0, r3
 8005666:	f000 f857 	bl	8005718 <prvGetNextExpireTime>
 800566a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	4619      	mov	r1, r3
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f000 f803 	bl	800567c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005676:	f000 f8d5 	bl	8005824 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800567a:	e7f1      	b.n	8005660 <prvTimerTask+0x8>

0800567c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005686:	f7ff fa4b 	bl	8004b20 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800568a:	f107 0308 	add.w	r3, r7, #8
 800568e:	4618      	mov	r0, r3
 8005690:	f000 f866 	bl	8005760 <prvSampleTimeNow>
 8005694:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d130      	bne.n	80056fe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d10a      	bne.n	80056b8 <prvProcessTimerOrBlockTask+0x3c>
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d806      	bhi.n	80056b8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80056aa:	f7ff fa47 	bl	8004b3c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80056ae:	68f9      	ldr	r1, [r7, #12]
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f7ff ff91 	bl	80055d8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80056b6:	e024      	b.n	8005702 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d008      	beq.n	80056d0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80056be:	4b13      	ldr	r3, [pc, #76]	; (800570c <prvProcessTimerOrBlockTask+0x90>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	bf0c      	ite	eq
 80056c8:	2301      	moveq	r3, #1
 80056ca:	2300      	movne	r3, #0
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80056d0:	4b0f      	ldr	r3, [pc, #60]	; (8005710 <prvProcessTimerOrBlockTask+0x94>)
 80056d2:	6818      	ldr	r0, [r3, #0]
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	683a      	ldr	r2, [r7, #0]
 80056dc:	4619      	mov	r1, r3
 80056de:	f7fe ffed 	bl	80046bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80056e2:	f7ff fa2b 	bl	8004b3c <xTaskResumeAll>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d10a      	bne.n	8005702 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80056ec:	4b09      	ldr	r3, [pc, #36]	; (8005714 <prvProcessTimerOrBlockTask+0x98>)
 80056ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056f2:	601a      	str	r2, [r3, #0]
 80056f4:	f3bf 8f4f 	dsb	sy
 80056f8:	f3bf 8f6f 	isb	sy
}
 80056fc:	e001      	b.n	8005702 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80056fe:	f7ff fa1d 	bl	8004b3c <xTaskResumeAll>
}
 8005702:	bf00      	nop
 8005704:	3710      	adds	r7, #16
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	20001408 	.word	0x20001408
 8005710:	2000140c 	.word	0x2000140c
 8005714:	e000ed04 	.word	0xe000ed04

08005718 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005720:	4b0e      	ldr	r3, [pc, #56]	; (800575c <prvGetNextExpireTime+0x44>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2b00      	cmp	r3, #0
 8005728:	bf0c      	ite	eq
 800572a:	2301      	moveq	r3, #1
 800572c:	2300      	movne	r3, #0
 800572e:	b2db      	uxtb	r3, r3
 8005730:	461a      	mov	r2, r3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d105      	bne.n	800574a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800573e:	4b07      	ldr	r3, [pc, #28]	; (800575c <prvGetNextExpireTime+0x44>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	60fb      	str	r3, [r7, #12]
 8005748:	e001      	b.n	800574e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800574a:	2300      	movs	r3, #0
 800574c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800574e:	68fb      	ldr	r3, [r7, #12]
}
 8005750:	4618      	mov	r0, r3
 8005752:	3714      	adds	r7, #20
 8005754:	46bd      	mov	sp, r7
 8005756:	bc80      	pop	{r7}
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	20001404 	.word	0x20001404

08005760 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005768:	f7ff fa86 	bl	8004c78 <xTaskGetTickCount>
 800576c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800576e:	4b0b      	ldr	r3, [pc, #44]	; (800579c <prvSampleTimeNow+0x3c>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	429a      	cmp	r2, r3
 8005776:	d205      	bcs.n	8005784 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005778:	f000 f908 	bl	800598c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	601a      	str	r2, [r3, #0]
 8005782:	e002      	b.n	800578a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800578a:	4a04      	ldr	r2, [pc, #16]	; (800579c <prvSampleTimeNow+0x3c>)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005790:	68fb      	ldr	r3, [r7, #12]
}
 8005792:	4618      	mov	r0, r3
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	20001414 	.word	0x20001414

080057a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b086      	sub	sp, #24
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	607a      	str	r2, [r7, #4]
 80057ac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80057ae:	2300      	movs	r3, #0
 80057b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	68ba      	ldr	r2, [r7, #8]
 80057b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80057be:	68ba      	ldr	r2, [r7, #8]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d812      	bhi.n	80057ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	1ad2      	subs	r2, r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	699b      	ldr	r3, [r3, #24]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d302      	bcc.n	80057da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80057d4:	2301      	movs	r3, #1
 80057d6:	617b      	str	r3, [r7, #20]
 80057d8:	e01b      	b.n	8005812 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80057da:	4b10      	ldr	r3, [pc, #64]	; (800581c <prvInsertTimerInActiveList+0x7c>)
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	3304      	adds	r3, #4
 80057e2:	4619      	mov	r1, r3
 80057e4:	4610      	mov	r0, r2
 80057e6:	f7fe fa57 	bl	8003c98 <vListInsert>
 80057ea:	e012      	b.n	8005812 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d206      	bcs.n	8005802 <prvInsertTimerInActiveList+0x62>
 80057f4:	68ba      	ldr	r2, [r7, #8]
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d302      	bcc.n	8005802 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80057fc:	2301      	movs	r3, #1
 80057fe:	617b      	str	r3, [r7, #20]
 8005800:	e007      	b.n	8005812 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005802:	4b07      	ldr	r3, [pc, #28]	; (8005820 <prvInsertTimerInActiveList+0x80>)
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	3304      	adds	r3, #4
 800580a:	4619      	mov	r1, r3
 800580c:	4610      	mov	r0, r2
 800580e:	f7fe fa43 	bl	8003c98 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005812:	697b      	ldr	r3, [r7, #20]
}
 8005814:	4618      	mov	r0, r3
 8005816:	3718      	adds	r7, #24
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}
 800581c:	20001408 	.word	0x20001408
 8005820:	20001404 	.word	0x20001404

08005824 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b08e      	sub	sp, #56	; 0x38
 8005828:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800582a:	e09d      	b.n	8005968 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	da18      	bge.n	8005864 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005832:	1d3b      	adds	r3, r7, #4
 8005834:	3304      	adds	r3, #4
 8005836:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800583a:	2b00      	cmp	r3, #0
 800583c:	d10a      	bne.n	8005854 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800583e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005842:	f383 8811 	msr	BASEPRI, r3
 8005846:	f3bf 8f6f 	isb	sy
 800584a:	f3bf 8f4f 	dsb	sy
 800584e:	61fb      	str	r3, [r7, #28]
}
 8005850:	bf00      	nop
 8005852:	e7fe      	b.n	8005852 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800585a:	6850      	ldr	r0, [r2, #4]
 800585c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800585e:	6892      	ldr	r2, [r2, #8]
 8005860:	4611      	mov	r1, r2
 8005862:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2b00      	cmp	r3, #0
 8005868:	db7e      	blt.n	8005968 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800586e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d004      	beq.n	8005880 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005878:	3304      	adds	r3, #4
 800587a:	4618      	mov	r0, r3
 800587c:	f7fe fa44 	bl	8003d08 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005880:	463b      	mov	r3, r7
 8005882:	4618      	mov	r0, r3
 8005884:	f7ff ff6c 	bl	8005760 <prvSampleTimeNow>
 8005888:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2b09      	cmp	r3, #9
 800588e:	d86a      	bhi.n	8005966 <prvProcessReceivedCommands+0x142>
 8005890:	a201      	add	r2, pc, #4	; (adr r2, 8005898 <prvProcessReceivedCommands+0x74>)
 8005892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005896:	bf00      	nop
 8005898:	080058c1 	.word	0x080058c1
 800589c:	080058c1 	.word	0x080058c1
 80058a0:	080058c1 	.word	0x080058c1
 80058a4:	08005969 	.word	0x08005969
 80058a8:	0800591d 	.word	0x0800591d
 80058ac:	08005955 	.word	0x08005955
 80058b0:	080058c1 	.word	0x080058c1
 80058b4:	080058c1 	.word	0x080058c1
 80058b8:	08005969 	.word	0x08005969
 80058bc:	0800591d 	.word	0x0800591d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80058c0:	68ba      	ldr	r2, [r7, #8]
 80058c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	18d1      	adds	r1, r2, r3
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058ce:	f7ff ff67 	bl	80057a0 <prvInsertTimerInActiveList>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d047      	beq.n	8005968 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80058d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058de:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80058e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e2:	69db      	ldr	r3, [r3, #28]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d13f      	bne.n	8005968 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80058e8:	68ba      	ldr	r2, [r7, #8]
 80058ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ec:	699b      	ldr	r3, [r3, #24]
 80058ee:	441a      	add	r2, r3
 80058f0:	2300      	movs	r3, #0
 80058f2:	9300      	str	r3, [sp, #0]
 80058f4:	2300      	movs	r3, #0
 80058f6:	2100      	movs	r1, #0
 80058f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058fa:	f7ff fe1f 	bl	800553c <xTimerGenericCommand>
 80058fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005900:	6a3b      	ldr	r3, [r7, #32]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d130      	bne.n	8005968 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8005906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800590a:	f383 8811 	msr	BASEPRI, r3
 800590e:	f3bf 8f6f 	isb	sy
 8005912:	f3bf 8f4f 	dsb	sy
 8005916:	61bb      	str	r3, [r7, #24]
}
 8005918:	bf00      	nop
 800591a:	e7fe      	b.n	800591a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800591c:	68ba      	ldr	r2, [r7, #8]
 800591e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005920:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d10a      	bne.n	8005940 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800592a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592e:	f383 8811 	msr	BASEPRI, r3
 8005932:	f3bf 8f6f 	isb	sy
 8005936:	f3bf 8f4f 	dsb	sy
 800593a:	617b      	str	r3, [r7, #20]
}
 800593c:	bf00      	nop
 800593e:	e7fe      	b.n	800593e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005942:	699a      	ldr	r2, [r3, #24]
 8005944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005946:	18d1      	adds	r1, r2, r3
 8005948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800594c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800594e:	f7ff ff27 	bl	80057a0 <prvInsertTimerInActiveList>
					break;
 8005952:	e009      	b.n	8005968 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005956:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800595a:	2b00      	cmp	r3, #0
 800595c:	d104      	bne.n	8005968 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800595e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005960:	f000 fb68 	bl	8006034 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005964:	e000      	b.n	8005968 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8005966:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005968:	4b07      	ldr	r3, [pc, #28]	; (8005988 <prvProcessReceivedCommands+0x164>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	1d39      	adds	r1, r7, #4
 800596e:	2200      	movs	r2, #0
 8005970:	4618      	mov	r0, r3
 8005972:	f7fe fc8b 	bl	800428c <xQueueReceive>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	f47f af57 	bne.w	800582c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800597e:	bf00      	nop
 8005980:	bf00      	nop
 8005982:	3730      	adds	r7, #48	; 0x30
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}
 8005988:	2000140c 	.word	0x2000140c

0800598c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b088      	sub	sp, #32
 8005990:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005992:	e045      	b.n	8005a20 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005994:	4b2c      	ldr	r3, [pc, #176]	; (8005a48 <prvSwitchTimerLists+0xbc>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800599e:	4b2a      	ldr	r3, [pc, #168]	; (8005a48 <prvSwitchTimerLists+0xbc>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	3304      	adds	r3, #4
 80059ac:	4618      	mov	r0, r3
 80059ae:	f7fe f9ab 	bl	8003d08 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b6:	68f8      	ldr	r0, [r7, #12]
 80059b8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	69db      	ldr	r3, [r3, #28]
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d12e      	bne.n	8005a20 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	693a      	ldr	r2, [r7, #16]
 80059c8:	4413      	add	r3, r2
 80059ca:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80059cc:	68ba      	ldr	r2, [r7, #8]
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d90e      	bls.n	80059f2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	68ba      	ldr	r2, [r7, #8]
 80059d8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80059e0:	4b19      	ldr	r3, [pc, #100]	; (8005a48 <prvSwitchTimerLists+0xbc>)
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	3304      	adds	r3, #4
 80059e8:	4619      	mov	r1, r3
 80059ea:	4610      	mov	r0, r2
 80059ec:	f7fe f954 	bl	8003c98 <vListInsert>
 80059f0:	e016      	b.n	8005a20 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80059f2:	2300      	movs	r3, #0
 80059f4:	9300      	str	r3, [sp, #0]
 80059f6:	2300      	movs	r3, #0
 80059f8:	693a      	ldr	r2, [r7, #16]
 80059fa:	2100      	movs	r1, #0
 80059fc:	68f8      	ldr	r0, [r7, #12]
 80059fe:	f7ff fd9d 	bl	800553c <xTimerGenericCommand>
 8005a02:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d10a      	bne.n	8005a20 <prvSwitchTimerLists+0x94>
	__asm volatile
 8005a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a0e:	f383 8811 	msr	BASEPRI, r3
 8005a12:	f3bf 8f6f 	isb	sy
 8005a16:	f3bf 8f4f 	dsb	sy
 8005a1a:	603b      	str	r3, [r7, #0]
}
 8005a1c:	bf00      	nop
 8005a1e:	e7fe      	b.n	8005a1e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005a20:	4b09      	ldr	r3, [pc, #36]	; (8005a48 <prvSwitchTimerLists+0xbc>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1b4      	bne.n	8005994 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005a2a:	4b07      	ldr	r3, [pc, #28]	; (8005a48 <prvSwitchTimerLists+0xbc>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005a30:	4b06      	ldr	r3, [pc, #24]	; (8005a4c <prvSwitchTimerLists+0xc0>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a04      	ldr	r2, [pc, #16]	; (8005a48 <prvSwitchTimerLists+0xbc>)
 8005a36:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005a38:	4a04      	ldr	r2, [pc, #16]	; (8005a4c <prvSwitchTimerLists+0xc0>)
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	6013      	str	r3, [r2, #0]
}
 8005a3e:	bf00      	nop
 8005a40:	3718      	adds	r7, #24
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	20001404 	.word	0x20001404
 8005a4c:	20001408 	.word	0x20001408

08005a50 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b082      	sub	sp, #8
 8005a54:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005a56:	f000 f929 	bl	8005cac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005a5a:	4b15      	ldr	r3, [pc, #84]	; (8005ab0 <prvCheckForValidListAndQueue+0x60>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d120      	bne.n	8005aa4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005a62:	4814      	ldr	r0, [pc, #80]	; (8005ab4 <prvCheckForValidListAndQueue+0x64>)
 8005a64:	f7fe f8ca 	bl	8003bfc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005a68:	4813      	ldr	r0, [pc, #76]	; (8005ab8 <prvCheckForValidListAndQueue+0x68>)
 8005a6a:	f7fe f8c7 	bl	8003bfc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005a6e:	4b13      	ldr	r3, [pc, #76]	; (8005abc <prvCheckForValidListAndQueue+0x6c>)
 8005a70:	4a10      	ldr	r2, [pc, #64]	; (8005ab4 <prvCheckForValidListAndQueue+0x64>)
 8005a72:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005a74:	4b12      	ldr	r3, [pc, #72]	; (8005ac0 <prvCheckForValidListAndQueue+0x70>)
 8005a76:	4a10      	ldr	r2, [pc, #64]	; (8005ab8 <prvCheckForValidListAndQueue+0x68>)
 8005a78:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	9300      	str	r3, [sp, #0]
 8005a7e:	4b11      	ldr	r3, [pc, #68]	; (8005ac4 <prvCheckForValidListAndQueue+0x74>)
 8005a80:	4a11      	ldr	r2, [pc, #68]	; (8005ac8 <prvCheckForValidListAndQueue+0x78>)
 8005a82:	2110      	movs	r1, #16
 8005a84:	200a      	movs	r0, #10
 8005a86:	f7fe f9d1 	bl	8003e2c <xQueueGenericCreateStatic>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	4a08      	ldr	r2, [pc, #32]	; (8005ab0 <prvCheckForValidListAndQueue+0x60>)
 8005a8e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005a90:	4b07      	ldr	r3, [pc, #28]	; (8005ab0 <prvCheckForValidListAndQueue+0x60>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d005      	beq.n	8005aa4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005a98:	4b05      	ldr	r3, [pc, #20]	; (8005ab0 <prvCheckForValidListAndQueue+0x60>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	490b      	ldr	r1, [pc, #44]	; (8005acc <prvCheckForValidListAndQueue+0x7c>)
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7fe fde4 	bl	800466c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005aa4:	f000 f932 	bl	8005d0c <vPortExitCritical>
}
 8005aa8:	bf00      	nop
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	2000140c 	.word	0x2000140c
 8005ab4:	200013dc 	.word	0x200013dc
 8005ab8:	200013f0 	.word	0x200013f0
 8005abc:	20001404 	.word	0x20001404
 8005ac0:	20001408 	.word	0x20001408
 8005ac4:	200014b8 	.word	0x200014b8
 8005ac8:	20001418 	.word	0x20001418
 8005acc:	08006c44 	.word	0x08006c44

08005ad0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b085      	sub	sp, #20
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	3b04      	subs	r3, #4
 8005ae0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005ae8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	3b04      	subs	r3, #4
 8005aee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	f023 0201 	bic.w	r2, r3, #1
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	3b04      	subs	r3, #4
 8005afe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005b00:	4a08      	ldr	r2, [pc, #32]	; (8005b24 <pxPortInitialiseStack+0x54>)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	3b14      	subs	r3, #20
 8005b0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	3b20      	subs	r3, #32
 8005b16:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005b18:	68fb      	ldr	r3, [r7, #12]
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3714      	adds	r7, #20
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bc80      	pop	{r7}
 8005b22:	4770      	bx	lr
 8005b24:	08005b29 	.word	0x08005b29

08005b28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b085      	sub	sp, #20
 8005b2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005b32:	4b12      	ldr	r3, [pc, #72]	; (8005b7c <prvTaskExitError+0x54>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b3a:	d00a      	beq.n	8005b52 <prvTaskExitError+0x2a>
	__asm volatile
 8005b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b40:	f383 8811 	msr	BASEPRI, r3
 8005b44:	f3bf 8f6f 	isb	sy
 8005b48:	f3bf 8f4f 	dsb	sy
 8005b4c:	60fb      	str	r3, [r7, #12]
}
 8005b4e:	bf00      	nop
 8005b50:	e7fe      	b.n	8005b50 <prvTaskExitError+0x28>
	__asm volatile
 8005b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b56:	f383 8811 	msr	BASEPRI, r3
 8005b5a:	f3bf 8f6f 	isb	sy
 8005b5e:	f3bf 8f4f 	dsb	sy
 8005b62:	60bb      	str	r3, [r7, #8]
}
 8005b64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005b66:	bf00      	nop
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d0fc      	beq.n	8005b68 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005b6e:	bf00      	nop
 8005b70:	bf00      	nop
 8005b72:	3714      	adds	r7, #20
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bc80      	pop	{r7}
 8005b78:	4770      	bx	lr
 8005b7a:	bf00      	nop
 8005b7c:	2000000c 	.word	0x2000000c

08005b80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005b80:	4b07      	ldr	r3, [pc, #28]	; (8005ba0 <pxCurrentTCBConst2>)
 8005b82:	6819      	ldr	r1, [r3, #0]
 8005b84:	6808      	ldr	r0, [r1, #0]
 8005b86:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005b8a:	f380 8809 	msr	PSP, r0
 8005b8e:	f3bf 8f6f 	isb	sy
 8005b92:	f04f 0000 	mov.w	r0, #0
 8005b96:	f380 8811 	msr	BASEPRI, r0
 8005b9a:	f04e 0e0d 	orr.w	lr, lr, #13
 8005b9e:	4770      	bx	lr

08005ba0 <pxCurrentTCBConst2>:
 8005ba0:	20000edc 	.word	0x20000edc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005ba4:	bf00      	nop
 8005ba6:	bf00      	nop

08005ba8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005ba8:	4806      	ldr	r0, [pc, #24]	; (8005bc4 <prvPortStartFirstTask+0x1c>)
 8005baa:	6800      	ldr	r0, [r0, #0]
 8005bac:	6800      	ldr	r0, [r0, #0]
 8005bae:	f380 8808 	msr	MSP, r0
 8005bb2:	b662      	cpsie	i
 8005bb4:	b661      	cpsie	f
 8005bb6:	f3bf 8f4f 	dsb	sy
 8005bba:	f3bf 8f6f 	isb	sy
 8005bbe:	df00      	svc	0
 8005bc0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005bc2:	bf00      	nop
 8005bc4:	e000ed08 	.word	0xe000ed08

08005bc8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005bce:	4b32      	ldr	r3, [pc, #200]	; (8005c98 <xPortStartScheduler+0xd0>)
 8005bd0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	22ff      	movs	r2, #255	; 0xff
 8005bde:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005be8:	78fb      	ldrb	r3, [r7, #3]
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005bf0:	b2da      	uxtb	r2, r3
 8005bf2:	4b2a      	ldr	r3, [pc, #168]	; (8005c9c <xPortStartScheduler+0xd4>)
 8005bf4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005bf6:	4b2a      	ldr	r3, [pc, #168]	; (8005ca0 <xPortStartScheduler+0xd8>)
 8005bf8:	2207      	movs	r2, #7
 8005bfa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005bfc:	e009      	b.n	8005c12 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005bfe:	4b28      	ldr	r3, [pc, #160]	; (8005ca0 <xPortStartScheduler+0xd8>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	3b01      	subs	r3, #1
 8005c04:	4a26      	ldr	r2, [pc, #152]	; (8005ca0 <xPortStartScheduler+0xd8>)
 8005c06:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005c08:	78fb      	ldrb	r3, [r7, #3]
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	005b      	lsls	r3, r3, #1
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c12:	78fb      	ldrb	r3, [r7, #3]
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c1a:	2b80      	cmp	r3, #128	; 0x80
 8005c1c:	d0ef      	beq.n	8005bfe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005c1e:	4b20      	ldr	r3, [pc, #128]	; (8005ca0 <xPortStartScheduler+0xd8>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f1c3 0307 	rsb	r3, r3, #7
 8005c26:	2b04      	cmp	r3, #4
 8005c28:	d00a      	beq.n	8005c40 <xPortStartScheduler+0x78>
	__asm volatile
 8005c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c2e:	f383 8811 	msr	BASEPRI, r3
 8005c32:	f3bf 8f6f 	isb	sy
 8005c36:	f3bf 8f4f 	dsb	sy
 8005c3a:	60bb      	str	r3, [r7, #8]
}
 8005c3c:	bf00      	nop
 8005c3e:	e7fe      	b.n	8005c3e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005c40:	4b17      	ldr	r3, [pc, #92]	; (8005ca0 <xPortStartScheduler+0xd8>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	021b      	lsls	r3, r3, #8
 8005c46:	4a16      	ldr	r2, [pc, #88]	; (8005ca0 <xPortStartScheduler+0xd8>)
 8005c48:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005c4a:	4b15      	ldr	r3, [pc, #84]	; (8005ca0 <xPortStartScheduler+0xd8>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c52:	4a13      	ldr	r2, [pc, #76]	; (8005ca0 <xPortStartScheduler+0xd8>)
 8005c54:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	b2da      	uxtb	r2, r3
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005c5e:	4b11      	ldr	r3, [pc, #68]	; (8005ca4 <xPortStartScheduler+0xdc>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a10      	ldr	r2, [pc, #64]	; (8005ca4 <xPortStartScheduler+0xdc>)
 8005c64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c68:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005c6a:	4b0e      	ldr	r3, [pc, #56]	; (8005ca4 <xPortStartScheduler+0xdc>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a0d      	ldr	r2, [pc, #52]	; (8005ca4 <xPortStartScheduler+0xdc>)
 8005c70:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005c74:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005c76:	f000 f8b9 	bl	8005dec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005c7a:	4b0b      	ldr	r3, [pc, #44]	; (8005ca8 <xPortStartScheduler+0xe0>)
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005c80:	f7ff ff92 	bl	8005ba8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005c84:	f7ff f8c4 	bl	8004e10 <vTaskSwitchContext>
	prvTaskExitError();
 8005c88:	f7ff ff4e 	bl	8005b28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3710      	adds	r7, #16
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	e000e400 	.word	0xe000e400
 8005c9c:	20001508 	.word	0x20001508
 8005ca0:	2000150c 	.word	0x2000150c
 8005ca4:	e000ed20 	.word	0xe000ed20
 8005ca8:	2000000c 	.word	0x2000000c

08005cac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
	__asm volatile
 8005cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb6:	f383 8811 	msr	BASEPRI, r3
 8005cba:	f3bf 8f6f 	isb	sy
 8005cbe:	f3bf 8f4f 	dsb	sy
 8005cc2:	607b      	str	r3, [r7, #4]
}
 8005cc4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005cc6:	4b0f      	ldr	r3, [pc, #60]	; (8005d04 <vPortEnterCritical+0x58>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	3301      	adds	r3, #1
 8005ccc:	4a0d      	ldr	r2, [pc, #52]	; (8005d04 <vPortEnterCritical+0x58>)
 8005cce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005cd0:	4b0c      	ldr	r3, [pc, #48]	; (8005d04 <vPortEnterCritical+0x58>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d10f      	bne.n	8005cf8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005cd8:	4b0b      	ldr	r3, [pc, #44]	; (8005d08 <vPortEnterCritical+0x5c>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00a      	beq.n	8005cf8 <vPortEnterCritical+0x4c>
	__asm volatile
 8005ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce6:	f383 8811 	msr	BASEPRI, r3
 8005cea:	f3bf 8f6f 	isb	sy
 8005cee:	f3bf 8f4f 	dsb	sy
 8005cf2:	603b      	str	r3, [r7, #0]
}
 8005cf4:	bf00      	nop
 8005cf6:	e7fe      	b.n	8005cf6 <vPortEnterCritical+0x4a>
	}
}
 8005cf8:	bf00      	nop
 8005cfa:	370c      	adds	r7, #12
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bc80      	pop	{r7}
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop
 8005d04:	2000000c 	.word	0x2000000c
 8005d08:	e000ed04 	.word	0xe000ed04

08005d0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005d12:	4b11      	ldr	r3, [pc, #68]	; (8005d58 <vPortExitCritical+0x4c>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d10a      	bne.n	8005d30 <vPortExitCritical+0x24>
	__asm volatile
 8005d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1e:	f383 8811 	msr	BASEPRI, r3
 8005d22:	f3bf 8f6f 	isb	sy
 8005d26:	f3bf 8f4f 	dsb	sy
 8005d2a:	607b      	str	r3, [r7, #4]
}
 8005d2c:	bf00      	nop
 8005d2e:	e7fe      	b.n	8005d2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005d30:	4b09      	ldr	r3, [pc, #36]	; (8005d58 <vPortExitCritical+0x4c>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	3b01      	subs	r3, #1
 8005d36:	4a08      	ldr	r2, [pc, #32]	; (8005d58 <vPortExitCritical+0x4c>)
 8005d38:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005d3a:	4b07      	ldr	r3, [pc, #28]	; (8005d58 <vPortExitCritical+0x4c>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d105      	bne.n	8005d4e <vPortExitCritical+0x42>
 8005d42:	2300      	movs	r3, #0
 8005d44:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	f383 8811 	msr	BASEPRI, r3
}
 8005d4c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005d4e:	bf00      	nop
 8005d50:	370c      	adds	r7, #12
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bc80      	pop	{r7}
 8005d56:	4770      	bx	lr
 8005d58:	2000000c 	.word	0x2000000c
 8005d5c:	00000000 	.word	0x00000000

08005d60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005d60:	f3ef 8009 	mrs	r0, PSP
 8005d64:	f3bf 8f6f 	isb	sy
 8005d68:	4b0d      	ldr	r3, [pc, #52]	; (8005da0 <pxCurrentTCBConst>)
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005d70:	6010      	str	r0, [r2, #0]
 8005d72:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005d76:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005d7a:	f380 8811 	msr	BASEPRI, r0
 8005d7e:	f7ff f847 	bl	8004e10 <vTaskSwitchContext>
 8005d82:	f04f 0000 	mov.w	r0, #0
 8005d86:	f380 8811 	msr	BASEPRI, r0
 8005d8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005d8e:	6819      	ldr	r1, [r3, #0]
 8005d90:	6808      	ldr	r0, [r1, #0]
 8005d92:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005d96:	f380 8809 	msr	PSP, r0
 8005d9a:	f3bf 8f6f 	isb	sy
 8005d9e:	4770      	bx	lr

08005da0 <pxCurrentTCBConst>:
 8005da0:	20000edc 	.word	0x20000edc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005da4:	bf00      	nop
 8005da6:	bf00      	nop

08005da8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
	__asm volatile
 8005dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db2:	f383 8811 	msr	BASEPRI, r3
 8005db6:	f3bf 8f6f 	isb	sy
 8005dba:	f3bf 8f4f 	dsb	sy
 8005dbe:	607b      	str	r3, [r7, #4]
}
 8005dc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005dc2:	f7fe ff67 	bl	8004c94 <xTaskIncrementTick>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d003      	beq.n	8005dd4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005dcc:	4b06      	ldr	r3, [pc, #24]	; (8005de8 <SysTick_Handler+0x40>)
 8005dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dd2:	601a      	str	r2, [r3, #0]
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	f383 8811 	msr	BASEPRI, r3
}
 8005dde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005de0:	bf00      	nop
 8005de2:	3708      	adds	r7, #8
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	e000ed04 	.word	0xe000ed04

08005dec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005dec:	b480      	push	{r7}
 8005dee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005df0:	4b0a      	ldr	r3, [pc, #40]	; (8005e1c <vPortSetupTimerInterrupt+0x30>)
 8005df2:	2200      	movs	r2, #0
 8005df4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005df6:	4b0a      	ldr	r3, [pc, #40]	; (8005e20 <vPortSetupTimerInterrupt+0x34>)
 8005df8:	2200      	movs	r2, #0
 8005dfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005dfc:	4b09      	ldr	r3, [pc, #36]	; (8005e24 <vPortSetupTimerInterrupt+0x38>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a09      	ldr	r2, [pc, #36]	; (8005e28 <vPortSetupTimerInterrupt+0x3c>)
 8005e02:	fba2 2303 	umull	r2, r3, r2, r3
 8005e06:	099b      	lsrs	r3, r3, #6
 8005e08:	4a08      	ldr	r2, [pc, #32]	; (8005e2c <vPortSetupTimerInterrupt+0x40>)
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005e0e:	4b03      	ldr	r3, [pc, #12]	; (8005e1c <vPortSetupTimerInterrupt+0x30>)
 8005e10:	2207      	movs	r2, #7
 8005e12:	601a      	str	r2, [r3, #0]
}
 8005e14:	bf00      	nop
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bc80      	pop	{r7}
 8005e1a:	4770      	bx	lr
 8005e1c:	e000e010 	.word	0xe000e010
 8005e20:	e000e018 	.word	0xe000e018
 8005e24:	20000000 	.word	0x20000000
 8005e28:	10624dd3 	.word	0x10624dd3
 8005e2c:	e000e014 	.word	0xe000e014

08005e30 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005e30:	b480      	push	{r7}
 8005e32:	b085      	sub	sp, #20
 8005e34:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005e36:	f3ef 8305 	mrs	r3, IPSR
 8005e3a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2b0f      	cmp	r3, #15
 8005e40:	d914      	bls.n	8005e6c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005e42:	4a16      	ldr	r2, [pc, #88]	; (8005e9c <vPortValidateInterruptPriority+0x6c>)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	4413      	add	r3, r2
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005e4c:	4b14      	ldr	r3, [pc, #80]	; (8005ea0 <vPortValidateInterruptPriority+0x70>)
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	7afa      	ldrb	r2, [r7, #11]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d20a      	bcs.n	8005e6c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e5a:	f383 8811 	msr	BASEPRI, r3
 8005e5e:	f3bf 8f6f 	isb	sy
 8005e62:	f3bf 8f4f 	dsb	sy
 8005e66:	607b      	str	r3, [r7, #4]
}
 8005e68:	bf00      	nop
 8005e6a:	e7fe      	b.n	8005e6a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005e6c:	4b0d      	ldr	r3, [pc, #52]	; (8005ea4 <vPortValidateInterruptPriority+0x74>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005e74:	4b0c      	ldr	r3, [pc, #48]	; (8005ea8 <vPortValidateInterruptPriority+0x78>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d90a      	bls.n	8005e92 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e80:	f383 8811 	msr	BASEPRI, r3
 8005e84:	f3bf 8f6f 	isb	sy
 8005e88:	f3bf 8f4f 	dsb	sy
 8005e8c:	603b      	str	r3, [r7, #0]
}
 8005e8e:	bf00      	nop
 8005e90:	e7fe      	b.n	8005e90 <vPortValidateInterruptPriority+0x60>
	}
 8005e92:	bf00      	nop
 8005e94:	3714      	adds	r7, #20
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bc80      	pop	{r7}
 8005e9a:	4770      	bx	lr
 8005e9c:	e000e3f0 	.word	0xe000e3f0
 8005ea0:	20001508 	.word	0x20001508
 8005ea4:	e000ed0c 	.word	0xe000ed0c
 8005ea8:	2000150c 	.word	0x2000150c

08005eac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b08a      	sub	sp, #40	; 0x28
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005eb8:	f7fe fe32 	bl	8004b20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005ebc:	4b58      	ldr	r3, [pc, #352]	; (8006020 <pvPortMalloc+0x174>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d101      	bne.n	8005ec8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005ec4:	f000 f910 	bl	80060e8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005ec8:	4b56      	ldr	r3, [pc, #344]	; (8006024 <pvPortMalloc+0x178>)
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4013      	ands	r3, r2
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	f040 808e 	bne.w	8005ff2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d01d      	beq.n	8005f18 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005edc:	2208      	movs	r2, #8
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f003 0307 	and.w	r3, r3, #7
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d014      	beq.n	8005f18 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f023 0307 	bic.w	r3, r3, #7
 8005ef4:	3308      	adds	r3, #8
 8005ef6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f003 0307 	and.w	r3, r3, #7
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00a      	beq.n	8005f18 <pvPortMalloc+0x6c>
	__asm volatile
 8005f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f06:	f383 8811 	msr	BASEPRI, r3
 8005f0a:	f3bf 8f6f 	isb	sy
 8005f0e:	f3bf 8f4f 	dsb	sy
 8005f12:	617b      	str	r3, [r7, #20]
}
 8005f14:	bf00      	nop
 8005f16:	e7fe      	b.n	8005f16 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d069      	beq.n	8005ff2 <pvPortMalloc+0x146>
 8005f1e:	4b42      	ldr	r3, [pc, #264]	; (8006028 <pvPortMalloc+0x17c>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d864      	bhi.n	8005ff2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005f28:	4b40      	ldr	r3, [pc, #256]	; (800602c <pvPortMalloc+0x180>)
 8005f2a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005f2c:	4b3f      	ldr	r3, [pc, #252]	; (800602c <pvPortMalloc+0x180>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f32:	e004      	b.n	8005f3e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f36:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d903      	bls.n	8005f50 <pvPortMalloc+0xa4>
 8005f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d1f1      	bne.n	8005f34 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005f50:	4b33      	ldr	r3, [pc, #204]	; (8006020 <pvPortMalloc+0x174>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d04b      	beq.n	8005ff2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005f5a:	6a3b      	ldr	r3, [r7, #32]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2208      	movs	r2, #8
 8005f60:	4413      	add	r3, r2
 8005f62:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	6a3b      	ldr	r3, [r7, #32]
 8005f6a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6e:	685a      	ldr	r2, [r3, #4]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	1ad2      	subs	r2, r2, r3
 8005f74:	2308      	movs	r3, #8
 8005f76:	005b      	lsls	r3, r3, #1
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d91f      	bls.n	8005fbc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4413      	add	r3, r2
 8005f82:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	f003 0307 	and.w	r3, r3, #7
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00a      	beq.n	8005fa4 <pvPortMalloc+0xf8>
	__asm volatile
 8005f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f92:	f383 8811 	msr	BASEPRI, r3
 8005f96:	f3bf 8f6f 	isb	sy
 8005f9a:	f3bf 8f4f 	dsb	sy
 8005f9e:	613b      	str	r3, [r7, #16]
}
 8005fa0:	bf00      	nop
 8005fa2:	e7fe      	b.n	8005fa2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa6:	685a      	ldr	r2, [r3, #4]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	1ad2      	subs	r2, r2, r3
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005fb6:	69b8      	ldr	r0, [r7, #24]
 8005fb8:	f000 f8f8 	bl	80061ac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005fbc:	4b1a      	ldr	r3, [pc, #104]	; (8006028 <pvPortMalloc+0x17c>)
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	1ad3      	subs	r3, r2, r3
 8005fc6:	4a18      	ldr	r2, [pc, #96]	; (8006028 <pvPortMalloc+0x17c>)
 8005fc8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005fca:	4b17      	ldr	r3, [pc, #92]	; (8006028 <pvPortMalloc+0x17c>)
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	4b18      	ldr	r3, [pc, #96]	; (8006030 <pvPortMalloc+0x184>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d203      	bcs.n	8005fde <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005fd6:	4b14      	ldr	r3, [pc, #80]	; (8006028 <pvPortMalloc+0x17c>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a15      	ldr	r2, [pc, #84]	; (8006030 <pvPortMalloc+0x184>)
 8005fdc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe0:	685a      	ldr	r2, [r3, #4]
 8005fe2:	4b10      	ldr	r3, [pc, #64]	; (8006024 <pvPortMalloc+0x178>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	431a      	orrs	r2, r3
 8005fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fee:	2200      	movs	r2, #0
 8005ff0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005ff2:	f7fe fda3 	bl	8004b3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	f003 0307 	and.w	r3, r3, #7
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d00a      	beq.n	8006016 <pvPortMalloc+0x16a>
	__asm volatile
 8006000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006004:	f383 8811 	msr	BASEPRI, r3
 8006008:	f3bf 8f6f 	isb	sy
 800600c:	f3bf 8f4f 	dsb	sy
 8006010:	60fb      	str	r3, [r7, #12]
}
 8006012:	bf00      	nop
 8006014:	e7fe      	b.n	8006014 <pvPortMalloc+0x168>
	return pvReturn;
 8006016:	69fb      	ldr	r3, [r7, #28]
}
 8006018:	4618      	mov	r0, r3
 800601a:	3728      	adds	r7, #40	; 0x28
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}
 8006020:	20002118 	.word	0x20002118
 8006024:	20002124 	.word	0x20002124
 8006028:	2000211c 	.word	0x2000211c
 800602c:	20002110 	.word	0x20002110
 8006030:	20002120 	.word	0x20002120

08006034 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b086      	sub	sp, #24
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d048      	beq.n	80060d8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006046:	2308      	movs	r3, #8
 8006048:	425b      	negs	r3, r3
 800604a:	697a      	ldr	r2, [r7, #20]
 800604c:	4413      	add	r3, r2
 800604e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	685a      	ldr	r2, [r3, #4]
 8006058:	4b21      	ldr	r3, [pc, #132]	; (80060e0 <vPortFree+0xac>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4013      	ands	r3, r2
 800605e:	2b00      	cmp	r3, #0
 8006060:	d10a      	bne.n	8006078 <vPortFree+0x44>
	__asm volatile
 8006062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006066:	f383 8811 	msr	BASEPRI, r3
 800606a:	f3bf 8f6f 	isb	sy
 800606e:	f3bf 8f4f 	dsb	sy
 8006072:	60fb      	str	r3, [r7, #12]
}
 8006074:	bf00      	nop
 8006076:	e7fe      	b.n	8006076 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d00a      	beq.n	8006096 <vPortFree+0x62>
	__asm volatile
 8006080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006084:	f383 8811 	msr	BASEPRI, r3
 8006088:	f3bf 8f6f 	isb	sy
 800608c:	f3bf 8f4f 	dsb	sy
 8006090:	60bb      	str	r3, [r7, #8]
}
 8006092:	bf00      	nop
 8006094:	e7fe      	b.n	8006094 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	685a      	ldr	r2, [r3, #4]
 800609a:	4b11      	ldr	r3, [pc, #68]	; (80060e0 <vPortFree+0xac>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4013      	ands	r3, r2
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d019      	beq.n	80060d8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d115      	bne.n	80060d8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	685a      	ldr	r2, [r3, #4]
 80060b0:	4b0b      	ldr	r3, [pc, #44]	; (80060e0 <vPortFree+0xac>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	43db      	mvns	r3, r3
 80060b6:	401a      	ands	r2, r3
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80060bc:	f7fe fd30 	bl	8004b20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	685a      	ldr	r2, [r3, #4]
 80060c4:	4b07      	ldr	r3, [pc, #28]	; (80060e4 <vPortFree+0xb0>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4413      	add	r3, r2
 80060ca:	4a06      	ldr	r2, [pc, #24]	; (80060e4 <vPortFree+0xb0>)
 80060cc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80060ce:	6938      	ldr	r0, [r7, #16]
 80060d0:	f000 f86c 	bl	80061ac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80060d4:	f7fe fd32 	bl	8004b3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80060d8:	bf00      	nop
 80060da:	3718      	adds	r7, #24
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	20002124 	.word	0x20002124
 80060e4:	2000211c 	.word	0x2000211c

080060e8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80060e8:	b480      	push	{r7}
 80060ea:	b085      	sub	sp, #20
 80060ec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80060ee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80060f2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80060f4:	4b27      	ldr	r3, [pc, #156]	; (8006194 <prvHeapInit+0xac>)
 80060f6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f003 0307 	and.w	r3, r3, #7
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00c      	beq.n	800611c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	3307      	adds	r3, #7
 8006106:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f023 0307 	bic.w	r3, r3, #7
 800610e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006110:	68ba      	ldr	r2, [r7, #8]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	1ad3      	subs	r3, r2, r3
 8006116:	4a1f      	ldr	r2, [pc, #124]	; (8006194 <prvHeapInit+0xac>)
 8006118:	4413      	add	r3, r2
 800611a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006120:	4a1d      	ldr	r2, [pc, #116]	; (8006198 <prvHeapInit+0xb0>)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006126:	4b1c      	ldr	r3, [pc, #112]	; (8006198 <prvHeapInit+0xb0>)
 8006128:	2200      	movs	r2, #0
 800612a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	68ba      	ldr	r2, [r7, #8]
 8006130:	4413      	add	r3, r2
 8006132:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006134:	2208      	movs	r2, #8
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	1a9b      	subs	r3, r3, r2
 800613a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f023 0307 	bic.w	r3, r3, #7
 8006142:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	4a15      	ldr	r2, [pc, #84]	; (800619c <prvHeapInit+0xb4>)
 8006148:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800614a:	4b14      	ldr	r3, [pc, #80]	; (800619c <prvHeapInit+0xb4>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2200      	movs	r2, #0
 8006150:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006152:	4b12      	ldr	r3, [pc, #72]	; (800619c <prvHeapInit+0xb4>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	2200      	movs	r2, #0
 8006158:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	68fa      	ldr	r2, [r7, #12]
 8006162:	1ad2      	subs	r2, r2, r3
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006168:	4b0c      	ldr	r3, [pc, #48]	; (800619c <prvHeapInit+0xb4>)
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	4a0a      	ldr	r2, [pc, #40]	; (80061a0 <prvHeapInit+0xb8>)
 8006176:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	4a09      	ldr	r2, [pc, #36]	; (80061a4 <prvHeapInit+0xbc>)
 800617e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006180:	4b09      	ldr	r3, [pc, #36]	; (80061a8 <prvHeapInit+0xc0>)
 8006182:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006186:	601a      	str	r2, [r3, #0]
}
 8006188:	bf00      	nop
 800618a:	3714      	adds	r7, #20
 800618c:	46bd      	mov	sp, r7
 800618e:	bc80      	pop	{r7}
 8006190:	4770      	bx	lr
 8006192:	bf00      	nop
 8006194:	20001510 	.word	0x20001510
 8006198:	20002110 	.word	0x20002110
 800619c:	20002118 	.word	0x20002118
 80061a0:	20002120 	.word	0x20002120
 80061a4:	2000211c 	.word	0x2000211c
 80061a8:	20002124 	.word	0x20002124

080061ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80061ac:	b480      	push	{r7}
 80061ae:	b085      	sub	sp, #20
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80061b4:	4b27      	ldr	r3, [pc, #156]	; (8006254 <prvInsertBlockIntoFreeList+0xa8>)
 80061b6:	60fb      	str	r3, [r7, #12]
 80061b8:	e002      	b.n	80061c0 <prvInsertBlockIntoFreeList+0x14>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	60fb      	str	r3, [r7, #12]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d8f7      	bhi.n	80061ba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	68ba      	ldr	r2, [r7, #8]
 80061d4:	4413      	add	r3, r2
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d108      	bne.n	80061ee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	685a      	ldr	r2, [r3, #4]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	441a      	add	r2, r3
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	68ba      	ldr	r2, [r7, #8]
 80061f8:	441a      	add	r2, r3
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	429a      	cmp	r2, r3
 8006200:	d118      	bne.n	8006234 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	4b14      	ldr	r3, [pc, #80]	; (8006258 <prvInsertBlockIntoFreeList+0xac>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	429a      	cmp	r2, r3
 800620c:	d00d      	beq.n	800622a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	685a      	ldr	r2, [r3, #4]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	441a      	add	r2, r3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	601a      	str	r2, [r3, #0]
 8006228:	e008      	b.n	800623c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800622a:	4b0b      	ldr	r3, [pc, #44]	; (8006258 <prvInsertBlockIntoFreeList+0xac>)
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	601a      	str	r2, [r3, #0]
 8006232:	e003      	b.n	800623c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	429a      	cmp	r2, r3
 8006242:	d002      	beq.n	800624a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800624a:	bf00      	nop
 800624c:	3714      	adds	r7, #20
 800624e:	46bd      	mov	sp, r7
 8006250:	bc80      	pop	{r7}
 8006252:	4770      	bx	lr
 8006254:	20002110 	.word	0x20002110
 8006258:	20002118 	.word	0x20002118

0800625c <malloc>:
 800625c:	4b02      	ldr	r3, [pc, #8]	; (8006268 <malloc+0xc>)
 800625e:	4601      	mov	r1, r0
 8006260:	6818      	ldr	r0, [r3, #0]
 8006262:	f000 b82b 	b.w	80062bc <_malloc_r>
 8006266:	bf00      	nop
 8006268:	2000005c 	.word	0x2000005c

0800626c <free>:
 800626c:	4b02      	ldr	r3, [pc, #8]	; (8006278 <free+0xc>)
 800626e:	4601      	mov	r1, r0
 8006270:	6818      	ldr	r0, [r3, #0]
 8006272:	f000 b921 	b.w	80064b8 <_free_r>
 8006276:	bf00      	nop
 8006278:	2000005c 	.word	0x2000005c

0800627c <sbrk_aligned>:
 800627c:	b570      	push	{r4, r5, r6, lr}
 800627e:	4e0e      	ldr	r6, [pc, #56]	; (80062b8 <sbrk_aligned+0x3c>)
 8006280:	460c      	mov	r4, r1
 8006282:	6831      	ldr	r1, [r6, #0]
 8006284:	4605      	mov	r5, r0
 8006286:	b911      	cbnz	r1, 800628e <sbrk_aligned+0x12>
 8006288:	f000 f8cc 	bl	8006424 <_sbrk_r>
 800628c:	6030      	str	r0, [r6, #0]
 800628e:	4621      	mov	r1, r4
 8006290:	4628      	mov	r0, r5
 8006292:	f000 f8c7 	bl	8006424 <_sbrk_r>
 8006296:	1c43      	adds	r3, r0, #1
 8006298:	d00a      	beq.n	80062b0 <sbrk_aligned+0x34>
 800629a:	1cc4      	adds	r4, r0, #3
 800629c:	f024 0403 	bic.w	r4, r4, #3
 80062a0:	42a0      	cmp	r0, r4
 80062a2:	d007      	beq.n	80062b4 <sbrk_aligned+0x38>
 80062a4:	1a21      	subs	r1, r4, r0
 80062a6:	4628      	mov	r0, r5
 80062a8:	f000 f8bc 	bl	8006424 <_sbrk_r>
 80062ac:	3001      	adds	r0, #1
 80062ae:	d101      	bne.n	80062b4 <sbrk_aligned+0x38>
 80062b0:	f04f 34ff 	mov.w	r4, #4294967295
 80062b4:	4620      	mov	r0, r4
 80062b6:	bd70      	pop	{r4, r5, r6, pc}
 80062b8:	2000212c 	.word	0x2000212c

080062bc <_malloc_r>:
 80062bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062c0:	1ccd      	adds	r5, r1, #3
 80062c2:	f025 0503 	bic.w	r5, r5, #3
 80062c6:	3508      	adds	r5, #8
 80062c8:	2d0c      	cmp	r5, #12
 80062ca:	bf38      	it	cc
 80062cc:	250c      	movcc	r5, #12
 80062ce:	2d00      	cmp	r5, #0
 80062d0:	4607      	mov	r7, r0
 80062d2:	db01      	blt.n	80062d8 <_malloc_r+0x1c>
 80062d4:	42a9      	cmp	r1, r5
 80062d6:	d905      	bls.n	80062e4 <_malloc_r+0x28>
 80062d8:	230c      	movs	r3, #12
 80062da:	2600      	movs	r6, #0
 80062dc:	603b      	str	r3, [r7, #0]
 80062de:	4630      	mov	r0, r6
 80062e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80063b8 <_malloc_r+0xfc>
 80062e8:	f000 f868 	bl	80063bc <__malloc_lock>
 80062ec:	f8d8 3000 	ldr.w	r3, [r8]
 80062f0:	461c      	mov	r4, r3
 80062f2:	bb5c      	cbnz	r4, 800634c <_malloc_r+0x90>
 80062f4:	4629      	mov	r1, r5
 80062f6:	4638      	mov	r0, r7
 80062f8:	f7ff ffc0 	bl	800627c <sbrk_aligned>
 80062fc:	1c43      	adds	r3, r0, #1
 80062fe:	4604      	mov	r4, r0
 8006300:	d155      	bne.n	80063ae <_malloc_r+0xf2>
 8006302:	f8d8 4000 	ldr.w	r4, [r8]
 8006306:	4626      	mov	r6, r4
 8006308:	2e00      	cmp	r6, #0
 800630a:	d145      	bne.n	8006398 <_malloc_r+0xdc>
 800630c:	2c00      	cmp	r4, #0
 800630e:	d048      	beq.n	80063a2 <_malloc_r+0xe6>
 8006310:	6823      	ldr	r3, [r4, #0]
 8006312:	4631      	mov	r1, r6
 8006314:	4638      	mov	r0, r7
 8006316:	eb04 0903 	add.w	r9, r4, r3
 800631a:	f000 f883 	bl	8006424 <_sbrk_r>
 800631e:	4581      	cmp	r9, r0
 8006320:	d13f      	bne.n	80063a2 <_malloc_r+0xe6>
 8006322:	6821      	ldr	r1, [r4, #0]
 8006324:	4638      	mov	r0, r7
 8006326:	1a6d      	subs	r5, r5, r1
 8006328:	4629      	mov	r1, r5
 800632a:	f7ff ffa7 	bl	800627c <sbrk_aligned>
 800632e:	3001      	adds	r0, #1
 8006330:	d037      	beq.n	80063a2 <_malloc_r+0xe6>
 8006332:	6823      	ldr	r3, [r4, #0]
 8006334:	442b      	add	r3, r5
 8006336:	6023      	str	r3, [r4, #0]
 8006338:	f8d8 3000 	ldr.w	r3, [r8]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d038      	beq.n	80063b2 <_malloc_r+0xf6>
 8006340:	685a      	ldr	r2, [r3, #4]
 8006342:	42a2      	cmp	r2, r4
 8006344:	d12b      	bne.n	800639e <_malloc_r+0xe2>
 8006346:	2200      	movs	r2, #0
 8006348:	605a      	str	r2, [r3, #4]
 800634a:	e00f      	b.n	800636c <_malloc_r+0xb0>
 800634c:	6822      	ldr	r2, [r4, #0]
 800634e:	1b52      	subs	r2, r2, r5
 8006350:	d41f      	bmi.n	8006392 <_malloc_r+0xd6>
 8006352:	2a0b      	cmp	r2, #11
 8006354:	d917      	bls.n	8006386 <_malloc_r+0xca>
 8006356:	1961      	adds	r1, r4, r5
 8006358:	42a3      	cmp	r3, r4
 800635a:	6025      	str	r5, [r4, #0]
 800635c:	bf18      	it	ne
 800635e:	6059      	strne	r1, [r3, #4]
 8006360:	6863      	ldr	r3, [r4, #4]
 8006362:	bf08      	it	eq
 8006364:	f8c8 1000 	streq.w	r1, [r8]
 8006368:	5162      	str	r2, [r4, r5]
 800636a:	604b      	str	r3, [r1, #4]
 800636c:	4638      	mov	r0, r7
 800636e:	f104 060b 	add.w	r6, r4, #11
 8006372:	f000 f829 	bl	80063c8 <__malloc_unlock>
 8006376:	f026 0607 	bic.w	r6, r6, #7
 800637a:	1d23      	adds	r3, r4, #4
 800637c:	1af2      	subs	r2, r6, r3
 800637e:	d0ae      	beq.n	80062de <_malloc_r+0x22>
 8006380:	1b9b      	subs	r3, r3, r6
 8006382:	50a3      	str	r3, [r4, r2]
 8006384:	e7ab      	b.n	80062de <_malloc_r+0x22>
 8006386:	42a3      	cmp	r3, r4
 8006388:	6862      	ldr	r2, [r4, #4]
 800638a:	d1dd      	bne.n	8006348 <_malloc_r+0x8c>
 800638c:	f8c8 2000 	str.w	r2, [r8]
 8006390:	e7ec      	b.n	800636c <_malloc_r+0xb0>
 8006392:	4623      	mov	r3, r4
 8006394:	6864      	ldr	r4, [r4, #4]
 8006396:	e7ac      	b.n	80062f2 <_malloc_r+0x36>
 8006398:	4634      	mov	r4, r6
 800639a:	6876      	ldr	r6, [r6, #4]
 800639c:	e7b4      	b.n	8006308 <_malloc_r+0x4c>
 800639e:	4613      	mov	r3, r2
 80063a0:	e7cc      	b.n	800633c <_malloc_r+0x80>
 80063a2:	230c      	movs	r3, #12
 80063a4:	4638      	mov	r0, r7
 80063a6:	603b      	str	r3, [r7, #0]
 80063a8:	f000 f80e 	bl	80063c8 <__malloc_unlock>
 80063ac:	e797      	b.n	80062de <_malloc_r+0x22>
 80063ae:	6025      	str	r5, [r4, #0]
 80063b0:	e7dc      	b.n	800636c <_malloc_r+0xb0>
 80063b2:	605b      	str	r3, [r3, #4]
 80063b4:	deff      	udf	#255	; 0xff
 80063b6:	bf00      	nop
 80063b8:	20002128 	.word	0x20002128

080063bc <__malloc_lock>:
 80063bc:	4801      	ldr	r0, [pc, #4]	; (80063c4 <__malloc_lock+0x8>)
 80063be:	f000 b86b 	b.w	8006498 <__retarget_lock_acquire_recursive>
 80063c2:	bf00      	nop
 80063c4:	2000226c 	.word	0x2000226c

080063c8 <__malloc_unlock>:
 80063c8:	4801      	ldr	r0, [pc, #4]	; (80063d0 <__malloc_unlock+0x8>)
 80063ca:	f000 b866 	b.w	800649a <__retarget_lock_release_recursive>
 80063ce:	bf00      	nop
 80063d0:	2000226c 	.word	0x2000226c

080063d4 <siprintf>:
 80063d4:	b40e      	push	{r1, r2, r3}
 80063d6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80063da:	b500      	push	{lr}
 80063dc:	b09c      	sub	sp, #112	; 0x70
 80063de:	ab1d      	add	r3, sp, #116	; 0x74
 80063e0:	9002      	str	r0, [sp, #8]
 80063e2:	9006      	str	r0, [sp, #24]
 80063e4:	9107      	str	r1, [sp, #28]
 80063e6:	9104      	str	r1, [sp, #16]
 80063e8:	4808      	ldr	r0, [pc, #32]	; (800640c <siprintf+0x38>)
 80063ea:	4909      	ldr	r1, [pc, #36]	; (8006410 <siprintf+0x3c>)
 80063ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80063f0:	9105      	str	r1, [sp, #20]
 80063f2:	6800      	ldr	r0, [r0, #0]
 80063f4:	a902      	add	r1, sp, #8
 80063f6:	9301      	str	r3, [sp, #4]
 80063f8:	f000 f900 	bl	80065fc <_svfiprintf_r>
 80063fc:	2200      	movs	r2, #0
 80063fe:	9b02      	ldr	r3, [sp, #8]
 8006400:	701a      	strb	r2, [r3, #0]
 8006402:	b01c      	add	sp, #112	; 0x70
 8006404:	f85d eb04 	ldr.w	lr, [sp], #4
 8006408:	b003      	add	sp, #12
 800640a:	4770      	bx	lr
 800640c:	2000005c 	.word	0x2000005c
 8006410:	ffff0208 	.word	0xffff0208

08006414 <memset>:
 8006414:	4603      	mov	r3, r0
 8006416:	4402      	add	r2, r0
 8006418:	4293      	cmp	r3, r2
 800641a:	d100      	bne.n	800641e <memset+0xa>
 800641c:	4770      	bx	lr
 800641e:	f803 1b01 	strb.w	r1, [r3], #1
 8006422:	e7f9      	b.n	8006418 <memset+0x4>

08006424 <_sbrk_r>:
 8006424:	b538      	push	{r3, r4, r5, lr}
 8006426:	2300      	movs	r3, #0
 8006428:	4d05      	ldr	r5, [pc, #20]	; (8006440 <_sbrk_r+0x1c>)
 800642a:	4604      	mov	r4, r0
 800642c:	4608      	mov	r0, r1
 800642e:	602b      	str	r3, [r5, #0]
 8006430:	f7fa fe2e 	bl	8001090 <_sbrk>
 8006434:	1c43      	adds	r3, r0, #1
 8006436:	d102      	bne.n	800643e <_sbrk_r+0x1a>
 8006438:	682b      	ldr	r3, [r5, #0]
 800643a:	b103      	cbz	r3, 800643e <_sbrk_r+0x1a>
 800643c:	6023      	str	r3, [r4, #0]
 800643e:	bd38      	pop	{r3, r4, r5, pc}
 8006440:	20002268 	.word	0x20002268

08006444 <__errno>:
 8006444:	4b01      	ldr	r3, [pc, #4]	; (800644c <__errno+0x8>)
 8006446:	6818      	ldr	r0, [r3, #0]
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	2000005c 	.word	0x2000005c

08006450 <__libc_init_array>:
 8006450:	b570      	push	{r4, r5, r6, lr}
 8006452:	2600      	movs	r6, #0
 8006454:	4d0c      	ldr	r5, [pc, #48]	; (8006488 <__libc_init_array+0x38>)
 8006456:	4c0d      	ldr	r4, [pc, #52]	; (800648c <__libc_init_array+0x3c>)
 8006458:	1b64      	subs	r4, r4, r5
 800645a:	10a4      	asrs	r4, r4, #2
 800645c:	42a6      	cmp	r6, r4
 800645e:	d109      	bne.n	8006474 <__libc_init_array+0x24>
 8006460:	f000 fbbe 	bl	8006be0 <_init>
 8006464:	2600      	movs	r6, #0
 8006466:	4d0a      	ldr	r5, [pc, #40]	; (8006490 <__libc_init_array+0x40>)
 8006468:	4c0a      	ldr	r4, [pc, #40]	; (8006494 <__libc_init_array+0x44>)
 800646a:	1b64      	subs	r4, r4, r5
 800646c:	10a4      	asrs	r4, r4, #2
 800646e:	42a6      	cmp	r6, r4
 8006470:	d105      	bne.n	800647e <__libc_init_array+0x2e>
 8006472:	bd70      	pop	{r4, r5, r6, pc}
 8006474:	f855 3b04 	ldr.w	r3, [r5], #4
 8006478:	4798      	blx	r3
 800647a:	3601      	adds	r6, #1
 800647c:	e7ee      	b.n	800645c <__libc_init_array+0xc>
 800647e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006482:	4798      	blx	r3
 8006484:	3601      	adds	r6, #1
 8006486:	e7f2      	b.n	800646e <__libc_init_array+0x1e>
 8006488:	08006d18 	.word	0x08006d18
 800648c:	08006d18 	.word	0x08006d18
 8006490:	08006d18 	.word	0x08006d18
 8006494:	08006d1c 	.word	0x08006d1c

08006498 <__retarget_lock_acquire_recursive>:
 8006498:	4770      	bx	lr

0800649a <__retarget_lock_release_recursive>:
 800649a:	4770      	bx	lr

0800649c <memcpy>:
 800649c:	440a      	add	r2, r1
 800649e:	4291      	cmp	r1, r2
 80064a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80064a4:	d100      	bne.n	80064a8 <memcpy+0xc>
 80064a6:	4770      	bx	lr
 80064a8:	b510      	push	{r4, lr}
 80064aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064ae:	4291      	cmp	r1, r2
 80064b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064b4:	d1f9      	bne.n	80064aa <memcpy+0xe>
 80064b6:	bd10      	pop	{r4, pc}

080064b8 <_free_r>:
 80064b8:	b538      	push	{r3, r4, r5, lr}
 80064ba:	4605      	mov	r5, r0
 80064bc:	2900      	cmp	r1, #0
 80064be:	d040      	beq.n	8006542 <_free_r+0x8a>
 80064c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064c4:	1f0c      	subs	r4, r1, #4
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	bfb8      	it	lt
 80064ca:	18e4      	addlt	r4, r4, r3
 80064cc:	f7ff ff76 	bl	80063bc <__malloc_lock>
 80064d0:	4a1c      	ldr	r2, [pc, #112]	; (8006544 <_free_r+0x8c>)
 80064d2:	6813      	ldr	r3, [r2, #0]
 80064d4:	b933      	cbnz	r3, 80064e4 <_free_r+0x2c>
 80064d6:	6063      	str	r3, [r4, #4]
 80064d8:	6014      	str	r4, [r2, #0]
 80064da:	4628      	mov	r0, r5
 80064dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064e0:	f7ff bf72 	b.w	80063c8 <__malloc_unlock>
 80064e4:	42a3      	cmp	r3, r4
 80064e6:	d908      	bls.n	80064fa <_free_r+0x42>
 80064e8:	6820      	ldr	r0, [r4, #0]
 80064ea:	1821      	adds	r1, r4, r0
 80064ec:	428b      	cmp	r3, r1
 80064ee:	bf01      	itttt	eq
 80064f0:	6819      	ldreq	r1, [r3, #0]
 80064f2:	685b      	ldreq	r3, [r3, #4]
 80064f4:	1809      	addeq	r1, r1, r0
 80064f6:	6021      	streq	r1, [r4, #0]
 80064f8:	e7ed      	b.n	80064d6 <_free_r+0x1e>
 80064fa:	461a      	mov	r2, r3
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	b10b      	cbz	r3, 8006504 <_free_r+0x4c>
 8006500:	42a3      	cmp	r3, r4
 8006502:	d9fa      	bls.n	80064fa <_free_r+0x42>
 8006504:	6811      	ldr	r1, [r2, #0]
 8006506:	1850      	adds	r0, r2, r1
 8006508:	42a0      	cmp	r0, r4
 800650a:	d10b      	bne.n	8006524 <_free_r+0x6c>
 800650c:	6820      	ldr	r0, [r4, #0]
 800650e:	4401      	add	r1, r0
 8006510:	1850      	adds	r0, r2, r1
 8006512:	4283      	cmp	r3, r0
 8006514:	6011      	str	r1, [r2, #0]
 8006516:	d1e0      	bne.n	80064da <_free_r+0x22>
 8006518:	6818      	ldr	r0, [r3, #0]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	4408      	add	r0, r1
 800651e:	6010      	str	r0, [r2, #0]
 8006520:	6053      	str	r3, [r2, #4]
 8006522:	e7da      	b.n	80064da <_free_r+0x22>
 8006524:	d902      	bls.n	800652c <_free_r+0x74>
 8006526:	230c      	movs	r3, #12
 8006528:	602b      	str	r3, [r5, #0]
 800652a:	e7d6      	b.n	80064da <_free_r+0x22>
 800652c:	6820      	ldr	r0, [r4, #0]
 800652e:	1821      	adds	r1, r4, r0
 8006530:	428b      	cmp	r3, r1
 8006532:	bf01      	itttt	eq
 8006534:	6819      	ldreq	r1, [r3, #0]
 8006536:	685b      	ldreq	r3, [r3, #4]
 8006538:	1809      	addeq	r1, r1, r0
 800653a:	6021      	streq	r1, [r4, #0]
 800653c:	6063      	str	r3, [r4, #4]
 800653e:	6054      	str	r4, [r2, #4]
 8006540:	e7cb      	b.n	80064da <_free_r+0x22>
 8006542:	bd38      	pop	{r3, r4, r5, pc}
 8006544:	20002128 	.word	0x20002128

08006548 <__ssputs_r>:
 8006548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800654c:	461f      	mov	r7, r3
 800654e:	688e      	ldr	r6, [r1, #8]
 8006550:	4682      	mov	sl, r0
 8006552:	42be      	cmp	r6, r7
 8006554:	460c      	mov	r4, r1
 8006556:	4690      	mov	r8, r2
 8006558:	680b      	ldr	r3, [r1, #0]
 800655a:	d82c      	bhi.n	80065b6 <__ssputs_r+0x6e>
 800655c:	898a      	ldrh	r2, [r1, #12]
 800655e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006562:	d026      	beq.n	80065b2 <__ssputs_r+0x6a>
 8006564:	6965      	ldr	r5, [r4, #20]
 8006566:	6909      	ldr	r1, [r1, #16]
 8006568:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800656c:	eba3 0901 	sub.w	r9, r3, r1
 8006570:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006574:	1c7b      	adds	r3, r7, #1
 8006576:	444b      	add	r3, r9
 8006578:	106d      	asrs	r5, r5, #1
 800657a:	429d      	cmp	r5, r3
 800657c:	bf38      	it	cc
 800657e:	461d      	movcc	r5, r3
 8006580:	0553      	lsls	r3, r2, #21
 8006582:	d527      	bpl.n	80065d4 <__ssputs_r+0x8c>
 8006584:	4629      	mov	r1, r5
 8006586:	f7ff fe99 	bl	80062bc <_malloc_r>
 800658a:	4606      	mov	r6, r0
 800658c:	b360      	cbz	r0, 80065e8 <__ssputs_r+0xa0>
 800658e:	464a      	mov	r2, r9
 8006590:	6921      	ldr	r1, [r4, #16]
 8006592:	f7ff ff83 	bl	800649c <memcpy>
 8006596:	89a3      	ldrh	r3, [r4, #12]
 8006598:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800659c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065a0:	81a3      	strh	r3, [r4, #12]
 80065a2:	6126      	str	r6, [r4, #16]
 80065a4:	444e      	add	r6, r9
 80065a6:	6026      	str	r6, [r4, #0]
 80065a8:	463e      	mov	r6, r7
 80065aa:	6165      	str	r5, [r4, #20]
 80065ac:	eba5 0509 	sub.w	r5, r5, r9
 80065b0:	60a5      	str	r5, [r4, #8]
 80065b2:	42be      	cmp	r6, r7
 80065b4:	d900      	bls.n	80065b8 <__ssputs_r+0x70>
 80065b6:	463e      	mov	r6, r7
 80065b8:	4632      	mov	r2, r6
 80065ba:	4641      	mov	r1, r8
 80065bc:	6820      	ldr	r0, [r4, #0]
 80065be:	f000 faaf 	bl	8006b20 <memmove>
 80065c2:	2000      	movs	r0, #0
 80065c4:	68a3      	ldr	r3, [r4, #8]
 80065c6:	1b9b      	subs	r3, r3, r6
 80065c8:	60a3      	str	r3, [r4, #8]
 80065ca:	6823      	ldr	r3, [r4, #0]
 80065cc:	4433      	add	r3, r6
 80065ce:	6023      	str	r3, [r4, #0]
 80065d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065d4:	462a      	mov	r2, r5
 80065d6:	f000 facb 	bl	8006b70 <_realloc_r>
 80065da:	4606      	mov	r6, r0
 80065dc:	2800      	cmp	r0, #0
 80065de:	d1e0      	bne.n	80065a2 <__ssputs_r+0x5a>
 80065e0:	4650      	mov	r0, sl
 80065e2:	6921      	ldr	r1, [r4, #16]
 80065e4:	f7ff ff68 	bl	80064b8 <_free_r>
 80065e8:	230c      	movs	r3, #12
 80065ea:	f8ca 3000 	str.w	r3, [sl]
 80065ee:	89a3      	ldrh	r3, [r4, #12]
 80065f0:	f04f 30ff 	mov.w	r0, #4294967295
 80065f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065f8:	81a3      	strh	r3, [r4, #12]
 80065fa:	e7e9      	b.n	80065d0 <__ssputs_r+0x88>

080065fc <_svfiprintf_r>:
 80065fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006600:	4698      	mov	r8, r3
 8006602:	898b      	ldrh	r3, [r1, #12]
 8006604:	4607      	mov	r7, r0
 8006606:	061b      	lsls	r3, r3, #24
 8006608:	460d      	mov	r5, r1
 800660a:	4614      	mov	r4, r2
 800660c:	b09d      	sub	sp, #116	; 0x74
 800660e:	d50e      	bpl.n	800662e <_svfiprintf_r+0x32>
 8006610:	690b      	ldr	r3, [r1, #16]
 8006612:	b963      	cbnz	r3, 800662e <_svfiprintf_r+0x32>
 8006614:	2140      	movs	r1, #64	; 0x40
 8006616:	f7ff fe51 	bl	80062bc <_malloc_r>
 800661a:	6028      	str	r0, [r5, #0]
 800661c:	6128      	str	r0, [r5, #16]
 800661e:	b920      	cbnz	r0, 800662a <_svfiprintf_r+0x2e>
 8006620:	230c      	movs	r3, #12
 8006622:	603b      	str	r3, [r7, #0]
 8006624:	f04f 30ff 	mov.w	r0, #4294967295
 8006628:	e0d0      	b.n	80067cc <_svfiprintf_r+0x1d0>
 800662a:	2340      	movs	r3, #64	; 0x40
 800662c:	616b      	str	r3, [r5, #20]
 800662e:	2300      	movs	r3, #0
 8006630:	9309      	str	r3, [sp, #36]	; 0x24
 8006632:	2320      	movs	r3, #32
 8006634:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006638:	2330      	movs	r3, #48	; 0x30
 800663a:	f04f 0901 	mov.w	r9, #1
 800663e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006642:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80067e4 <_svfiprintf_r+0x1e8>
 8006646:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800664a:	4623      	mov	r3, r4
 800664c:	469a      	mov	sl, r3
 800664e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006652:	b10a      	cbz	r2, 8006658 <_svfiprintf_r+0x5c>
 8006654:	2a25      	cmp	r2, #37	; 0x25
 8006656:	d1f9      	bne.n	800664c <_svfiprintf_r+0x50>
 8006658:	ebba 0b04 	subs.w	fp, sl, r4
 800665c:	d00b      	beq.n	8006676 <_svfiprintf_r+0x7a>
 800665e:	465b      	mov	r3, fp
 8006660:	4622      	mov	r2, r4
 8006662:	4629      	mov	r1, r5
 8006664:	4638      	mov	r0, r7
 8006666:	f7ff ff6f 	bl	8006548 <__ssputs_r>
 800666a:	3001      	adds	r0, #1
 800666c:	f000 80a9 	beq.w	80067c2 <_svfiprintf_r+0x1c6>
 8006670:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006672:	445a      	add	r2, fp
 8006674:	9209      	str	r2, [sp, #36]	; 0x24
 8006676:	f89a 3000 	ldrb.w	r3, [sl]
 800667a:	2b00      	cmp	r3, #0
 800667c:	f000 80a1 	beq.w	80067c2 <_svfiprintf_r+0x1c6>
 8006680:	2300      	movs	r3, #0
 8006682:	f04f 32ff 	mov.w	r2, #4294967295
 8006686:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800668a:	f10a 0a01 	add.w	sl, sl, #1
 800668e:	9304      	str	r3, [sp, #16]
 8006690:	9307      	str	r3, [sp, #28]
 8006692:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006696:	931a      	str	r3, [sp, #104]	; 0x68
 8006698:	4654      	mov	r4, sl
 800669a:	2205      	movs	r2, #5
 800669c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066a0:	4850      	ldr	r0, [pc, #320]	; (80067e4 <_svfiprintf_r+0x1e8>)
 80066a2:	f000 fa57 	bl	8006b54 <memchr>
 80066a6:	9a04      	ldr	r2, [sp, #16]
 80066a8:	b9d8      	cbnz	r0, 80066e2 <_svfiprintf_r+0xe6>
 80066aa:	06d0      	lsls	r0, r2, #27
 80066ac:	bf44      	itt	mi
 80066ae:	2320      	movmi	r3, #32
 80066b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066b4:	0711      	lsls	r1, r2, #28
 80066b6:	bf44      	itt	mi
 80066b8:	232b      	movmi	r3, #43	; 0x2b
 80066ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066be:	f89a 3000 	ldrb.w	r3, [sl]
 80066c2:	2b2a      	cmp	r3, #42	; 0x2a
 80066c4:	d015      	beq.n	80066f2 <_svfiprintf_r+0xf6>
 80066c6:	4654      	mov	r4, sl
 80066c8:	2000      	movs	r0, #0
 80066ca:	f04f 0c0a 	mov.w	ip, #10
 80066ce:	9a07      	ldr	r2, [sp, #28]
 80066d0:	4621      	mov	r1, r4
 80066d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066d6:	3b30      	subs	r3, #48	; 0x30
 80066d8:	2b09      	cmp	r3, #9
 80066da:	d94d      	bls.n	8006778 <_svfiprintf_r+0x17c>
 80066dc:	b1b0      	cbz	r0, 800670c <_svfiprintf_r+0x110>
 80066de:	9207      	str	r2, [sp, #28]
 80066e0:	e014      	b.n	800670c <_svfiprintf_r+0x110>
 80066e2:	eba0 0308 	sub.w	r3, r0, r8
 80066e6:	fa09 f303 	lsl.w	r3, r9, r3
 80066ea:	4313      	orrs	r3, r2
 80066ec:	46a2      	mov	sl, r4
 80066ee:	9304      	str	r3, [sp, #16]
 80066f0:	e7d2      	b.n	8006698 <_svfiprintf_r+0x9c>
 80066f2:	9b03      	ldr	r3, [sp, #12]
 80066f4:	1d19      	adds	r1, r3, #4
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	9103      	str	r1, [sp, #12]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	bfbb      	ittet	lt
 80066fe:	425b      	neglt	r3, r3
 8006700:	f042 0202 	orrlt.w	r2, r2, #2
 8006704:	9307      	strge	r3, [sp, #28]
 8006706:	9307      	strlt	r3, [sp, #28]
 8006708:	bfb8      	it	lt
 800670a:	9204      	strlt	r2, [sp, #16]
 800670c:	7823      	ldrb	r3, [r4, #0]
 800670e:	2b2e      	cmp	r3, #46	; 0x2e
 8006710:	d10c      	bne.n	800672c <_svfiprintf_r+0x130>
 8006712:	7863      	ldrb	r3, [r4, #1]
 8006714:	2b2a      	cmp	r3, #42	; 0x2a
 8006716:	d134      	bne.n	8006782 <_svfiprintf_r+0x186>
 8006718:	9b03      	ldr	r3, [sp, #12]
 800671a:	3402      	adds	r4, #2
 800671c:	1d1a      	adds	r2, r3, #4
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	9203      	str	r2, [sp, #12]
 8006722:	2b00      	cmp	r3, #0
 8006724:	bfb8      	it	lt
 8006726:	f04f 33ff 	movlt.w	r3, #4294967295
 800672a:	9305      	str	r3, [sp, #20]
 800672c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80067e8 <_svfiprintf_r+0x1ec>
 8006730:	2203      	movs	r2, #3
 8006732:	4650      	mov	r0, sl
 8006734:	7821      	ldrb	r1, [r4, #0]
 8006736:	f000 fa0d 	bl	8006b54 <memchr>
 800673a:	b138      	cbz	r0, 800674c <_svfiprintf_r+0x150>
 800673c:	2240      	movs	r2, #64	; 0x40
 800673e:	9b04      	ldr	r3, [sp, #16]
 8006740:	eba0 000a 	sub.w	r0, r0, sl
 8006744:	4082      	lsls	r2, r0
 8006746:	4313      	orrs	r3, r2
 8006748:	3401      	adds	r4, #1
 800674a:	9304      	str	r3, [sp, #16]
 800674c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006750:	2206      	movs	r2, #6
 8006752:	4826      	ldr	r0, [pc, #152]	; (80067ec <_svfiprintf_r+0x1f0>)
 8006754:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006758:	f000 f9fc 	bl	8006b54 <memchr>
 800675c:	2800      	cmp	r0, #0
 800675e:	d038      	beq.n	80067d2 <_svfiprintf_r+0x1d6>
 8006760:	4b23      	ldr	r3, [pc, #140]	; (80067f0 <_svfiprintf_r+0x1f4>)
 8006762:	bb1b      	cbnz	r3, 80067ac <_svfiprintf_r+0x1b0>
 8006764:	9b03      	ldr	r3, [sp, #12]
 8006766:	3307      	adds	r3, #7
 8006768:	f023 0307 	bic.w	r3, r3, #7
 800676c:	3308      	adds	r3, #8
 800676e:	9303      	str	r3, [sp, #12]
 8006770:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006772:	4433      	add	r3, r6
 8006774:	9309      	str	r3, [sp, #36]	; 0x24
 8006776:	e768      	b.n	800664a <_svfiprintf_r+0x4e>
 8006778:	460c      	mov	r4, r1
 800677a:	2001      	movs	r0, #1
 800677c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006780:	e7a6      	b.n	80066d0 <_svfiprintf_r+0xd4>
 8006782:	2300      	movs	r3, #0
 8006784:	f04f 0c0a 	mov.w	ip, #10
 8006788:	4619      	mov	r1, r3
 800678a:	3401      	adds	r4, #1
 800678c:	9305      	str	r3, [sp, #20]
 800678e:	4620      	mov	r0, r4
 8006790:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006794:	3a30      	subs	r2, #48	; 0x30
 8006796:	2a09      	cmp	r2, #9
 8006798:	d903      	bls.n	80067a2 <_svfiprintf_r+0x1a6>
 800679a:	2b00      	cmp	r3, #0
 800679c:	d0c6      	beq.n	800672c <_svfiprintf_r+0x130>
 800679e:	9105      	str	r1, [sp, #20]
 80067a0:	e7c4      	b.n	800672c <_svfiprintf_r+0x130>
 80067a2:	4604      	mov	r4, r0
 80067a4:	2301      	movs	r3, #1
 80067a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80067aa:	e7f0      	b.n	800678e <_svfiprintf_r+0x192>
 80067ac:	ab03      	add	r3, sp, #12
 80067ae:	9300      	str	r3, [sp, #0]
 80067b0:	462a      	mov	r2, r5
 80067b2:	4638      	mov	r0, r7
 80067b4:	4b0f      	ldr	r3, [pc, #60]	; (80067f4 <_svfiprintf_r+0x1f8>)
 80067b6:	a904      	add	r1, sp, #16
 80067b8:	f3af 8000 	nop.w
 80067bc:	1c42      	adds	r2, r0, #1
 80067be:	4606      	mov	r6, r0
 80067c0:	d1d6      	bne.n	8006770 <_svfiprintf_r+0x174>
 80067c2:	89ab      	ldrh	r3, [r5, #12]
 80067c4:	065b      	lsls	r3, r3, #25
 80067c6:	f53f af2d 	bmi.w	8006624 <_svfiprintf_r+0x28>
 80067ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067cc:	b01d      	add	sp, #116	; 0x74
 80067ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067d2:	ab03      	add	r3, sp, #12
 80067d4:	9300      	str	r3, [sp, #0]
 80067d6:	462a      	mov	r2, r5
 80067d8:	4638      	mov	r0, r7
 80067da:	4b06      	ldr	r3, [pc, #24]	; (80067f4 <_svfiprintf_r+0x1f8>)
 80067dc:	a904      	add	r1, sp, #16
 80067de:	f000 f87d 	bl	80068dc <_printf_i>
 80067e2:	e7eb      	b.n	80067bc <_svfiprintf_r+0x1c0>
 80067e4:	08006ce2 	.word	0x08006ce2
 80067e8:	08006ce8 	.word	0x08006ce8
 80067ec:	08006cec 	.word	0x08006cec
 80067f0:	00000000 	.word	0x00000000
 80067f4:	08006549 	.word	0x08006549

080067f8 <_printf_common>:
 80067f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067fc:	4616      	mov	r6, r2
 80067fe:	4699      	mov	r9, r3
 8006800:	688a      	ldr	r2, [r1, #8]
 8006802:	690b      	ldr	r3, [r1, #16]
 8006804:	4607      	mov	r7, r0
 8006806:	4293      	cmp	r3, r2
 8006808:	bfb8      	it	lt
 800680a:	4613      	movlt	r3, r2
 800680c:	6033      	str	r3, [r6, #0]
 800680e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006812:	460c      	mov	r4, r1
 8006814:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006818:	b10a      	cbz	r2, 800681e <_printf_common+0x26>
 800681a:	3301      	adds	r3, #1
 800681c:	6033      	str	r3, [r6, #0]
 800681e:	6823      	ldr	r3, [r4, #0]
 8006820:	0699      	lsls	r1, r3, #26
 8006822:	bf42      	ittt	mi
 8006824:	6833      	ldrmi	r3, [r6, #0]
 8006826:	3302      	addmi	r3, #2
 8006828:	6033      	strmi	r3, [r6, #0]
 800682a:	6825      	ldr	r5, [r4, #0]
 800682c:	f015 0506 	ands.w	r5, r5, #6
 8006830:	d106      	bne.n	8006840 <_printf_common+0x48>
 8006832:	f104 0a19 	add.w	sl, r4, #25
 8006836:	68e3      	ldr	r3, [r4, #12]
 8006838:	6832      	ldr	r2, [r6, #0]
 800683a:	1a9b      	subs	r3, r3, r2
 800683c:	42ab      	cmp	r3, r5
 800683e:	dc2b      	bgt.n	8006898 <_printf_common+0xa0>
 8006840:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006844:	1e13      	subs	r3, r2, #0
 8006846:	6822      	ldr	r2, [r4, #0]
 8006848:	bf18      	it	ne
 800684a:	2301      	movne	r3, #1
 800684c:	0692      	lsls	r2, r2, #26
 800684e:	d430      	bmi.n	80068b2 <_printf_common+0xba>
 8006850:	4649      	mov	r1, r9
 8006852:	4638      	mov	r0, r7
 8006854:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006858:	47c0      	blx	r8
 800685a:	3001      	adds	r0, #1
 800685c:	d023      	beq.n	80068a6 <_printf_common+0xae>
 800685e:	6823      	ldr	r3, [r4, #0]
 8006860:	6922      	ldr	r2, [r4, #16]
 8006862:	f003 0306 	and.w	r3, r3, #6
 8006866:	2b04      	cmp	r3, #4
 8006868:	bf14      	ite	ne
 800686a:	2500      	movne	r5, #0
 800686c:	6833      	ldreq	r3, [r6, #0]
 800686e:	f04f 0600 	mov.w	r6, #0
 8006872:	bf08      	it	eq
 8006874:	68e5      	ldreq	r5, [r4, #12]
 8006876:	f104 041a 	add.w	r4, r4, #26
 800687a:	bf08      	it	eq
 800687c:	1aed      	subeq	r5, r5, r3
 800687e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006882:	bf08      	it	eq
 8006884:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006888:	4293      	cmp	r3, r2
 800688a:	bfc4      	itt	gt
 800688c:	1a9b      	subgt	r3, r3, r2
 800688e:	18ed      	addgt	r5, r5, r3
 8006890:	42b5      	cmp	r5, r6
 8006892:	d11a      	bne.n	80068ca <_printf_common+0xd2>
 8006894:	2000      	movs	r0, #0
 8006896:	e008      	b.n	80068aa <_printf_common+0xb2>
 8006898:	2301      	movs	r3, #1
 800689a:	4652      	mov	r2, sl
 800689c:	4649      	mov	r1, r9
 800689e:	4638      	mov	r0, r7
 80068a0:	47c0      	blx	r8
 80068a2:	3001      	adds	r0, #1
 80068a4:	d103      	bne.n	80068ae <_printf_common+0xb6>
 80068a6:	f04f 30ff 	mov.w	r0, #4294967295
 80068aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068ae:	3501      	adds	r5, #1
 80068b0:	e7c1      	b.n	8006836 <_printf_common+0x3e>
 80068b2:	2030      	movs	r0, #48	; 0x30
 80068b4:	18e1      	adds	r1, r4, r3
 80068b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80068ba:	1c5a      	adds	r2, r3, #1
 80068bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80068c0:	4422      	add	r2, r4
 80068c2:	3302      	adds	r3, #2
 80068c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80068c8:	e7c2      	b.n	8006850 <_printf_common+0x58>
 80068ca:	2301      	movs	r3, #1
 80068cc:	4622      	mov	r2, r4
 80068ce:	4649      	mov	r1, r9
 80068d0:	4638      	mov	r0, r7
 80068d2:	47c0      	blx	r8
 80068d4:	3001      	adds	r0, #1
 80068d6:	d0e6      	beq.n	80068a6 <_printf_common+0xae>
 80068d8:	3601      	adds	r6, #1
 80068da:	e7d9      	b.n	8006890 <_printf_common+0x98>

080068dc <_printf_i>:
 80068dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068e0:	7e0f      	ldrb	r7, [r1, #24]
 80068e2:	4691      	mov	r9, r2
 80068e4:	2f78      	cmp	r7, #120	; 0x78
 80068e6:	4680      	mov	r8, r0
 80068e8:	460c      	mov	r4, r1
 80068ea:	469a      	mov	sl, r3
 80068ec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80068ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80068f2:	d807      	bhi.n	8006904 <_printf_i+0x28>
 80068f4:	2f62      	cmp	r7, #98	; 0x62
 80068f6:	d80a      	bhi.n	800690e <_printf_i+0x32>
 80068f8:	2f00      	cmp	r7, #0
 80068fa:	f000 80d5 	beq.w	8006aa8 <_printf_i+0x1cc>
 80068fe:	2f58      	cmp	r7, #88	; 0x58
 8006900:	f000 80c1 	beq.w	8006a86 <_printf_i+0x1aa>
 8006904:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006908:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800690c:	e03a      	b.n	8006984 <_printf_i+0xa8>
 800690e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006912:	2b15      	cmp	r3, #21
 8006914:	d8f6      	bhi.n	8006904 <_printf_i+0x28>
 8006916:	a101      	add	r1, pc, #4	; (adr r1, 800691c <_printf_i+0x40>)
 8006918:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800691c:	08006975 	.word	0x08006975
 8006920:	08006989 	.word	0x08006989
 8006924:	08006905 	.word	0x08006905
 8006928:	08006905 	.word	0x08006905
 800692c:	08006905 	.word	0x08006905
 8006930:	08006905 	.word	0x08006905
 8006934:	08006989 	.word	0x08006989
 8006938:	08006905 	.word	0x08006905
 800693c:	08006905 	.word	0x08006905
 8006940:	08006905 	.word	0x08006905
 8006944:	08006905 	.word	0x08006905
 8006948:	08006a8f 	.word	0x08006a8f
 800694c:	080069b5 	.word	0x080069b5
 8006950:	08006a49 	.word	0x08006a49
 8006954:	08006905 	.word	0x08006905
 8006958:	08006905 	.word	0x08006905
 800695c:	08006ab1 	.word	0x08006ab1
 8006960:	08006905 	.word	0x08006905
 8006964:	080069b5 	.word	0x080069b5
 8006968:	08006905 	.word	0x08006905
 800696c:	08006905 	.word	0x08006905
 8006970:	08006a51 	.word	0x08006a51
 8006974:	682b      	ldr	r3, [r5, #0]
 8006976:	1d1a      	adds	r2, r3, #4
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	602a      	str	r2, [r5, #0]
 800697c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006980:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006984:	2301      	movs	r3, #1
 8006986:	e0a0      	b.n	8006aca <_printf_i+0x1ee>
 8006988:	6820      	ldr	r0, [r4, #0]
 800698a:	682b      	ldr	r3, [r5, #0]
 800698c:	0607      	lsls	r7, r0, #24
 800698e:	f103 0104 	add.w	r1, r3, #4
 8006992:	6029      	str	r1, [r5, #0]
 8006994:	d501      	bpl.n	800699a <_printf_i+0xbe>
 8006996:	681e      	ldr	r6, [r3, #0]
 8006998:	e003      	b.n	80069a2 <_printf_i+0xc6>
 800699a:	0646      	lsls	r6, r0, #25
 800699c:	d5fb      	bpl.n	8006996 <_printf_i+0xba>
 800699e:	f9b3 6000 	ldrsh.w	r6, [r3]
 80069a2:	2e00      	cmp	r6, #0
 80069a4:	da03      	bge.n	80069ae <_printf_i+0xd2>
 80069a6:	232d      	movs	r3, #45	; 0x2d
 80069a8:	4276      	negs	r6, r6
 80069aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069ae:	230a      	movs	r3, #10
 80069b0:	4859      	ldr	r0, [pc, #356]	; (8006b18 <_printf_i+0x23c>)
 80069b2:	e012      	b.n	80069da <_printf_i+0xfe>
 80069b4:	682b      	ldr	r3, [r5, #0]
 80069b6:	6820      	ldr	r0, [r4, #0]
 80069b8:	1d19      	adds	r1, r3, #4
 80069ba:	6029      	str	r1, [r5, #0]
 80069bc:	0605      	lsls	r5, r0, #24
 80069be:	d501      	bpl.n	80069c4 <_printf_i+0xe8>
 80069c0:	681e      	ldr	r6, [r3, #0]
 80069c2:	e002      	b.n	80069ca <_printf_i+0xee>
 80069c4:	0641      	lsls	r1, r0, #25
 80069c6:	d5fb      	bpl.n	80069c0 <_printf_i+0xe4>
 80069c8:	881e      	ldrh	r6, [r3, #0]
 80069ca:	2f6f      	cmp	r7, #111	; 0x6f
 80069cc:	bf0c      	ite	eq
 80069ce:	2308      	moveq	r3, #8
 80069d0:	230a      	movne	r3, #10
 80069d2:	4851      	ldr	r0, [pc, #324]	; (8006b18 <_printf_i+0x23c>)
 80069d4:	2100      	movs	r1, #0
 80069d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80069da:	6865      	ldr	r5, [r4, #4]
 80069dc:	2d00      	cmp	r5, #0
 80069de:	bfa8      	it	ge
 80069e0:	6821      	ldrge	r1, [r4, #0]
 80069e2:	60a5      	str	r5, [r4, #8]
 80069e4:	bfa4      	itt	ge
 80069e6:	f021 0104 	bicge.w	r1, r1, #4
 80069ea:	6021      	strge	r1, [r4, #0]
 80069ec:	b90e      	cbnz	r6, 80069f2 <_printf_i+0x116>
 80069ee:	2d00      	cmp	r5, #0
 80069f0:	d04b      	beq.n	8006a8a <_printf_i+0x1ae>
 80069f2:	4615      	mov	r5, r2
 80069f4:	fbb6 f1f3 	udiv	r1, r6, r3
 80069f8:	fb03 6711 	mls	r7, r3, r1, r6
 80069fc:	5dc7      	ldrb	r7, [r0, r7]
 80069fe:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a02:	4637      	mov	r7, r6
 8006a04:	42bb      	cmp	r3, r7
 8006a06:	460e      	mov	r6, r1
 8006a08:	d9f4      	bls.n	80069f4 <_printf_i+0x118>
 8006a0a:	2b08      	cmp	r3, #8
 8006a0c:	d10b      	bne.n	8006a26 <_printf_i+0x14a>
 8006a0e:	6823      	ldr	r3, [r4, #0]
 8006a10:	07de      	lsls	r6, r3, #31
 8006a12:	d508      	bpl.n	8006a26 <_printf_i+0x14a>
 8006a14:	6923      	ldr	r3, [r4, #16]
 8006a16:	6861      	ldr	r1, [r4, #4]
 8006a18:	4299      	cmp	r1, r3
 8006a1a:	bfde      	ittt	le
 8006a1c:	2330      	movle	r3, #48	; 0x30
 8006a1e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a22:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a26:	1b52      	subs	r2, r2, r5
 8006a28:	6122      	str	r2, [r4, #16]
 8006a2a:	464b      	mov	r3, r9
 8006a2c:	4621      	mov	r1, r4
 8006a2e:	4640      	mov	r0, r8
 8006a30:	f8cd a000 	str.w	sl, [sp]
 8006a34:	aa03      	add	r2, sp, #12
 8006a36:	f7ff fedf 	bl	80067f8 <_printf_common>
 8006a3a:	3001      	adds	r0, #1
 8006a3c:	d14a      	bne.n	8006ad4 <_printf_i+0x1f8>
 8006a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8006a42:	b004      	add	sp, #16
 8006a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a48:	6823      	ldr	r3, [r4, #0]
 8006a4a:	f043 0320 	orr.w	r3, r3, #32
 8006a4e:	6023      	str	r3, [r4, #0]
 8006a50:	2778      	movs	r7, #120	; 0x78
 8006a52:	4832      	ldr	r0, [pc, #200]	; (8006b1c <_printf_i+0x240>)
 8006a54:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006a58:	6823      	ldr	r3, [r4, #0]
 8006a5a:	6829      	ldr	r1, [r5, #0]
 8006a5c:	061f      	lsls	r7, r3, #24
 8006a5e:	f851 6b04 	ldr.w	r6, [r1], #4
 8006a62:	d402      	bmi.n	8006a6a <_printf_i+0x18e>
 8006a64:	065f      	lsls	r7, r3, #25
 8006a66:	bf48      	it	mi
 8006a68:	b2b6      	uxthmi	r6, r6
 8006a6a:	07df      	lsls	r7, r3, #31
 8006a6c:	bf48      	it	mi
 8006a6e:	f043 0320 	orrmi.w	r3, r3, #32
 8006a72:	6029      	str	r1, [r5, #0]
 8006a74:	bf48      	it	mi
 8006a76:	6023      	strmi	r3, [r4, #0]
 8006a78:	b91e      	cbnz	r6, 8006a82 <_printf_i+0x1a6>
 8006a7a:	6823      	ldr	r3, [r4, #0]
 8006a7c:	f023 0320 	bic.w	r3, r3, #32
 8006a80:	6023      	str	r3, [r4, #0]
 8006a82:	2310      	movs	r3, #16
 8006a84:	e7a6      	b.n	80069d4 <_printf_i+0xf8>
 8006a86:	4824      	ldr	r0, [pc, #144]	; (8006b18 <_printf_i+0x23c>)
 8006a88:	e7e4      	b.n	8006a54 <_printf_i+0x178>
 8006a8a:	4615      	mov	r5, r2
 8006a8c:	e7bd      	b.n	8006a0a <_printf_i+0x12e>
 8006a8e:	682b      	ldr	r3, [r5, #0]
 8006a90:	6826      	ldr	r6, [r4, #0]
 8006a92:	1d18      	adds	r0, r3, #4
 8006a94:	6961      	ldr	r1, [r4, #20]
 8006a96:	6028      	str	r0, [r5, #0]
 8006a98:	0635      	lsls	r5, r6, #24
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	d501      	bpl.n	8006aa2 <_printf_i+0x1c6>
 8006a9e:	6019      	str	r1, [r3, #0]
 8006aa0:	e002      	b.n	8006aa8 <_printf_i+0x1cc>
 8006aa2:	0670      	lsls	r0, r6, #25
 8006aa4:	d5fb      	bpl.n	8006a9e <_printf_i+0x1c2>
 8006aa6:	8019      	strh	r1, [r3, #0]
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	4615      	mov	r5, r2
 8006aac:	6123      	str	r3, [r4, #16]
 8006aae:	e7bc      	b.n	8006a2a <_printf_i+0x14e>
 8006ab0:	682b      	ldr	r3, [r5, #0]
 8006ab2:	2100      	movs	r1, #0
 8006ab4:	1d1a      	adds	r2, r3, #4
 8006ab6:	602a      	str	r2, [r5, #0]
 8006ab8:	681d      	ldr	r5, [r3, #0]
 8006aba:	6862      	ldr	r2, [r4, #4]
 8006abc:	4628      	mov	r0, r5
 8006abe:	f000 f849 	bl	8006b54 <memchr>
 8006ac2:	b108      	cbz	r0, 8006ac8 <_printf_i+0x1ec>
 8006ac4:	1b40      	subs	r0, r0, r5
 8006ac6:	6060      	str	r0, [r4, #4]
 8006ac8:	6863      	ldr	r3, [r4, #4]
 8006aca:	6123      	str	r3, [r4, #16]
 8006acc:	2300      	movs	r3, #0
 8006ace:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ad2:	e7aa      	b.n	8006a2a <_printf_i+0x14e>
 8006ad4:	462a      	mov	r2, r5
 8006ad6:	4649      	mov	r1, r9
 8006ad8:	4640      	mov	r0, r8
 8006ada:	6923      	ldr	r3, [r4, #16]
 8006adc:	47d0      	blx	sl
 8006ade:	3001      	adds	r0, #1
 8006ae0:	d0ad      	beq.n	8006a3e <_printf_i+0x162>
 8006ae2:	6823      	ldr	r3, [r4, #0]
 8006ae4:	079b      	lsls	r3, r3, #30
 8006ae6:	d413      	bmi.n	8006b10 <_printf_i+0x234>
 8006ae8:	68e0      	ldr	r0, [r4, #12]
 8006aea:	9b03      	ldr	r3, [sp, #12]
 8006aec:	4298      	cmp	r0, r3
 8006aee:	bfb8      	it	lt
 8006af0:	4618      	movlt	r0, r3
 8006af2:	e7a6      	b.n	8006a42 <_printf_i+0x166>
 8006af4:	2301      	movs	r3, #1
 8006af6:	4632      	mov	r2, r6
 8006af8:	4649      	mov	r1, r9
 8006afa:	4640      	mov	r0, r8
 8006afc:	47d0      	blx	sl
 8006afe:	3001      	adds	r0, #1
 8006b00:	d09d      	beq.n	8006a3e <_printf_i+0x162>
 8006b02:	3501      	adds	r5, #1
 8006b04:	68e3      	ldr	r3, [r4, #12]
 8006b06:	9903      	ldr	r1, [sp, #12]
 8006b08:	1a5b      	subs	r3, r3, r1
 8006b0a:	42ab      	cmp	r3, r5
 8006b0c:	dcf2      	bgt.n	8006af4 <_printf_i+0x218>
 8006b0e:	e7eb      	b.n	8006ae8 <_printf_i+0x20c>
 8006b10:	2500      	movs	r5, #0
 8006b12:	f104 0619 	add.w	r6, r4, #25
 8006b16:	e7f5      	b.n	8006b04 <_printf_i+0x228>
 8006b18:	08006cf3 	.word	0x08006cf3
 8006b1c:	08006d04 	.word	0x08006d04

08006b20 <memmove>:
 8006b20:	4288      	cmp	r0, r1
 8006b22:	b510      	push	{r4, lr}
 8006b24:	eb01 0402 	add.w	r4, r1, r2
 8006b28:	d902      	bls.n	8006b30 <memmove+0x10>
 8006b2a:	4284      	cmp	r4, r0
 8006b2c:	4623      	mov	r3, r4
 8006b2e:	d807      	bhi.n	8006b40 <memmove+0x20>
 8006b30:	1e43      	subs	r3, r0, #1
 8006b32:	42a1      	cmp	r1, r4
 8006b34:	d008      	beq.n	8006b48 <memmove+0x28>
 8006b36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b3e:	e7f8      	b.n	8006b32 <memmove+0x12>
 8006b40:	4601      	mov	r1, r0
 8006b42:	4402      	add	r2, r0
 8006b44:	428a      	cmp	r2, r1
 8006b46:	d100      	bne.n	8006b4a <memmove+0x2a>
 8006b48:	bd10      	pop	{r4, pc}
 8006b4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b52:	e7f7      	b.n	8006b44 <memmove+0x24>

08006b54 <memchr>:
 8006b54:	4603      	mov	r3, r0
 8006b56:	b510      	push	{r4, lr}
 8006b58:	b2c9      	uxtb	r1, r1
 8006b5a:	4402      	add	r2, r0
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	4618      	mov	r0, r3
 8006b60:	d101      	bne.n	8006b66 <memchr+0x12>
 8006b62:	2000      	movs	r0, #0
 8006b64:	e003      	b.n	8006b6e <memchr+0x1a>
 8006b66:	7804      	ldrb	r4, [r0, #0]
 8006b68:	3301      	adds	r3, #1
 8006b6a:	428c      	cmp	r4, r1
 8006b6c:	d1f6      	bne.n	8006b5c <memchr+0x8>
 8006b6e:	bd10      	pop	{r4, pc}

08006b70 <_realloc_r>:
 8006b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b74:	4680      	mov	r8, r0
 8006b76:	4614      	mov	r4, r2
 8006b78:	460e      	mov	r6, r1
 8006b7a:	b921      	cbnz	r1, 8006b86 <_realloc_r+0x16>
 8006b7c:	4611      	mov	r1, r2
 8006b7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b82:	f7ff bb9b 	b.w	80062bc <_malloc_r>
 8006b86:	b92a      	cbnz	r2, 8006b94 <_realloc_r+0x24>
 8006b88:	f7ff fc96 	bl	80064b8 <_free_r>
 8006b8c:	4625      	mov	r5, r4
 8006b8e:	4628      	mov	r0, r5
 8006b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b94:	f000 f81b 	bl	8006bce <_malloc_usable_size_r>
 8006b98:	4284      	cmp	r4, r0
 8006b9a:	4607      	mov	r7, r0
 8006b9c:	d802      	bhi.n	8006ba4 <_realloc_r+0x34>
 8006b9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006ba2:	d812      	bhi.n	8006bca <_realloc_r+0x5a>
 8006ba4:	4621      	mov	r1, r4
 8006ba6:	4640      	mov	r0, r8
 8006ba8:	f7ff fb88 	bl	80062bc <_malloc_r>
 8006bac:	4605      	mov	r5, r0
 8006bae:	2800      	cmp	r0, #0
 8006bb0:	d0ed      	beq.n	8006b8e <_realloc_r+0x1e>
 8006bb2:	42bc      	cmp	r4, r7
 8006bb4:	4622      	mov	r2, r4
 8006bb6:	4631      	mov	r1, r6
 8006bb8:	bf28      	it	cs
 8006bba:	463a      	movcs	r2, r7
 8006bbc:	f7ff fc6e 	bl	800649c <memcpy>
 8006bc0:	4631      	mov	r1, r6
 8006bc2:	4640      	mov	r0, r8
 8006bc4:	f7ff fc78 	bl	80064b8 <_free_r>
 8006bc8:	e7e1      	b.n	8006b8e <_realloc_r+0x1e>
 8006bca:	4635      	mov	r5, r6
 8006bcc:	e7df      	b.n	8006b8e <_realloc_r+0x1e>

08006bce <_malloc_usable_size_r>:
 8006bce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bd2:	1f18      	subs	r0, r3, #4
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	bfbc      	itt	lt
 8006bd8:	580b      	ldrlt	r3, [r1, r0]
 8006bda:	18c0      	addlt	r0, r0, r3
 8006bdc:	4770      	bx	lr
	...

08006be0 <_init>:
 8006be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006be2:	bf00      	nop
 8006be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006be6:	bc08      	pop	{r3}
 8006be8:	469e      	mov	lr, r3
 8006bea:	4770      	bx	lr

08006bec <_fini>:
 8006bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bee:	bf00      	nop
 8006bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bf2:	bc08      	pop	{r3}
 8006bf4:	469e      	mov	lr, r3
 8006bf6:	4770      	bx	lr
